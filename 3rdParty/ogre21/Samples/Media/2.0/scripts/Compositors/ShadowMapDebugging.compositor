compositor_node ShadowMapDebuggingRenderingNode
{
	in 0 rt_renderwindow

	target rt_renderwindow
	{
		pass clear
		{
			colour_value 0.2 0.4 0.6 1
		}

		pass render_scene
		{
			overlays	on
			shadows		ShadowMapDebuggingShadowNode
		}
	}
}

abstract target cubemap_target_shadow
{
	pass clear { colour_value 1 1 1 1 }
	pass render_scene
	{
		camera_cubemap_reorient true
	}
}

compositor_node_shadow ShadowMapDebuggingShadowNode
{
	technique pssm

	texture atlas 2048 7168 PF_D32_FLOAT no_fsaa
	texture tmpCubemap 1024 1024 PF_FLOAT32_R cubemap no_fsaa

	num_splits		3
	pssm_lambda		0.95
	shadow_map 0 atlas uv 0.0 0.000000000000000 1.0 0.285714285714286 light 0 split 0
	shadow_map 1 atlas uv 0.0 0.285714285714286 0.5 0.142857142857143 light 0 split 1
	shadow_map 2 atlas uv 0.5 0.285714285714286 0.5 0.142857142857143 light 0 split 2

	technique focused
	shadow_map 3 atlas uv 0.0 0.428571428571429 1.0 0.285714285714286 light 1
	shadow_map 4 atlas uv 0.0 0.714285714285714 1.0 0.285714285714286 light 2

	target atlas
	{
		pass clear
		{
			colour_value 1 1 1 1
		}
	}

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
			}
		}
	}

	shadow_map_target_type directional spot
	{
		shadow_map 3 4
		{
			pass render_scene
			{
			}
		}
	}

	shadow_map_target_type point
	{
		shadow_map_repeat 3 4
		{
			target tmpCubemap +X : cubemap_target_shadow {}
			target tmpCubemap -X : cubemap_target_shadow {}
			target tmpCubemap +Y : cubemap_target_shadow {}
			target tmpCubemap -Y : cubemap_target_shadow {}
			target tmpCubemap +Z : cubemap_target_shadow {}
			target tmpCubemap -Z : cubemap_target_shadow {}

			shadow_map
			{
				pass render_quad
				{
					material Ogre/DPSM/CubeToDpsm
					input 0 tmpCubemap
				}
			}
		}
	}
}


/*
One shadow map per light version, just as an example.
compositor_node_shadow ShadowMapDebuggingShadowNode2
{
	technique pssm

	texture pssm0 2048 2048 PF_D32_FLOAT
	texture pssm1 1024 1024 PF_D32_FLOAT
	texture pssm2 1024 1024 PF_D32_FLOAT

	texture spot0 2048 2048 PF_D32_FLOAT
	texture spot1 2048 2048 PF_D32_FLOAT

	num_splits		3
	pssm_lambda		0.95
	shadow_map 0 pssm0 light 0 split 0
	shadow_map 1 pssm1 light 0 split 1
	shadow_map 2 pssm2 light 0 split 2

	technique focused
	shadow_map 3 spot0 light 1
	shadow_map 4 spot1 light 2

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass clear
			{
				colour_value 1 1 1 1
			}
			pass render_scene
			{
			}
		}
	}

	shadow_map_target_type directional spot
	{
		shadow_map 3 4
		{
			pass clear
			{
				colour_value 1 1 1 1
			}
			pass render_scene
			{
			}
		}
	}
}*/

abstract compositor_node_shadow ShadowMapDebuggingEsmShadowNodeBase
{
	texture atlas 2048 4096 PF_L16 no_fsaa uav
	texture tmpGaussianFilter 2048 4096 PF_L16 no_fsaa depth_pool 0 uav
	texture tmpCubemap 512 512 PF_L16 cubemap no_fsaa

	technique pssm
	num_splits		3
	pssm_lambda		0.70
	shadow_map 0 atlas uv 0.00 0.00 0.50 0.25 light 0 split 0
	shadow_map 1 atlas uv 0.00 0.25 1.00 0.50 light 0 split 1
	shadow_map 2 atlas uv 0.50 0.00 0.50 0.25 light 0 split 2

	technique focused
	shadow_map 3 atlas uv 0.00 0.75 0.50 0.25 light 1
	shadow_map 4 atlas uv 0.50 0.75 0.50 0.25 light 2

	target atlas
	{
		pass clear
		{
			colour_value 1 1 1 1
		}
	}

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
			}
		}
	}

	shadow_map_target_type directional spot
	{
		shadow_map 3 4
		{
			pass render_scene
			{
			}
		}
	}

	shadow_map_target_type point
	{
		shadow_map_repeat 3 4
		{
			target tmpCubemap +X : cubemap_target_shadow {}
			target tmpCubemap -X : cubemap_target_shadow {}
			target tmpCubemap +Y : cubemap_target_shadow {}
			target tmpCubemap -Y : cubemap_target_shadow {}
			target tmpCubemap +Z : cubemap_target_shadow {}
			target tmpCubemap -Z : cubemap_target_shadow {}

			shadow_map
			{
				pass render_quad
				{
					material Ogre/DPSM/CubeToDpsmColour
					input 0 tmpCubemap
				}
			}
		}
	}
}

compositor_node_shadow ShadowMapDebuggingEsmShadowNodeCompute : ShadowMapDebuggingEsmShadowNodeBase
{
	//Skip already defined "target atlas" which does the clear. We do not want to override it.
	target atlas {}

	//Add a compute-based gauss filter
	target atlas
	{
		pass compute
		{
			job ESM/GaussianLogFilterH
			input 0 atlas
			uav 0 tmpGaussianFilter write
		}

		pass compute
		{
			job ESM/GaussianLogFilterV
			input 0 tmpGaussianFilter
			uav 0 atlas write
		}
	}
}

compositor_node_shadow ShadowMapDebuggingEsmShadowNodePixelShader : ShadowMapDebuggingEsmShadowNodeBase
{
	//Skip already defined "target atlas" which does the clear. We do not want to override it.
	target atlas {}

	//Add a pixel-based gauss filter
	target tmpGaussianFilter
	{
		pass render_quad
		{
			material ESM/GaussianLogFilterH
			input 0 atlas
		}
	}

	target atlas
	{
		pass render_quad
		{
			material ESM/GaussianLogFilterV
			input 0 tmpGaussianFilter
		}
	}
}

workspace ShadowMapDebuggingWorkspace
{
	connect_output ShadowMapDebuggingRenderingNode 0
}

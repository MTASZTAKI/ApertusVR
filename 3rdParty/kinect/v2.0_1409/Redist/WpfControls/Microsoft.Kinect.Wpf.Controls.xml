<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Kinect.Wpf.Controls</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Kinect.Toolkit.Input.CursorModel">
            <summary>
            Represents the non visual aspects of the hand cursor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.CursorModel.NotSet">
            <summary>
            The value used for any not set frames.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.CursorModel.PressExtentPressRelease">
            <summary>
            The value used for a press that is down and ready to be released.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.CursorModel.#ctor(Microsoft.Kinect.Input.HandType,Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.Toolkit.Input.CursorModel"/> class.
            </summary>
            <param name="handType">The type of hand the cursor should represent.</param>
            <param name="cursorSpriteSheetDefinition">The spritesheet definition</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.CursorModel.Tick">
            <summary>
            Advances any active animations for this cursor.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.CursorModel.Update(System.Windows.Point,Microsoft.Kinect.Input.KinectPointerPoint,Microsoft.Kinect.Toolkit.Input.PressableModel,System.Boolean)">
            <summary>
            Updates the position and state of the cursor.
            </summary>
            <param name="pointInWindowCoordinates">Will move the cursor to this location.</param>
            <param name="kinectPointerPoint">The pointer point is used to understand the current pointerId and PressExtent.</param>
            <param name="pressCapturedElement">If an element is current captured for press, update will update the cursor model based on press progress.</param>
            <param name="isInGrip">Is the user current gripping.</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.CursorModel.StartTimeBasedAnimation">
            <summary>
            Begins a time based animation of the cursor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.Position">
            <summary>
            Gets the position of the cursor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.PointerId">
            <summary>
            Gets the id of the pointer (from the KinectPointerPoint) that the cursor is related to.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.PressExtent">
            <summary>
            Gets the current press extent that cursor should be visualizing.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.HandType">
            <summary>
            Gets the type of hand the cursor is representing.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.HoldProgress">
            <summary>
            Gets the progress of a press and hold.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.CurrentFrame">
            <summary>
            Gets the current frame of the sprite sheet that represents the current state of the cursor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.CursorState">
            <summary>
            Gets the current state of the cursor - Normal, Gripping, etc...
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.CursorSpriteSheetDefinition">
            <summary>
            Gets the <see cref="P:Microsoft.Kinect.Toolkit.Input.CursorModel.CursorSpriteSheetDefinition"/> that this <see cref="T:Microsoft.Kinect.Toolkit.Input.CursorModel"/> is using.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.IsAnimationComplete">
            <summary>
            Gets a value indicating whether any animation of the cursor is complete.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.LastCursorState">
            <summary>
            Gets or sets the last state of the cursor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.DataAnimation">
            <summary>
            Gets or sets a value indicating whether data animations are in use. They are used when a user action (like press extent) controls cursor state.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.AnimationStartedThisTick">
            <summary>
            Gets or sets a value indicating whether the animation started this tick.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.TransitionAnimation">
            <summary>
            Gets or sets a value indicating whether the animation is transitioning to another animation.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.StartAnimationFrame">
            <summary>
            Gets or sets the starting animation frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.TargetAnimationFrame">
            <summary>
            Gets or sets the target animation frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorModel.FinalAnimationFrame">
            <summary>
            Gets or sets the final animation frame, to be used once the target animation frame has been reached.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition">
            <summary>
            Defines the spritesheet used for cursor rendering
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.#ctor(System.Uri,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a CursorSpriteSheetDefinition with default spritesheet indices
            </summary>
            <param name="imageUri">Uri to the spritesheet image.</param>
            <param name="columns">Number of sprite columns.</param>
            <param name="rows">Number of sprite rows.</param>
            <param name="width">Width of each sprite.</param>
            <param name="height">Height of each sprite.</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.#ctor(System.Uri,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a CursorSpriteSheetDefinition
            </summary>
            <param name="imageUri">Uri to the spritesheet image.</param>
            <param name="columns">Number of sprite columns.</param>
            <param name="rows">Number of sprite rows.</param>
            <param name="width">Width of each sprite.</param>
            <param name="height">Height of each sprite.</param>
            <param name="pressDownStartFrame">Index into the spritesheet corresponding to the start press down animation frame.</param>
            <param name="pressDownFinalFrame">Index into the spritesheet corresponding to the final press down animation frame.</param>
            <param name="pressingStartFrame">Index into the spritesheet corresponding to the start pressing animation frame.</param>
            <param name="pressingFinalFrame">Index into the spritesheet corresponding to the final pressing animation frame.</param>
            <param name="pressHoldStartFrame">Index into the spritesheet corresponding to the start press hold animation frame.</param>
            <param name="pressHoldFinalFrame">Index into the spritesheet corresponding to the final press hold animation frame.</param>
            <param name="grippingStartFrame">Index into the spritesheet corresponding to the start gripping animation frame.</param>
            <param name="grippingFinalFrame">Index into the spritesheet corresponding to the final gripping animation frame.</param>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.ImageUri">
            <summary>
            Gets the sprite sheet image file relative uri path.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.SpriteHeight">
            <summary>
            Gets the height of each sprite in the sprite sheet.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.SpriteWidth">
            <summary>
            Gets the width of each sprite in the sprite sheet.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.Rows">
            <summary>
            Number of sprite rows in the spritesheet image
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.Columns">
            <summary>
            Number of sprite columns in the spritesheet image
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.PressDownStartFrame">
            <summary>
            Index into the spritesheet corresponding to the start press down animation frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.PressDownFinalFrame">
            <summary>
            Index into the spritesheet corresponding to the final press down animation frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.PressingStartFrame">
            <summary>
            Index into the spritesheet corresponding to the start pressing animation frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.PressingFinalFrame">
            <summary>
            Index into the spritesheet corresponding to the final pressing animation frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.PressHoldStartFrame">
            <summary>
            Index into the spritesheet corresponding to the start press hold animation frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.PressHoldFinalFrame">
            <summary>
            Index into the spritesheet corresponding to the final press hold animation frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.GrippingStartFrame">
            <summary>
            Index into the spritesheet corresponding to the start gripping animation frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition.GrippingFinalFrame">
            <summary>
            Index into the spritesheet corresponding to the final gripping animation frame.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Toolkit.Input.CursorState">
            <summary>
            The major category of feedback the cursor is representing.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.CursorState.Normal">
            <summary>
            A normal cursor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.CursorState.Pressing">
            <summary>
            A cursor that is in the progress of pressing down a button.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.CursorState.PressDown">
            <summary>
            A cursor that has reached the full extent of pressing. Releasing at that point will cause the button to be tapped.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.CursorState.PressHold">
            <summary>
            A cursor that is in the progress of a press and hold.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.CursorState.Gripping">
            <summary>
            A cursor that is in the progress of a manipulation, which is shown with grip.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Toolkit.Input.CursorViewModel">
            <summary>
            <see cref="T:Microsoft.Kinect.Toolkit.Input.CursorViewModel"/> provides a mapping from a <see cref="T:Microsoft.Kinect.Toolkit.Input.CursorModel"/> to the information necessary to visualize the cursor with a sprite sheet.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.CursorViewModel.#ctor(Microsoft.Kinect.Toolkit.Input.CursorModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.Toolkit.Input.CursorViewModel"/> class.
            </summary>
            <param name="cursorModel">The <see cref="T:Microsoft.Kinect.Toolkit.Input.CursorModel"/> instance being visualized.</param>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorViewModel.OriginPositionX">
            <summary>
            Gets the x-position of the origin where the cursor should be rendered.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorViewModel.OriginPositionY">
            <summary>
            Gets the y-position of the origin where the cursor should be rendered.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorViewModel.SpriteSheetIndex">
            <summary>
            Gets the index of which image on the sprite sheet is displayed.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorViewModel.SpriteSheetRow">
            <summary>
            Gets the row of the current image that should be displayed.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorViewModel.SpriteSheetColumn">
            <summary>
            Gets the column of the current image that should be displayed.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorViewModel.SpriteSheetX">
            <summary>
            Gets the x offset needed to be used on the sprite sheet to show the current image.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorViewModel.SpriteSheetY">
            <summary>
            Gets the y offset needed to be used on the sprite sheet to show the current image.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorViewModel.ScaleTransformX">
            <summary>
            Gets the scale factor to show the correct hand type.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.CursorViewModel.Model">
            <summary>
            Gets the <see cref="T:Microsoft.Kinect.Toolkit.Input.CursorModel"/> that this <see cref="T:Microsoft.Kinect.Toolkit.Input.CursorViewModel"/> is helping to visualize.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Toolkit.Input.HitTestResult">
            <summary>
            Stores information about which <see cref="T:Microsoft.Kinect.Toolkit.Input.PressableModel"/> (0-1) and <see cref="T:Microsoft.Kinect.Toolkit.Input.ManipulatableModel"/> (0-n) were hit by a point.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.HitTestResult.emptyInstance">
            <summary>
            A hit test result with nothing hit.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.HitTestResult.firstKinectAwareElement">
            <summary>
            The first element, which can be pressed, that was hit.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.HitTestResult.manipulationAwareElements">
            <summary>
            The list of elements, which can be scrolled or zoomed, that were hit.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.HitTestResult.#ctor(Microsoft.Kinect.Toolkit.Input.PressableModel,System.Collections.Generic.IList{Microsoft.Kinect.Toolkit.Input.ManipulatableModel})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.Toolkit.Input.HitTestResult"/> class.
            </summary>
            <param name="firstKinectAwareElement">The first element, which can be pressed, that was hit.</param>
            <param name="manipulationAwareElements">The list of elements, which can be scrolled or zoomed, that were hit.</param>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.HitTestResult.Empty">
            <summary>
            Gets a hit test result with nothing hit.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.HitTestResult.FirstKinectAwareElement">
            <summary>
            Gets the first element, which can be pressed, that was hit.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.HitTestResult.ManipulationAwareElements">
            <summary>
            Gets the collection of elements, which can be scrolled or zoomed, that were hit.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Toolkit.Input.IInputModel">
            <summary>
            The interface which <see cref="T:Microsoft.Kinect.Toolkit.Input.PressableModel"/> and <see cref="T:Microsoft.Kinect.Toolkit.Input.ManipulatableModel"/> share in common.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.IInputModel.ProcessPointerMove(Microsoft.Kinect.Input.KinectPointerPoint,System.Collections.Generic.Dictionary{System.UInt32,Microsoft.Kinect.Toolkit.Input.IInputModel},System.Boolean)">
            <summary>
            Process this <see cref="T:Microsoft.Kinect.Input.KinectPointerPoint"/> with the appropriate <see cref="T:Microsoft.Kinect.Input.KinectGestureRecognizer"/>
            </summary>
            <param name="kinectPointerPoint">The <see cref="T:Microsoft.Kinect.Input.KinectPointerPoint"/> to process.</param>
            <param name="captureMap">The map of current captured <see cref="T:Microsoft.Kinect.Toolkit.Input.IInputModel"/>. </param>
            <param name="forceEndPress">Should press be ended because of a grip.</param>
            <returns>Whether press should be forcefully ended.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.IInputModel.CompleteGesture">
            <summary>
            Completes any in process gestures to ensure state is reset.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.IInputModel.GestureRecognizer">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Kinect.Input.KinectGestureRecognizer"/> used to recognize gestures.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.IInputModel.Element">
            <summary>
            Gets the element associated with this model.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.IInputModel.IsManipulatable">
            <summary>
            Gets a value indicating whether this model can be scrolled or zoomed.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.IInputModel.CapturedPointerId">
            <summary>
            Gets the pointer id that has captured this model.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.IInputModel.HasCaptureChanged">
            <summary>
            Gets or sets a value indicating whether capture has changed for this model.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Toolkit.Input.MapHelpers`1">
            <summary>
            A helper class to store the currently capture <see cref="T:Microsoft.Kinect.Toolkit.Input.IInputModel"/>.
            </summary>
            <typeparam name="T">The type of input model you are trying to access.</typeparam>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.MapHelpers`1.SafeLookup(System.Collections.Generic.Dictionary{System.UInt32,Microsoft.Kinect.Toolkit.Input.IInputModel},System.UInt32)">
            <summary>
            Safely looks up a map entry, returning null if the key does not exist.
            </summary>
            <param name="elementsMap">The capture map</param>
            <param name="pointerId">For which pointer id</param>
            <returns>The captured <see cref="T:Microsoft.Kinect.Toolkit.Input.IInputModel"/></returns>
        </member>
        <member name="T:Microsoft.Kinect.Toolkit.Input.InputPointerManager">
            <summary>
            A class which assists with the proper routing of pointers to the right <see cref="T:Microsoft.Kinect.Toolkit.Input.IInputModel"/>
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.InputPointerManager.pointerCaptureMap">
            <summary>
            The pointer capture map
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.InputPointerManager.kinectSensor">
            <summary>
            The sensor
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.Toolkit.Input.InputPointerManager"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.#ctor(Microsoft.Kinect.KinectSensor)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.Toolkit.Input.InputPointerManager"/> class.
            </summary>
            <param name="kinectSensor">The sensor that should be used. Null will get the default sensor.</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.TransformInputPointerCoordinatesToWindowCoordinates(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Translate input pointer coordinates (0.0 to 1.0 maps to window size) to pixels.
            </summary>
            <param name="inputPointerPoint">The point in 0.0 to 1.0 coordinates (which come from KinectPointerPoint).</param>
            <param name="windowBounds">The bounds of the window.</param>
            <returns>A point in window coordinates.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.TransformWindowCoordinatesToInputPointerCoordinates(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Translate window pointer coordinates (pixels) to input pointer coordinates (0.0 to 1.0 maps to window size)
            </summary>
            <param name="windowPoint">The point in window coordinates (real pixels).</param>
            <param name="windowBounds">The bounds of the window.</param>
            <returns>A point in window coordinates.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.HandlePointerAsCursor(Microsoft.Kinect.Input.KinectPointerPoint,Microsoft.Kinect.Toolkit.Input.HitTestResult)">
            <summary>
            Process the <see cref="T:Microsoft.Kinect.Input.KinectPointerPoint"/> as a visible cursor.
            </summary>
            <param name="kinectPointerPoint">The pointerPoint to process for gestures.</param>
            <param name="hitTestResult">The <see cref="T:Microsoft.Kinect.Toolkit.Input.IInputModel"/> which were hit at this position.</param>
            <returns>The captured elements at the end of this processing.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.CompleteGestures">
            <summary>
            Call CompleteGesture on every captured IInputModel and clear Capture Map.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.CompleteGestures(System.UInt32)">
            <summary>
            Call CompleteGesture on IInputModel mapped to a PointerId.
            </summary>
            <param name="pointerId">the PointerId which should be completed.</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.CompleteGestures(Microsoft.Kinect.Toolkit.Input.IInputModel)">
            <summary>
            Call CompleteGesture on IInputModel.
            </summary>
            <param name="inputModel">the IInputModel which should be completed.</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.GetCapturedInputModel(System.UInt32)">
            <summary>
            Return captured input model by pointer id.
            </summary>
            <param name="pointerId">the PointerId to lookup.</param>
            <returns>The captured model for that pointer</returns>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.SetKinectOnePersonSystemEngagement">
            <summary>
            Resets engagement mode to the default one person, determined by the system.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.SetKinectTwoPersonSystemEngagement">
            <summary>
            Sets engagement mode to two person, determined by the system.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.SetKinectOnePersonManualEngagement(Microsoft.Kinect.Toolkit.Input.IKinectEngagementManager)">
            <summary>
            Sets engagement mode to one person, determined by the kinect engagement manager.
            </summary>
            <param name="kinectEngagementManager">an instance of an engagement manager</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.SetKinectTwoPersonManualEngagement(Microsoft.Kinect.Toolkit.Input.IKinectEngagementManager)">
            <summary>
            Sets engagement mode to two person, determined manually.
            </summary>
            <param name="kinectEngagementManager">an instance of an engagement manager</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.InputPointerManager.Initialize(Microsoft.Kinect.KinectSensor)">
            <summary>
            Initialization and management
            </summary>
            <param name="sensor">The sensor to use.</param>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.InputPointerManager.KinectEngagementManager">
            <summary>
            Engagment manager set via SetKinectOnePersonManualEngagement or SetKinectTwoPersonManualEngagment
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Toolkit.Input.ManipulatableModel">
            <summary>
            A model class which supports an element, which can be scrolled or zoomed, associating a gesture recognizer to enable scrolling and zooming.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.scrollOffset">
            <summary>
            Size of the scroll offset
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.capturedPointerId">
            <summary>
            Captured pointer Id
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.#ctor(Microsoft.Kinect.Input.KinectGestureSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.Toolkit.Input.ManipulatableModel"/> class.
            </summary>
            <param name="gestureSettings">The settings that should be used by the <see cref="T:Microsoft.Kinect.Input.KinectGestureRecognizer"/> supporting this model.</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.#ctor(Microsoft.Kinect.Input.KinectGestureSettings,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.Toolkit.Input.ManipulatableModel"/> class.
            </summary>
            <param name="gestureSettings">The settings that should be used by the <see cref="T:Microsoft.Kinect.Input.KinectGestureRecognizer"/> supporting this model.</param>
            <param name="element">The element which this model is associated.</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.ProcessPointerMove(Microsoft.Kinect.Input.KinectPointerPoint,System.Collections.Generic.Dictionary{System.UInt32,Microsoft.Kinect.Toolkit.Input.IInputModel},System.Boolean)">
            <summary>
            Process this <see cref="T:Microsoft.Kinect.Input.KinectPointerPoint"/> with the appropriate <see cref="T:Microsoft.Kinect.Input.KinectGestureRecognizer"/>
            </summary>
            <param name="kinectPointerPoint">The <see cref="T:Microsoft.Kinect.Input.KinectPointerPoint"/> to process.</param>
            <param name="captureMap">The map of current captured <see cref="T:Microsoft.Kinect.Toolkit.Input.IInputModel"/>. </param>
            <param name="forceEndPress">Should press be ended because of a grip.</param>
            <returns>Whether press should be forcefully ended.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.ProcessInertia">
            <summary>
            Process any necessary inertial events.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.CompleteGesture">
            <summary>
            Complete any ongoing gestures with the recognizer and clear state.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.Attach(Microsoft.Kinect.Input.KinectGestureRecognizer,Microsoft.Kinect.Input.KinectGestureSettings)">
            <summary>
            Attaches gesture recognizer to the model.
            </summary>
            <param name="gestureRecognizer">The recognizer</param>
            <param name="scrollGestureSettings">The gesture settings</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.Detach">
            <summary>
            Detaches gesture recognizer from the object.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.OnManipulationStarted(System.Object,Microsoft.Kinect.Input.KinectManipulationStartedEventArgs)">
            <summary>
            Handles when a manipulation is started.
            </summary>
            <param name="sender">The recognizer</param>
            <param name="args">The event args</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.OnManipulationUpdated(System.Object,Microsoft.Kinect.Input.KinectManipulationUpdatedEventArgs)">
            <summary>
            Handles when a manipulation is updated.
            </summary>
            <param name="sender">The recognizer</param>
            <param name="args">The event args</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.OnManipulationInertiaStarting(System.Object,Microsoft.Kinect.Input.KinectManipulationInertiaStartingEventArgs)">
            <summary>
            Handles when a manipulation starts inertia.
            </summary>
            <param name="sender">The recognizer</param>
            <param name="args">The event args</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.OnManipulationCompleted(System.Object,Microsoft.Kinect.Input.KinectManipulationCompletedEventArgs)">
            <summary>
            Handles when a manipulation completes.
            </summary>
            <param name="sender">The recognizer</param>
            <param name="args">The event args</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.Dispose">
            <summary>
            Cleans up state of ManipulatableModel
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.ScrollOffset">
            <summary>
            Gets the current scroll offset
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.IsInInertialManipulation">
            <summary>
            Gets a value indicating whether the element is inertial.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.GestureRecognizer">
            <summary>
            Gets the <see cref="T:Microsoft.Kinect.Input.KinectGestureRecognizer"/> used to recognize gestures.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.Element">
            <summary>
            Gets or sets the element associated with this model.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.CapturedPointerId">
            <summary>
            Gets the pointer id that has captured this model.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.IsManipulatable">
            <summary>
            Gets a value indicating whether this model can be scrolled or zoomed.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.HasCaptureChanged">
            <summary>
            Gets or sets a value indicating whether capture has changed for this model.
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.ManipulationStarted">
            <summary>
            Event that fires when a user has started manipulation
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.ManipulationUpdated">
            <summary>
            Event that fires while a user is doing manipulation
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.ManipulationInertiaStarting">
            <summary>
            Event that fires when the user flings and lets go of a manipulatable element
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.Toolkit.Input.ManipulatableModel.ManipulationCompleted">
            <summary>
            Event that fires when the user finishes manipulation
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Toolkit.Input.PressableModel">
            <summary>
            A model class which supports an element, which can be pressed, associating a gesture recognizer to enable pressing.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.PressableModel.pressExtent">
            <summary>
            tracks press extent
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.PressableModel.pointerPoints">
            <summary>
            collection used to send to ProcessMove, which requires a vector, not a single pointer point.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Toolkit.Input.PressableModel.capturedPointerId">
            <summary>
            captured pointer id
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.Toolkit.Input.PressableModel"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.Toolkit.Input.PressableModel"/> class.
            </summary>
            <param name="element">The element which this model is associated.</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.ProcessPointerMove(Microsoft.Kinect.Input.KinectPointerPoint,System.Collections.Generic.Dictionary{System.UInt32,Microsoft.Kinect.Toolkit.Input.IInputModel},System.Boolean)">
            <summary>
            Process this <see cref="T:Microsoft.Kinect.Input.KinectPointerPoint"/> with the appropriate <see cref="T:Microsoft.Kinect.Input.KinectGestureRecognizer"/>
            </summary>
            <param name="kinectPointerPoint">The <see cref="T:Microsoft.Kinect.Input.KinectPointerPoint"/> to process.</param>
            <param name="captureMap">The map of current captured <see cref="T:Microsoft.Kinect.Toolkit.Input.IInputModel"/>. </param>
            <param name="forceEndPress">Should press be ended because of a grip.</param>
            <returns>Whether press should be forcefully ended.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.CompleteGesture">
            <summary>
            Complete any ongoing gestures with the recognizer and clear state.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.SetLocation(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the bounding box of this element
            </summary>
            <param name="originX">The left of the button</param>
            <param name="originY">The top of the button</param>
            <param name="width">The width of the button</param>
            <param name="height">The height of the button</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.GetBoundingRect">
            <summary>
            Calculates the bounding rectangle of the button.
            </summary>
            <returns>The bounding rectangle</returns>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.Attach(Microsoft.Kinect.Input.KinectGestureRecognizer,Microsoft.Kinect.Input.KinectGestureSettings)">
            <summary>
            Attaches gesture recognizer to the model.
            </summary>
            <param name="gestureRecognizer">The recognizer</param>
            <param name="pressableGestureSettings">The gesture settings</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.Detach">
            <summary>
            Detaches gesture recognizer from the object.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.OnTapped(System.Object,Microsoft.Kinect.Input.KinectTappedEventArgs)">
            <summary>
            Tapped event handler.
            </summary>
            <param name="sender">gesture recognizer</param>
            <param name="args">Tapped event arguments</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.OnPressingStarted(System.Object,Microsoft.Kinect.Input.KinectPressingStartedEventArgs)">
            <summary>
            Pressing started event handler
            </summary>
            <param name="sender">gesture recognizer</param>
            <param name="args">Pressing started event arguments</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.OnPressingUpdated(System.Object,Microsoft.Kinect.Input.KinectPressingUpdatedEventArgs)">
            <summary>
            Pressing updated event handler
            </summary>
            <param name="sender">gesture recognizer</param>
            <param name="args">pressing updated event arguments</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.OnPressingCompleted(System.Object,Microsoft.Kinect.Input.KinectPressingCompletedEventArgs)">
            <summary>
            Pressing complete event handler
            </summary>
            <param name="sender">gesture recognizer</param>
            <param name="args">Pressing completed event args</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.OnHolding(System.Object,Microsoft.Kinect.Input.KinectHoldingEventArgs)">
            <summary>
            Holding event handler
            </summary>
            <param name="sender">gesture recognizer</param>
            <param name="args">Holding event arguments</param>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.PressableModel.Dispose">
            <summary>
            Clean up state of PressableModel
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.PressableModel.IsHolding">
            <summary>
            Gets a value indicating whether the model is currently in the middle of a press and hold, and progress between 0.0 to 1.0.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.PressableModel.CapturedPointerId">
            <summary>
            Gets the pointer id that has captured this model.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.PressableModel.HoldProgress">
            <summary>
            Gets a value indicating the hold progress between 0.0 to 1.0.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.PressableModel.Element">
            <summary>
            Gets the element associated with this model.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.PressableModel.IsPressingDown">
            <summary>
            Gets a value indicating whether the element is in a down state, which cannot be pressed further.
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.Toolkit.Input.PressableModel.Tapped">
            <summary>
            Event that fires when a user has tapped on a pressable element
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.Toolkit.Input.PressableModel.PressingStarted">
            <summary>
            Event that fires when a user has moved the cursor over a pressable element
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.Toolkit.Input.PressableModel.PressingUpdated">
            <summary>
            Event that fires while a user's cursor is over a pressable element or pressing down on it
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.Toolkit.Input.PressableModel.PressingCompleted">
            <summary>
            Event that fires when a user's cursor leaves a pressable element
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.Toolkit.Input.PressableModel.Holding">
            <summary>
            Event that fires when a user's cursor is pressed down for a certain period of time
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.PressableModel.IsManipulatable">
            <summary>
            Gets a value indicating whether this model can be scrolled or zoomed.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.PressableModel.HasCaptureChanged">
            <summary>
            Gets or sets a value indicating whether capture has changed for this model.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.PressableModel.GestureRecognizer">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Kinect.Input.KinectGestureRecognizer"/> used to recognize gestures.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.PressableModel.Width">
            <summary>
            Gets the width of the button.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.PressableModel.Height">
            <summary>
            Gets the height of the button.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.PressableModel.OriginX">
            <summary>
            Gets an object's initial origin position x, relative to window origin
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.PressableModel.OriginY">
            <summary>
            Get an object's initial origin position y, relative to window origin
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.IKinectManipulatableController">
            <summary>
            Interface that all controllers that want to be manipulatable must implement
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.IKinectController">
            <summary>
            Interface that all controllers that want to work with KinectRegion must implement
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.IKinectController.Element">
            <summary>
            Get the framework element that this controller manipulates
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.IKinectManipulatableController.ManipulatableInputModel">
            <summary>
            Get the manipulatable model that this controller is subscribed to
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.ScrollViewerController.#ctor(System.Windows.FrameworkElement,Microsoft.Kinect.Toolkit.Input.ManipulatableModel,Microsoft.Kinect.Wpf.Controls.KinectRegion)">
            <summary>
            Constructor
            </summary>
            <param name="element">Element that controller updates</param>
            <param name="model">Model to subscribe to</param>
            <param name="kinectRegion">Kinect region that element resides in</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.ScrollViewerController.Dispose">
            <summary>
            Handles cleanup
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.ScrollViewerController.OnManipulationStarted(System.Object,Microsoft.Kinect.Input.KinectManipulationStartedEventArgs)">
            <summary>
            Handler for ManipulationStarted events
            </summary>
            <param name="sender">Manipulatable model that fired the event</param>
            <param name="e">Args from the model for event handling</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.ScrollViewerController.OnManipulationUpdated(System.Object,Microsoft.Kinect.Input.KinectManipulationUpdatedEventArgs)">
            <summary>
            Handler for ManipulationUpdated events
            </summary>
            <param name="sender">Manipulatable model that fired the event</param>
            <param name="e">Args from the model for event handling</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.ScrollViewerController.OnManipulationInertiaStarting(System.Object,Microsoft.Kinect.Input.KinectManipulationInertiaStartingEventArgs)">
            <summary>
            Handler for ManipulationInertiaStarting events
            </summary>
            <param name="sender">Manipulatable model that fired the event</param>
            <param name="e">Args from the model for event handling</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.ScrollViewerController.OnManipulationCompleted(System.Object,Microsoft.Kinect.Input.KinectManipulationCompletedEventArgs)">
            <summary>
            Handler for ManipulationCompleted events
            </summary>
            <param name="sender">Manipulatable model that fired the event</param>
            <param name="e">Args from the model for event handling</param>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.ScrollViewerController.ManipulatableInputModel">
            <summary>
            Gets the manipulatable model that the controller is subscribed to
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.ScrollViewerController.Element">
            <summary>
            Gets the element that the controller updates
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.IKinectPressableController">
            <summary>
            Interface that all controllers that want to be pressable must implement
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.IKinectPressableController.PressableInputModel">
            <summary>
            Get the pressable model that this controller is subscribed to
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.DefaultPressableController.#ctor(System.Windows.FrameworkElement,Microsoft.Kinect.Toolkit.Input.PressableModel,Microsoft.Kinect.Wpf.Controls.KinectRegion)">
            <summary>
            Constructor
            </summary>
            <param name="element">Element that controller updates</param>
            <param name="model">Model to subscribe to</param>
            <param name="kinectRegion">Kinect region that element resides in</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.DefaultPressableController.Dispose">
            <summary>
            Handles cleanup
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.DefaultPressableController.OnTapped(System.Object,Microsoft.Kinect.Input.KinectTappedEventArgs)">
            <summary>
            Handler for Tapped events
            </summary>
            <param name="sender">Pressable model that fired the event</param>
            <param name="e">Args from the model for event handling</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.DefaultPressableController.OnPressingStarted(System.Object,Microsoft.Kinect.Input.KinectPressingStartedEventArgs)">
            <summary>
            Handler for PressingStarted events
            </summary>
            <param name="sender">Pressable model that fired the event</param>
            <param name="e">Args from the model for event handling</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.DefaultPressableController.OnPressingUpdated(System.Object,Microsoft.Kinect.Input.KinectPressingUpdatedEventArgs)">
            <summary>
            Handler for PressingUpdated events
            </summary>
            <param name="sender">Pressable model that fired the event</param>
            <param name="e">Args from the model for event handling</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.DefaultPressableController.OnPressingCompleted(System.Object,Microsoft.Kinect.Input.KinectPressingCompletedEventArgs)">
            <summary>
            Handler for PressingCompleted events
            </summary>
            <param name="sender">Pressable model that fired the event</param>
            <param name="e">Args from the model for event handling</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.DefaultPressableController.OnHolding(System.Object,Microsoft.Kinect.Input.KinectHoldingEventArgs)">
            <summary>
            Handler for Holding events
            </summary>
            <param name="sender">Pressable model that fired the event</param>
            <param name="e">Args from the model for event handling</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.DefaultPressableController.OnLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handler for LostFocus events
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.DefaultPressableController.PressableInputModel">
            <summary>
            Gets the pressable model that the controller is subscribed to
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.DefaultPressableController.Element">
            <summary>
            Gets the element that the controller updates
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.DepthImageColorizerStrategy.ColorizeDepthPixels(Microsoft.Kinect.Wpf.Controls.IDepthImageColorizerParameters,System.UInt16[],System.Byte[],System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Fill a 32-bit RGBA image with appropriate colors given the specified parameters and
            depth image.
            </summary>
            <param name="parameters">
            Colorization parameters
            </param>
            <param name="depthImagePixels">
            Depth image pixels used to inform colorization process
            </param>
            <param name="bodyIndexPixels">
            Body index pixels used to determine where the body masks are located
            </param>
            <param name="colorBuffer">
            Color buffer to fill
            </param>
            <param name="depthWidth">
            Width of depth image (in pixels)
            </param>
            <param name="depthHeight">
            Height of depth image (in pixels)
            </param>
            <param name="downscaleFactor">
            Number of pixels in input depth image that correspond to one pixel in color image.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.DepthImageColorizerStrategy.ColorizeBackground(System.Byte[])">
            <summary>
            Fill a 32-bit RGBA image with the background color.
            </summary>
            <param name="colorBuffer">
            Color buffer to fill
            </param>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.DepthImageProcessor">
            <summary>
            Used to process/render a depth bitmap efficiently.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.IDepthImageColorizerParameters">
            <summary>
            Color settings used by DepthImageColorizerStrategy objects to determine
            how to highlight various users present in depth image.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.DepthImageProcessor.#ctor">
            <summary>
            Initializes a new instance of the DepthImageProcessor class.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.DepthImageProcessor.WriteToBitmap(Microsoft.Kinect.DepthFrame)">
            <summary>
            Process a frame and write it to the bitmap.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.IKinectControl">
            <summary>
            Must be implemented by any third party control that wants to use kinect enabled
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.IKinectControl.CreateController(Microsoft.Kinect.Toolkit.Input.IInputModel,Microsoft.Kinect.Wpf.Controls.KinectRegion)">
            <summary>
            Called by Kinect Region so that a 3rd party controller can be attached to this UI element
            </summary>
            <param name="inputModel">Input model that the controller should subscribe to</param>
            <param name="kinectRegion">Kinect Region that the controller will be living in</param>
            <returns>Kinect controller that controls the 3rd party control</returns>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.IKinectControl.IsPressable">
            <summary>
            Returns if the UI element is pressable or not
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.IKinectControl.IsManipulatable">
            <summary>
            Returns if the UI element is manipulatable or not
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Toolkit.Input.IKinectEngagementManager">
            <summary>
            Interface for an engagement manager to implement
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.IKinectEngagementManager.StartManaging">
            <summary>
            Called when the manager should start managing which BodyHandPairs are engaged.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.IKinectEngagementManager.StopManaging">
            <summary>
            Called when the manager should stop managing which BodyHandPairs are engaged.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Toolkit.Input.IKinectEngagementManager.EngagedBodyHandPairsChanged">
            <summary>
            Per frame, have the set of engaged body hand pairs changed.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Kinect.Toolkit.Input.IKinectEngagementManager.KinectManualEngagedHands">
            <summary>
            If manual engagement is on, which hands are currently engaged.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.KinectRegion">
            <summary>
            A class which provide Hand Pointer cursor and interactions support.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.KinectControllerProperty">
            <summary>
            The technique that KinectRegion uses to store the appropriate IKinectController
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.KinectSensorProperty">
            <summary>
            Dependency property to hold reference to the sensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.IsHorizontalRailEnabledProperty">
            <summary>
            Dependency property for the IsHorizontalRailEnabled property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.IsVerticalRailEnabledProperty">
            <summary>
            Dependency property for the IsVerticalRailEnabled property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.ZoomModeProperty">
            <summary>
            Dependency property for the ZoomMode property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.MaxZoomFactorProperty">
            <summary>
            Dependency property for the MaxZoomFactor property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.MinZoomFactorProperty">
            <summary>
            Dependency property for the MinZoomFactor property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.IsPressTargetProperty">
            <summary>
            Dependency property for the IsPressTarget property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.KinectPressInsetProperty">
            <summary>
            Dependency property for the KinectPressInset property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.IsScrollInertiaEnabledProperty">
            <summary>
            Dependency property for the IsScrollInertiaEnabled property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.KinectRegionProperty">
            <summary>
            Dependency property for the KinectRegion property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.defaultSpriteSheet">
            <summary>
            Default cursor sprite sheet
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.pointerPoints">
            <summary>
            list of pointer points
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.engagedBodyTrackingIds">
            <summary>
            list of engaged users
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.isCursorVisible">
            <summary>
            stores whether the cursor should be shown or not
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.cursorViewModels">
            <summary>
            the cursor view models
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.cursorElements">
            <summary>
            the cursor elements
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.cursorRenderingLayer">
            <summary>
            the cursor rendering layer
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.childHolder">
            <summary>
            where content is held
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.kinectRegionBounds">
            <summary>
            the window bounds of the kinect region
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegion.hitTestResult">
            <summary>
            hit test results
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.Wpf.Controls.KinectRegion"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.GetIsPressTarget(System.Windows.DependencyObject)">
            <summary>
            Gets a value indicating whether the element is a press target.
            </summary>
            <param name="obj">the element</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetIsPressTarget(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets a value indicating whether the element is a press target.
            </summary>
            <param name="obj">the element</param>
            <param name="value">is press target</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.GetKinectPressInset(System.Windows.DependencyObject)">
            <summary>
            Gets the Thickness which press should ignore on the outside of the control.
            </summary>
            <param name="obj">the element</param>
            <returns>The thickness</returns>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetKinectPressInset(System.Windows.DependencyObject,System.Windows.Thickness)">
            <summary>
            Sets the Thickness which press should ignore on the outside of the control.
            </summary>
            <param name="obj">the element</param>
            <param name="value">the thickness</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.GetKinectRegion(System.Windows.DependencyObject)">
            <summary>
            Gets an inheritable attached property so that a user viewer can find the associated region.
            </summary>
            <param name="obj">the element</param>
            <returns>the region</returns>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetKinectRegion(System.Windows.DependencyObject,Microsoft.Kinect.Wpf.Controls.KinectRegion)">
            <summary>
            Set an inheritable attached property so that a user viewer can find the associated region.
            </summary>
            <param name="obj">the element</param>
            <param name="value">the region</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.GetIsScrollInertiaEnabled(System.Windows.UIElement)">
            <summary>
            Gets whether this element has scroll inertia enabled.
            </summary>
            <param name="obj">the element</param>
            <returns>a boolean</returns>   
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetIsScrollInertiaEnabled(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets whether this element has scroll inertia enabled.
            </summary>
            <param name="obj">the element</param>
            <param name="value">is scroll inertia enabled</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.GetIsHorizontalRailEnabled(System.Windows.UIElement)">
            <summary>
            Gets whether this element has horizontal rails enabled.
            </summary>
            <param name="obj">the element</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetIsHorizontalRailEnabled(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets whether this element has horizontal rails enabled.
            </summary>
            <param name="obj">the element</param>
            <param name="value">are horizontal rails enabled</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.GetIsVerticalRailEnabled(System.Windows.UIElement)">
            <summary>
            Gets whether this element has vertical rails enabled.
            </summary>
            <param name="obj">the element</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetIsVerticalRailEnabled(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets whether this element has vertical rails enabled.
            </summary>
            <param name="obj">the element</param>
            <param name="value">are horizontal rails enabled</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.GetZoomMode(System.Windows.UIElement)">
            <summary>
            Gets the zoom mode of the element
            </summary>
            <param name="obj">the element</param>
            <returns>the zoom mode</returns>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetZoomMode(System.Windows.UIElement,Microsoft.Kinect.Wpf.Controls.ZoomMode)">
            <summary>
            Sets the zoom mode of the element
            </summary>
            <param name="obj">the element</param>
            <param name="value">the zoom mode</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.GetMaxZoomFactor(System.Windows.UIElement)">
            <summary>
            Gets the max zoom factor of the element
            </summary>
            <param name="obj">the element</param>
            <returns>the zoom factor</returns>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetMaxZoomFactor(System.Windows.UIElement,System.Single)">
            <summary>
            Sets the max zoom factor of the element
            </summary>
            <param name="obj">the element</param>
            <param name="value">the zoom factor</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.GetMinZoomFactor(System.Windows.UIElement)">
            <summary>
            Gets the min zoom factor of the element
            </summary>
            <param name="obj">the element</param>
            <returns>the zoom factor</returns>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetMinZoomFactor(System.Windows.UIElement,System.Single)">
            <summary>
            Sets the min zoom factor of the element
            </summary>
            <param name="obj">the element</param>
            <param name="value">the zoom factor</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetKinectOnePersonSystemEngagement">
            <summary>
            Resets engagement mode to the default one person, determined by the system.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetKinectTwoPersonSystemEngagement">
            <summary>
            Sets engagement mode to two person, determined by the system.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetKinectOnePersonManualEngagement(Microsoft.Kinect.Toolkit.Input.IKinectEngagementManager)">
            <summary>
            Sets engagement mode to one person, determined by the kinect engagement manager.
            </summary>
            <param name="kinectEngagementManager">an instance of an engagement manager</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.GetPressableControllerForElement(System.Windows.DependencyObject)">
            <summary>
            Gets the already allocated PressableModel for an element or creates one on demand.
            </summary>
            <param name="obj">The element.</param>
            <returns>a pressable model</returns>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetKinectTwoPersonManualEngagement(Microsoft.Kinect.Toolkit.Input.IKinectEngagementManager)">
            <summary>
            Sets engagement mode to two person, determined manually.
            </summary>
            <param name="kinectEngagementManager">an instance of an engagement manager</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.GetIsCursorVisible(System.UInt32)">
            <summary>
            Get cursor visiblity flag for the given pointer id
            </summary>
            <param name="pointerId">Pointer id to get cursor visiblity flag for</param>
            <returns>Cursor visiblity flag</returns>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.SetIsCursorVisible(System.UInt32,System.Boolean)">
            <summary>
            Sets the cursor visiblity flag for the given pointer id
            </summary>
            <param name="pointerId">Pointer id to set the cursor visiblity flag for</param>
            <param name="cursorVisible">Cursor visibility flag value</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegion.OnApplyTemplate">
            <summary>
            An override of Control.OnApplyTemplate()
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectRegion.DefaultSpriteSheet">
            <summary>
            Default cursor sprite sheet
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectRegion.CursorSpriteSheetDefinition">
            <summary>
            Gets or sets the sprite sheet definition used by the region for cursor rendering.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectRegion.KinectSensor">
            <summary>
            Gets or sets the sensor used by the region.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectRegion.InputPointerManager">
            <summary>
            Gets an input pointer manager to assist with pointer routing and capture tracking.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectRegion.EngagedBodyTrackingIds">
            <summary>
            Gets a read only collection of the engaged users
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectRegion.BodyTimeCounter">
            <summary>
            Current body time counter. To be used to syncronize with other Kinect data sources.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectRegion.KinectEngagementManager">
            <summary>
            Gets the current IKinectEngagementManager
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectRegion.Bounds">
            <summary>
            Gets the current bounds of the Kinect Region
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.KinectRegionBinder">
            <summary>
            Class to help bind KinectRegion to dependency objects.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegionBinder.KinectRegionProperty">
            <summary>
            KinectRegion dependency property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectRegionBinder.KinectSensorProperty">
            <summary>
            KinectSensor dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegionBinder.#ctor(System.Windows.DependencyObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.Wpf.Controls.KinectRegionBinder"/> class. 
            </summary>
            <param name="source">
            The DependencyObject source of the binding.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegionBinder.OnKinectRegionPropertyChanged(Microsoft.Kinect.Wpf.Controls.KinectRegion,Microsoft.Kinect.Wpf.Controls.KinectRegion)">
            <summary>
            KinectRegion dependency property changed handler.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectRegionBinder.OnKinectSensorPropertyChanged(Microsoft.Kinect.KinectSensor,Microsoft.Kinect.KinectSensor)">
            <summary>
            KinectSensor dependency property changed handler.
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.Wpf.Controls.KinectRegionBinder.OnKinectRegionChanged">
            <summary>
            KinectRegionChanged event.
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.Wpf.Controls.KinectRegionBinder.OnKinectSensorChanged">
            <summary>
            KinectSensorChanged event.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.KinectRegionBinder.KinectRegionChangedHandler">
            <summary>
            Handler delegate to KinectRegionChanged event.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.KinectRegionBinder.KinectSensorChangedHandler">
            <summary>
            Handler delegate to KinectSensorChanged event.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.KinectUserViewer">
            <summary>
            Framework element that displays Kinect depth data colorized by user tracking ID or engaged versus non-engaged status.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.NaturalWidth">
            <summary>
            Natural width of the KinectUserViewer in pixels.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.NaturalHeight">
            <summary>
            Natural height of the KinectUserViewer in pixels.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.DoubleEpsilon">
            <summary>
            Smallest such that 1.0+DoubleEpsilon != 1.0
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.ImageBackgroundProperty">
            <summary>
            Dependency property for the ImageBackground property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.UserColoringModeProperty">
            <summary>
            Dependency property for the UserColoringMode property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.EngagedUserColorProperty">
            <summary>
            Dependency property for the EngagedUserColor property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.DefaultUserColorProperty">
            <summary>
            Dependency property for the DefaultUserColor property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.UserColorsProperty">
            <summary>
            Dependency property for the UserColors property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.kinectRegionBinder">
            <summary>
            Binds KinectRegion to KinectUserViewer.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.depthImageProcessor">
            <summary>
            Internal depth image processor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.writeableBitmap">
            <summary>
            Writeable bitmap used to render the depth image.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.Wpf.Controls.KinectUserViewer"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.MeasureOverride(System.Windows.Size)">
            <summary>
            Updates DesiredSize of KinectUserViewer.
            </summary>
            <param name="availableSize">The "upper limit" that the KinectUserViewer should not exceed.</param>
            <returns>KinectUserViewer's desired size.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.ArrangeOverride(System.Windows.Size)">
            <summary>
            Override for ArrangeOverride.
            </summary>
            <param name="finalSize">The final size that the KinectUserViewer is being given.</param>
            <returns>The final size the KinectUserViewer needs.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draw the image from the bitmap.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Create new DepthImageProcessor if render size was changed.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.ComputeScaleFactor(System.Windows.Size,System.Windows.Size)">
            <summary>
            Helper function that computes scale factors depending on target size and content size.
            </summary>
            <param name="availableSize">Size into which the content is being fitted.</param>
            <param name="contentSize">Size of the content measured unconstrained.</param>
            <returns>The scale factor to apply.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.OnDepthImageProcessorImageReady(System.Object,Microsoft.Kinect.Wpf.Controls.DepthImageProcessedEventArgs)">
            <summary>
            DepthImageProcessor handler.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.OnKinectRegionChanged(System.Object,Microsoft.Kinect.Wpf.Controls.KinectRegion,Microsoft.Kinect.Wpf.Controls.KinectRegion)">
            <summary>
            KinectRegion changed handler.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.OnKinectSensorChanged(System.Object,Microsoft.Kinect.KinectSensor,Microsoft.Kinect.KinectSensor)">
            <summary>
            KinectSensor changed handler.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.OnEngagedUserColorPropertyChanged(System.Windows.Media.Color)">
            <summary>
            EngagedUserColor property changed handler.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.OnUserColoringModePropertyChanged(Microsoft.Kinect.Wpf.Controls.UserColoringMode)">
            <summary>
            UserColoringMode property changed handler.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.OnDefaultUserColorPropertyChanged(System.Windows.Media.Color)">
            <summary>
            DefaultUserColor property changed handler.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.OnUserColorsPropertyChanged(System.Collections.Generic.IDictionary{System.UInt64,System.Windows.Media.Color})">
            <summary>
            UserColors property changed handler.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.KinectSensor">
            <summary>
            The KinectSensor supplying depth image data.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.ImageBackground">
            <summary>
            Image background brush.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.UserColoringMode">
            <summary>
            Coloring mode that indicates how the appropriate color for each user in scene
            will be determined.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.EngagedUserColor">
            <summary>
            Engaged user color.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.DefaultUserColor">
            <summary>
            Default user color.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.KinectUserViewer.UserColors">
            <summary>
            Dictionary mapping user tracking Ids to colors corresponding to those users,
            used when UserColoringMode is Manual.
            </summary>
            <remarks>
              <para>
              KinectUserViewer never modify the contents of UserColors dictionary.
              </para>
              <para>
              KinectUserViewer will read from UserColors every time it receives a new depth
              frame, to rebuild the coloring table at the beginning of a coloring pass, so
              it is not necessary to notify the KinectUserViewer of changes within this
              dictionary.
              </para>
              <para>
              UserColors is only expected to be accessed from the KinectUserViewer dispatcher
              thread.
              </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.SliderController.#ctor(System.Windows.FrameworkElement,Microsoft.Kinect.Toolkit.Input.ManipulatableModel,Microsoft.Kinect.Wpf.Controls.KinectRegion)">
            <summary>
            Constructor
            </summary>
            <param name="element">Element that controller updates</param>
            <param name="model">Model to subscribe to</param>
            <param name="kinectRegion">Kinect region that element resides in</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.SliderController.Dispose">
            <summary>
            Handles cleanup
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.SliderController.OnManipulationStarted(System.Object,Microsoft.Kinect.Input.KinectManipulationStartedEventArgs)">
            <summary>
            Handler for ManipulationStarted events
            </summary>
            <param name="sender">Manipulatable model that fired the event</param>
            <param name="e">Args from the model for event handling</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.SliderController.OnManipulationUpdated(System.Object,Microsoft.Kinect.Input.KinectManipulationUpdatedEventArgs)">
            <summary>
            Handler for ManipulationUpdated events
            </summary>
            <param name="sender">Manipulatable model that fired the event</param>
            <param name="e">Args from the model for event handling</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.SliderController.SnapToNearestTick(System.Windows.Controls.Slider)">
            <summary>
            Snaps the slider knob to the nearest tick
            </summary>
            <param name="slider">Slider to manipulate</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.SliderController.OnManipulationInertiaStarting(System.Object,Microsoft.Kinect.Input.KinectManipulationInertiaStartingEventArgs)">
            <summary>
            Handler for ManipulationInertiaStarting events
            </summary>
            <param name="sender">Manipulatable model that fired the event</param>
            <param name="e">Args from the model for event handling</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.SliderController.OnManipulationCompleted(System.Object,Microsoft.Kinect.Input.KinectManipulationCompletedEventArgs)">
            <summary>
            Handler for ManipulationCompleted events
            </summary>
            <param name="sender">Manipulatable model that fired the event</param>
            <param name="e">Args from the model for event handling</param>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.SliderController.ManipulatableInputModel">
            <summary>
            Gets the manipulatable model that the controller is subscribed to
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Wpf.Controls.SliderController.Element">
            <summary>
            Gets the element that the controller updates
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.SpriteSheet">
            <summary>
            This sprite sheet user control enables a sprite sheet to be displayed and animated.
            </summary>
            <summary>
            SpriteSheet
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.SpriteSheet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.Wpf.Controls.SpriteSheet"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.SpriteSheet.SetScaleX(System.Single)">
            <summary>
            Setting -1 or 1 will flip horizontally to support mirroring of a sprite
            </summary>
            <param name="scaleX">the x scale</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.SpriteSheet.SetTranslation(System.Single,System.Single)">
            <summary>
            This seeks the appropriate location in the sprite sheet to position at the origin of this element.
            </summary>
            <param name="horizontalOffset">the x location</param>
            <param name="verticalOffset">the y location</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.SpriteSheet.SetSpriteSheetDefinition(Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition)">
            <summary>
            This sets the <see cref="T:Microsoft.Kinect.Toolkit.Input.CursorSpriteSheetDefinition"/> that the cursor uses.
            </summary>
            <param name="cursorSpriteSheetDefinition">the sprite sheet definition</param>
        </member>
        <member name="M:Microsoft.Kinect.Wpf.Controls.SpriteSheet.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.UserColoringMode">
            <summary>
            Coloring modes that indicate how the appropriate color for each user in scene
            will be determined by <see cref="T:Microsoft.Kinect.Wpf.Controls.KinectUserViewer"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.UserColoringMode.HighlightEngaged">
            <summary>
            Engaged users will be highlighted using KinectUserViewer.EngagedUserColor
            and all other users will be colored with KinectUserViewer.DefaultUserColor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.UserColoringMode.Manual">
            <summary>
            Users specified in KinectUserViewer.UserColors will get colored as specified
            and all other users will be colored with KinectUserViewer.DefaultUserColor.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Wpf.Controls.ZoomMode">
            <summary>
            Zoom mode for an element
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.ZoomMode.Disabled">
            <summary>
            Zoom will not function
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Wpf.Controls.ZoomMode.Enabled">
            <summary>
            Zoom will function
            </summary>
        </member>
    </members>
</doc>

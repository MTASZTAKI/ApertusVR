{
  "source": "doc/api/all.md",
  "desc": [
    {
      "type": "html",
      "pre": false,
      "text": "<!--lint disable prohibited-strings-->\n"
    },
    {
      "type": "html",
      "pre": false,
      "text": "<!-- [start-include:documentation.md] -->\n"
    }
  ],
  "introduced_in": "v0.10.0",
  "miscs": [
    {
      "textRaw": "About this Documentation",
      "name": "About this Documentation",
      "introduced_in": "v0.10.0",
      "type": "misc",
      "desc": "<p>The goal of this documentation is to comprehensively explain the Node.js\nAPI, both from a reference as well as a conceptual point of view. Each\nsection describes a built-in module or high-level concept.</p>\n<p>Where appropriate, property types, method arguments, and the arguments\nprovided to event handlers are detailed in a list underneath the topic\nheading.</p>\n",
      "miscs": [
        {
          "textRaw": "Contributing",
          "name": "contributing",
          "desc": "<p>If errors are found in this documentation, please <a href=\"https://github.com/nodejs/node/issues/new\">submit an issue</a>\nor see <a href=\"https://github.com/nodejs/node/blob/master/CONTRIBUTING.md\">the contributing guide</a> for directions on how to submit a patch.</p>\n<p>Every file is generated based on the corresponding <code>.md</code> file in the\n<code>doc/api/</code> folder in Node.js&#39;s source tree. The documentation is generated\nusing the <code>tools/doc/generate.js</code> program. An HTML template is located at\n<code>doc/template.html</code>.</p>\n",
          "type": "misc",
          "displayName": "Contributing"
        },
        {
          "textRaw": "Stability Index",
          "name": "Stability Index",
          "type": "misc",
          "desc": "<p>Throughout the documentation are indications of a section&#39;s\nstability. The Node.js API is still somewhat changing, and as it\nmatures, certain parts are more reliable than others. Some are so\nproven, and so relied upon, that they are unlikely to ever change at\nall. Others are brand new and experimental, or known to be hazardous\nand in the process of being redesigned.</p>\n<p>The stability indices are as follows:</p>\n<pre><code class=\"lang-txt\">Stability: 0 - Deprecated. This feature is known to be problematic, and changes\nmay be planned. Do not rely on it. Use of the feature may cause warnings to be\nemitted. Backwards compatibility across major versions should not be expected.\n</code></pre>\n<pre><code class=\"lang-txt\">Stability: 1 - Experimental. This feature is still under active development and\nsubject to non-backwards compatible changes, or even removal, in any future\nversion. Use of the feature is not recommended in production environments.\nExperimental features are not subject to the Node.js Semantic Versioning model.\n</code></pre>\n<pre><code class=\"lang-txt\">Stability: 2 - Stable. The API has proven satisfactory. Compatibility with the\nnpm ecosystem is a high priority, and will not be broken unless absolutely\nnecessary.\n</code></pre>\n<p>Caution must be used when making use of <code>Experimental</code> features, particularly\nwithin modules that may be used as dependencies (or dependencies of\ndependencies) within a Node.js application. End users may not be aware that\nexperimental features are being used, and therefore may experience unexpected\nfailures or behavior changes when API modifications occur. To help avoid such\nsurprises, <code>Experimental</code> features may require a command-line flag to\nexplicitly enable them, or may cause a process warning to be emitted.\nBy default, such warnings are printed to <a href=\"process.html#process_process_stderr\"><code>stderr</code></a> and may be handled by\nattaching a listener to the <a href=\"process.html#process_event_warning\"><code>&#39;warning&#39;</code></a> event.</p>\n"
        },
        {
          "textRaw": "JSON Output",
          "name": "json_output",
          "meta": {
            "added": [
              "v0.6.12"
            ],
            "changes": []
          },
          "stability": 1,
          "stabilityText": "Experimental",
          "desc": "<p>Every <code>.html</code> document has a corresponding <code>.json</code> document presenting\nthe same information in a structured manner. This feature is\nexperimental, and added for the benefit of IDEs and other utilities that\nwish to do programmatic things with the documentation.</p>\n",
          "type": "misc",
          "displayName": "JSON Output"
        },
        {
          "textRaw": "Syscalls and man pages",
          "name": "syscalls_and_man_pages",
          "desc": "<p>System calls like open(2) and read(2) define the interface between user programs\nand the underlying operating system. Node.js functions\nwhich simply wrap a syscall,\nlike <a href=\"#fs_fs_open_path_flags_mode_callback\"><code>fs.open()</code></a>, will document that. The docs link to the corresponding man\npages (short for manual pages) which describe how the syscalls work.</p>\n<p>Some syscalls, like lchown(2), are BSD-specific. That means, for\nexample, that <a href=\"fs.html#fs_fs_lchown_path_uid_gid_callback\"><code>fs.lchown()</code></a> only works on macOS and other BSD-derived\nsystems, and is not available on Linux.</p>\n<p>Most Unix syscalls have Windows equivalents, but behavior may differ on Windows\nrelative to Linux and macOS. For an example of the subtle ways in which it&#39;s\nsometimes impossible to replace Unix syscall semantics on Windows, see <a href=\"https://github.com/nodejs/node/issues/4760\">Node\nissue 4760</a>.</p>\n<!-- [end-include:documentation.md] -->\n<!-- [start-include:synopsis.md] -->\n",
          "type": "misc",
          "displayName": "Syscalls and man pages"
        }
      ]
    },
    {
      "textRaw": "Usage",
      "name": "Usage",
      "introduced_in": "v0.10.0",
      "type": "misc",
      "desc": "<p><code>node [options] [V8 options] [script.js | -e &quot;script&quot; | - ] [arguments]</code></p>\n<p>Please see the <a href=\"cli.html#cli_command_line_options\">Command Line Options</a> document for information about\ndifferent options and ways to run scripts with Node.js.</p>\n<h2>Example</h2>\n<p>An example of a <a href=\"http.html\">web server</a> written with Node.js which responds with\n<code>&#39;Hello World!&#39;</code>:</p>\n<p>Commands displayed in this document are shown starting with <code>$</code> or <code>&gt;</code>\nto replicate how they would appear in a user&#39;s terminal.\nDo not include the <code>$</code> and <code>&gt;</code> character they are there to\nindicate the start of each command.</p>\n<p>There are many tutorials and examples that follow this\nconvention: <code>$</code> or <code>&gt;</code> for commands run as a regular user, and <code>#</code>\nfor commands that should be executed as an administrator.</p>\n<p>Lines that don’t start with <code>$</code> or <code>&gt;</code> character are typically showing\nthe output of the previous command.</p>\n<p>Firstly, make sure to have downloaded and installed Node.js.\nSee <a href=\"https://nodejs.org/en/download/package-manager/\">this guide</a> for further install information.</p>\n<p>Now, create an empty project folder called <code>projects</code>, navigate into it:\nProject folder can be named base on user&#39;s current project title but\nthis example will use <code>projects</code> as the project folder.</p>\n<p>Linux and Mac:</p>\n<pre><code class=\"lang-console\">$ mkdir ~/projects\n$ cd ~/projects\n</code></pre>\n<p>Windows CMD:</p>\n<pre><code class=\"lang-console\">&gt; mkdir %USERPROFILE%\\projects\n&gt; cd %USERPROFILE%\\projects\n</code></pre>\n<p>Windows PowerShell:</p>\n<pre><code class=\"lang-console\">&gt; mkdir $env:USERPROFILE\\projects\n&gt; cd $env:USERPROFILE\\projects\n</code></pre>\n<p>Next, create a new source file in the <code>projects</code>\n folder and call it <code>hello-world.js</code>.</p>\n<p>In Node.js it is considered good style to use\nhyphens (<code>-</code>) or underscores (<code>_</code>) to separate\n multiple words in filenames.</p>\n<p>Open <code>hello-world.js</code> in any preferred text editor and\npaste in the following content.</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\n\nconst hostname = &#39;127.0.0.1&#39;;\nconst port = 3000;\n\nconst server = http.createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;);\n  res.end(&#39;Hello World!\\n&#39;);\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre>\n<p>Save the file, go back to the terminal window enter the following command:</p>\n<pre><code class=\"lang-console\">$ node hello-world.js\n</code></pre>\n<p>An output like this should appear in the terminal to indicate Node.js\nserver is running:</p>\n<pre><code class=\"lang-console\">Server running at http://127.0.0.1:3000/\n</code></pre>\n<p>Now, open any preferred web browser and visit <code>http://127.0.0.1:3000</code>.</p>\n<p>If the browser displays the string <code>Hello, world!</code>, that indicates\nthe server is working.</p>\n<p>Many of the examples in the documentation can be run similarly.</p>\n<!-- [end-include:synopsis.md] -->\n<!-- [start-include:assert.md] -->\n"
    },
    {
      "textRaw": "C++ Addons",
      "name": "C++ Addons",
      "introduced_in": "v0.10.0",
      "type": "misc",
      "desc": "<p>Node.js Addons are dynamically-linked shared objects, written in C++, that\ncan be loaded into Node.js using the <a href=\"modules.html#modules_require\"><code>require()</code></a> function, and used\njust as if they were an ordinary Node.js module. They are used primarily to\nprovide an interface between JavaScript running in Node.js and C/C++ libraries.</p>\n<p>At the moment, the method for implementing Addons is rather complicated,\ninvolving knowledge of several components and APIs:</p>\n<ul>\n<li><p>V8: the C++ library Node.js currently uses to provide the\nJavaScript implementation. V8 provides the mechanisms for creating objects,\ncalling functions, etc. V8&#39;s API is documented mostly in the\n<code>v8.h</code> header file (<code>deps/v8/include/v8.h</code> in the Node.js source\ntree), which is also available <a href=\"https://v8docs.nodesource.com/\">online</a>.</p>\n</li>\n<li><p><a href=\"https://github.com/libuv/libuv\">libuv</a>: The C library that implements the Node.js event loop, its worker\nthreads and all of the asynchronous behaviors of the platform. It also\nserves as a cross-platform abstraction library, giving easy, POSIX-like\naccess across all major operating systems to many common system tasks, such\nas interacting with the filesystem, sockets, timers, and system events. libuv\nalso provides a pthreads-like threading abstraction that may be used to\npower more sophisticated asynchronous Addons that need to move beyond the\nstandard event loop. Addon authors are encouraged to think about how to\navoid blocking the event loop with I/O or other time-intensive tasks by\noff-loading work via libuv to non-blocking system operations, worker threads\nor a custom use of libuv&#39;s threads.</p>\n</li>\n<li><p>Internal Node.js libraries. Node.js itself exports a number of C++ APIs\nthat Addons can use &mdash; the most important of which is the\n<code>node::ObjectWrap</code> class.</p>\n</li>\n<li><p>Node.js includes a number of other statically linked libraries including\nOpenSSL. These other libraries are located in the <code>deps/</code> directory in the\nNode.js source tree. Only the libuv, OpenSSL, V8 and zlib symbols are\npurposefully re-exported by Node.js and may be used to various extents by\nAddons.\nSee <a href=\"#addons_linking_to_node_js_own_dependencies\">Linking to Node.js&#39; own dependencies</a> for additional information.</p>\n</li>\n</ul>\n<p>All of the following examples are available for <a href=\"https://github.com/nodejs/node-addon-examples\">download</a> and may\nbe used as the starting-point for an Addon.</p>\n",
      "miscs": [
        {
          "textRaw": "Hello world",
          "name": "hello_world",
          "desc": "<p>This &quot;Hello world&quot; example is a simple Addon, written in C++, that is the\nequivalent of the following JavaScript code:</p>\n<pre><code class=\"lang-js\">module.exports.hello = () =&gt; &#39;world&#39;;\n</code></pre>\n<p>First, create the file <code>hello.cc</code>:</p>\n<pre><code class=\"lang-cpp\">// hello.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid Method(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n  args.GetReturnValue().Set(String::NewFromUtf8(isolate, &quot;world&quot;));\n}\n\nvoid init(Local&lt;Object&gt; exports) {\n  NODE_SET_METHOD(exports, &quot;hello&quot;, Method);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, init)\n\n}  // namespace demo\n</code></pre>\n<p>Note that all Node.js Addons must export an initialization function following\nthe pattern:</p>\n<pre><code class=\"lang-cpp\">void Initialize(Local&lt;Object&gt; exports);\nNODE_MODULE(NODE_GYP_MODULE_NAME, Initialize)\n</code></pre>\n<p>There is no semi-colon after <code>NODE_MODULE</code> as it&#39;s not a function (see\n<code>node.h</code>).</p>\n<p>The <code>module_name</code> must match the filename of the final binary (excluding\nthe <code>.node</code> suffix).</p>\n<p>In the <code>hello.cc</code> example, then, the initialization function is <code>init</code> and the\nAddon module name is <code>addon</code>.</p>\n",
          "modules": [
            {
              "textRaw": "Building",
              "name": "building",
              "desc": "<p>Once the source code has been written, it must be compiled into the binary\n<code>addon.node</code> file. To do so, create a file called <code>binding.gyp</code> in the\ntop-level of the project describing the build configuration of the module\nusing a JSON-like format. This file is used by <a href=\"https://github.com/nodejs/node-gyp\">node-gyp</a> — a tool written\nspecifically to compile Node.js Addons.</p>\n<pre><code class=\"lang-json\">{\n  &quot;targets&quot;: [\n    {\n      &quot;target_name&quot;: &quot;addon&quot;,\n      &quot;sources&quot;: [ &quot;hello.cc&quot; ]\n    }\n  ]\n}\n</code></pre>\n<p>A version of the <code>node-gyp</code> utility is bundled and distributed with\nNode.js as part of <code>npm</code>. This version is not made directly available for\ndevelopers to use and is intended only to support the ability to use the\n<code>npm install</code> command to compile and install Addons. Developers who wish to\nuse <code>node-gyp</code> directly can install it using the command\n<code>npm install -g node-gyp</code>. See the <code>node-gyp</code> <a href=\"https://github.com/nodejs/node-gyp#installation\">installation instructions</a> for\nmore information, including platform-specific requirements.</p>\n<p>Once the <code>binding.gyp</code> file has been created, use <code>node-gyp configure</code> to\ngenerate the appropriate project build files for the current platform. This\nwill generate either a <code>Makefile</code> (on Unix platforms) or a <code>vcxproj</code> file\n(on Windows) in the <code>build/</code> directory.</p>\n<p>Next, invoke the <code>node-gyp build</code> command to generate the compiled <code>addon.node</code>\nfile. This will be put into the <code>build/Release/</code> directory.</p>\n<p>When using <code>npm install</code> to install a Node.js Addon, npm uses its own bundled\nversion of <code>node-gyp</code> to perform this same set of actions, generating a\ncompiled version of the Addon for the user&#39;s platform on demand.</p>\n<p>Once built, the binary Addon can be used from within Node.js by pointing\n<a href=\"modules.html#modules_require\"><code>require()</code></a> to the built <code>addon.node</code> module:</p>\n<pre><code class=\"lang-js\">// hello.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\nconsole.log(addon.hello());\n// Prints: &#39;world&#39;\n</code></pre>\n<p>Please see the examples below for further information or\n<a href=\"https://github.com/arturadib/node-qt\">https://github.com/arturadib/node-qt</a> for an example in production.</p>\n<p>Because the exact path to the compiled Addon binary can vary depending on how\nit is compiled (i.e. sometimes it may be in <code>./build/Debug/</code>), Addons can use\nthe <a href=\"https://github.com/TooTallNate/node-bindings\">bindings</a> package to load the compiled module.</p>\n<p>Note that while the <code>bindings</code> package implementation is more sophisticated\nin how it locates Addon modules, it is essentially using a try-catch pattern\nsimilar to:</p>\n<pre><code class=\"lang-js\">try {\n  return require(&#39;./build/Release/addon.node&#39;);\n} catch (err) {\n  return require(&#39;./build/Debug/addon.node&#39;);\n}\n</code></pre>\n",
              "type": "module",
              "displayName": "Building"
            },
            {
              "textRaw": "Linking to Node.js' own dependencies",
              "name": "linking_to_node.js'_own_dependencies",
              "desc": "<p>Node.js uses a number of statically linked libraries such as V8, libuv and\nOpenSSL. All Addons are required to link to V8 and may link to any of the\nother dependencies as well. Typically, this is as simple as including\nthe appropriate <code>#include &lt;...&gt;</code> statements (e.g. <code>#include &lt;v8.h&gt;</code>) and\n<code>node-gyp</code> will locate the appropriate headers automatically. However, there\nare a few caveats to be aware of:</p>\n<ul>\n<li><p>When <code>node-gyp</code> runs, it will detect the specific release version of Node.js\nand download either the full source tarball or just the headers. If the full\nsource is downloaded, Addons will have complete access to the full set of\nNode.js dependencies. However, if only the Node.js headers are downloaded, then\nonly the symbols exported by Node.js will be available.</p>\n</li>\n<li><p><code>node-gyp</code> can be run using the <code>--nodedir</code> flag pointing at a local Node.js\nsource image. Using this option, the Addon will have access to the full set of\ndependencies.</p>\n</li>\n</ul>\n",
              "type": "module",
              "displayName": "Linking to Node.js' own dependencies"
            },
            {
              "textRaw": "Loading Addons using require()",
              "name": "loading_addons_using_require()",
              "desc": "<p>The filename extension of the compiled Addon binary is <code>.node</code> (as opposed\nto <code>.dll</code> or <code>.so</code>). The <a href=\"modules.html#modules_require\"><code>require()</code></a> function is written to look for\nfiles with the <code>.node</code> file extension and initialize those as dynamically-linked\nlibraries.</p>\n<p>When calling <a href=\"modules.html#modules_require\"><code>require()</code></a>, the <code>.node</code> extension can usually be\nomitted and Node.js will still find and initialize the Addon. One caveat,\nhowever, is that Node.js will first attempt to locate and load modules or\nJavaScript files that happen to share the same base name. For instance, if\nthere is a file <code>addon.js</code> in the same directory as the binary <code>addon.node</code>,\nthen <a href=\"modules.html#modules_require\"><code>require(&#39;addon&#39;)</code></a> will give precedence to the <code>addon.js</code> file\nand load it instead.</p>\n",
              "type": "module",
              "displayName": "Loading Addons using require()"
            }
          ],
          "type": "misc",
          "displayName": "Hello world"
        },
        {
          "textRaw": "Native Abstractions for Node.js",
          "name": "native_abstractions_for_node.js",
          "desc": "<p>Each of the examples illustrated in this document make direct use of the\nNode.js and V8 APIs for implementing Addons. It is important to understand\nthat the V8 API can, and has, changed dramatically from one V8 release to the\nnext (and one major Node.js release to the next). With each change, Addons may\nneed to be updated and recompiled in order to continue functioning. The Node.js\nrelease schedule is designed to minimize the frequency and impact of such\nchanges but there is little that Node.js can do currently to ensure stability\nof the V8 APIs.</p>\n<p>The <a href=\"https://github.com/nodejs/nan\">Native Abstractions for Node.js</a> (or <code>nan</code>) provide a set of tools that\nAddon developers are recommended to use to keep compatibility between past and\nfuture releases of V8 and Node.js. See the <code>nan</code> <a href=\"https://github.com/nodejs/nan/tree/master/examples/\">examples</a> for an\nillustration of how it can be used.</p>\n",
          "type": "misc",
          "displayName": "Native Abstractions for Node.js"
        },
        {
          "textRaw": "N-API",
          "name": "n-api",
          "stability": 1,
          "stabilityText": "Experimental",
          "desc": "<p>N-API is an API for building native Addons. It is independent from\nthe underlying JavaScript runtime (e.g. V8) and is maintained as part of\nNode.js itself. This API will be Application Binary Interface (ABI) stable\nacross version of Node.js. It is intended to insulate Addons from\nchanges in the underlying JavaScript engine and allow modules\ncompiled for one version to run on later versions of Node.js without\nrecompilation. Addons are built/packaged with the same approach/tools\noutlined in this document (node-gyp, etc.). The only difference is the\nset of APIs that are used by the native code. Instead of using the V8\nor <a href=\"https://github.com/nodejs/nan\">Native Abstractions for Node.js</a> APIs, the functions available\nin the N-API are used.</p>\n<p>To use N-API in the above &quot;Hello world&quot; example, replace the content of\n<code>hello.cc</code> with the following. All other instructions remain the same.</p>\n<pre><code class=\"lang-cpp\">// hello.cc using N-API\n#include &lt;node_api.h&gt;\n\nnamespace demo {\n\nnapi_value Method(napi_env env, napi_callback_info args) {\n  napi_value greeting;\n  napi_status status;\n\n  status = napi_create_string_utf8(env, &quot;hello&quot;, NAPI_AUTO_LENGTH, &amp;greeting);\n  if (status != napi_ok) return nullptr;\n  return greeting;\n}\n\nnapi_value init(napi_env env, napi_value exports) {\n  napi_status status;\n  napi_value fn;\n\n  status = napi_create_function(env, nullptr, 0, Method, nullptr, &amp;fn);\n  if (status != napi_ok) return nullptr;\n\n  status = napi_set_named_property(env, exports, &quot;hello&quot;, fn);\n  if (status != napi_ok) return nullptr;\n  return exports;\n}\n\nNAPI_MODULE(NODE_GYP_MODULE_NAME, init)\n\n}  // namespace demo\n</code></pre>\n<p>The functions available and how to use them are documented in the\nsection titled <a href=\"n-api.html\">C/C++ Addons - N-API</a>.</p>\n",
          "type": "misc",
          "displayName": "N-API"
        },
        {
          "textRaw": "Addon examples",
          "name": "addon_examples",
          "desc": "<p>Following are some example Addons intended to help developers get started. The\nexamples make use of the V8 APIs. Refer to the online <a href=\"https://v8docs.nodesource.com/\">V8 reference</a>\nfor help with the various V8 calls, and V8&#39;s <a href=\"https://github.com/v8/v8/wiki/Embedder&#39;s%20Guide\">Embedder&#39;s Guide</a> for an\nexplanation of several concepts used such as handles, scopes, function\ntemplates, etc.</p>\n<p>Each of these examples using the following <code>binding.gyp</code> file:</p>\n<pre><code class=\"lang-json\">{\n  &quot;targets&quot;: [\n    {\n      &quot;target_name&quot;: &quot;addon&quot;,\n      &quot;sources&quot;: [ &quot;addon.cc&quot; ]\n    }\n  ]\n}\n</code></pre>\n<p>In cases where there is more than one <code>.cc</code> file, simply add the additional\nfilename to the <code>sources</code> array:</p>\n<pre><code class=\"lang-json\">&quot;sources&quot;: [&quot;addon.cc&quot;, &quot;myexample.cc&quot;]\n</code></pre>\n<p>Once the <code>binding.gyp</code> file is ready, the example Addons can be configured and\nbuilt using <code>node-gyp</code>:</p>\n<pre><code class=\"lang-console\">$ node-gyp configure build\n</code></pre>\n",
          "modules": [
            {
              "textRaw": "Function arguments",
              "name": "function_arguments",
              "desc": "<p>Addons will typically expose objects and functions that can be accessed from\nJavaScript running within Node.js. When functions are invoked from JavaScript,\nthe input arguments and return value must be mapped to and from the C/C++\ncode.</p>\n<p>The following example illustrates how to read function arguments passed from\nJavaScript and how to return a result:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::Exception;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\n// This is the implementation of the &quot;add&quot; method\n// Input arguments are passed using the\n// const FunctionCallbackInfo&lt;Value&gt;&amp; args struct\nvoid Add(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  // Check the number of arguments passed.\n  if (args.Length() &lt; 2) {\n    // Throw an Error that is passed back to JavaScript\n    isolate-&gt;ThrowException(Exception::TypeError(\n        String::NewFromUtf8(isolate, &quot;Wrong number of arguments&quot;)));\n    return;\n  }\n\n  // Check the argument types\n  if (!args[0]-&gt;IsNumber() || !args[1]-&gt;IsNumber()) {\n    isolate-&gt;ThrowException(Exception::TypeError(\n        String::NewFromUtf8(isolate, &quot;Wrong arguments&quot;)));\n    return;\n  }\n\n  // Perform the operation\n  double value = args[0]-&gt;NumberValue() + args[1]-&gt;NumberValue();\n  Local&lt;Number&gt; num = Number::New(isolate, value);\n\n  // Set the return value (using the passed in\n  // FunctionCallbackInfo&lt;Value&gt;&amp;)\n  args.GetReturnValue().Set(num);\n}\n\nvoid Init(Local&lt;Object&gt; exports) {\n  NODE_SET_METHOD(exports, &quot;add&quot;, Add);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Init)\n\n}  // namespace demo\n</code></pre>\n<p>Once compiled, the example Addon can be required and used from within Node.js:</p>\n<pre><code class=\"lang-js\">// test.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\nconsole.log(&#39;This should be eight:&#39;, addon.add(3, 5));\n</code></pre>\n",
              "type": "module",
              "displayName": "Function arguments"
            },
            {
              "textRaw": "Callbacks",
              "name": "callbacks",
              "desc": "<p>It is common practice within Addons to pass JavaScript functions to a C++\nfunction and execute them from there. The following example illustrates how\nto invoke such callbacks:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Null;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid RunCallback(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n  Local&lt;Function&gt; cb = Local&lt;Function&gt;::Cast(args[0]);\n  const unsigned argc = 1;\n  Local&lt;Value&gt; argv[argc] = { String::NewFromUtf8(isolate, &quot;hello world&quot;) };\n  cb-&gt;Call(Null(isolate), argc, argv);\n}\n\nvoid Init(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\n  NODE_SET_METHOD(module, &quot;exports&quot;, RunCallback);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Init)\n\n}  // namespace demo\n</code></pre>\n<p>Note that this example uses a two-argument form of <code>Init()</code> that receives\nthe full <code>module</code> object as the second argument. This allows the Addon\nto completely overwrite <code>exports</code> with a single function instead of\nadding the function as a property of <code>exports</code>.</p>\n<p>To test it, run the following JavaScript:</p>\n<pre><code class=\"lang-js\">// test.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\naddon((msg) =&gt; {\n  console.log(msg);\n// Prints: &#39;hello world&#39;\n});\n</code></pre>\n<p>Note that, in this example, the callback function is invoked synchronously.</p>\n",
              "type": "module",
              "displayName": "Callbacks"
            },
            {
              "textRaw": "Object factory",
              "name": "object_factory",
              "desc": "<p>Addons can create and return new objects from within a C++ function as\nillustrated in the following example. An object is created and returned with a\nproperty <code>msg</code> that echoes the string passed to <code>createObject()</code>:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  Local&lt;Object&gt; obj = Object::New(isolate);\n  obj-&gt;Set(String::NewFromUtf8(isolate, &quot;msg&quot;), args[0]-&gt;ToString());\n\n  args.GetReturnValue().Set(obj);\n}\n\nvoid Init(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\n  NODE_SET_METHOD(module, &quot;exports&quot;, CreateObject);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Init)\n\n}  // namespace demo\n</code></pre>\n<p>To test it in JavaScript:</p>\n<pre><code class=\"lang-js\">// test.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\nconst obj1 = addon(&#39;hello&#39;);\nconst obj2 = addon(&#39;world&#39;);\nconsole.log(obj1.msg, obj2.msg);\n// Prints: &#39;hello world&#39;\n</code></pre>\n",
              "type": "module",
              "displayName": "Object factory"
            },
            {
              "textRaw": "Function factory",
              "name": "function_factory",
              "desc": "<p>Another common scenario is creating JavaScript functions that wrap C++\nfunctions and returning those back to JavaScript:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid MyFunction(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n  args.GetReturnValue().Set(String::NewFromUtf8(isolate, &quot;hello world&quot;));\n}\n\nvoid CreateFunction(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, MyFunction);\n  Local&lt;Function&gt; fn = tpl-&gt;GetFunction();\n\n  // omit this to make it anonymous\n  fn-&gt;SetName(String::NewFromUtf8(isolate, &quot;theFunction&quot;));\n\n  args.GetReturnValue().Set(fn);\n}\n\nvoid Init(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\n  NODE_SET_METHOD(module, &quot;exports&quot;, CreateFunction);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, Init)\n\n}  // namespace demo\n</code></pre>\n<p>To test:</p>\n<pre><code class=\"lang-js\">// test.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\nconst fn = addon();\nconsole.log(fn());\n// Prints: &#39;hello world&#39;\n</code></pre>\n",
              "type": "module",
              "displayName": "Function factory"
            },
            {
              "textRaw": "Wrapping C++ objects",
              "name": "wrapping_c++_objects",
              "desc": "<p>It is also possible to wrap C++ objects/classes in a way that allows new\ninstances to be created using the JavaScript <code>new</code> operator:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nnamespace demo {\n\nusing v8::Local;\nusing v8::Object;\n\nvoid InitAll(Local&lt;Object&gt; exports) {\n  MyObject::Init(exports);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)\n\n}  // namespace demo\n</code></pre>\n<p>Then, in <code>myobject.h</code>, the wrapper class inherits from <code>node::ObjectWrap</code>:</p>\n<pre><code class=\"lang-cpp\">// myobject.h\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n#include &lt;node_object_wrap.h&gt;\n\nnamespace demo {\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Local&lt;v8::Object&gt; exports);\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static void PlusOne(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  double value_;\n};\n\n}  // namespace demo\n\n#endif\n</code></pre>\n<p>In <code>myobject.cc</code>, implement the various methods that are to be exposed.\nBelow, the method <code>plusOne()</code> is exposed by adding it to the constructor&#39;s\nprototype:</p>\n<pre><code class=\"lang-cpp\">// myobject.cc\n#include &quot;myobject.h&quot;\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::Persistent;\nusing v8::String;\nusing v8::Value;\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Local&lt;Object&gt; exports) {\n  Isolate* isolate = exports-&gt;GetIsolate();\n\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New);\n  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, &quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n\n  // Prototype\n  NODE_SET_PROTOTYPE_METHOD(tpl, &quot;plusOne&quot;, PlusOne);\n\n  constructor.Reset(isolate, tpl-&gt;GetFunction());\n  exports-&gt;Set(String::NewFromUtf8(isolate, &quot;MyObject&quot;),\n               tpl-&gt;GetFunction());\n}\n\nvoid MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n    MyObject* obj = new MyObject(value);\n    obj-&gt;Wrap(args.This());\n    args.GetReturnValue().Set(args.This());\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local&lt;Value&gt; argv[argc] = { args[0] };\n    Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n    Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n    Local&lt;Object&gt; result =\n        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n    args.GetReturnValue().Set(result);\n  }\n}\n\nvoid MyObject::PlusOne(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());\n  obj-&gt;value_ += 1;\n\n  args.GetReturnValue().Set(Number::New(isolate, obj-&gt;value_));\n}\n\n}  // namespace demo\n</code></pre>\n<p>To build this example, the <code>myobject.cc</code> file must be added to the\n<code>binding.gyp</code>:</p>\n<pre><code class=\"lang-json\">{\n  &quot;targets&quot;: [\n    {\n      &quot;target_name&quot;: &quot;addon&quot;,\n      &quot;sources&quot;: [\n        &quot;addon.cc&quot;,\n        &quot;myobject.cc&quot;\n      ]\n    }\n  ]\n}\n</code></pre>\n<p>Test it with:</p>\n<pre><code class=\"lang-js\">// test.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\nconst obj = new addon.MyObject(10);\nconsole.log(obj.plusOne());\n// Prints: 11\nconsole.log(obj.plusOne());\n// Prints: 12\nconsole.log(obj.plusOne());\n// Prints: 13\n</code></pre>\n",
              "type": "module",
              "displayName": "Wrapping C++ objects"
            },
            {
              "textRaw": "Factory of wrapped objects",
              "name": "factory_of_wrapped_objects",
              "desc": "<p>Alternatively, it is possible to use a factory pattern to avoid explicitly\ncreating object instances using the JavaScript <code>new</code> operator:</p>\n<pre><code class=\"lang-js\">const obj = addon.createObject();\n// instead of:\n// const obj = new addon.Object();\n</code></pre>\n<p>First, the <code>createObject()</code> method is implemented in <code>addon.cc</code>:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  MyObject::NewInstance(args);\n}\n\nvoid InitAll(Local&lt;Object&gt; exports, Local&lt;Object&gt; module) {\n  MyObject::Init(exports-&gt;GetIsolate());\n\n  NODE_SET_METHOD(module, &quot;exports&quot;, CreateObject);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)\n\n}  // namespace demo\n</code></pre>\n<p>In <code>myobject.h</code>, the static method <code>NewInstance()</code> is added to handle\ninstantiating the object. This method takes the place of using <code>new</code> in\nJavaScript:</p>\n<pre><code class=\"lang-cpp\">// myobject.h\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n#include &lt;node_object_wrap.h&gt;\n\nnamespace demo {\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Isolate* isolate);\n  static void NewInstance(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static void PlusOne(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  double value_;\n};\n\n}  // namespace demo\n\n#endif\n</code></pre>\n<p>The implementation in <code>myobject.cc</code> is similar to the previous example:</p>\n<pre><code class=\"lang-cpp\">// myobject.cc\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::Persistent;\nusing v8::String;\nusing v8::Value;\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Isolate* isolate) {\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New);\n  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, &quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n\n  // Prototype\n  NODE_SET_PROTOTYPE_METHOD(tpl, &quot;plusOne&quot;, PlusOne);\n\n  constructor.Reset(isolate, tpl-&gt;GetFunction());\n}\n\nvoid MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n    MyObject* obj = new MyObject(value);\n    obj-&gt;Wrap(args.This());\n    args.GetReturnValue().Set(args.This());\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local&lt;Value&gt; argv[argc] = { args[0] };\n    Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n    Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n    Local&lt;Object&gt; instance =\n        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n    args.GetReturnValue().Set(instance);\n  }\n}\n\nvoid MyObject::NewInstance(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  const unsigned argc = 1;\n  Local&lt;Value&gt; argv[argc] = { args[0] };\n  Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n  Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n  Local&lt;Object&gt; instance =\n      cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n\n  args.GetReturnValue().Set(instance);\n}\n\nvoid MyObject::PlusOne(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  MyObject* obj = ObjectWrap::Unwrap&lt;MyObject&gt;(args.Holder());\n  obj-&gt;value_ += 1;\n\n  args.GetReturnValue().Set(Number::New(isolate, obj-&gt;value_));\n}\n\n}  // namespace demo\n</code></pre>\n<p>Once again, to build this example, the <code>myobject.cc</code> file must be added to the\n<code>binding.gyp</code>:</p>\n<pre><code class=\"lang-json\">{\n  &quot;targets&quot;: [\n    {\n      &quot;target_name&quot;: &quot;addon&quot;,\n      &quot;sources&quot;: [\n        &quot;addon.cc&quot;,\n        &quot;myobject.cc&quot;\n      ]\n    }\n  ]\n}\n</code></pre>\n<p>Test it with:</p>\n<pre><code class=\"lang-js\">// test.js\nconst createObject = require(&#39;./build/Release/addon&#39;);\n\nconst obj = createObject(10);\nconsole.log(obj.plusOne());\n// Prints: 11\nconsole.log(obj.plusOne());\n// Prints: 12\nconsole.log(obj.plusOne());\n// Prints: 13\n\nconst obj2 = createObject(20);\nconsole.log(obj2.plusOne());\n// Prints: 21\nconsole.log(obj2.plusOne());\n// Prints: 22\nconsole.log(obj2.plusOne());\n// Prints: 23\n</code></pre>\n",
              "type": "module",
              "displayName": "Factory of wrapped objects"
            },
            {
              "textRaw": "Passing wrapped objects around",
              "name": "passing_wrapped_objects_around",
              "desc": "<p>In addition to wrapping and returning C++ objects, it is possible to pass\nwrapped objects around by unwrapping them with the Node.js helper function\n<code>node::ObjectWrap::Unwrap</code>. The following examples shows a function <code>add()</code>\nthat can take two <code>MyObject</code> objects as input arguments:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;node.h&gt;\n#include &lt;node_object_wrap.h&gt;\n#include &quot;myobject.h&quot;\n\nnamespace demo {\n\nusing v8::FunctionCallbackInfo;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Number;\nusing v8::Object;\nusing v8::String;\nusing v8::Value;\n\nvoid CreateObject(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  MyObject::NewInstance(args);\n}\n\nvoid Add(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  MyObject* obj1 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\n      args[0]-&gt;ToObject());\n  MyObject* obj2 = node::ObjectWrap::Unwrap&lt;MyObject&gt;(\n      args[1]-&gt;ToObject());\n\n  double sum = obj1-&gt;value() + obj2-&gt;value();\n  args.GetReturnValue().Set(Number::New(isolate, sum));\n}\n\nvoid InitAll(Local&lt;Object&gt; exports) {\n  MyObject::Init(exports-&gt;GetIsolate());\n\n  NODE_SET_METHOD(exports, &quot;createObject&quot;, CreateObject);\n  NODE_SET_METHOD(exports, &quot;add&quot;, Add);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, InitAll)\n\n}  // namespace demo\n</code></pre>\n<p>In <code>myobject.h</code>, a new public method is added to allow access to private values\nafter unwrapping the object.</p>\n<pre><code class=\"lang-cpp\">// myobject.h\n#ifndef MYOBJECT_H\n#define MYOBJECT_H\n\n#include &lt;node.h&gt;\n#include &lt;node_object_wrap.h&gt;\n\nnamespace demo {\n\nclass MyObject : public node::ObjectWrap {\n public:\n  static void Init(v8::Isolate* isolate);\n  static void NewInstance(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  inline double value() const { return value_; }\n\n private:\n  explicit MyObject(double value = 0);\n  ~MyObject();\n\n  static void New(const v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; args);\n  static v8::Persistent&lt;v8::Function&gt; constructor;\n  double value_;\n};\n\n}  // namespace demo\n\n#endif\n</code></pre>\n<p>The implementation of <code>myobject.cc</code> is similar to before:</p>\n<pre><code class=\"lang-cpp\">// myobject.cc\n#include &lt;node.h&gt;\n#include &quot;myobject.h&quot;\n\nnamespace demo {\n\nusing v8::Context;\nusing v8::Function;\nusing v8::FunctionCallbackInfo;\nusing v8::FunctionTemplate;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\nusing v8::Persistent;\nusing v8::String;\nusing v8::Value;\n\nPersistent&lt;Function&gt; MyObject::constructor;\n\nMyObject::MyObject(double value) : value_(value) {\n}\n\nMyObject::~MyObject() {\n}\n\nvoid MyObject::Init(Isolate* isolate) {\n  // Prepare constructor template\n  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::New(isolate, New);\n  tpl-&gt;SetClassName(String::NewFromUtf8(isolate, &quot;MyObject&quot;));\n  tpl-&gt;InstanceTemplate()-&gt;SetInternalFieldCount(1);\n\n  constructor.Reset(isolate, tpl-&gt;GetFunction());\n}\n\nvoid MyObject::New(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  if (args.IsConstructCall()) {\n    // Invoked as constructor: `new MyObject(...)`\n    double value = args[0]-&gt;IsUndefined() ? 0 : args[0]-&gt;NumberValue();\n    MyObject* obj = new MyObject(value);\n    obj-&gt;Wrap(args.This());\n    args.GetReturnValue().Set(args.This());\n  } else {\n    // Invoked as plain function `MyObject(...)`, turn into construct call.\n    const int argc = 1;\n    Local&lt;Value&gt; argv[argc] = { args[0] };\n    Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n    Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n    Local&lt;Object&gt; instance =\n        cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n    args.GetReturnValue().Set(instance);\n  }\n}\n\nvoid MyObject::NewInstance(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n  Isolate* isolate = args.GetIsolate();\n\n  const unsigned argc = 1;\n  Local&lt;Value&gt; argv[argc] = { args[0] };\n  Local&lt;Function&gt; cons = Local&lt;Function&gt;::New(isolate, constructor);\n  Local&lt;Context&gt; context = isolate-&gt;GetCurrentContext();\n  Local&lt;Object&gt; instance =\n      cons-&gt;NewInstance(context, argc, argv).ToLocalChecked();\n\n  args.GetReturnValue().Set(instance);\n}\n\n}  // namespace demo\n</code></pre>\n<p>Test it with:</p>\n<pre><code class=\"lang-js\">// test.js\nconst addon = require(&#39;./build/Release/addon&#39;);\n\nconst obj1 = addon.createObject(10);\nconst obj2 = addon.createObject(20);\nconst result = addon.add(obj1, obj2);\n\nconsole.log(result);\n// Prints: 30\n</code></pre>\n",
              "type": "module",
              "displayName": "Passing wrapped objects around"
            },
            {
              "textRaw": "AtExit hooks",
              "name": "atexit_hooks",
              "desc": "<p>An <code>AtExit</code> hook is a function that is invoked after the Node.js event loop\nhas ended but before the JavaScript VM is terminated and Node.js shuts down.\n<code>AtExit</code> hooks are registered using the <code>node::AtExit</code> API.</p>\n",
              "modules": [
                {
                  "textRaw": "void AtExit(callback, args)",
                  "name": "void_atexit(callback,_args)",
                  "desc": "<ul>\n<li><code>callback</code> <span class=\"type\">&lt;void (*)(void*)&gt;</span>\nA pointer to the function to call at exit.</li>\n<li><code>args</code> <span class=\"type\">&lt;void*&gt;</span>\nA pointer to pass to the callback at exit.</li>\n</ul>\n<p>Registers exit hooks that run after the event loop has ended but before the VM\nis killed.</p>\n<p><code>AtExit</code> takes two parameters: a pointer to a callback function to run at exit,\nand a pointer to untyped context data to be passed to that callback.</p>\n<p>Callbacks are run in last-in first-out order.</p>\n<p>The following <code>addon.cc</code> implements <code>AtExit</code>:</p>\n<pre><code class=\"lang-cpp\">// addon.cc\n#include &lt;assert.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;node.h&gt;\n\nnamespace demo {\n\nusing node::AtExit;\nusing v8::HandleScope;\nusing v8::Isolate;\nusing v8::Local;\nusing v8::Object;\n\nstatic char cookie[] = &quot;yum yum&quot;;\nstatic int at_exit_cb1_called = 0;\nstatic int at_exit_cb2_called = 0;\n\nstatic void at_exit_cb1(void* arg) {\n  Isolate* isolate = static_cast&lt;Isolate*&gt;(arg);\n  HandleScope scope(isolate);\n  Local&lt;Object&gt; obj = Object::New(isolate);\n  assert(!obj.IsEmpty());  // assert VM is still alive\n  assert(obj-&gt;IsObject());\n  at_exit_cb1_called++;\n}\n\nstatic void at_exit_cb2(void* arg) {\n  assert(arg == static_cast&lt;void*&gt;(cookie));\n  at_exit_cb2_called++;\n}\n\nstatic void sanity_check(void*) {\n  assert(at_exit_cb1_called == 1);\n  assert(at_exit_cb2_called == 2);\n}\n\nvoid init(Local&lt;Object&gt; exports) {\n  AtExit(at_exit_cb2, cookie);\n  AtExit(at_exit_cb2, cookie);\n  AtExit(at_exit_cb1, exports-&gt;GetIsolate());\n  AtExit(sanity_check);\n}\n\nNODE_MODULE(NODE_GYP_MODULE_NAME, init)\n\n}  // namespace demo\n</code></pre>\n<p>Test in JavaScript by running:</p>\n<pre><code class=\"lang-js\">// test.js\nrequire(&#39;./build/Release/addon&#39;);\n</code></pre>\n<!-- [end-include:addons.md] -->\n<!-- [start-include:n-api.md] -->\n",
                  "type": "module",
                  "displayName": "void AtExit(callback, args)"
                }
              ],
              "type": "module",
              "displayName": "AtExit hooks"
            }
          ],
          "type": "misc",
          "displayName": "Addon examples"
        }
      ]
    },
    {
      "textRaw": "N-API",
      "name": "N-API",
      "introduced_in": "v7.10.0",
      "type": "misc",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>N-API (pronounced N as in the letter, followed by API)\nis an API for building native Addons. It is independent from\nthe underlying JavaScript runtime (ex V8) and is maintained as part of\nNode.js itself. This API will be Application Binary Interface (ABI) stable\nacross versions of Node.js. It is intended to insulate Addons from\nchanges in the underlying JavaScript engine and allow modules\ncompiled for one version to run on later versions of Node.js without\nrecompilation.</p>\n<p>Addons are built/packaged with the same approach/tools\noutlined in the section titled <a href=\"addons.html\">C++ Addons</a>.\nThe only difference is the set of APIs that are used by the native code.\nInstead of using the V8 or <a href=\"https://github.com/nodejs/nan\">Native Abstractions for Node.js</a> APIs,\nthe functions available in the N-API are used.</p>\n<p>APIs exposed by N-API are generally used to create and manipulate\nJavaScript values. Concepts and operations generally map to ideas specified\nin the ECMA262 Language Specification. The APIs have the following\nproperties:</p>\n<ul>\n<li>All N-API calls return a status code of type <code>napi_status</code>. This\nstatus indicates whether the API call succeeded or failed.</li>\n<li>The API&#39;s return value is passed via an out parameter.</li>\n<li>All JavaScript values are abstracted behind an opaque type named\n<code>napi_value</code>.</li>\n<li>In case of an error status code, additional information can be obtained\nusing <code>napi_get_last_error_info</code>. More information can be found in the error\nhandling section <a href=\"#n_api_error_handling\">Error Handling</a>.</li>\n</ul>\n<p>The N-API is a C API that ensures ABI stability across Node.js versions\nand different compiler levels. However, we also understand that a C++\nAPI can be easier to use in many cases. To support these cases we expect\nthere to be one or more C++ wrapper modules that provide an inlineable C++\nAPI. Binaries built with these wrapper modules will depend on the symbols\nfor the N-API C based functions exported by Node.js. These wrappers are not\npart of N-API, nor will they be maintained as part of Node.js. One such\nexample is: <a href=\"https://github.com/nodejs/node-addon-api\">node-addon-api</a>.</p>\n<p>In order to use the N-API functions, include the file\n<a href=\"https://github.com/nodejs/node/blob/master/src/node_api.h\"><code>node_api.h</code></a>\nwhich is located in the src directory in the node development tree:</p>\n<pre><code class=\"lang-C\">#include &lt;node_api.h&gt;\n</code></pre>\n",
      "miscs": [
        {
          "textRaw": "Basic N-API Data Types",
          "name": "basic_n-api_data_types",
          "desc": "<p>N-API exposes the following fundamental datatypes as abstractions that are\nconsumed by the various APIs. These APIs should be treated as opaque,\nintrospectable only with other N-API calls.</p>\n",
          "modules": [
            {
              "textRaw": "napi_status",
              "name": "napi_status",
              "desc": "<p>Integral status code indicating the success or failure of a N-API call.\nCurrently, the following status codes are supported.</p>\n<pre><code class=\"lang-C\">typedef enum {\n  napi_ok,\n  napi_invalid_arg,\n  napi_object_expected,\n  napi_string_expected,\n  napi_name_expected,\n  napi_function_expected,\n  napi_number_expected,\n  napi_boolean_expected,\n  napi_array_expected,\n  napi_generic_failure,\n  napi_pending_exception,\n  napi_cancelled,\n  napi_escape_called_twice,\n  napi_handle_scope_mismatch,\n  napi_callback_scope_mismatch\n} napi_status;\n</code></pre>\n<p>If additional information is required upon an API returning a failed status,\nit can be obtained by calling <code>napi_get_last_error_info</code>.</p>\n",
              "type": "module",
              "displayName": "napi_status"
            },
            {
              "textRaw": "napi_extended_error_info",
              "name": "napi_extended_error_info",
              "desc": "<pre><code class=\"lang-C\">typedef struct {\n  const char* error_message;\n  void* engine_reserved;\n  uint32_t engine_error_code;\n  napi_status error_code;\n} napi_extended_error_info;\n</code></pre>\n<ul>\n<li><code>error_message</code>: UTF8-encoded string containing a VM-neutral description of\nthe error.</li>\n<li><code>engine_reserved</code>: Reserved for VM-specific error details. This is currently\nnot implemented for any VM.</li>\n<li><code>engine_error_code</code>: VM-specific error code. This is currently\nnot implemented for any VM.</li>\n<li><code>error_code</code>: The N-API status code that originated with the last error.</li>\n</ul>\n<p>See the <a href=\"#n_api_error_handling\">Error Handling</a> section for additional information.</p>\n",
              "type": "module",
              "displayName": "napi_extended_error_info"
            },
            {
              "textRaw": "napi_env",
              "name": "napi_env",
              "desc": "<p><code>napi_env</code> is used to represent a context that the underlying N-API\nimplementation can use to persist VM-specific state. This structure is passed\nto native functions when they&#39;re invoked, and it must be passed back when\nmaking N-API calls. Specifically, the same <code>napi_env</code> that was passed in when\nthe initial native function was called must be passed to any subsequent\nnested N-API calls. Caching the <code>napi_env</code> for the purpose of general reuse is\nnot allowed.</p>\n",
              "type": "module",
              "displayName": "napi_env"
            },
            {
              "textRaw": "napi_value",
              "name": "napi_value",
              "desc": "<p>This is an opaque pointer that is used to represent a JavaScript value.</p>\n",
              "type": "module",
              "displayName": "napi_value"
            },
            {
              "textRaw": "N-API Memory Management types",
              "name": "n-api_memory_management_types",
              "modules": [
                {
                  "textRaw": "napi_handle_scope",
                  "name": "napi_handle_scope",
                  "desc": "<p>This is an abstraction used to control and modify the lifetime of objects\ncreated within a particular scope. In general, N-API values are created within\nthe context of a handle scope. When a native method is called from\nJavaScript, a default handle scope will exist. If the user does not explicitly\ncreate a new handle scope, N-API values will be created in the default handle\nscope. For any invocations of code outside the execution of a native method\n(for instance, during a libuv callback invocation), the module is required to\ncreate a scope before invoking any functions that can result in the creation\nof JavaScript values.</p>\n<p>Handle scopes are created using <a href=\"#n_api_napi_open_handle_scope\"><code>napi_open_handle_scope</code></a> and are destroyed\nusing <a href=\"#n_api_napi_close_handle_scope\"><code>napi_close_handle_scope</code></a>. Closing the scope can indicate to the GC\nthat all <code>napi_value</code>s created during the lifetime of the handle scope are no\nlonger referenced from the current stack frame.</p>\n<p>For more details, review the <a href=\"#n_api_object_lifetime_management\">Object Lifetime Management</a>.</p>\n",
                  "type": "module",
                  "displayName": "napi_handle_scope"
                },
                {
                  "textRaw": "napi_escapable_handle_scope",
                  "name": "napi_escapable_handle_scope",
                  "desc": "<p>Escapable handle scopes are a special type of handle scope to return values\ncreated within a particular handle scope to a parent scope.</p>\n",
                  "type": "module",
                  "displayName": "napi_escapable_handle_scope"
                },
                {
                  "textRaw": "napi_ref",
                  "name": "napi_ref",
                  "desc": "<p>This is the abstraction to use to reference a <code>napi_value</code>. This allows for\nusers to manage the lifetimes of JavaScript values, including defining their\nminimum lifetimes explicitly.</p>\n<p>For more details, review the <a href=\"#n_api_object_lifetime_management\">Object Lifetime Management</a>.</p>\n",
                  "type": "module",
                  "displayName": "napi_ref"
                }
              ],
              "type": "module",
              "displayName": "N-API Memory Management types"
            },
            {
              "textRaw": "N-API Callback types",
              "name": "n-api_callback_types",
              "modules": [
                {
                  "textRaw": "napi_callback_info",
                  "name": "napi_callback_info",
                  "desc": "<p>Opaque datatype that is passed to a callback function. It can be used for\ngetting additional information about the context in which the callback was\ninvoked.</p>\n",
                  "type": "module",
                  "displayName": "napi_callback_info"
                },
                {
                  "textRaw": "napi_callback",
                  "name": "napi_callback",
                  "desc": "<p>Function pointer type for user-provided native functions which are to be\nexposed to JavaScript via N-API. Callback functions should satisfy the\nfollowing signature:</p>\n<pre><code class=\"lang-C\">typedef napi_value (*napi_callback)(napi_env, napi_callback_info);\n</code></pre>\n",
                  "type": "module",
                  "displayName": "napi_callback"
                },
                {
                  "textRaw": "napi_finalize",
                  "name": "napi_finalize",
                  "desc": "<p>Function pointer type for add-on provided functions that allow the user to be\nnotified when externally-owned data is ready to be cleaned up because the\nobject with which it was associated with, has been garbage-collected. The user\nmust provide a function satisfying the following signature which would get\ncalled upon the object&#39;s collection. Currently, <code>napi_finalize</code> can be used for\nfinding out when objects that have external data are collected.</p>\n<pre><code class=\"lang-C\">typedef void (*napi_finalize)(napi_env env,\n                              void* finalize_data,\n                              void* finalize_hint);\n</code></pre>\n",
                  "type": "module",
                  "displayName": "napi_finalize"
                },
                {
                  "textRaw": "napi_async_execute_callback",
                  "name": "napi_async_execute_callback",
                  "desc": "<p>Function pointer used with functions that support asynchronous\noperations. Callback functions must statisfy the following signature:</p>\n<pre><code class=\"lang-C\">typedef void (*napi_async_execute_callback)(napi_env env, void* data);\n</code></pre>\n",
                  "type": "module",
                  "displayName": "napi_async_execute_callback"
                },
                {
                  "textRaw": "napi_async_complete_callback",
                  "name": "napi_async_complete_callback",
                  "desc": "<p>Function pointer used with functions that support asynchronous\noperations. Callback functions must statisfy the following signature:</p>\n<pre><code class=\"lang-C\">typedef void (*napi_async_complete_callback)(napi_env env,\n                                             napi_status status,\n                                             void* data);\n</code></pre>\n",
                  "type": "module",
                  "displayName": "napi_async_complete_callback"
                }
              ],
              "type": "module",
              "displayName": "N-API Callback types"
            }
          ],
          "type": "misc",
          "displayName": "Basic N-API Data Types"
        },
        {
          "textRaw": "Error Handling",
          "name": "error_handling",
          "desc": "<p>N-API uses both return values and JavaScript exceptions for error handling.\nThe following sections explain the approach for each case.</p>\n",
          "modules": [
            {
              "textRaw": "Return values",
              "name": "return_values",
              "desc": "<p>All of the N-API functions share the same error handling pattern. The\nreturn type of all API functions is <code>napi_status</code>.</p>\n<p>The return value will be <code>napi_ok</code> if the request was successful and\nno uncaught JavaScript exception was thrown. If an error occurred AND\nan exception was thrown, the <code>napi_status</code> value for the error\nwill be returned. If an exception was thrown, and no error occurred,\n<code>napi_pending_exception</code> will be returned.</p>\n<p>In cases where a return value other than <code>napi_ok</code> or\n<code>napi_pending_exception</code> is returned, <a href=\"#n_api_napi_is_exception_pending\"><code>napi_is_exception_pending</code></a>\nmust be called to check if an exception is pending.\nSee the section on exceptions for more details.</p>\n<p>The full set of possible <code>napi_status</code> values is defined\nin <code>napi_api_types.h</code>.</p>\n<p>The <code>napi_status</code> return value provides a VM-independent representation of\nthe error which occurred. In some cases it is useful to be able to get\nmore detailed information, including a string representing the error as well as\nVM (engine)-specific information.</p>\n<p>In order to retrieve this information <a href=\"#n_api_napi_get_last_error_info\"><code>napi_get_last_error_info</code></a>\nis provided which returns a <code>napi_extended_error_info</code> structure.\nThe format of the <code>napi_extended_error_info</code> structure is as follows:</p>\n<pre><code class=\"lang-C\">typedef struct napi_extended_error_info {\n  const char* error_message;\n  void* engine_reserved;\n  uint32_t engine_error_code;\n  napi_status error_code;\n};\n</code></pre>\n<ul>\n<li><code>error_message</code>: Textual representation of the error that occurred.</li>\n<li><code>engine_reserved</code>: Opaque handle reserved for engine use only.</li>\n<li><code>engine_error_code</code>: VM specific error code.</li>\n<li><code>error_code</code>: n-api status code for the last error.</li>\n</ul>\n<p><a href=\"#n_api_napi_get_last_error_info\"><code>napi_get_last_error_info</code></a> returns the information for the last\nN-API call that was made.</p>\n<p>Do not rely on the content or format of any of the extended information as it\nis not subject to SemVer and may change at any time. It is intended only for\nlogging purposes.</p>\n",
              "modules": [
                {
                  "textRaw": "napi_get_last_error_info",
                  "name": "napi_get_last_error_info",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status\nnapi_get_last_error_info(napi_env env,\n                         const napi_extended_error_info** result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: The <code>napi_extended_error_info</code> structure with more\ninformation about the error.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API retrieves a <code>napi_extended_error_info</code> structure with information\nabout the last error that occurred.</p>\n<p>The content of the <code>napi_extended_error_info</code> returned is only valid up until\nan n-api function is called on the same <code>env</code>.</p>\n<p>Do not rely on the content or format of any of the extended information as it\nis not subject to SemVer and may change at any time. It is intended only for\nlogging purposes.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_last_error_info"
                }
              ],
              "type": "module",
              "displayName": "Return values"
            },
            {
              "textRaw": "Exceptions",
              "name": "exceptions",
              "desc": "<p>Any N-API function call may result in a pending JavaScript exception. This is\nobviously the case for any function that may cause the execution of\nJavaScript, but N-API specifies that an exception may be pending\non return from any of the API functions.</p>\n<p>If the <code>napi_status</code> returned by a function is <code>napi_ok</code> then no\nexception is pending and no additional action is required. If the\n<code>napi_status</code> returned is anything other than <code>napi_ok</code> or\n<code>napi_pending_exception</code>, in order to try to recover and continue\ninstead of simply returning immediately, <a href=\"#n_api_napi_is_exception_pending\"><code>napi_is_exception_pending</code></a>\nmust be called in order to determine if an exception is pending or not.</p>\n<p>When an exception is pending one of two approaches can be employed.</p>\n<p>The first approach is to do any appropriate cleanup and then return so that\nexecution will return to JavaScript. As part of the transition back to\nJavaScript the exception will be thrown at the point in the JavaScript\ncode where the native method was invoked. The behavior of most N-API calls\nis unspecified while an exception is pending, and many will simply return\n<code>napi_pending_exception</code>, so it is important to do as little as possible\nand then return to JavaScript where the exception can be handled.</p>\n<p>The second approach is to try to handle the exception. There will be cases\nwhere the native code can catch the exception, take the appropriate action,\nand then continue. This is only recommended in specific cases\nwhere it is known that the exception can be safely handled. In these\ncases <a href=\"#n_api_napi_get_and_clear_last_exception\"><code>napi_get_and_clear_last_exception</code></a> can be used to get and\nclear the exception. On success, result will contain the handle to\nthe last JavaScript <code>Object</code> thrown. If it is determined, after\nretrieving the exception, the exception cannot be handled after all\nit can be re-thrown it with <a href=\"#n_api_napi_throw\"><code>napi_throw</code></a> where error is the\nJavaScript <code>Error</code> object to be thrown.</p>\n<p>The following utility functions are also available in case native code\nneeds to throw an exception or determine if a <code>napi_value</code> is an instance\nof a JavaScript <code>Error</code> object: <a href=\"#n_api_napi_throw_error\"><code>napi_throw_error</code></a>,\n<a href=\"#n_api_napi_throw_type_error\"><code>napi_throw_type_error</code></a>, <a href=\"#n_api_napi_throw_range_error\"><code>napi_throw_range_error</code></a> and\n<a href=\"#n_api_napi_is_error\"><code>napi_is_error</code></a>.</p>\n<p>The following utility functions are also available in case native\ncode needs to create an <code>Error</code> object: <a href=\"#n_api_napi_create_error\"><code>napi_create_error</code></a>,\n<a href=\"#n_api_napi_create_type_error\"><code>napi_create_type_error</code></a>, and <a href=\"#n_api_napi_create_range_error\"><code>napi_create_range_error</code></a>,\nwhere result is the <code>napi_value</code> that refers to the newly created\nJavaScript <code>Error</code> object.</p>\n<p>The Node.js project is adding error codes to all of the errors\ngenerated internally. The goal is for applications to use these\nerror codes for all error checking. The associated error messages\nwill remain, but will only be meant to be used for logging and\ndisplay with the expectation that the message can change without\nSemVer applying. In order to support this model with N-API, both\nin internal functionality and for module specific functionality\n(as its good practice), the <code>throw_</code> and <code>create_</code> functions\ntake an optional code parameter which is the string for the code\nto be added to the error object. If the optional parameter is NULL\nthen no code will be associated with the error. If a code is provided,\nthe name associated with the error is also updated to be:</p>\n<pre><code class=\"lang-text\">originalName [code]\n</code></pre>\n<p>where <code>originalName</code> is the original name associated with the error\nand <code>code</code> is the code that was provided. For example if the code\nis <code>&#39;ERR_ERROR_1&#39;</code> and a <code>TypeError</code> is being created the name will be:</p>\n<pre><code class=\"lang-text\">TypeError [ERR_ERROR_1]\n</code></pre>\n",
              "modules": [
                {
                  "textRaw": "napi_throw",
                  "name": "napi_throw",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_throw(napi_env env, napi_value error);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] error</code>: The JavaScript value to be thrown.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API throws the JavaScript value provided.</p>\n",
                  "type": "module",
                  "displayName": "napi_throw"
                },
                {
                  "textRaw": "napi_throw_error",
                  "name": "napi_throw_error",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_throw_error(napi_env env,\n                                         const char* code,\n                                         const char* msg);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional error code to be set on the error.</li>\n<li><code>[in] msg</code>: C string representing the text to be associated with\nthe error.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API throws a JavaScript <code>Error</code> with the text provided.</p>\n",
                  "type": "module",
                  "displayName": "napi_throw_error"
                },
                {
                  "textRaw": "napi_throw_type_error",
                  "name": "napi_throw_type_error",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_throw_type_error(napi_env env,\n                                              const char* code,\n                                              const char* msg);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional error code to be set on the error.</li>\n<li><code>[in] msg</code>: C string representing the text to be associated with\nthe error.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API throws a JavaScript <code>TypeError</code> with the text provided.</p>\n",
                  "type": "module",
                  "displayName": "napi_throw_type_error"
                },
                {
                  "textRaw": "napi_throw_range_error",
                  "name": "napi_throw_range_error",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_throw_range_error(napi_env env,\n                                               const char* code,\n                                               const char* msg);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional error code to be set on the error.</li>\n<li><code>[in] msg</code>: C string representing the text to be associated with\nthe error.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API throws a JavaScript <code>RangeError</code> with the text provided.</p>\n",
                  "type": "module",
                  "displayName": "napi_throw_range_error"
                },
                {
                  "textRaw": "napi_is_error",
                  "name": "napi_is_error",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_is_error(napi_env env,\n                                      napi_value value,\n                                      bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] msg</code>: The <code>napi_value</code> to be checked.</li>\n<li><code>[out] result</code>: Boolean value that is set to true if <code>napi_value</code> represents\nan error, false otherwise.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API queries a <code>napi_value</code> to check if it represents an error object.</p>\n",
                  "type": "module",
                  "displayName": "napi_is_error"
                },
                {
                  "textRaw": "napi_create_error",
                  "name": "napi_create_error",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_create_error(napi_env env,\n                                          napi_value code,\n                                          napi_value msg,\n                                          napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional <code>napi_value</code> with the string for the error code to\nbe associated with the error.</li>\n<li><code>[in] msg</code>: <code>napi_value</code> that references a JavaScript <code>String</code> to be\nused as the message for the <code>Error</code>.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the error created.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns a JavaScript <code>Error</code> with the text provided.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_error"
                },
                {
                  "textRaw": "napi_create_type_error",
                  "name": "napi_create_type_error",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_create_type_error(napi_env env,\n                                               napi_value code,\n                                               napi_value msg,\n                                               napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional <code>napi_value</code> with the string for the error code to\nbe associated with the error.</li>\n<li><code>[in] msg</code>: <code>napi_value</code> that references a JavaScript <code>String</code> to be\nused as the message for the <code>Error</code>.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the error created.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns a JavaScript <code>TypeError</code> with the text provided.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_type_error"
                },
                {
                  "textRaw": "napi_create_range_error",
                  "name": "napi_create_range_error",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_create_range_error(napi_env env,\n                                                napi_value code,\n                                                const char* msg,\n                                                napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] code</code>: Optional <code>napi_value</code> with the string for the error code to\nbe associated with the error.</li>\n<li><code>[in] msg</code>: <code>napi_value</code> that references a JavaScript <code>String</code> to be\nused as the message for the <code>Error</code>.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the error created.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns a JavaScript <code>RangeError</code> with the text provided.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_range_error"
                },
                {
                  "textRaw": "napi_get_and_clear_last_exception",
                  "name": "napi_get_and_clear_last_exception",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_and_clear_last_exception(napi_env env,\n                                              napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: The exception if one is pending, NULL otherwise.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns true if an exception is pending.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_and_clear_last_exception"
                },
                {
                  "textRaw": "napi_is_exception_pending",
                  "name": "napi_is_exception_pending",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_is_exception_pending(napi_env env, bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: Boolean value that is set to true if an exception is pending.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns true if an exception is pending.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>\n",
                  "type": "module",
                  "displayName": "napi_is_exception_pending"
                },
                {
                  "textRaw": "napi_fatal_exception",
                  "name": "napi_fatal_exception",
                  "meta": {
                    "added": [
                      "v9.10.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_fatal_exception(napi_env env, napi_value err);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] err</code>: The error you want to pass to <code>&#39;uncaughtException&#39;</code>.</li>\n</ul>\n<p>Trigger an <code>&#39;uncaughtException&#39;</code> in JavaScript. Useful if an async\ncallback throws an exception with no way to recover.</p>\n",
                  "type": "module",
                  "displayName": "napi_fatal_exception"
                }
              ],
              "type": "module",
              "displayName": "Exceptions"
            },
            {
              "textRaw": "Fatal Errors",
              "name": "fatal_errors",
              "desc": "<p>In the event of an unrecoverable error in a native module, a fatal error can be\nthrown to immediately terminate the process.</p>\n",
              "modules": [
                {
                  "textRaw": "napi_fatal_error",
                  "name": "napi_fatal_error",
                  "meta": {
                    "added": [
                      "v8.2.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NAPI_NO_RETURN void napi_fatal_error(const char* location,\n                                                 size_t location_len,\n                                                 const char* message,\n                                                 size_t message_len);\n</code></pre>\n<ul>\n<li><code>[in] location</code>: Optional location at which the error occurred.</li>\n<li><code>[in] location_len</code>: The length of the location in bytes, or\n<code>NAPI_AUTO_LENGTH</code> if it is null-terminated.</li>\n<li><code>[in] message</code>: The message associated with the error.</li>\n<li><code>[in] message_len</code>: The length of the message in bytes, or\n<code>NAPI_AUTO_LENGTH</code> if it is\nnull-terminated.</li>\n</ul>\n<p>The function call does not return, the process will be terminated.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>\n",
                  "type": "module",
                  "displayName": "napi_fatal_error"
                }
              ],
              "type": "module",
              "displayName": "Fatal Errors"
            }
          ],
          "type": "misc",
          "displayName": "Error Handling"
        },
        {
          "textRaw": "Object Lifetime management",
          "name": "object_lifetime_management",
          "desc": "<p>As N-API calls are made, handles to objects in the heap for the underlying\nVM may be returned as <code>napi_values</code>. These handles must hold the\nobjects &#39;live&#39; until they are no longer required by the native code,\notherwise the objects could be collected before the native code was\nfinished using them.</p>\n<p>As object handles are returned they are associated with a\n&#39;scope&#39;. The lifespan for the default scope is tied to the lifespan\nof the native method call. The result is that, by default, handles\nremain valid and the objects associated with these handles will be\nheld live for the lifespan of the native method call.</p>\n<p>In many cases, however, it is necessary that the handles remain valid for\neither a shorter or longer lifespan than that of the native method.\nThe sections which follow describe the N-API functions than can be used\nto change the handle lifespan from the default.</p>\n",
          "modules": [
            {
              "textRaw": "Making handle lifespan shorter than that of the native method",
              "name": "making_handle_lifespan_shorter_than_that_of_the_native_method",
              "desc": "<p>It is often necessary to make the lifespan of handles shorter than\nthe lifespan of a native method. For example, consider a native method\nthat has a loop which iterates through the elements in a large array:</p>\n<pre><code class=\"lang-C\">for (int i = 0; i &lt; 1000000; i++) {\n  napi_value result;\n  napi_status status = napi_get_element(env, object, i, &amp;result);\n  if (status != napi_ok) {\n    break;\n  }\n  // do something with element\n}\n</code></pre>\n<p>This would result in a large number of handles being created, consuming\nsubstantial resources. In addition, even though the native code could only\nuse the most recent handle, all of the associated objects would also be\nkept alive since they all share the same scope.</p>\n<p>To handle this case, N-API provides the ability to establish a new &#39;scope&#39; to\nwhich newly created handles will be associated. Once those handles\nare no longer required, the scope can be &#39;closed&#39; and any handles associated\nwith the scope are invalidated. The methods available to open/close scopes are\n<a href=\"#n_api_napi_open_handle_scope\"><code>napi_open_handle_scope</code></a> and <a href=\"#n_api_napi_close_handle_scope\"><code>napi_close_handle_scope</code></a>.</p>\n<p>N-API only supports a single nested hierarchy of scopes. There is only one\nactive scope at any time, and all new handles will be associated with that\nscope while it is active. Scopes must be closed in the reverse order from\nwhich they are opened. In addition, all scopes created within a native method\nmust be closed before returning from that method.</p>\n<p>Taking the earlier example, adding calls to <a href=\"#n_api_napi_open_handle_scope\"><code>napi_open_handle_scope</code></a> and\n<a href=\"#n_api_napi_close_handle_scope\"><code>napi_close_handle_scope</code></a> would ensure that at most a single handle\nis valid throughout the execution of the loop:</p>\n<pre><code class=\"lang-C\">for (int i = 0; i &lt; 1000000; i++) {\n  napi_handle_scope scope;\n  napi_status status = napi_open_handle_scope(env, &amp;scope);\n  if (status != napi_ok) {\n    break;\n  }\n  napi_value result;\n  status = napi_get_element(env, object, i, &amp;result);\n  if (status != napi_ok) {\n    break;\n  }\n  // do something with element\n  status = napi_close_handle_scope(env, scope);\n  if (status != napi_ok) {\n    break;\n  }\n}\n</code></pre>\n<p>When nesting scopes, there are cases where a handle from an\ninner scope needs to live beyond the lifespan of that scope. N-API supports an\n&#39;escapable scope&#39; in order to support this case. An escapable scope\nallows one handle to be &#39;promoted&#39; so that it &#39;escapes&#39; the\ncurrent scope and the lifespan of the handle changes from the current\nscope to that of the outer scope.</p>\n<p>The methods available to open/close escapable scopes are\n<a href=\"#n_api_napi_open_escapable_handle_scope\"><code>napi_open_escapable_handle_scope</code></a> and\n<a href=\"#n_api_napi_close_escapable_handle_scope\"><code>napi_close_escapable_handle_scope</code></a>.</p>\n<p>The request to promote a handle is made through <a href=\"#n_api_napi_escape_handle\"><code>napi_escape_handle</code></a> which\ncan only be called once.</p>\n",
              "modules": [
                {
                  "textRaw": "napi_open_handle_scope",
                  "name": "napi_open_handle_scope",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_open_handle_scope(napi_env env,\n                                               napi_handle_scope* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the new scope.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API open a new scope.</p>\n",
                  "type": "module",
                  "displayName": "napi_open_handle_scope"
                },
                {
                  "textRaw": "napi_close_handle_scope",
                  "name": "napi_close_handle_scope",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_close_handle_scope(napi_env env,\n                                                napi_handle_scope scope);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] scope</code>: <code>napi_value</code> representing the scope to be closed.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API closes the scope passed in. Scopes must be closed in the\nreverse order from which they were created.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>\n",
                  "type": "module",
                  "displayName": "napi_close_handle_scope"
                },
                {
                  "textRaw": "napi_open_escapable_handle_scope",
                  "name": "napi_open_escapable_handle_scope",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status\n    napi_open_escapable_handle_scope(napi_env env,\n                                     napi_handle_scope* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the new scope.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API open a new scope from which one object can be promoted\nto the outer scope.</p>\n",
                  "type": "module",
                  "displayName": "napi_open_escapable_handle_scope"
                },
                {
                  "textRaw": "napi_close_escapable_handle_scope",
                  "name": "napi_close_escapable_handle_scope",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status\n    napi_close_escapable_handle_scope(napi_env env,\n                                      napi_handle_scope scope);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] scope</code>: <code>napi_value</code> representing the scope to be closed.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API closes the scope passed in. Scopes must be closed in the\nreverse order from which they were created.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>\n",
                  "type": "module",
                  "displayName": "napi_close_escapable_handle_scope"
                },
                {
                  "textRaw": "napi_escape_handle",
                  "name": "napi_escape_handle",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_escape_handle(napi_env env,\n                               napi_escapable_handle_scope scope,\n                               napi_value escapee,\n                               napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] scope</code>: <code>napi_value</code> representing the current scope.</li>\n<li><code>[in] escapee</code>: <code>napi_value</code> representing the JavaScript <code>Object</code> to be\nescaped.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the handle to the escaped\n<code>Object</code> in the outer scope.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API promotes the handle to the JavaScript object so that it is valid\nfor the lifetime of the outer scope. It can only be called once per scope.\nIf it is called more than once an error will be returned.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>\n",
                  "type": "module",
                  "displayName": "napi_escape_handle"
                }
              ],
              "type": "module",
              "displayName": "Making handle lifespan shorter than that of the native method"
            },
            {
              "textRaw": "References to objects with a lifespan longer than that of the native method",
              "name": "references_to_objects_with_a_lifespan_longer_than_that_of_the_native_method",
              "desc": "<p>In some cases an addon will need to be able to create and reference objects\nwith a lifespan longer than that of a single native method invocation. For\nexample, to create a constructor and later use that constructor\nin a request to creates instances, it must be possible to reference\nthe constructor object across many different instance creation requests. This\nwould not be possible with a normal handle returned as a <code>napi_value</code> as\ndescribed in the earlier section. The lifespan of a normal handle is\nmanaged by scopes and all scopes must be closed before the end of a native\nmethod.</p>\n<p>N-API provides methods to create persistent references to an object.\nEach persistent reference has an associated count with a value of 0\nor higher. The count determines if the reference will keep\nthe corresponding object live. References with a count of 0 do not\nprevent the object from being collected and are often called &#39;weak&#39;\nreferences. Any count greater than 0 will prevent the object\nfrom being collected.</p>\n<p>References can be created with an initial reference count. The count can\nthen be modified through <a href=\"#n_api_napi_reference_ref\"><code>napi_reference_ref</code></a> and\n<a href=\"#n_api_napi_reference_unref\"><code>napi_reference_unref</code></a>. If an object is collected while the count\nfor a reference is 0, all subsequent calls to\nget the object associated with the reference <a href=\"#n_api_napi_get_reference_value\"><code>napi_get_reference_value</code></a>\nwill return NULL for the returned <code>napi_value</code>. An attempt to call\n<a href=\"#n_api_napi_reference_ref\"><code>napi_reference_ref</code></a> for a reference whose object has been collected\nwill result in an error.</p>\n<p>References must be deleted once they are no longer required by the addon. When\na reference is deleted it will no longer prevent the corresponding object from\nbeing collected. Failure to delete a persistent reference will result in\na &#39;memory leak&#39; with both the native memory for the persistent reference and\nthe corresponding object on the heap being retained forever.</p>\n<p>There can be multiple persistent references created which refer to the same\nobject, each of which will either keep the object live or not based on its\nindividual count.</p>\n",
              "modules": [
                {
                  "textRaw": "napi_create_reference",
                  "name": "napi_create_reference",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_create_reference(napi_env env,\n                                              napi_value value,\n                                              int initial_refcount,\n                                              napi_ref* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing the <code>Object</code> to which we want\na reference.</li>\n<li><code>[in] initial_refcount</code>: Initial reference count for the new reference.</li>\n<li><code>[out] result</code>: <code>napi_ref</code> pointing to the new reference.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API create a new reference with the specified reference count\nto the <code>Object</code> passed in.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_reference"
                },
                {
                  "textRaw": "napi_delete_reference",
                  "name": "napi_delete_reference",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_delete_reference(napi_env env, napi_ref ref);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] ref</code>: <code>napi_ref</code> to be deleted.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API deletes the reference passed in.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>\n",
                  "type": "module",
                  "displayName": "napi_delete_reference"
                },
                {
                  "textRaw": "napi_reference_ref",
                  "name": "napi_reference_ref",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_reference_ref(napi_env env,\n                                           napi_ref ref,\n                                           int* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] ref</code>: <code>napi_ref</code> for which the reference count will be incremented.</li>\n<li><code>[out] result</code>: The new reference count.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API increments the reference count for the reference\npassed in and returns the resulting reference count.</p>\n",
                  "type": "module",
                  "displayName": "napi_reference_ref"
                },
                {
                  "textRaw": "napi_reference_unref",
                  "name": "napi_reference_unref",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_reference_unref(napi_env env,\n                                             napi_ref ref,\n                                             int* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] ref</code>: <code>napi_ref</code> for which the reference count will be decremented.</li>\n<li><code>[out] result</code>: The new reference count.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API decrements the reference count for the reference\npassed in and returns the resulting reference count.</p>\n",
                  "type": "module",
                  "displayName": "napi_reference_unref"
                },
                {
                  "textRaw": "napi_get_reference_value",
                  "name": "napi_get_reference_value",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">NODE_EXTERN napi_status napi_get_reference_value(napi_env env,\n                                                 napi_ref ref,\n                                                 napi_value* result);\n</code></pre>\n<p>the <code>napi_value passed</code> in or out of these methods is a handle to the\nobject to which the reference is related.</p>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] ref</code>: <code>napi_ref</code> for which we requesting the corresponding <code>Object</code>.</li>\n<li><code>[out] result</code>: The <code>napi_value</code> for the <code>Object</code> referenced by the\n<code>napi_ref</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>If still valid, this API returns the <code>napi_value</code> representing the\nJavaScript <code>Object</code> associated with the <code>napi_ref</code>. Otherwise, result\nwill be NULL.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_reference_value"
                }
              ],
              "type": "module",
              "displayName": "References to objects with a lifespan longer than that of the native method"
            }
          ],
          "type": "misc",
          "displayName": "Object Lifetime management"
        },
        {
          "textRaw": "Module registration",
          "name": "module_registration",
          "desc": "<p>N-API modules are registered in a manner similar to other modules\nexcept that instead of using the <code>NODE_MODULE</code> macro the following\nis used:</p>\n<pre><code class=\"lang-C\">NAPI_MODULE(NODE_GYP_MODULE_NAME, Init)\n</code></pre>\n<p>The next difference is the signature for the <code>Init</code> method. For a N-API\nmodule it is as follows:</p>\n<pre><code class=\"lang-C\">napi_value Init(napi_env env, napi_value exports);\n</code></pre>\n<p>The return value from <code>Init</code> is treated as the <code>exports</code> object for the module.\nThe <code>Init</code> method is passed an empty object via the <code>exports</code> parameter as a\nconvenience. If <code>Init</code> returns NULL, the parameter passed as <code>exports</code> is\nexported by the module. N-API modules cannot modify the <code>module</code> object but can\nspecify anything as the <code>exports</code> property of the module.</p>\n<p>To add the method <code>hello</code> as a function so that it can be called as a method\nprovided by the addon:</p>\n<pre><code class=\"lang-C\">napi_value Init(napi_env env, napi_value exports) {\n  napi_status status;\n  napi_property_descriptor desc =\n    {&quot;hello&quot;, NULL, Method, NULL, NULL, NULL, napi_default, NULL};\n  status = napi_define_properties(env, exports, 1, &amp;desc);\n  if (status != napi_ok) return NULL;\n  return exports;\n}\n</code></pre>\n<p>To set a function to be returned by the <code>require()</code> for the addon:</p>\n<pre><code class=\"lang-C\">napi_value Init(napi_env env, napi_value exports) {\n  napi_value method;\n  napi_status status;\n  status = napi_create_function(env, &quot;exports&quot;, NAPI_AUTO_LENGTH, Method, NULL, &amp;method);\n  if (status != napi_ok) return NULL;\n  return method;\n}\n</code></pre>\n<p>To define a class so that new instances can be created (often used with\n<a href=\"#n_api_object_wrap\">Object Wrap</a>):</p>\n<pre><code class=\"lang-C\">// NOTE: partial example, not all referenced code is included\nnapi_value Init(napi_env env, napi_value exports) {\n  napi_status status;\n  napi_property_descriptor properties[] = {\n    { &quot;value&quot;, NULL, NULL, GetValue, SetValue, NULL, napi_default, NULL },\n    DECLARE_NAPI_METHOD(&quot;plusOne&quot;, PlusOne),\n    DECLARE_NAPI_METHOD(&quot;multiply&quot;, Multiply),\n  };\n\n  napi_value cons;\n  status =\n      napi_define_class(env, &quot;MyObject&quot;, New, NULL, 3, properties, &amp;cons);\n  if (status != napi_ok) return NULL;\n\n  status = napi_create_reference(env, cons, 1, &amp;constructor);\n  if (status != napi_ok) return NULL;\n\n  status = napi_set_named_property(env, exports, &quot;MyObject&quot;, cons);\n  if (status != napi_ok) return NULL;\n\n  return exports;\n}\n</code></pre>\n<p>If you expect that your module will be loaded multiple times during the lifetime\nof the Node.js process, you can use the <code>NAPI_MODULE_INIT</code> macro to initialize\nyour module:</p>\n<pre><code class=\"lang-C\">NAPI_MODULE_INIT() {\n  napi_value answer;\n  napi_status result;\n\n  status = napi_create_int64(env, 42, &amp;answer);\n  if (status != napi_ok) return NULL;\n\n  status = napi_set_named_property(env, exports, &quot;answer&quot;, answer);\n  if (status != napi_ok) return NULL;\n\n  return exports;\n}\n</code></pre>\n<p>This macro includes <code>NAPI_MODULE</code>, and declares an <code>Init</code> function with a\nspecial name and with visibility beyond the addon. This will allow Node.js to\ninitialize the module even if it is loaded multiple times.</p>\n<p>The variables <code>env</code> and <code>exports</code> will be available inside the function body\nfollowing the macro invocation.</p>\n<p>For more details on setting properties on objects, see the section on\n<a href=\"#n_api_working_with_javascript_properties\">Working with JavaScript Properties</a>.</p>\n<p>For more details on building addon modules in general, refer to the existing\nAPI.</p>\n",
          "type": "misc",
          "displayName": "Module registration"
        },
        {
          "textRaw": "Working with JavaScript Values",
          "name": "working_with_javascript_values",
          "desc": "<p>N-API exposes a set of APIs to create all types of JavaScript values.\nSome of these types are documented under\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\">Section 6</a>\nof the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</p>\n<p>Fundamentally, these APIs are used to do one of the following:</p>\n<ol>\n<li>Create a new JavaScript object</li>\n<li>Convert from a primitive C type to an N-API value</li>\n<li>Convert from N-API value to a primitive C type</li>\n<li>Get global instances including <code>undefined</code> and <code>null</code></li>\n</ol>\n<p>N-API values are represented by the type <code>napi_value</code>.\nAny N-API call that requires a JavaScript value takes in a <code>napi_value</code>.\nIn some cases, the API does check the type of the <code>napi_value</code> up-front.\nHowever, for better performance, it&#39;s better for the caller to make sure that\nthe <code>napi_value</code> in question is of the JavaScript type expected by the API.</p>\n",
          "modules": [
            {
              "textRaw": "Enum types",
              "name": "enum_types",
              "modules": [
                {
                  "textRaw": "napi_valuetype",
                  "name": "napi_valuetype",
                  "desc": "<pre><code class=\"lang-C\">typedef enum {\n  // ES6 types (corresponds to typeof)\n  napi_undefined,\n  napi_null,\n  napi_boolean,\n  napi_number,\n  napi_string,\n  napi_symbol,\n  napi_object,\n  napi_function,\n  napi_external,\n} napi_valuetype;\n</code></pre>\n<p>Describes the type of a <code>napi_value</code>. This generally corresponds to the types\ndescribed in\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types\">Section 6.1</a> of\nthe ECMAScript Language Specification.\nIn addition to types in that section, <code>napi_valuetype</code> can also represent\n<code>Function</code>s and <code>Object</code>s with external data.</p>\n<p>A JavaScript value of type <code>napi_external</code> appears in JavaScript as a plain\nobject such that no properties can be set on it, and no prototype.</p>\n",
                  "type": "module",
                  "displayName": "napi_valuetype"
                },
                {
                  "textRaw": "napi_typedarray_type",
                  "name": "napi_typedarray_type",
                  "desc": "<pre><code class=\"lang-C\">typedef enum {\n  napi_int8_array,\n  napi_uint8_array,\n  napi_uint8_clamped_array,\n  napi_int16_array,\n  napi_uint16_array,\n  napi_int32_array,\n  napi_uint32_array,\n  napi_float32_array,\n  napi_float64_array,\n} napi_typedarray_type;\n</code></pre>\n<p>This represents the underlying binary scalar datatype of the <code>TypedArray</code>.\nElements of this enum correspond to\n<a href=\"https://tc39.github.io/ecma262/#sec-typedarray-objects\">Section 22.2</a> of the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</p>\n",
                  "type": "module",
                  "displayName": "napi_typedarray_type"
                }
              ],
              "type": "module",
              "displayName": "Enum types"
            },
            {
              "textRaw": "Object Creation Functions",
              "name": "object_creation_functions",
              "modules": [
                {
                  "textRaw": "napi_create_array",
                  "name": "napi_create_array",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_array(napi_env env, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>Array</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns an N-API value corresponding to a JavaScript <code>Array</code> type.\nJavaScript arrays are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-array-objects\">Section 22.1</a> of the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_array"
                },
                {
                  "textRaw": "napi_create_array_with_length",
                  "name": "napi_create_array_with_length",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_array_with_length(napi_env env,\n                                          size_t length,\n                                          napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] length</code>: The initial length of the <code>Array</code>.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>Array</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns an N-API value corresponding to a JavaScript <code>Array</code> type.\nThe <code>Array</code>&#39;s length property is set to the passed-in length parameter.\nHowever, the underlying buffer is not guaranteed to be pre-allocated by the VM\nwhen the array is created - that behavior is left to the underlying VM\nimplementation.\nIf the buffer must be a contiguous block of memory that can be\ndirectly read and/or written via C, consider using\n<a href=\"#n_api_napi_create_external_arraybuffer\"><code>napi_create_external_arraybuffer</code></a>.</p>\n<p>JavaScript arrays are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-array-objects\">Section 22.1</a> of the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_array_with_length"
                },
                {
                  "textRaw": "napi_create_arraybuffer",
                  "name": "napi_create_arraybuffer",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_arraybuffer(napi_env env,\n                                    size_t byte_length,\n                                    void** data,\n                                    napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] length</code>: The length in bytes of the array buffer to create.</li>\n<li><code>[out] data</code>: Pointer to the underlying byte buffer of the <code>ArrayBuffer</code>.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>ArrayBuffer</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns an N-API value corresponding to a JavaScript <code>ArrayBuffer</code>.\n<code>ArrayBuffer</code>s are used to represent fixed-length binary data buffers. They are\nnormally used as a backing-buffer for <code>TypedArray</code> objects.\nThe <code>ArrayBuffer</code> allocated will have an underlying byte buffer whose size is\ndetermined by the <code>length</code> parameter that&#39;s passed in.\nThe underlying buffer is optionally returned back to the caller in case the\ncaller wants to directly manipulate the buffer. This buffer can only be\nwritten to directly from native code. To write to this buffer from JavaScript,\na typed array or <code>DataView</code> object would need to be created.</p>\n<p>JavaScript <code>ArrayBuffer</code> objects are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-arraybuffer-objects\">Section 24.1</a> of the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_arraybuffer"
                },
                {
                  "textRaw": "napi_create_buffer",
                  "name": "napi_create_buffer",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_buffer(napi_env env,\n                               size_t size,\n                               void** data,\n                               napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] size</code>: Size in bytes of the underlying buffer.</li>\n<li><code>[out] data</code>: Raw pointer to the underlying buffer.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a <code>node::Buffer</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API allocates a <code>node::Buffer</code> object. While this is still a\nfully-supported data structure, in most cases using a <code>TypedArray</code> will suffice.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_buffer"
                },
                {
                  "textRaw": "napi_create_buffer_copy",
                  "name": "napi_create_buffer_copy",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_buffer_copy(napi_env env,\n                                    size_t length,\n                                    const void* data,\n                                    void** result_data,\n                                    napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] size</code>: Size in bytes of the input buffer (should be the same as the\nsize of the new buffer).</li>\n<li><code>[in] data</code>: Raw pointer to the underlying buffer to copy from.</li>\n<li><code>[out] result_data</code>: Pointer to the new <code>Buffer</code>&#39;s underlying data buffer.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a <code>node::Buffer</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API allocates a <code>node::Buffer</code> object and initializes it with data copied\nfrom the passed-in buffer. While this is still a fully-supported data\nstructure, in most cases using a <code>TypedArray</code> will suffice.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_buffer_copy"
                },
                {
                  "textRaw": "napi_create_external",
                  "name": "napi_create_external",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_external(napi_env env,\n                                 void* data,\n                                 napi_finalize finalize_cb,\n                                 void* finalize_hint,\n                                 napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] data</code>: Raw pointer to the external data.</li>\n<li><code>[in] finalize_cb</code>: Optional callback to call when the external value\nis being collected.</li>\n<li><code>[in] finalize_hint</code>: Optional hint to pass to the finalize callback\nduring collection.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing an external value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API allocates a JavaScript value with external data attached to it. This\nis used to pass external data through JavaScript code, so it can be retrieved\nlater by native code. The API allows the caller to pass in a finalize callback,\nin case the underlying native resource needs to be cleaned up when the external\nJavaScript value gets collected.</p>\n<p>The created value is not an object, and therefore does not support additional\nproperties. It is considered a distinct value type: calling <code>napi_typeof()</code> with\nan external value yields <code>napi_external</code>.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_external"
                },
                {
                  "textRaw": "napi_create_external_arraybuffer",
                  "name": "napi_create_external_arraybuffer",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status\nnapi_create_external_arraybuffer(napi_env env,\n                                 void* external_data,\n                                 size_t byte_length,\n                                 napi_finalize finalize_cb,\n                                 void* finalize_hint,\n                                 napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] external_data</code>: Pointer to the underlying byte buffer of the\n<code>ArrayBuffer</code>.</li>\n<li><code>[in] byte_length</code>: The length in bytes of the underlying buffer.</li>\n<li><code>[in] finalize_cb</code>: Optional callback to call when the <code>ArrayBuffer</code> is\nbeing collected.</li>\n<li><code>[in] finalize_hint</code>: Optional hint to pass to the finalize callback\nduring collection.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>ArrayBuffer</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns an N-API value corresponding to a JavaScript <code>ArrayBuffer</code>.\nThe underlying byte buffer of the <code>ArrayBuffer</code> is externally allocated and\nmanaged. The caller must ensure that the byte buffer remains valid until the\nfinalize callback is called.</p>\n<p>JavaScript <code>ArrayBuffer</code>s are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-arraybuffer-objects\">Section 24.1</a> of the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_external_arraybuffer"
                },
                {
                  "textRaw": "napi_create_external_buffer",
                  "name": "napi_create_external_buffer",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_external_buffer(napi_env env,\n                                        size_t length,\n                                        void* data,\n                                        napi_finalize finalize_cb,\n                                        void* finalize_hint,\n                                        napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] length</code>: Size in bytes of the input buffer (should be the same as\nthe size of the new buffer).</li>\n<li><code>[in] data</code>: Raw pointer to the underlying buffer to copy from.</li>\n<li><code>[in] finalize_cb</code>: Optional callback to call when the <code>ArrayBuffer</code> is\nbeing collected.</li>\n<li><code>[in] finalize_hint</code>: Optional hint to pass to the finalize callback\nduring collection.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a <code>node::Buffer</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API allocates a <code>node::Buffer</code> object and initializes it with data\nbacked by the passed in buffer. While this is still a fully-supported data\nstructure, in most cases using a <code>TypedArray</code> will suffice.</p>\n<p>For Node.js &gt;=4 <code>Buffers</code> are <code>Uint8Array</code>s.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_external_buffer"
                },
                {
                  "textRaw": "napi_create_function",
                  "name": "napi_create_function",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_function(napi_env env,\n                                 const char* utf8name,\n                                 size_t length,\n                                 napi_callback cb,\n                                 void* data,\n                                 napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] utf8name</code>: A string representing the name of the function encoded as\nUTF8.</li>\n<li><code>[in] length</code>: The length of the <code>utf8name</code> in bytes, or\n<code>NAPI_AUTO_LENGTH</code> if it is null-terminated.</li>\n<li><code>[in] cb</code>: A function pointer to the native function to be invoked when the\ncreated function is invoked from JavaScript.</li>\n<li><code>[in] data</code>: Optional arbitrary context data to be passed into the native\nfunction when it is invoked.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript function.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns an N-API value corresponding to a JavaScript <code>Function</code> object.\nIt&#39;s used to wrap native functions so that they can be invoked from JavaScript.</p>\n<p>JavaScript <code>Function</code>s are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-function-objects\">Section 19.2</a>\nof the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_function"
                },
                {
                  "textRaw": "napi_create_object",
                  "name": "napi_create_object",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_object(napi_env env, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>Object</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API allocates a default JavaScript <code>Object</code>.\nIt is the equivalent of doing <code>new Object()</code> in JavaScript.</p>\n<p>The JavaScript <code>Object</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-object-type\">Section 6.1.7</a> of the\nECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_object"
                },
                {
                  "textRaw": "napi_create_symbol",
                  "name": "napi_create_symbol",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_symbol(napi_env env,\n                               napi_value description,\n                               napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] description</code>: Optional <code>napi_value</code> which refers to a JavaScript\n<code>String</code> to be set as the description for the symbol.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>Symbol</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a JavaScript <code>Symbol</code> object from a UTF8-encoded C string.</p>\n<p>The JavaScript <code>Symbol</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-symbol-objects\">Section 19.4</a>\nof the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_symbol"
                },
                {
                  "textRaw": "napi_create_typedarray",
                  "name": "napi_create_typedarray",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_typedarray(napi_env env,\n                                   napi_typedarray_type type,\n                                   size_t length,\n                                   napi_value arraybuffer,\n                                   size_t byte_offset,\n                                   napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] type</code>: Scalar datatype of the elements within the <code>TypedArray</code>.</li>\n<li><code>[in] length</code>: Number of elements in the <code>TypedArray</code>.</li>\n<li><code>[in] arraybuffer</code>: <code>ArrayBuffer</code> underlying the typed array.</li>\n<li><code>[in] byte_offset</code>: The byte offset within the <code>ArrayBuffer</code> from which to\nstart projecting the <code>TypedArray</code>.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>TypedArray</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a JavaScript <code>TypedArray</code> object over an existing\n<code>ArrayBuffer</code>. <code>TypedArray</code> objects provide an array-like view over an\nunderlying data buffer where each element has the same underlying binary scalar\ndatatype.</p>\n<p>It&#39;s required that <code>(length * size_of_element) + byte_offset</code> should\nbe &lt;= the size in bytes of the array passed in. If not, a <code>RangeError</code> exception\nis raised.</p>\n<p>JavaScript <code>TypedArray</code> objects are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-typedarray-objects\">Section 22.2</a> of the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_typedarray"
                },
                {
                  "textRaw": "napi_create_dataview",
                  "name": "napi_create_dataview",
                  "meta": {
                    "added": [
                      "v8.3.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_dataview(napi_env env,\n                                 size_t byte_length,\n                                 napi_value arraybuffer,\n                                 size_t byte_offset,\n                                 napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] length</code>: Number of elements in the <code>DataView</code>.</li>\n<li><code>[in] arraybuffer</code>: <code>ArrayBuffer</code> underlying the <code>DataView</code>.</li>\n<li><code>[in] byte_offset</code>: The byte offset within the <code>ArrayBuffer</code> from which to\nstart projecting the <code>DataView</code>.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>DataView</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a JavaScript <code>DataView</code> object over an existing <code>ArrayBuffer</code>.\n<code>DataView</code> objects provide an array-like view over an underlying data buffer,\nbut one which allows items of different size and type in the <code>ArrayBuffer</code>.</p>\n<p>It is required that <code>byte_length + byte_offset</code> is less than or equal to the\nsize in bytes of the array passed in. If not, a <code>RangeError</code> exception is\nraised.</p>\n<p>JavaScript <code>DataView</code> objects are described in\n<a href=\"https://tc39.github.io/ecma262/#sec-dataview-objects\">Section 24.3</a> of the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_dataview"
                }
              ],
              "type": "module",
              "displayName": "Object Creation Functions"
            },
            {
              "textRaw": "Functions to convert from C types to N-API",
              "name": "functions_to_convert_from_c_types_to_n-api",
              "modules": [
                {
                  "textRaw": "napi_create_int32",
                  "name": "napi_create_int32",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_int32(napi_env env, int32_t value, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: Integer value to be represented in JavaScript.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>Number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to convert from the C <code>int32_t</code> type to the JavaScript\n<code>Number</code> type.</p>\n<p>The JavaScript <code>Number</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type\">Section 6.1.6</a> of the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_int32"
                },
                {
                  "textRaw": "napi_create_uint32",
                  "name": "napi_create_uint32",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_uint32(napi_env env, uint32_t value, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: Unsigned integer value to be represented in JavaScript.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>Number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to convert from the C <code>uint32_t</code> type to the JavaScript\n<code>Number</code> type.</p>\n<p>The JavaScript <code>Number</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type\">Section 6.1.6</a> of the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_uint32"
                },
                {
                  "textRaw": "napi_create_int64",
                  "name": "napi_create_int64",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_int64(napi_env env, int64_t value, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: Integer value to be represented in JavaScript.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>Number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to convert from the C <code>int64_t</code> type to the JavaScript\n<code>Number</code> type.</p>\n<p>The JavaScript <code>Number</code> type is described in <a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type\">Section 6.1.6</a>\nof the ECMAScript Language Specification. Note the complete range of <code>int64_t</code>\ncannot be represented with full precision in JavaScript. Integer values\noutside the range of\n<a href=\"https://tc39.github.io/ecma262/#sec-number.min_safe_integer\"><code>Number.MIN_SAFE_INTEGER</code></a>\n-(2^53 - 1) -\n<a href=\"https://tc39.github.io/ecma262/#sec-number.max_safe_integer\"><code>Number.MAX_SAFE_INTEGER</code></a>\n(2^53 - 1) will lose precision.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_int64"
                },
                {
                  "textRaw": "napi_create_double",
                  "name": "napi_create_double",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_double(napi_env env, double value, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: Double-precision value to be represented in JavaScript.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>Number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to convert from the C <code>double</code> type to the JavaScript\n<code>Number</code> type.</p>\n<p>The JavaScript <code>Number</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type\">Section 6.1.6</a> of the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_double"
                },
                {
                  "textRaw": "napi_create_string_latin1",
                  "name": "napi_create_string_latin1",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_string_latin1(napi_env env,\n                                      const char* str,\n                                      size_t length,\n                                      napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] str</code>: Character buffer representing an ISO-8859-1-encoded string.</li>\n<li><code>[in] length</code>: The length of the string in bytes, or\n<code>NAPI_AUTO_LENGTH</code> if it is null-terminated.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>String</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a JavaScript <code>String</code> object from an ISO-8859-1-encoded C\nstring. The native string is copied.</p>\n<p>The JavaScript <code>String</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type\">Section 6.1.4</a> of the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_string_latin1"
                },
                {
                  "textRaw": "napi_create_string_utf16",
                  "name": "napi_create_string_utf16",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_string_utf16(napi_env env,\n                                     const char16_t* str,\n                                     size_t length,\n                                     napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] str</code>: Character buffer representing a UTF16-LE-encoded string.</li>\n<li><code>[in] length</code>: The length of the string in two-byte code units, or\n<code>NAPI_AUTO_LENGTH</code> if it is null-terminated.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>String</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a JavaScript <code>String</code> object from a UTF16-LE-encoded C string.\nThe native string is copied.</p>\n<p>The JavaScript <code>String</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type\">Section 6.1.4</a> of the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_string_utf16"
                },
                {
                  "textRaw": "napi_create_string_utf8",
                  "name": "napi_create_string_utf8",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_create_string_utf8(napi_env env,\n                                    const char* str,\n                                    size_t length,\n                                    napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] str</code>: Character buffer representing a UTF8-encoded string.</li>\n<li><code>[in] length</code>: The length of the string in bytes, or <code>NAPI_AUTO_LENGTH</code>\nif it is null-terminated.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing a JavaScript <code>String</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a JavaScript <code>String</code> object from a UTF8-encoded C string.\nThe native string is copied.</p>\n<p>The JavaScript <code>String</code> type is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-ecmascript-language-types-string-type\">Section 6.1.4</a> of the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_create_string_utf8"
                }
              ],
              "type": "module",
              "displayName": "Functions to convert from C types to N-API"
            },
            {
              "textRaw": "Functions to convert from N-API to C types",
              "name": "functions_to_convert_from_n-api_to_c_types",
              "modules": [
                {
                  "textRaw": "napi_get_array_length",
                  "name": "napi_get_array_length",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_array_length(napi_env env,\n                                  napi_value value,\n                                  uint32_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing the JavaScript <code>Array</code> whose length is\nbeing queried.</li>\n<li><code>[out] result</code>: <code>uint32</code> representing length of the array.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the length of an array.</p>\n<p><code>Array</code> length is described in\n<a href=\"https://tc39.github.io/ecma262/#sec-properties-of-array-instances-length\">Section 22.1.4.1</a>\nof the ECMAScript Language Specification.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_array_length"
                },
                {
                  "textRaw": "napi_get_arraybuffer_info",
                  "name": "napi_get_arraybuffer_info",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_arraybuffer_info(napi_env env,\n                                      napi_value arraybuffer,\n                                      void** data,\n                                      size_t* byte_length)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] arraybuffer</code>: <code>napi_value</code> representing the <code>ArrayBuffer</code> being queried.</li>\n<li><code>[out] data</code>: The underlying data buffer of the <code>ArrayBuffer</code>.</li>\n<li><code>[out] byte_length</code>: Length in bytes of the underlying data buffer.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to retrieve the underlying data buffer of an <code>ArrayBuffer</code> and\nits length.</p>\n<p><em>WARNING</em>: Use caution while using this API. The lifetime of the underlying data\nbuffer is managed by the <code>ArrayBuffer</code> even after it&#39;s returned. A\npossible safe way to use this API is in conjunction with\n<a href=\"#n_api_napi_create_reference\"><code>napi_create_reference</code></a>, which can be used to guarantee control over the\nlifetime of the <code>ArrayBuffer</code>. It&#39;s also safe to use the returned data buffer\nwithin the same callback as long as there are no calls to other APIs that might\ntrigger a GC.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_arraybuffer_info"
                },
                {
                  "textRaw": "napi_get_buffer_info",
                  "name": "napi_get_buffer_info",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_buffer_info(napi_env env,\n                                 napi_value value,\n                                 void** data,\n                                 size_t* length)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing the <code>node::Buffer</code> being queried.</li>\n<li><code>[out] data</code>: The underlying data buffer of the <code>node::Buffer</code>.</li>\n<li><code>[out] length</code>: Length in bytes of the underlying data buffer.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to retrieve the underlying data buffer of a <code>node::Buffer</code>\nand it&#39;s length.</p>\n<p><em>Warning</em>: Use caution while using this API since the underlying data buffer&#39;s\nlifetime is not guaranteed if it&#39;s managed by the VM.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_buffer_info"
                },
                {
                  "textRaw": "napi_get_prototype",
                  "name": "napi_get_prototype",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_prototype(napi_env env,\n                               napi_value object,\n                               napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] object</code>: <code>napi_value</code> representing JavaScript <code>Object</code> whose prototype\nto return. This returns the equivalent of <code>Object.getPrototypeOf</code> (which is\nnot the same as the function&#39;s <code>prototype</code> property).</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing prototype of the given object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_prototype"
                },
                {
                  "textRaw": "napi_get_typedarray_info",
                  "name": "napi_get_typedarray_info",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_typedarray_info(napi_env env,\n                                     napi_value typedarray,\n                                     napi_typedarray_type* type,\n                                     size_t* length,\n                                     void** data,\n                                     napi_value* arraybuffer,\n                                     size_t* byte_offset)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] typedarray</code>: <code>napi_value</code> representing the <code>TypedArray</code> whose\nproperties to query.</li>\n<li><code>[out] type</code>: Scalar datatype of the elements within the <code>TypedArray</code>.</li>\n<li><code>[out] length</code>: <code>Number</code> of elements in the <code>TypedArray</code>.</li>\n<li><code>[out] data</code>: The data buffer underlying the typed array.</li>\n<li><code>[out] byte_offset</code>: The byte offset within the data buffer from which\nto start projecting the <code>TypedArray</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns various properties of a typed array.</p>\n<p><em>Warning</em>: Use caution while using this API since the underlying data buffer\nis managed by the VM.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_typedarray_info"
                },
                {
                  "textRaw": "napi_get_dataview_info",
                  "name": "napi_get_dataview_info",
                  "meta": {
                    "added": [
                      "v8.3.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_dataview_info(napi_env env,\n                                   napi_value dataview,\n                                   size_t* byte_length,\n                                   void** data,\n                                   napi_value* arraybuffer,\n                                   size_t* byte_offset)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] dataview</code>: <code>napi_value</code> representing the <code>DataView</code> whose\nproperties to query.</li>\n<li><code>[out] byte_length</code>: <code>Number</code> of bytes in the <code>DataView</code>.</li>\n<li><code>[out] data</code>: The data buffer underlying the <code>DataView</code>.</li>\n<li><code>[out] arraybuffer</code>: <code>ArrayBuffer</code> underlying the <code>DataView</code>.</li>\n<li><code>[out] byte_offset</code>: The byte offset within the data buffer from which\nto start projecting the <code>DataView</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns various properties of a <code>DataView</code>.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_dataview_info"
                },
                {
                  "textRaw": "napi_get_value_bool",
                  "name": "napi_get_value_bool",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_value_bool(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript <code>Boolean</code>.</li>\n<li><code>[out] result</code>: C boolean primitive equivalent of the given JavaScript\n<code>Boolean</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-boolean <code>napi_value</code> is\npassed in it returns <code>napi_boolean_expected</code>.</p>\n<p>This API returns the C boolean primitive equivalent of the given JavaScript\n<code>Boolean</code>.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_value_bool"
                },
                {
                  "textRaw": "napi_get_value_double",
                  "name": "napi_get_value_double",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_value_double(napi_env env,\n                                  napi_value value,\n                                  double* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript <code>Number</code>.</li>\n<li><code>[out] result</code>: C double primitive equivalent of the given JavaScript\n<code>Number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-number <code>napi_value</code> is passed\nin it returns <code>napi_number_expected</code>.</p>\n<p>This API returns the C double primitive equivalent of the given JavaScript\n<code>Number</code>.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_value_double"
                },
                {
                  "textRaw": "napi_get_value_external",
                  "name": "napi_get_value_external",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_value_external(napi_env env,\n                                    napi_value value,\n                                    void** result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript external value.</li>\n<li><code>[out] result</code>: Pointer to the data wrapped by the JavaScript external value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-external <code>napi_value</code> is\npassed in it returns <code>napi_invalid_arg</code>.</p>\n<p>This API retrieves the external data pointer that was previously passed to\n<code>napi_create_external()</code>.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_value_external"
                },
                {
                  "textRaw": "napi_get_value_int32",
                  "name": "napi_get_value_int32",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_value_int32(napi_env env,\n                                 napi_value value,\n                                 int32_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript <code>Number</code>.</li>\n<li><code>[out] result</code>: C <code>int32</code> primitive equivalent of the given JavaScript\n<code>Number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-number <code>napi_value</code>\nis passed in <code>napi_number_expected</code>.</p>\n<p>This API returns the C <code>int32</code> primitive equivalent\nof the given JavaScript <code>Number</code>.</p>\n<p>If the number exceeds the range of the 32 bit integer, then the result is\ntruncated to the equivalent of the bottom 32 bits. This can result in a large\npositive number becoming a negative number if the value is &gt; 2^31 -1.</p>\n<p>Non-finite number values (<code>NaN</code>, <code>+Infinity</code>, or <code>-Infinity</code>) set the\nresult to zero.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_value_int32"
                },
                {
                  "textRaw": "napi_get_value_int64",
                  "name": "napi_get_value_int64",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_value_int64(napi_env env,\n                                 napi_value value,\n                                 int64_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript <code>Number</code>.</li>\n<li><code>[out] result</code>: C <code>int64</code> primitive equivalent of the given JavaScript\n<code>Number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-number <code>napi_value</code>\nis passed in it returns <code>napi_number_expected</code>.</p>\n<p>This API returns the C <code>int64</code> primitive equivalent of the given JavaScript\n<code>Number</code>.</p>\n<p><code>Number</code> values outside the range of\n<a href=\"https://tc39.github.io/ecma262/#sec-number.min_safe_integer\"><code>Number.MIN_SAFE_INTEGER</code></a>\n-(2^53 - 1) -\n<a href=\"https://tc39.github.io/ecma262/#sec-number.max_safe_integer\"><code>Number.MAX_SAFE_INTEGER</code></a>\n(2^53 - 1) will lose precision.</p>\n<p>Non-finite number values (<code>NaN</code>, <code>+Infinity</code>, or <code>-Infinity</code>) set the\nresult to zero.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_value_int64"
                },
                {
                  "textRaw": "napi_get_value_string_latin1",
                  "name": "napi_get_value_string_latin1",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_value_string_latin1(napi_env env,\n                                         napi_value value,\n                                         char* buf,\n                                         size_t bufsize,\n                                         size_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript string.</li>\n<li><code>[in] buf</code>: Buffer to write the ISO-8859-1-encoded string into. If NULL is\npassed in, the length of the string (in bytes) is returned.</li>\n<li><code>[in] bufsize</code>: Size of the destination buffer. When this value is\ninsufficient, the returned string will be truncated.</li>\n<li><code>[out] result</code>: Number of bytes copied into the buffer, excluding the null\nterminator.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-<code>String</code> <code>napi_value</code>\nis passed in it returns <code>napi_string_expected</code>.</p>\n<p>This API returns the ISO-8859-1-encoded string corresponding the value passed\nin.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_value_string_latin1"
                },
                {
                  "textRaw": "napi_get_value_string_utf8",
                  "name": "napi_get_value_string_utf8",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_value_string_utf8(napi_env env,\n                                       napi_value value,\n                                       char* buf,\n                                       size_t bufsize,\n                                       size_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript string.</li>\n<li><code>[in] buf</code>: Buffer to write the UTF8-encoded string into. If NULL is passed\nin, the length of the string (in bytes) is returned.</li>\n<li><code>[in] bufsize</code>: Size of the destination buffer. When this value is\ninsufficient, the returned string will be truncated.</li>\n<li><code>[out] result</code>: Number of bytes copied into the buffer, excluding the null\nterminator.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-<code>String</code> <code>napi_value</code>\nis passed in it returns <code>napi_string_expected</code>.</p>\n<p>This API returns the UTF8-encoded string corresponding the value passed in.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_value_string_utf8"
                },
                {
                  "textRaw": "napi_get_value_string_utf16",
                  "name": "napi_get_value_string_utf16",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_value_string_utf16(napi_env env,\n                                        napi_value value,\n                                        char16_t* buf,\n                                        size_t bufsize,\n                                        size_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript string.</li>\n<li><code>[in] buf</code>: Buffer to write the UTF16-LE-encoded string into. If NULL is\npassed in, the length of the string (in 2-byte code units) is returned.</li>\n<li><code>[in] bufsize</code>: Size of the destination buffer. When this value is\ninsufficient, the returned string will be truncated.</li>\n<li><code>[out] result</code>: Number of 2-byte code units copied into the buffer, excluding\nthe null terminator.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-<code>String</code> <code>napi_value</code>\nis passed in it returns <code>napi_string_expected</code>.</p>\n<p>This API returns the UTF16-encoded string corresponding the value passed in.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_value_string_utf16"
                },
                {
                  "textRaw": "napi_get_value_uint32",
                  "name": "napi_get_value_uint32",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_value_uint32(napi_env env,\n                                  napi_value value,\n                                  uint32_t* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: <code>napi_value</code> representing JavaScript <code>Number</code>.</li>\n<li><code>[out] result</code>: C primitive equivalent of the given <code>napi_value</code> as a\n<code>uint32_t</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded. If a non-number <code>napi_value</code>\nis passed in it returns <code>napi_number_expected</code>.</p>\n<p>This API returns the C primitive equivalent of the given <code>napi_value</code> as a\n<code>uint32_t</code>.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_value_uint32"
                }
              ],
              "type": "module",
              "displayName": "Functions to convert from N-API to C types"
            },
            {
              "textRaw": "Functions to get global instances",
              "name": "functions_to_get_global_instances",
              "modules": [
                {
                  "textRaw": "napi_get_boolean",
                  "name": "napi_get_boolean",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_boolean(napi_env env, bool value, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The value of the boolean to retrieve.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing JavaScript <code>Boolean</code> singleton to\nretrieve.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API is used to return the JavaScript singleton object that is used to\nrepresent the given boolean value.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_boolean"
                },
                {
                  "textRaw": "napi_get_global",
                  "name": "napi_get_global",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_global(napi_env env, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing JavaScript <code>global</code> object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the <code>global</code> object.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_global"
                },
                {
                  "textRaw": "napi_get_null",
                  "name": "napi_get_null",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_null(napi_env env, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing JavaScript <code>null</code> object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the <code>null</code> object.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_null"
                },
                {
                  "textRaw": "napi_get_undefined",
                  "name": "napi_get_undefined",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_undefined(napi_env env, napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing JavaScript Undefined value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the Undefined object.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_undefined"
                }
              ],
              "type": "module",
              "displayName": "Functions to get global instances"
            }
          ],
          "type": "misc",
          "displayName": "Working with JavaScript Values"
        },
        {
          "textRaw": "Working with JavaScript Values - Abstract Operations",
          "name": "working_with_javascript_values_-_abstract_operations",
          "desc": "<p>N-API exposes a set of APIs to perform some abstract operations on JavaScript\nvalues. Some of these operations are documented under\n<a href=\"https://tc39.github.io/ecma262/#sec-abstract-operations\">Section 7</a>\nof the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</p>\n<p>These APIs support doing one of the following:</p>\n<ol>\n<li>Coerce JavaScript values to specific JavaScript types (such as <code>Number</code> or\n<code>String</code>).</li>\n<li>Check the type of a JavaScript value.</li>\n<li>Check for equality between two JavaScript values.</li>\n</ol>\n",
          "modules": [
            {
              "textRaw": "napi_coerce_to_bool",
              "name": "napi_coerce_to_bool",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_coerce_to_bool(napi_env env,\n                                napi_value value,\n                                napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to coerce.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the coerced JavaScript <code>Boolean</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API implements the abstract operation <code>ToBoolean()</code> as defined in\n<a href=\"https://tc39.github.io/ecma262/#sec-toboolean\">Section 7.1.2</a>\nof the ECMAScript Language Specification.\nThis API can be re-entrant if getters are defined on the passed-in <code>Object</code>.</p>\n",
              "type": "module",
              "displayName": "napi_coerce_to_bool"
            },
            {
              "textRaw": "napi_coerce_to_number",
              "name": "napi_coerce_to_number",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_coerce_to_number(napi_env env,\n                                  napi_value value,\n                                  napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to coerce.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the coerced JavaScript <code>Number</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API implements the abstract operation <code>ToNumber()</code> as defined in\n<a href=\"https://tc39.github.io/ecma262/#sec-tonumber\">Section 7.1.3</a>\nof the ECMAScript Language Specification.\nThis API can be re-entrant if getters are defined on the passed-in <code>Object</code>.</p>\n",
              "type": "module",
              "displayName": "napi_coerce_to_number"
            },
            {
              "textRaw": "napi_coerce_to_object",
              "name": "napi_coerce_to_object",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_coerce_to_object(napi_env env,\n                                  napi_value value,\n                                  napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to coerce.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the coerced JavaScript <code>Object</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API implements the abstract operation <code>ToObject()</code> as defined in\n<a href=\"https://tc39.github.io/ecma262/#sec-toobject\">Section 7.1.13</a>\nof the ECMAScript Language Specification.\nThis API can be re-entrant if getters are defined on the passed-in <code>Object</code>.</p>\n",
              "type": "module",
              "displayName": "napi_coerce_to_object"
            },
            {
              "textRaw": "napi_coerce_to_string",
              "name": "napi_coerce_to_string",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_coerce_to_string(napi_env env,\n                                  napi_value value,\n                                  napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to coerce.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the coerced JavaScript <code>String</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API implements the abstract operation <code>ToString()</code> as defined in\n<a href=\"https://tc39.github.io/ecma262/#sec-tostring\">Section 7.1.13</a>\nof the ECMAScript Language Specification.\nThis API can be re-entrant if getters are defined on the passed-in <code>Object</code>.</p>\n",
              "type": "module",
              "displayName": "napi_coerce_to_string"
            },
            {
              "textRaw": "napi_typeof",
              "name": "napi_typeof",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_typeof(napi_env env, napi_value value, napi_valuetype* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value whose type to query.</li>\n<li><code>[out] result</code>: The type of the JavaScript value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<ul>\n<li><code>napi_invalid_arg</code> if the type of <code>value</code> is not a known ECMAScript type and\n<code>value</code> is not an External value.</li>\n</ul>\n<p>This API represents behavior similar to invoking the <code>typeof</code> Operator on\nthe object as defined in <a href=\"https://tc39.github.io/ecma262/#sec-typeof-operator\">Section 12.5.5</a> of the ECMAScript Language\nSpecification. However, it has support for detecting an External value.\nIf <code>value</code> has a type that is invalid, an error is returned.</p>\n",
              "type": "module",
              "displayName": "napi_typeof"
            },
            {
              "textRaw": "napi_instanceof",
              "name": "napi_instanceof",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_instanceof(napi_env env,\n                            napi_value object,\n                            napi_value constructor,\n                            bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] object</code>: The JavaScript value to check.</li>\n<li><code>[in] constructor</code>: The JavaScript function object of the constructor\nfunction to check against.</li>\n<li><code>[out] result</code>: Boolean that is set to true if <code>object instanceof constructor</code>\nis true.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API represents invoking the <code>instanceof</code> Operator on the object as\ndefined in\n<a href=\"https://tc39.github.io/ecma262/#sec-instanceofoperator\">Section 12.10.4</a>\nof the ECMAScript Language Specification.</p>\n",
              "type": "module",
              "displayName": "napi_instanceof"
            },
            {
              "textRaw": "napi_is_array",
              "name": "napi_is_array",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_is_array(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to check.</li>\n<li><code>[out] result</code>: Whether the given object is an array.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API represents invoking the <code>IsArray</code> operation on the object\nas defined in <a href=\"https://tc39.github.io/ecma262/#sec-isarray\">Section 7.2.2</a>\nof the ECMAScript Language Specification.</p>\n",
              "type": "module",
              "displayName": "napi_is_array"
            },
            {
              "textRaw": "napi_is_arraybuffer",
              "name": "napi_is_arraybuffer",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_is_arraybuffer(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to check.</li>\n<li><code>[out] result</code>: Whether the given object is an <code>ArrayBuffer</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in is an array buffer.</p>\n",
              "type": "module",
              "displayName": "napi_is_arraybuffer"
            },
            {
              "textRaw": "napi_is_buffer",
              "name": "napi_is_buffer",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_is_buffer(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to check.</li>\n<li><code>[out] result</code>: Whether the given <code>napi_value</code> represents a <code>node::Buffer</code>\nobject.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in is a buffer.</p>\n",
              "type": "module",
              "displayName": "napi_is_buffer"
            },
            {
              "textRaw": "napi_is_error",
              "name": "napi_is_error",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_is_error(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to check.</li>\n<li><code>[out] result</code>: Whether the given <code>napi_value</code> represents an <code>Error</code> object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in is an <code>Error</code>.</p>\n",
              "type": "module",
              "displayName": "napi_is_error"
            },
            {
              "textRaw": "napi_is_typedarray",
              "name": "napi_is_typedarray",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_is_typedarray(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to check.</li>\n<li><code>[out] result</code>: Whether the given <code>napi_value</code> represents a <code>TypedArray</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in is a typed array.</p>\n",
              "type": "module",
              "displayName": "napi_is_typedarray"
            },
            {
              "textRaw": "napi_is_dataview",
              "name": "napi_is_dataview",
              "meta": {
                "added": [
                  "v8.3.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_is_dataview(napi_env env, napi_value value, bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] value</code>: The JavaScript value to check.</li>\n<li><code>[out] result</code>: Whether the given <code>napi_value</code> represents a <code>DataView</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in is a <code>DataView</code>.</p>\n",
              "type": "module",
              "displayName": "napi_is_dataview"
            },
            {
              "textRaw": "napi_strict_equals",
              "name": "napi_strict_equals",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_strict_equals(napi_env env,\n                               napi_value lhs,\n                               napi_value rhs,\n                               bool* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] lhs</code>: The JavaScript value to check.</li>\n<li><code>[in] rhs</code>: The JavaScript value to check against.</li>\n<li><code>[out] result</code>: Whether the two <code>napi_value</code> objects are equal.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API represents the invocation of the Strict Equality algorithm as\ndefined in\n<a href=\"https://tc39.github.io/ecma262/#sec-strict-equality-comparison\">Section 7.2.14</a>\nof the ECMAScript Language Specification.</p>\n",
              "type": "module",
              "displayName": "napi_strict_equals"
            }
          ],
          "type": "misc",
          "displayName": "Working with JavaScript Values - Abstract Operations"
        },
        {
          "textRaw": "Working with JavaScript Properties",
          "name": "working_with_javascript_properties",
          "desc": "<p>N-API exposes a set of APIs to get and set properties on JavaScript\nobjects. Some of these types are documented under\n<a href=\"https://tc39.github.io/ecma262/#sec-operations-on-objects\">Section 7</a> of the\n<a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</p>\n<p>Properties in JavaScript are represented as a tuple of a key and a value.\nFundamentally, all property keys in N-API can be represented in one of the\nfollowing forms:</p>\n<ul>\n<li>Named: a simple UTF8-encoded string</li>\n<li>Integer-Indexed: an index value represented by <code>uint32_t</code></li>\n<li>JavaScript value: these are represented in N-API by <code>napi_value</code>. This can\nbe a <code>napi_value</code> representing a <code>String</code>, <code>Number</code>, or <code>Symbol</code>.</li>\n</ul>\n<p>N-API values are represented by the type <code>napi_value</code>.\nAny N-API call that requires a JavaScript value takes in a <code>napi_value</code>.\nHowever, it&#39;s the caller&#39;s responsibility to make sure that the\n<code>napi_value</code> in question is of the JavaScript type expected by the API.</p>\n<p>The APIs documented in this section provide a simple interface to\nget and set properties on arbitrary JavaScript objects represented by\n<code>napi_value</code>.</p>\n<p>For instance, consider the following JavaScript code snippet:</p>\n<pre><code class=\"lang-js\">const obj = {};\nobj.myProp = 123;\n</code></pre>\n<p>The equivalent can be done using N-API values with the following snippet:</p>\n<pre><code class=\"lang-C\">napi_status status = napi_generic_failure;\n\n// const obj = {}\nnapi_value obj, value;\nstatus = napi_create_object(env, &amp;obj);\nif (status != napi_ok) return status;\n\n// Create a napi_value for 123\nstatus = napi_create_int32(env, 123, &amp;value);\nif (status != napi_ok) return status;\n\n// obj.myProp = 123\nstatus = napi_set_named_property(env, obj, &quot;myProp&quot;, value);\nif (status != napi_ok) return status;\n</code></pre>\n<p>Indexed properties can be set in a similar manner. Consider the following\nJavaScript snippet:</p>\n<pre><code class=\"lang-js\">const arr = [];\narr[123] = &#39;hello&#39;;\n</code></pre>\n<p>The equivalent can be done using N-API values with the following snippet:</p>\n<pre><code class=\"lang-C\">napi_status status = napi_generic_failure;\n\n// const arr = [];\nnapi_value arr, value;\nstatus = napi_create_array(env, &amp;arr);\nif (status != napi_ok) return status;\n\n// Create a napi_value for &#39;hello&#39;\nstatus = napi_create_string_utf8(env, &quot;hello&quot;, NAPI_AUTO_LENGTH, &amp;value);\nif (status != napi_ok) return status;\n\n// arr[123] = &#39;hello&#39;;\nstatus = napi_set_element(env, arr, 123, value);\nif (status != napi_ok) return status;\n</code></pre>\n<p>Properties can be retrieved using the APIs described in this section.\nConsider the following JavaScript snippet:</p>\n<pre><code class=\"lang-js\">const arr = [];\nconst value = arr[123];\n</code></pre>\n<p>The following is the approximate equivalent of the N-API counterpart:</p>\n<pre><code class=\"lang-C\">napi_status status = napi_generic_failure;\n\n// const arr = []\nnapi_value arr, value;\nstatus = napi_create_array(env, &amp;arr);\nif (status != napi_ok) return status;\n\n// const value = arr[123]\nstatus = napi_get_element(env, arr, 123, &amp;value);\nif (status != napi_ok) return status;\n</code></pre>\n<p>Finally, multiple properties can also be defined on an object for performance\nreasons. Consider the following JavaScript:</p>\n<pre><code class=\"lang-js\">const obj = {};\nObject.defineProperties(obj, {\n  &#39;foo&#39;: { value: 123, writable: true, configurable: true, enumerable: true },\n  &#39;bar&#39;: { value: 456, writable: true, configurable: true, enumerable: true }\n});\n</code></pre>\n<p>The following is the approximate equivalent of the N-API counterpart:</p>\n<pre><code class=\"lang-C\">napi_status status = napi_status_generic_failure;\n\n// const obj = {};\nnapi_value obj;\nstatus = napi_create_object(env, &amp;obj);\nif (status != napi_ok) return status;\n\n// Create napi_values for 123 and 456\nnapi_value fooValue, barValue;\nstatus = napi_create_int32(env, 123, &amp;fooValue);\nif (status != napi_ok) return status;\nstatus = napi_create_int32(env, 456, &amp;barValue);\nif (status != napi_ok) return status;\n\n// Set the properties\nnapi_property_descriptor descriptors[] = {\n  { &quot;foo&quot;, NULL, NULL, NULL, NULL, fooValue, napi_default, NULL },\n  { &quot;bar&quot;, NULL, NULL, NULL, NULL, barValue, napi_default, NULL }\n}\nstatus = napi_define_properties(env,\n                                obj,\n                                sizeof(descriptors) / sizeof(descriptors[0]),\n                                descriptors);\nif (status != napi_ok) return status;\n</code></pre>\n",
          "modules": [
            {
              "textRaw": "Structures",
              "name": "structures",
              "modules": [
                {
                  "textRaw": "napi_property_attributes",
                  "name": "napi_property_attributes",
                  "desc": "<pre><code class=\"lang-C\">typedef enum {\n  napi_default = 0,\n  napi_writable = 1 &lt;&lt; 0,\n  napi_enumerable = 1 &lt;&lt; 1,\n  napi_configurable = 1 &lt;&lt; 2,\n\n  // Used with napi_define_class to distinguish static properties\n  // from instance properties. Ignored by napi_define_properties.\n  napi_static = 1 &lt;&lt; 10,\n} napi_property_attributes;\n</code></pre>\n<p><code>napi_property_attributes</code> are flags used to control the behavior of properties\nset on a JavaScript object. Other than <code>napi_static</code> they correspond to the\nattributes listed in <a href=\"https://tc39.github.io/ecma262/#table-2\">Section 6.1.7.1</a>\nof the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.\nThey can be one or more of the following bitflags:</p>\n<ul>\n<li><code>napi_default</code> - Used to indicate that no explicit attributes are set on the\ngiven property. By default, a property is read only, not enumerable and not\nconfigurable.</li>\n<li><code>napi_writable</code> - Used to indicate that a given property is writable.</li>\n<li><code>napi_enumerable</code> - Used to indicate that a given property is enumerable.</li>\n<li><code>napi_configurable</code> - Used to indicate that a given property is configurable,\nas defined in <a href=\"https://tc39.github.io/ecma262/#table-2\">Section 6.1.7.1</a> of the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language Specification</a>.</li>\n<li><code>napi_static</code> - Used to indicate that the property will be defined as\na static property on a class as opposed to an instance property, which is the\ndefault. This is used only by <a href=\"#n_api_napi_define_class\"><code>napi_define_class</code></a>. It is ignored by\n<code>napi_define_properties</code>.</li>\n</ul>\n",
                  "type": "module",
                  "displayName": "napi_property_attributes"
                },
                {
                  "textRaw": "napi_property_descriptor",
                  "name": "napi_property_descriptor",
                  "desc": "<pre><code class=\"lang-C\">typedef struct {\n  // One of utf8name or name should be NULL.\n  const char* utf8name;\n  napi_value name;\n\n  napi_callback method;\n  napi_callback getter;\n  napi_callback setter;\n  napi_value value;\n\n  napi_property_attributes attributes;\n  void* data;\n} napi_property_descriptor;\n</code></pre>\n<ul>\n<li><code>utf8name</code>: Optional <code>String</code> describing the key for the property,\nencoded as UTF8. One of <code>utf8name</code> or <code>name</code> must be provided for the\nproperty.</li>\n<li><code>name</code>: Optional <code>napi_value</code> that points to a JavaScript string or symbol\nto be used as the key for the property. One of <code>utf8name</code> or <code>name</code> must\nbe provided for the property.</li>\n<li><code>value</code>: The value that&#39;s retrieved by a get access of the property if the\nproperty is a data property. If this is passed in, set <code>getter</code>, <code>setter</code>,\n<code>method</code> and <code>data</code> to <code>NULL</code> (since these members won&#39;t be used).</li>\n<li><code>getter</code>: A function to call when a get access of the property is performed.\nIf this is passed in, set <code>value</code> and <code>method</code> to <code>NULL</code> (since these members\nwon&#39;t be used). The given function is called implicitly by the runtime when the\nproperty is accessed from JavaScript code (or if a get on the property is\nperformed using a N-API call).</li>\n<li><code>setter</code>: A function to call when a set access of the property is performed.\nIf this is passed in, set <code>value</code> and <code>method</code> to <code>NULL</code> (since these members\nwon&#39;t be used). The given function is called implicitly by the runtime when the\nproperty is set from JavaScript code (or if a set on the property is\nperformed using a N-API call).</li>\n<li><code>method</code>: Set this to make the property descriptor object&#39;s <code>value</code>\nproperty to be a JavaScript function represented by <code>method</code>. If this is\npassed in, set <code>value</code>, <code>getter</code> and <code>setter</code> to <code>NULL</code> (since these members\nwon&#39;t be used).</li>\n<li><code>attributes</code>: The attributes associated with the particular property.\nSee <a href=\"#n_api_napi_property_attributes\"><code>napi_property_attributes</code></a>.</li>\n<li><code>data</code>: The callback data passed into <code>method</code>, <code>getter</code> and <code>setter</code> if\nthis function is invoked.</li>\n</ul>\n",
                  "type": "module",
                  "displayName": "napi_property_descriptor"
                }
              ],
              "type": "module",
              "displayName": "Structures"
            },
            {
              "textRaw": "Functions",
              "name": "functions",
              "modules": [
                {
                  "textRaw": "napi_get_property_names",
                  "name": "napi_get_property_names",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_property_names(napi_env env,\n                                    napi_value object,\n                                    napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object from which to retrieve the properties.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing an array of JavaScript values\nthat represent the property names of the object. The API can be used to\niterate over <code>result</code> using <a href=\"#n_api_napi_get_array_length\"><code>napi_get_array_length</code></a>\nand <a href=\"#n_api_napi_get_element\"><code>napi_get_element</code></a>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the names of the enumerable properties of <code>object</code> as an array\nof strings. The properties of <code>object</code> whose key is a symbol will not be\nincluded.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_property_names"
                },
                {
                  "textRaw": "napi_set_property",
                  "name": "napi_set_property",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_set_property(napi_env env,\n                              napi_value object,\n                              napi_value key,\n                              napi_value value);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object on which to set the property.</li>\n<li><code>[in] key</code>: The name of the property to set.</li>\n<li><code>[in] value</code>: The property value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API set a property on the <code>Object</code> passed in.</p>\n",
                  "type": "module",
                  "displayName": "napi_set_property"
                },
                {
                  "textRaw": "napi_get_property",
                  "name": "napi_get_property",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_property(napi_env env,\n                              napi_value object,\n                              napi_value key,\n                              napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object from which to retrieve the property.</li>\n<li><code>[in] key</code>: The name of the property to retrieve.</li>\n<li><code>[out] result</code>: The value of the property.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API gets the requested property from the <code>Object</code> passed in.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_property"
                },
                {
                  "textRaw": "napi_has_property",
                  "name": "napi_has_property",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_has_property(napi_env env,\n                              napi_value object,\n                              napi_value key,\n                              bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to query.</li>\n<li><code>[in] key</code>: The name of the property whose existence to check.</li>\n<li><code>[out] result</code>: Whether the property exists on the object or not.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in has the named property.</p>\n",
                  "type": "module",
                  "displayName": "napi_has_property"
                },
                {
                  "textRaw": "napi_delete_property",
                  "name": "napi_delete_property",
                  "meta": {
                    "added": [
                      "v8.2.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_delete_property(napi_env env,\n                                 napi_value object,\n                                 napi_value key,\n                                 bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to query.</li>\n<li><code>[in] key</code>: The name of the property to delete.</li>\n<li><code>[out] result</code>: Whether the property deletion succeeded or not. <code>result</code> can\noptionally be ignored by passing <code>NULL</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API attempts to delete the <code>key</code> own property from <code>object</code>.</p>\n",
                  "type": "module",
                  "displayName": "napi_delete_property"
                },
                {
                  "textRaw": "napi_has_own_property",
                  "name": "napi_has_own_property",
                  "meta": {
                    "added": [
                      "v8.2.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_has_own_property(napi_env env,\n                                  napi_value object,\n                                  napi_value key,\n                                  bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to query.</li>\n<li><code>[in] key</code>: The name of the own property whose existence to check.</li>\n<li><code>[out] result</code>: Whether the own property exists on the object or not.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API checks if the <code>Object</code> passed in has the named own property. <code>key</code> must\nbe a string or a <code>Symbol</code>, or an error will be thrown. N-API will not perform\nany conversion between data types.</p>\n",
                  "type": "module",
                  "displayName": "napi_has_own_property"
                },
                {
                  "textRaw": "napi_set_named_property",
                  "name": "napi_set_named_property",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_set_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8Name,\n                                    napi_value value);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object on which to set the property.</li>\n<li><code>[in] utf8Name</code>: The name of the property to set.</li>\n<li><code>[in] value</code>: The property value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method is equivalent to calling <a href=\"#n_api_napi_set_property\"><code>napi_set_property</code></a> with a <code>napi_value</code>\ncreated from the string passed in as <code>utf8Name</code>.</p>\n",
                  "type": "module",
                  "displayName": "napi_set_named_property"
                },
                {
                  "textRaw": "napi_get_named_property",
                  "name": "napi_get_named_property",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8Name,\n                                    napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object from which to retrieve the property.</li>\n<li><code>[in] utf8Name</code>: The name of the property to get.</li>\n<li><code>[out] result</code>: The value of the property.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method is equivalent to calling <a href=\"#n_api_napi_get_property\"><code>napi_get_property</code></a> with a <code>napi_value</code>\ncreated from the string passed in as <code>utf8Name</code>.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_named_property"
                },
                {
                  "textRaw": "napi_has_named_property",
                  "name": "napi_has_named_property",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_has_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8Name,\n                                    bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to query.</li>\n<li><code>[in] utf8Name</code>: The name of the property whose existence to check.</li>\n<li><code>[out] result</code>: Whether the property exists on the object or not.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method is equivalent to calling <a href=\"#n_api_napi_has_property\"><code>napi_has_property</code></a> with a <code>napi_value</code>\ncreated from the string passed in as <code>utf8Name</code>.</p>\n",
                  "type": "module",
                  "displayName": "napi_has_named_property"
                },
                {
                  "textRaw": "napi_set_element",
                  "name": "napi_set_element",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_set_element(napi_env env,\n                             napi_value object,\n                             uint32_t index,\n                             napi_value value);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object from which to set the properties.</li>\n<li><code>[in] index</code>: The index of the property to set.</li>\n<li><code>[in] value</code>: The property value.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API sets and element on the <code>Object</code> passed in.</p>\n",
                  "type": "module",
                  "displayName": "napi_set_element"
                },
                {
                  "textRaw": "napi_get_element",
                  "name": "napi_get_element",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_get_element(napi_env env,\n                             napi_value object,\n                             uint32_t index,\n                             napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object from which to retrieve the property.</li>\n<li><code>[in] index</code>: The index of the property to get.</li>\n<li><code>[out] result</code>: The value of the property.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API gets the element at the requested index.</p>\n",
                  "type": "module",
                  "displayName": "napi_get_element"
                },
                {
                  "textRaw": "napi_has_element",
                  "name": "napi_has_element",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_has_element(napi_env env,\n                             napi_value object,\n                             uint32_t index,\n                             bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to query.</li>\n<li><code>[in] index</code>: The index of the property whose existence to check.</li>\n<li><code>[out] result</code>: Whether the property exists on the object or not.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns if the <code>Object</code> passed in has an element at the\nrequested index.</p>\n",
                  "type": "module",
                  "displayName": "napi_has_element"
                },
                {
                  "textRaw": "napi_delete_element",
                  "name": "napi_delete_element",
                  "meta": {
                    "added": [
                      "v8.2.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_delete_element(napi_env env,\n                                napi_value object,\n                                uint32_t index,\n                                bool* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object to query.</li>\n<li><code>[in] index</code>: The index of the property to delete.</li>\n<li><code>[out] result</code>: Whether the element deletion succeeded or not. <code>result</code> can\noptionally be ignored by passing <code>NULL</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API attempts to delete the specified <code>index</code> from <code>object</code>.</p>\n",
                  "type": "module",
                  "displayName": "napi_delete_element"
                },
                {
                  "textRaw": "napi_define_properties",
                  "name": "napi_define_properties",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<pre><code class=\"lang-C\">napi_status napi_define_properties(napi_env env,\n                                   napi_value object,\n                                   size_t property_count,\n                                   const napi_property_descriptor* properties);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the N-API call is invoked under.</li>\n<li><code>[in] object</code>: The object from which to retrieve the properties.</li>\n<li><code>[in] property_count</code>: The number of elements in the <code>properties</code> array.</li>\n<li><code>[in] properties</code>: The array of property descriptors.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method allows the efficient definition of multiple properties on a given\nobject. The properties are defined using property descriptors (see\n<a href=\"#n_api_napi_property_descriptor\"><code>napi_property_descriptor</code></a>). Given an array of such property descriptors,\nthis API will set the properties on the object one at a time, as defined by\n<code>DefineOwnProperty()</code> (described in <a href=\"https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc\">Section 9.1.6</a> of the ECMA262\nspecification).</p>\n",
                  "type": "module",
                  "displayName": "napi_define_properties"
                }
              ],
              "type": "module",
              "displayName": "Functions"
            }
          ],
          "type": "misc",
          "displayName": "Working with JavaScript Properties"
        },
        {
          "textRaw": "Working with JavaScript Functions",
          "name": "working_with_javascript_functions",
          "desc": "<p>N-API provides a set of APIs that allow JavaScript code to\ncall back into native code. N-API APIs that support calling back\ninto native code take in a callback functions represented by\nthe <code>napi_callback</code> type. When the JavaScript VM calls back to\nnative code, the <code>napi_callback</code> function provided is invoked. The APIs\ndocumented in this section allow the callback function to do the\nfollowing:</p>\n<ul>\n<li>Get information about the context in which the callback was invoked.</li>\n<li>Get the arguments passed into the callback.</li>\n<li>Return a <code>napi_value</code> back from the callback.</li>\n</ul>\n<p>Additionally, N-API provides a set of functions which allow calling\nJavaScript functions from native code. One can either call a function\nlike a regular JavaScript function call, or as a constructor\nfunction.</p>\n",
          "modules": [
            {
              "textRaw": "napi_call_function",
              "name": "napi_call_function",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_call_function(napi_env env,\n                               napi_value recv,\n                               napi_value func,\n                               int argc,\n                               const napi_value* argv,\n                               napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] recv</code>: The <code>this</code> object passed to the called function.</li>\n<li><code>[in] func</code>: <code>napi_value</code> representing the JavaScript function\nto be invoked.</li>\n<li><code>[in] argc</code>: The count of elements in the <code>argv</code> array.</li>\n<li><code>[in] argv</code>: Array of <code>napi_values</code> representing JavaScript values passed\nin as arguments to the function.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the JavaScript object returned.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method allows a JavaScript function object to be called from a native\nadd-on. This is the primary mechanism of calling back <em>from</em> the add-on&#39;s\nnative code <em>into</em> JavaScript. For the special case of calling into JavaScript\nafter an async operation, see <a href=\"#n_api_napi_make_callback\"><code>napi_make_callback</code></a>.</p>\n<p>A sample use case might look as follows. Consider the following JavaScript\nsnippet:</p>\n<pre><code class=\"lang-js\">function AddTwo(num) {\n  return num + 2;\n}\n</code></pre>\n<p>Then, the above function can be invoked from a native add-on using the\nfollowing code:</p>\n<pre><code class=\"lang-C\">// Get the function named &quot;AddTwo&quot; on the global object\nnapi_value global, add_two, arg;\nnapi_status status = napi_get_global(env, &amp;global);\nif (status != napi_ok) return;\n\nstatus = napi_get_named_property(env, global, &quot;AddTwo&quot;, &amp;add_two);\nif (status != napi_ok) return;\n\n// const arg = 1337\nstatus = napi_create_int32(env, 1337, &amp;arg);\nif (status != napi_ok) return;\n\nnapi_value* argv = &amp;arg;\nsize_t argc = 1;\n\n// AddTwo(arg);\nnapi_value return_val;\nstatus = napi_call_function(env, global, add_two, argc, argv, &amp;return_val);\nif (status != napi_ok) return;\n\n// Convert the result back to a native type\nint32_t result;\nstatus = napi_get_value_int32(env, return_val, &amp;result);\nif (status != napi_ok) return;\n</code></pre>\n",
              "type": "module",
              "displayName": "napi_call_function"
            },
            {
              "textRaw": "napi_create_function",
              "name": "napi_create_function",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_create_function(napi_env env,\n                                 const char* utf8name,\n                                 napi_callback cb,\n                                 void* data,\n                                 napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] utf8Name</code>: The name of the function encoded as UTF8. This is visible\nwithin JavaScript as the new function object&#39;s <code>name</code> property.</li>\n<li><code>[in] cb</code>: The native function which should be called when this function\nobject is invoked.</li>\n<li><code>[in] data</code>: User-provided data context. This will be passed back into the\nfunction when invoked later.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the JavaScript function object for\nthe newly created function.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API allows an add-on author to create a function object in native code.\nThis is the primary mechanism to allow calling <em>into</em> the add-on&#39;s native code\n<em>from</em> JavaScript.</p>\n<p>The newly created function is not automatically visible from script after this\ncall. Instead, a property must be explicitly set on any object that is visible\nto JavaScript, in order for the function to be accessible from script.</p>\n<p>In order to expose a function as part of the\nadd-on&#39;s module exports, set the newly created function on the exports\nobject. A sample module might look as follows:</p>\n<pre><code class=\"lang-C\">napi_value SayHello(napi_env env, napi_callback_info info) {\n  printf(&quot;Hello\\n&quot;);\n  return NULL;\n}\n\nnapi_value Init(napi_env env, napi_value exports) {\n  napi_status status;\n\n  napi_value fn;\n  status = napi_create_function(env, NULL, 0, SayHello, NULL, &amp;fn);\n  if (status != napi_ok) return NULL;\n\n  status = napi_set_named_property(env, exports, &quot;sayHello&quot;, fn);\n  if (status != napi_ok) return NULL;\n\n  return exports;\n}\n\nNAPI_MODULE(NODE_GYP_MODULE_NAME, Init)\n</code></pre>\n<p>Given the above code, the add-on can be used from JavaScript as follows:</p>\n<pre><code class=\"lang-js\">const myaddon = require(&#39;./addon&#39;);\nmyaddon.sayHello();\n</code></pre>\n<p>The string passed to require is not necessarily the name passed into\n<code>NAPI_MODULE</code> in the earlier snippet but the name of the target in <code>binding.gyp</code>\nresponsible for creating the <code>.node</code> file.</p>\n",
              "type": "module",
              "displayName": "napi_create_function"
            },
            {
              "textRaw": "napi_get_cb_info",
              "name": "napi_get_cb_info",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_get_cb_info(napi_env env,\n                             napi_callback_info cbinfo,\n                             size_t* argc,\n                             napi_value* argv,\n                             napi_value* thisArg,\n                             void** data)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] cbinfo</code>: The callback info passed into the callback function.</li>\n<li><code>[in-out] argc</code>: Specifies the size of the provided <code>argv</code> array\nand receives the actual count of arguments.</li>\n<li><code>[out] argv</code>: Buffer to which the <code>napi_value</code> representing the\narguments are copied. If there are more arguments than the provided\ncount, only the requested number of arguments are copied. If there are fewer\narguments provided than claimed, the rest of <code>argv</code> is filled with <code>napi_value</code>\nvalues that represent <code>undefined</code>.</li>\n<li><code>[out] this</code>: Receives the JavaScript <code>this</code> argument for the call.</li>\n<li><code>[out] data</code>: Receives the data pointer for the callback.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method is used within a callback function to retrieve details about the\ncall like the arguments and the <code>this</code> pointer from a given callback info.</p>\n",
              "type": "module",
              "displayName": "napi_get_cb_info"
            },
            {
              "textRaw": "napi_get_new_target",
              "name": "napi_get_new_target",
              "meta": {
                "added": [
                  "v8.6.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_get_new_target(napi_env env,\n                                napi_callback_info cbinfo,\n                                napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] cbinfo</code>: The callback info passed into the callback function.</li>\n<li><code>[out] result</code>: The <code>new.target</code> of the constructor call.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the <code>new.target</code> of the constructor call. If the current\ncallback is not a constructor call, the result is <code>NULL</code>.</p>\n",
              "type": "module",
              "displayName": "napi_get_new_target"
            },
            {
              "textRaw": "napi_new_instance",
              "name": "napi_new_instance",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_new_instance(napi_env env,\n                              napi_value cons,\n                              size_t argc,\n                              napi_value* argv,\n                              napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] cons</code>: <code>napi_value</code> representing the JavaScript function\nto be invoked as a constructor.</li>\n<li><code>[in] argc</code>: The count of elements in the <code>argv</code> array.</li>\n<li><code>[in] argv</code>: Array of JavaScript values as <code>napi_value</code>\nrepresenting the arguments to the constructor.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the JavaScript object returned,\nwhich in this case is the constructed object.</li>\n</ul>\n<p>This method is used to instantiate a new JavaScript value using a given\n<code>napi_value</code> that represents the constructor for the object. For example,\nconsider the following snippet:</p>\n<pre><code class=\"lang-js\">function MyObject(param) {\n  this.param = param;\n}\n\nconst arg = &#39;hello&#39;;\nconst value = new MyObject(arg);\n</code></pre>\n<p>The following can be approximated in N-API using the following snippet:</p>\n<pre><code class=\"lang-C\">// Get the constructor function MyObject\nnapi_value global, constructor, arg, value;\nnapi_status status = napi_get_global(env, &amp;global);\nif (status != napi_ok) return;\n\nstatus = napi_get_named_property(env, global, &quot;MyObject&quot;, &amp;constructor);\nif (status != napi_ok) return;\n\n// const arg = &quot;hello&quot;\nstatus = napi_create_string_utf8(env, &quot;hello&quot;, NAPI_AUTO_LENGTH, &amp;arg);\nif (status != napi_ok) return;\n\nnapi_value* argv = &amp;arg;\nsize_t argc = 1;\n\n// const value = new MyObject(arg)\nstatus = napi_new_instance(env, constructor, argc, argv, &amp;value);\n</code></pre>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n",
              "type": "module",
              "displayName": "napi_new_instance"
            }
          ],
          "type": "misc",
          "displayName": "Working with JavaScript Functions"
        },
        {
          "textRaw": "Object Wrap",
          "name": "object_wrap",
          "desc": "<p>N-API offers a way to &quot;wrap&quot; C++ classes and instances so that the class\nconstructor and methods can be called from JavaScript.</p>\n<ol>\n<li>The <a href=\"#n_api_napi_define_class\"><code>napi_define_class</code></a> API defines a JavaScript class with constructor,\nstatic properties and methods, and instance properties and methods that\ncorrespond to the C++ class.</li>\n<li>When JavaScript code invokes the constructor, the constructor callback\nuses <a href=\"#n_api_napi_wrap\"><code>napi_wrap</code></a> to wrap a new C++ instance in a JavaScript object,\nthen returns the wrapper object.</li>\n<li>When JavaScript code invokes a method or property accessor on the class,\nthe corresponding <code>napi_callback</code> C++ function is invoked. For an instance\ncallback, <a href=\"#n_api_napi_unwrap\"><code>napi_unwrap</code></a> obtains the C++ instance that is the target of\nthe call.</li>\n</ol>\n<p>For wrapped objects it may be difficult to distinguish between a function\ncalled on a class prototype and a function called on an instance of a class.\nA common pattern used to address this problem is to save a persistent\nreference to the class constructor for later <code>instanceof</code> checks.</p>\n<p>As an example:</p>\n<pre><code class=\"lang-C\">napi_value MyClass_constructor = NULL;\nstatus = napi_get_reference_value(env, MyClass::es_constructor, &amp;MyClass_constructor);\nassert(napi_ok == status);\nbool is_instance = false;\nstatus = napi_instanceof(env, es_this, MyClass_constructor, &amp;is_instance);\nassert(napi_ok == status);\nif (is_instance) {\n  // napi_unwrap() ...\n} else {\n  // otherwise...\n}\n</code></pre>\n<p>The reference must be freed once it is no longer needed.</p>\n",
          "modules": [
            {
              "textRaw": "napi_define_class",
              "name": "napi_define_class",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_define_class(napi_env env,\n                              const char* utf8name,\n                              size_t length,\n                              napi_callback constructor,\n                              void* data,\n                              size_t property_count,\n                              const napi_property_descriptor* properties,\n                              napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] utf8name</code>: Name of the JavaScript constructor function; this is\nnot required to be the same as the C++ class name, though it is recommended\nfor clarity.</li>\n<li><code>[in] length</code>: The length of the <code>utf8name</code> in bytes, or <code>NAPI_AUTO_LENGTH</code>\nif it is null-terminated.</li>\n<li><code>[in] constructor</code>: Callback function that handles constructing instances\nof the class. (This should be a static method on the class, not an actual\nC++ constructor function.)</li>\n<li><code>[in] data</code>: Optional data to be passed to the constructor callback as\nthe <code>data</code> property of the callback info.</li>\n<li><code>[in] property_count</code>: Number of items in the <code>properties</code> array argument.</li>\n<li><code>[in] properties</code>: Array of property descriptors describing static and\ninstance data properties, accessors, and methods on the class\nSee <code>napi_property_descriptor</code>.</li>\n<li><code>[out] result</code>: A <code>napi_value</code> representing the constructor function for\nthe class.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>Defines a JavaScript class that corresponds to a C++ class, including:</p>\n<ul>\n<li>A JavaScript constructor function that has the class name and invokes the\nprovided C++ constructor callback.</li>\n<li>Properties on the constructor function corresponding to <em>static</em> data\nproperties, accessors, and methods of the C++ class (defined by\nproperty descriptors with the <code>napi_static</code> attribute).</li>\n<li>Properties on the constructor function&#39;s <code>prototype</code> object corresponding to\n<em>non-static</em> data properties, accessors, and methods of the C++ class\n(defined by property descriptors without the <code>napi_static</code> attribute).</li>\n</ul>\n<p>The C++ constructor callback should be a static method on the class that calls\nthe actual class constructor, then wraps the new C++ instance in a JavaScript\nobject, and returns the wrapper object. See <code>napi_wrap()</code> for details.</p>\n<p>The JavaScript constructor function returned from <a href=\"#n_api_napi_define_class\"><code>napi_define_class</code></a> is\noften saved and used later, to construct new instances of the class from native\ncode, and/or check whether provided values are instances of the class. In that\ncase, to prevent the function value from being garbage-collected, create a\npersistent reference to it using <a href=\"#n_api_napi_create_reference\"><code>napi_create_reference</code></a> and ensure the\nreference count is kept &gt;= 1.</p>\n",
              "type": "module",
              "displayName": "napi_define_class"
            },
            {
              "textRaw": "napi_wrap",
              "name": "napi_wrap",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_wrap(napi_env env,\n                      napi_value js_object,\n                      void* native_object,\n                      napi_finalize finalize_cb,\n                      void* finalize_hint,\n                      napi_ref* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] js_object</code>: The JavaScript object that will be the wrapper for the\nnative object. This object <em>must</em> have been created from the <code>prototype</code> of\na constructor that was created using <code>napi_define_class()</code>.</li>\n<li><code>[in] native_object</code>: The native instance that will be wrapped in the\nJavaScript object.</li>\n<li><code>[in] finalize_cb</code>: Optional native callback that can be used to free the\nnative instance when the JavaScript object is ready for garbage-collection.</li>\n<li><code>[in] finalize_hint</code>: Optional contextual hint that is passed to the\nfinalize callback.</li>\n<li><code>[out] result</code>: Optional reference to the wrapped object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>Wraps a native instance in a JavaScript object. The native instance can be\nretrieved later using <code>napi_unwrap()</code>.</p>\n<p>When JavaScript code invokes a constructor for a class that was defined using\n<code>napi_define_class()</code>, the <code>napi_callback</code> for the constructor is invoked.\nAfter constructing an instance of the native class, the callback must then call\n<code>napi_wrap()</code> to wrap the newly constructed instance in the already-created\nJavaScript object that is the <code>this</code> argument to the constructor callback.\n(That <code>this</code> object was created from the constructor function&#39;s <code>prototype</code>,\nso it already has definitions of all the instance properties and methods.)</p>\n<p>Typically when wrapping a class instance, a finalize callback should be\nprovided that simply deletes the native instance that is received as the <code>data</code>\nargument to the finalize callback.</p>\n<p>The optional returned reference is initially a weak reference, meaning it\nhas a reference count of 0. Typically this reference count would be incremented\ntemporarily during async operations that require the instance to remain valid.</p>\n<p><em>Caution</em>: The optional returned reference (if obtained) should be deleted via\n<a href=\"#n_api_napi_delete_reference\"><code>napi_delete_reference</code></a> ONLY in response to the finalize callback\ninvocation. (If it is deleted before then, then the finalize callback may never\nbe invoked.) Therefore, when obtaining a reference a finalize callback is also\nrequired in order to enable correct proper of the reference.</p>\n<p>This API may modify the prototype chain of the wrapper object. Afterward,\nadditional manipulation of the wrapper&#39;s prototype chain may cause\n<code>napi_unwrap()</code> to fail.</p>\n<p>Calling <code>napi_wrap()</code> a second time on an object will return an error. To\nassociate another native instance with the object, use <code>napi_remove_wrap()</code>\nfirst.</p>\n",
              "type": "module",
              "displayName": "napi_wrap"
            },
            {
              "textRaw": "napi_unwrap",
              "name": "napi_unwrap",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_unwrap(napi_env env,\n                        napi_value js_object,\n                        void** result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] js_object</code>: The object associated with the native instance.</li>\n<li><code>[out] result</code>: Pointer to the wrapped native instance.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>Retrieves a native instance that was previously wrapped in a JavaScript\nobject using <code>napi_wrap()</code>.</p>\n<p>When JavaScript code invokes a method or property accessor on the class, the\ncorresponding <code>napi_callback</code> is invoked. If the callback is for an instance\nmethod or accessor, then the <code>this</code> argument to the callback is the wrapper\nobject; the wrapped C++ instance that is the target of the call can be obtained\nthen by calling <code>napi_unwrap()</code> on the wrapper object.</p>\n",
              "type": "module",
              "displayName": "napi_unwrap"
            },
            {
              "textRaw": "napi_remove_wrap",
              "name": "napi_remove_wrap",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_remove_wrap(napi_env env,\n                             napi_value js_object,\n                             void** result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] js_object</code>: The object associated with the native instance.</li>\n<li><code>[out] result</code>: Pointer to the wrapped native instance.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>Retrieves a native instance that was previously wrapped in the JavaScript\nobject <code>js_object</code> using <code>napi_wrap()</code> and removes the wrapping, thereby\nrestoring the JavaScript object&#39;s prototype chain. If a finalize callback was\nassociated with the wrapping, it will no longer be called when the JavaScript\nobject becomes garbage-collected.</p>\n",
              "type": "module",
              "displayName": "napi_remove_wrap"
            }
          ],
          "type": "misc",
          "displayName": "Object Wrap"
        },
        {
          "textRaw": "Simple Asynchronous Operations",
          "name": "simple_asynchronous_operations",
          "desc": "<p>Addon modules often need to leverage async helpers from libuv as part of their\nimplementation. This allows them to schedule work to be executed asynchronously\nso that their methods can return in advance of the work being completed. This\nis important in order to allow them to avoid blocking overall execution\nof the Node.js application.</p>\n<p>N-API provides an ABI-stable interface for these\nsupporting functions which covers the most common asynchronous use cases.</p>\n<p>N-API defines the <code>napi_work</code> structure which is used to manage\nasynchronous workers. Instances are created/deleted with\n<a href=\"#n_api_napi_create_async_work\"><code>napi_create_async_work</code></a> and <a href=\"#n_api_napi_delete_async_work\"><code>napi_delete_async_work</code></a>.</p>\n<p>The <code>execute</code> and <code>complete</code> callbacks are functions that will be\ninvoked when the executor is ready to execute and when it completes its\ntask respectively. These functions implement the following interfaces:</p>\n<pre><code class=\"lang-C\">typedef void (*napi_async_execute_callback)(napi_env env,\n                                            void* data);\ntypedef void (*napi_async_complete_callback)(napi_env env,\n                                             napi_status status,\n                                             void* data);\n</code></pre>\n<p>When these methods are invoked, the <code>data</code> parameter passed will be the\naddon-provided <code>void*</code> data that was passed into the\n<code>napi_create_async_work</code> call.</p>\n<p>Once created the async worker can be queued\nfor execution using the <a href=\"#n_api_napi_queue_async_work\"><code>napi_queue_async_work</code></a> function:</p>\n<pre><code class=\"lang-C\">napi_status napi_queue_async_work(napi_env env,\n                                  napi_async_work work);\n</code></pre>\n<p><a href=\"#n_api_napi_cancel_async_work\"><code>napi_cancel_async_work</code></a> can be used if the work needs\nto be cancelled before the work has started execution.</p>\n<p>After calling <a href=\"#n_api_napi_cancel_async_work\"><code>napi_cancel_async_work</code></a>, the <code>complete</code> callback\nwill be invoked with a status value of <code>napi_cancelled</code>.\nThe work should not be deleted before the <code>complete</code>\ncallback invocation, even when it was cancelled.</p>\n",
          "modules": [
            {
              "textRaw": "napi_create_async_work",
              "name": "napi_create_async_work",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": [
                  {
                    "version": "v8.6.0",
                    "pr-url": "https://github.com/nodejs/node/pull/14697",
                    "description": "Added `async_resource` and `async_resource_name` parameters."
                  }
                ]
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_create_async_work(napi_env env,\n                                   napi_value async_resource,\n                                   napi_value async_resource_name,\n                                   napi_async_execute_callback execute,\n                                   napi_async_complete_callback complete,\n                                   void* data,\n                                   napi_async_work* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] async_resource</code>: An optional object associated with the async work\nthat will be passed to possible <code>async_hooks</code> <a href=\"async_hooks.html#async_hooks_init_asyncid_type_triggerasyncid_resource\"><code>init</code> hooks</a>.</li>\n<li><code>[in] async_resource_name</code>: Identifier for the kind of resource that is\nbeing provided for diagnostic information exposed by the <code>async_hooks</code> API.</li>\n<li><code>[in] execute</code>: The native function which should be called to execute\nthe logic asynchronously. The given function is called from a worker pool\nthread and can execute in parallel with the main event loop thread.</li>\n<li><code>[in] complete</code>: The native function which will be called when the\nasynchronous logic is completed or is cancelled. The given function is called\nfrom the main event loop thread.</li>\n<li><code>[in] data</code>: User-provided data context. This will be passed back into the\nexecute and complete functions.</li>\n<li><code>[out] result</code>: <code>napi_async_work*</code> which is the handle to the newly created\nasync work.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API allocates a work object that is used to execute logic asynchronously.\nIt should be freed using <a href=\"#n_api_napi_delete_async_work\"><code>napi_delete_async_work</code></a> once the work is no longer\nrequired.</p>\n<p><code>async_resource_name</code> should be a null-terminated, UTF-8-encoded string.</p>\n<p>The <code>async_resource_name</code> identifier is provided by the user and should be\nrepresentative of the type of async work being performed. It is also recommended\nto apply namespacing to the identifier, e.g. by including the module name. See\nthe <a href=\"async_hooks.html#async_hooks_type\"><code>async_hooks</code> documentation</a> for more information.</p>\n",
              "type": "module",
              "displayName": "napi_create_async_work"
            },
            {
              "textRaw": "napi_delete_async_work",
              "name": "napi_delete_async_work",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_delete_async_work(napi_env env,\n                                   napi_async_work work);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] work</code>: The handle returned by the call to <code>napi_create_async_work</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API frees a previously allocated work object.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>\n",
              "type": "module",
              "displayName": "napi_delete_async_work"
            },
            {
              "textRaw": "napi_queue_async_work",
              "name": "napi_queue_async_work",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_queue_async_work(napi_env env,\n                                  napi_async_work work);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] work</code>: The handle returned by the call to <code>napi_create_async_work</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API requests that the previously allocated work be scheduled\nfor execution.</p>\n",
              "type": "module",
              "displayName": "napi_queue_async_work"
            },
            {
              "textRaw": "napi_cancel_async_work",
              "name": "napi_cancel_async_work",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_cancel_async_work(napi_env env,\n                                   napi_async_work work);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] work</code>: The handle returned by the call to <code>napi_create_async_work</code>.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API cancels queued work if it has not yet\nbeen started. If it has already started executing, it cannot be\ncancelled and <code>napi_generic_failure</code> will be returned. If successful,\nthe <code>complete</code> callback will be invoked with a status value of\n<code>napi_cancelled</code>. The work should not be deleted before the <code>complete</code>\ncallback invocation, even if it has been successfully cancelled.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>\n",
              "type": "module",
              "displayName": "napi_cancel_async_work"
            }
          ],
          "type": "misc",
          "displayName": "Simple Asynchronous Operations"
        },
        {
          "textRaw": "Custom Asynchronous Operations",
          "name": "custom_asynchronous_operations",
          "desc": "<p>The simple asynchronous work APIs above may not be appropriate for every\nscenario. When using any other asynchronous mechanism, the following APIs\nare necessary to ensure an asynchronous operation is properly tracked by\nthe runtime.</p>\n",
          "modules": [
            {
              "textRaw": "napi_async_init",
              "name": "napi_async_init",
              "meta": {
                "added": [
                  "v8.6.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_async_init(napi_env env,\n                            napi_value async_resource,\n                            napi_value async_resource_name,\n                            napi_async_context* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] async_resource</code>: An optional object associated with the async work\nthat will be passed to possible <code>async_hooks</code> <a href=\"async_hooks.html#async_hooks_init_asyncid_type_triggerasyncid_resource\"><code>init</code> hooks</a>.</li>\n<li><code>[in] async_resource_name</code>: Identifier for the kind of resource\nthat is being provided for diagnostic information exposed by the\n<code>async_hooks</code> API.</li>\n<li><code>[out] result</code>: The initialized async context.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n",
              "type": "module",
              "displayName": "napi_async_init"
            },
            {
              "textRaw": "napi_async_destroy",
              "name": "napi_async_destroy",
              "meta": {
                "added": [
                  "v8.6.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_async_destroy(napi_env env,\n                               napi_async_context async_context);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] async_context</code>: The async context to be destroyed.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API can be called even if there is a pending JavaScript exception.</p>\n",
              "type": "module",
              "displayName": "napi_async_destroy"
            },
            {
              "textRaw": "napi_make_callback",
              "name": "napi_make_callback",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": [
                  {
                    "version": "v8.6.0",
                    "description": "Added `async_context` parameter."
                  }
                ]
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_make_callback(napi_env env,\n                               napi_async_context async_context,\n                               napi_value recv,\n                               napi_value func,\n                               int argc,\n                               const napi_value* argv,\n                               napi_value* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] async_context</code>: Context for the async operation that is\n invoking the callback. This should normally be a value previously\n obtained from <a href=\"#n_api_napi_async_init\"><code>napi_async_init</code></a>. However <code>NULL</code> is also allowed,\n which indicates the current async context (if any) is to be used\n for the callback.</li>\n<li><code>[in] recv</code>: The <code>this</code> object passed to the called function.</li>\n<li><code>[in] func</code>: <code>napi_value</code> representing the JavaScript function\nto be invoked.</li>\n<li><code>[in] argc</code>: The count of elements in the <code>argv</code> array.</li>\n<li><code>[in] argv</code>: Array of JavaScript values as <code>napi_value</code>\nrepresenting the arguments to the function.</li>\n<li><code>[out] result</code>: <code>napi_value</code> representing the JavaScript object returned.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This method allows a JavaScript function object to be called from a native\nadd-on. This API is similar to <code>napi_call_function</code>. However, it is used to call\n<em>from</em> native code back <em>into</em> JavaScript <em>after</em> returning from an async\noperation (when there is no other script on the stack). It is a fairly simple\nwrapper around <code>node::MakeCallback</code>.</p>\n<p>Note it is <em>not</em> necessary to use <code>napi_make_callback</code> from within a\n<code>napi_async_complete_callback</code>; in that situation the callback&#39;s async\ncontext has already been set up, so a direct call to <code>napi_call_function</code>\nis sufficient and appropriate. Use of the <code>napi_make_callback</code> function\nmay be required when implementing custom async behavior that does not use\n<code>napi_create_async_work</code>.</p>\n",
              "type": "module",
              "displayName": "napi_make_callback"
            },
            {
              "textRaw": "napi_open_callback_scope",
              "name": "napi_open_callback_scope",
              "meta": {
                "added": [
                  "v9.6.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">NAPI_EXTERN napi_status napi_open_callback_scope(napi_env env,\n                                                 napi_value resource_object,\n                                                 napi_async_context context,\n                                                 napi_callback_scope* result)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] resource_object</code>: An optional object associated with the async work\nthat will be passed to possible <code>async_hooks</code> <a href=\"async_hooks.html#async_hooks_init_asyncid_type_triggerasyncid_resource\"><code>init</code> hooks</a>.</li>\n<li><code>[in] context</code>: Context for the async operation that is\ninvoking the callback. This should be a value previously obtained\nfrom <a href=\"#n_api_napi_async_init\"><code>napi_async_init</code></a>.</li>\n<li><code>[out] result</code>: The newly created scope.</li>\n</ul>\n<p>There are cases (for example resolving promises) where it is\nnecessary to have the equivalent of the scope associated with a callback\nin place when making certain N-API calls. If there is no other script on\nthe stack the <a href=\"#n_api_napi_open_callback_scope\"><code>napi_open_callback_scope</code></a> and\n<a href=\"#n_api_napi_close_callback_scope\"><code>napi_close_callback_scope</code></a> functions can be used to open/close\nthe required scope.</p>\n",
              "type": "module",
              "displayName": "napi_open_callback_scope"
            },
            {
              "textRaw": "napi_close_callback_scope",
              "name": "napi_close_callback_scope",
              "meta": {
                "added": [
                  "v9.6.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">NAPI_EXTERN napi_status napi_close_callback_scope(napi_env env,\n                                                  napi_callback_scope scope)\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] scope</code>: The scope to be closed.</li>\n</ul>\n<p>This API can be called even if there is a pending JavaScript exception.</p>\n",
              "type": "module",
              "displayName": "napi_close_callback_scope"
            }
          ],
          "type": "misc",
          "displayName": "Custom Asynchronous Operations"
        },
        {
          "textRaw": "Version Management",
          "name": "version_management",
          "modules": [
            {
              "textRaw": "napi_get_node_version",
              "name": "napi_get_node_version",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">typedef struct {\n  uint32_t major;\n  uint32_t minor;\n  uint32_t patch;\n  const char* release;\n} napi_node_version;\n\nnapi_status napi_get_node_version(napi_env env,\n                                  const napi_node_version** version);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] version</code>: A pointer to version information for Node.js itself.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This function fills the <code>version</code> struct with the major, minor, and patch\nversion of Node.js that is currently running, and the <code>release</code> field with the\nvalue of <a href=\"process.html#process_process_release\"><code>process.release.name</code></a>.</p>\n<p>The returned buffer is statically allocated and does not need to be freed.</p>\n",
              "type": "module",
              "displayName": "napi_get_node_version"
            },
            {
              "textRaw": "napi_get_version",
              "name": "napi_get_version",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_get_version(napi_env env,\n                             uint32_t* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] result</code>: The highest version of N-API supported.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API returns the highest N-API version supported by the\nNode.js runtime. N-API is planned to be additive such that\nnewer releases of Node.js may support additional API functions.\nIn order to allow an addon to use a newer function when running with\nversions of Node.js that support it, while providing\nfallback behavior when running with Node.js versions that don&#39;t\nsupport it:</p>\n<ul>\n<li>Call <code>napi_get_version()</code> to determine if the API is available.</li>\n<li>If available, dynamically load a pointer to the function using <code>uv_dlsym()</code>.</li>\n<li>Use the dynamically loaded pointer to invoke the function.</li>\n<li>If the function is not available, provide an alternate implementation\nthat does not use the function.</li>\n</ul>\n",
              "type": "module",
              "displayName": "napi_get_version"
            }
          ],
          "type": "misc",
          "displayName": "Version Management"
        },
        {
          "textRaw": "Memory Management",
          "name": "memory_management",
          "modules": [
            {
              "textRaw": "napi_adjust_external_memory",
              "name": "napi_adjust_external_memory",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">NAPI_EXTERN napi_status napi_adjust_external_memory(napi_env env,\n                                                    int64_t change_in_bytes,\n                                                    int64_t* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] change_in_bytes</code>: The change in externally allocated memory that is\nkept alive by JavaScript objects.</li>\n<li><code>[out] result</code>: The adjusted value</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This function gives V8 an indication of the amount of externally allocated\nmemory that is kept alive by JavaScript objects (i.e. a JavaScript object\nthat points to its own memory allocated by a native module). Registering\nexternally allocated memory will trigger global garbage collections more\noften than it would otherwise.</p>\n<!-- it's very convenient to have all the anchors indexed -->\n<!--lint disable no-unused-definitions remark-lint-->\n",
              "type": "module",
              "displayName": "napi_adjust_external_memory"
            }
          ],
          "type": "misc",
          "displayName": "Memory Management"
        },
        {
          "textRaw": "Promises",
          "name": "promises",
          "desc": "<p>N-API provides facilities for creating <code>Promise</code> objects as described in\n<a href=\"https://tc39.github.io/ecma262/#sec-promise-objects\">Section 25.4</a> of the ECMA specification. It implements promises as a pair of\nobjects. When a promise is created by <code>napi_create_promise()</code>, a &quot;deferred&quot;\nobject is created and returned alongside the <code>Promise</code>. The deferred object is\nbound to the created <code>Promise</code> and is the only means to resolve or reject the\n<code>Promise</code> using <code>napi_resolve_deferred()</code> or <code>napi_reject_deferred()</code>. The\ndeferred object that is created by <code>napi_create_promise()</code> is freed by\n<code>napi_resolve_deferred()</code> or <code>napi_reject_deferred()</code>. The <code>Promise</code> object may\nbe returned to JavaScript where it can be used in the usual fashion.</p>\n<p>For example, to create a promise and pass it to an asynchronous worker:</p>\n<pre><code class=\"lang-c\">napi_deferred deferred;\nnapi_value promise;\nnapi_status status;\n\n// Create the promise.\nstatus = napi_create_promise(env, &amp;deferred, &amp;promise);\nif (status != napi_ok) return NULL;\n\n// Pass the deferred to a function that performs an asynchronous action.\ndo_something_asynchronous(deferred);\n\n// Return the promise to JS\nreturn promise;\n</code></pre>\n<p>The above function <code>do_something_asynchronous()</code> would perform its asynchronous\naction and then it would resolve or reject the deferred, thereby concluding the\npromise and freeing the deferred:</p>\n<pre><code class=\"lang-c\">napi_deferred deferred;\nnapi_value undefined;\nnapi_status status;\n\n// Create a value with which to conclude the deferred.\nstatus = napi_get_undefined(env, &amp;undefined);\nif (status != napi_ok) return NULL;\n\n// Resolve or reject the promise associated with the deferred depending on\n// whether the asynchronous action succeeded.\nif (asynchronous_action_succeeded) {\n  status = napi_resolve_deferred(env, deferred, undefined);\n} else {\n  status = napi_reject_deferred(env, deferred, undefined);\n}\nif (status != napi_ok) return NULL;\n\n// At this point the deferred has been freed, so we should assign NULL to it.\ndeferred = NULL;\n</code></pre>\n",
          "modules": [
            {
              "textRaw": "napi_create_promise",
              "name": "napi_create_promise",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_create_promise(napi_env env,\n                                napi_deferred* deferred,\n                                napi_value* promise);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] deferred</code>: A newly created deferred object which can later be passed to\n<code>napi_resolve_deferred()</code> or <code>napi_reject_deferred()</code> to resolve resp. reject\nthe associated promise.</li>\n<li><code>[out] promise</code>: The JavaScript promise associated with the deferred object.</li>\n</ul>\n<p>Returns <code>napi_ok</code> if the API succeeded.</p>\n<p>This API creates a deferred object and a JavaScript promise.</p>\n",
              "type": "module",
              "displayName": "napi_create_promise"
            },
            {
              "textRaw": "napi_resolve_deferred",
              "name": "napi_resolve_deferred",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_resolve_deferred(napi_env env,\n                                  napi_deferred deferred,\n                                  napi_value resolution);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] deferred</code>: The deferred object whose associated promise to resolve.</li>\n<li><code>[in] resolution</code>: The value with which to resolve the promise.</li>\n</ul>\n<p>This API resolves a JavaScript promise by way of the deferred object\nwith which it is associated. Thus, it can only be used to resolve JavaScript\npromises for which the corresponding deferred object is available. This\neffectively means that the promise must have been created using\n<code>napi_create_promise()</code> and the deferred object returned from that call must\nhave been retained in order to be passed to this API.</p>\n<p>The deferred object is freed upon successful completion.</p>\n",
              "type": "module",
              "displayName": "napi_resolve_deferred"
            },
            {
              "textRaw": "napi_reject_deferred",
              "name": "napi_reject_deferred",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_reject_deferred(napi_env env,\n                                 napi_deferred deferred,\n                                 napi_value rejection);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] deferred</code>: The deferred object whose associated promise to resolve.</li>\n<li><code>[in] rejection</code>: The value with which to reject the promise.</li>\n</ul>\n<p>This API rejects a JavaScript promise by way of the deferred object\nwith which it is associated. Thus, it can only be used to reject JavaScript\npromises for which the corresponding deferred object is available. This\neffectively means that the promise must have been created using\n<code>napi_create_promise()</code> and the deferred object returned from that call must\nhave been retained in order to be passed to this API.</p>\n<p>The deferred object is freed upon successful completion.</p>\n",
              "type": "module",
              "displayName": "napi_reject_deferred"
            },
            {
              "textRaw": "napi_is_promise",
              "name": "napi_is_promise",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">napi_status napi_is_promise(napi_env env,\n                            napi_value promise,\n                            bool* is_promise);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] promise</code>: The promise to examine</li>\n<li><code>[out] is_promise</code>: Flag indicating whether <code>promise</code> is a native promise\nobject - that is, a promise object created by the underlying engine.</li>\n</ul>\n",
              "type": "module",
              "displayName": "napi_is_promise"
            }
          ],
          "type": "misc",
          "displayName": "Promises"
        },
        {
          "textRaw": "Script execution",
          "name": "script_execution",
          "desc": "<p>N-API provides an API for executing a string containing JavaScript using the\nunderlying JavaScript engine.</p>\n",
          "modules": [
            {
              "textRaw": "napi_run_script",
              "name": "napi_run_script",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">NAPI_EXTERN napi_status napi_run_script(napi_env env,\n                                        napi_value script,\n                                        napi_value* result);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[in] script</code>: A JavaScript string containing the script to execute.</li>\n<li><code>[out] result</code>: The value resulting from having executed the script.</li>\n</ul>\n",
              "type": "module",
              "displayName": "napi_run_script"
            }
          ],
          "type": "misc",
          "displayName": "Script execution"
        },
        {
          "textRaw": "libuv event loop",
          "name": "libuv_event_loop",
          "desc": "<p>N-API provides a function for getting the current event loop associated with\na specific <code>napi_env</code>.</p>\n",
          "modules": [
            {
              "textRaw": "napi_get_uv_event_loop",
              "name": "napi_get_uv_event_loop",
              "meta": {
                "added": [
                  "v9.3.0"
                ],
                "changes": []
              },
              "desc": "<pre><code class=\"lang-C\">NAPI_EXTERN napi_status napi_get_uv_event_loop(napi_env env,\n                                               uv_loop_t** loop);\n</code></pre>\n<ul>\n<li><code>[in] env</code>: The environment that the API is invoked under.</li>\n<li><code>[out] loop</code>: The current libuv loop instance.</li>\n</ul>\n<!-- [end-include:n-api.md] -->\n<!-- [start-include:child_process.md] -->\n",
              "type": "module",
              "displayName": "napi_get_uv_event_loop"
            }
          ],
          "type": "misc",
          "displayName": "libuv event loop"
        }
      ]
    },
    {
      "textRaw": "Command Line Options",
      "name": "Command Line Options",
      "introduced_in": "v5.9.1",
      "type": "misc",
      "desc": "<p>Node.js comes with a variety of CLI options. These options expose built-in\ndebugging, multiple ways to execute scripts, and other helpful runtime options.</p>\n<p>To view this documentation as a manual page in a terminal, run <code>man node</code>.</p>\n",
      "miscs": [
        {
          "textRaw": "Synopsis",
          "name": "synopsis",
          "desc": "<p><code>node [options] [V8 options] [script.js | -e &quot;script&quot; | -] [--] [arguments]</code></p>\n<p><code>node debug [script.js | -e &quot;script&quot; | &lt;host&gt;:&lt;port&gt;] …</code></p>\n<p><code>node --v8-options</code></p>\n<p>Execute without arguments to start the <a href=\"repl.html#repl_repl\">REPL</a>.</p>\n<p><em>For more info about <code>node debug</code>, please see the <a href=\"debugger.html\">debugger</a> documentation.</em></p>\n",
          "type": "misc",
          "displayName": "Synopsis"
        },
        {
          "textRaw": "Options",
          "name": "options",
          "modules": [
            {
              "textRaw": "`-`",
              "name": "`-`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Alias for stdin, analogous to the use of - in other command line utilities,\nmeaning that the script will be read from stdin, and the rest of the options\nare passed to that script.</p>\n",
              "type": "module",
              "displayName": "`-`"
            },
            {
              "textRaw": "`--`",
              "name": "`--`",
              "meta": {
                "added": [
                  "v6.11.0"
                ],
                "changes": []
              },
              "desc": "<p>Indicate the end of node options. Pass the rest of the arguments to the script.\nIf no script filename or eval/print script is supplied prior to this, then\nthe next argument will be used as a script filename.</p>\n",
              "type": "module",
              "displayName": "`--`"
            },
            {
              "textRaw": "`--abort-on-uncaught-exception`",
              "name": "`--abort-on-uncaught-exception`",
              "meta": {
                "added": [
                  "v0.10"
                ],
                "changes": []
              },
              "desc": "<p>Aborting instead of exiting causes a core file to be generated for post-mortem\nanalysis using a debugger (such as <code>lldb</code>, <code>gdb</code>, and <code>mdb</code>).</p>\n<p>If this flag is passed, the behavior can still be set to not abort through\n<a href=\"process.html#process_process_setuncaughtexceptioncapturecallback_fn\"><code>process.setUncaughtExceptionCaptureCallback()</code></a> (and through usage of the\n<code>domain</code> module that uses it).</p>\n",
              "type": "module",
              "displayName": "`--abort-on-uncaught-exception`"
            },
            {
              "textRaw": "`--enable-fips`",
              "name": "`--enable-fips`",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Enable FIPS-compliant crypto at startup. (Requires Node.js to be built with\n<code>./configure --openssl-fips</code>.)</p>\n",
              "type": "module",
              "displayName": "`--enable-fips`"
            },
            {
              "textRaw": "`--experimental-modules`",
              "name": "`--experimental-modules`",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>Enable experimental ES module support and caching modules.</p>\n",
              "type": "module",
              "displayName": "`--experimental-modules`"
            },
            {
              "textRaw": "`--experimental-repl-await`",
              "name": "`--experimental-repl-await`",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Enable experimental top-level <code>await</code> keyword support in REPL.</p>\n",
              "type": "module",
              "displayName": "`--experimental-repl-await`"
            },
            {
              "textRaw": "`--experimental-vm-modules`",
              "name": "`--experimental-vm-modules`",
              "meta": {
                "added": [
                  "v9.6.0"
                ],
                "changes": []
              },
              "desc": "<p>Enable experimental ES Module support in the <code>vm</code> module.</p>\n",
              "type": "module",
              "displayName": "`--experimental-vm-modules`"
            },
            {
              "textRaw": "`--force-fips`",
              "name": "`--force-fips`",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Force FIPS-compliant crypto on startup. (Cannot be disabled from script code.)\n(Same requirements as <code>--enable-fips</code>.)</p>\n",
              "type": "module",
              "displayName": "`--force-fips`"
            },
            {
              "textRaw": "`--icu-data-dir=file`",
              "name": "`--icu-data-dir=file`",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": []
              },
              "desc": "<p>Specify ICU data load path. (Overrides <code>NODE_ICU_DATA</code>.)</p>\n",
              "type": "module",
              "displayName": "`--icu-data-dir=file`"
            },
            {
              "textRaw": "`--inspect-brk[=[host:]port]`",
              "name": "`--inspect-brk[=[host:]port]`",
              "meta": {
                "added": [
                  "v7.6.0"
                ],
                "changes": []
              },
              "desc": "<p>Activate inspector on <code>host:port</code> and break at start of user script.\nDefault <code>host:port</code> is <code>127.0.0.1:9229</code>.</p>\n",
              "type": "module",
              "displayName": "`--inspect-brk[=[host:]port]`"
            },
            {
              "textRaw": "`--inspect-port=[host:]port`",
              "name": "`--inspect-port=[host:]port`",
              "meta": {
                "added": [
                  "v7.6.0"
                ],
                "changes": []
              },
              "desc": "<p>Set the <code>host:port</code> to be used when the inspector is activated.\nUseful when activating the inspector by sending the <code>SIGUSR1</code> signal.</p>\n<p>Default host is <code>127.0.0.1</code>.</p>\n",
              "type": "module",
              "displayName": "`--inspect-port=[host:]port`"
            },
            {
              "textRaw": "`--inspect[=[host:]port]`",
              "name": "`--inspect[=[host:]port]`",
              "meta": {
                "added": [
                  "v6.3.0"
                ],
                "changes": []
              },
              "desc": "<p>Activate inspector on <code>host:port</code>. Default is <code>127.0.0.1:9229</code>.</p>\n<p>V8 inspector integration allows tools such as Chrome DevTools and IDEs to debug\nand profile Node.js instances. The tools attach to Node.js instances via a\ntcp port and communicate using the <a href=\"https://chromedevtools.github.io/devtools-protocol/\">Chrome DevTools Protocol</a>.</p>\n",
              "type": "module",
              "displayName": "`--inspect[=[host:]port]`"
            },
            {
              "textRaw": "`--napi-modules`",
              "name": "`--napi-modules`",
              "meta": {
                "added": [
                  "v7.10.0"
                ],
                "changes": []
              },
              "desc": "<p>This option is a no-op. It is kept for compatibility.</p>\n",
              "type": "module",
              "displayName": "`--napi-modules`"
            },
            {
              "textRaw": "`--no-deprecation`",
              "name": "`--no-deprecation`",
              "meta": {
                "added": [
                  "v0.8.0"
                ],
                "changes": []
              },
              "desc": "<p>Silence deprecation warnings.</p>\n",
              "type": "module",
              "displayName": "`--no-deprecation`"
            },
            {
              "textRaw": "`--no-force-async-hooks-checks`",
              "name": "`--no-force-async-hooks-checks`",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Disables runtime checks for <code>async_hooks</code>. These will still be enabled\ndynamically when <code>async_hooks</code> is enabled.</p>\n",
              "type": "module",
              "displayName": "`--no-force-async-hooks-checks`"
            },
            {
              "textRaw": "`--no-warnings`",
              "name": "`--no-warnings`",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Silence all process warnings (including deprecations).</p>\n",
              "type": "module",
              "displayName": "`--no-warnings`"
            },
            {
              "textRaw": "`--openssl-config=file`",
              "name": "`--openssl-config=file`",
              "meta": {
                "added": [
                  "v6.9.0"
                ],
                "changes": []
              },
              "desc": "<p>Load an OpenSSL configuration file on startup. Among other uses, this can be\nused to enable FIPS-compliant crypto if Node.js is built with\n<code>./configure --openssl-fips</code>.</p>\n",
              "type": "module",
              "displayName": "`--openssl-config=file`"
            },
            {
              "textRaw": "`--pending-deprecation`",
              "name": "`--pending-deprecation`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Emit pending deprecation warnings.</p>\n<p>Pending deprecations are generally identical to a runtime deprecation with the\nnotable exception that they are turned <em>off</em> by default and will not be emitted\nunless either the <code>--pending-deprecation</code> command line flag, or the\n<code>NODE_PENDING_DEPRECATION=1</code> environment variable, is set. Pending deprecations\nare used to provide a kind of selective &quot;early warning&quot; mechanism that\ndevelopers may leverage to detect deprecated API usage.</p>\n",
              "type": "module",
              "displayName": "`--pending-deprecation`"
            },
            {
              "textRaw": "`--preserve-symlinks`",
              "name": "`--preserve-symlinks`",
              "meta": {
                "added": [
                  "v6.3.0"
                ],
                "changes": []
              },
              "desc": "<p>Instructs the module loader to preserve symbolic links when resolving and\ncaching modules.</p>\n<p>By default, when Node.js loads a module from a path that is symbolically linked\nto a different on-disk location, Node.js will dereference the link and use the\nactual on-disk &quot;real path&quot; of the module as both an identifier and as a root\npath to locate other dependency modules. In most cases, this default behavior\nis acceptable. However, when using symbolically linked peer dependencies, as\nillustrated in the example below, the default behavior causes an exception to\nbe thrown if <code>moduleA</code> attempts to require <code>moduleB</code> as a peer dependency:</p>\n<pre><code class=\"lang-text\">{appDir}\n ├── app\n │   ├── index.js\n │   └── node_modules\n │       ├── moduleA -&gt; {appDir}/moduleA\n │       └── moduleB\n │           ├── index.js\n │           └── package.json\n └── moduleA\n     ├── index.js\n     └── package.json\n</code></pre>\n<p>The <code>--preserve-symlinks</code> command line flag instructs Node.js to use the\nsymlink path for modules as opposed to the real path, allowing symbolically\nlinked peer dependencies to be found.</p>\n<p>Note, however, that using <code>--preserve-symlinks</code> can have other side effects.\nSpecifically, symbolically linked <em>native</em> modules can fail to load if those\nare linked from more than one location in the dependency tree (Node.js would\nsee those as two separate modules and would attempt to load the module multiple\ntimes, causing an exception to be thrown).</p>\n",
              "type": "module",
              "displayName": "`--preserve-symlinks`"
            },
            {
              "textRaw": "`--prof-process`",
              "name": "`--prof-process`",
              "meta": {
                "added": [
                  "v5.2.0"
                ],
                "changes": []
              },
              "desc": "<p>Process V8 profiler output generated using the V8 option <code>--prof</code>.</p>\n",
              "type": "module",
              "displayName": "`--prof-process`"
            },
            {
              "textRaw": "`--redirect-warnings=file`",
              "name": "`--redirect-warnings=file`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Write process warnings to the given file instead of printing to stderr. The\nfile will be created if it does not exist, and will be appended to if it does.\nIf an error occurs while attempting to write the warning to the file, the\nwarning will be written to stderr instead.</p>\n",
              "type": "module",
              "displayName": "`--redirect-warnings=file`"
            },
            {
              "textRaw": "`--throw-deprecation`",
              "name": "`--throw-deprecation`",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": []
              },
              "desc": "<p>Throw errors for deprecations.</p>\n",
              "type": "module",
              "displayName": "`--throw-deprecation`"
            },
            {
              "textRaw": "`--tls-cipher-list=list`",
              "name": "`--tls-cipher-list=list`",
              "meta": {
                "added": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Specify an alternative default TLS cipher list. Requires Node.js to be built\nwith crypto support (default).</p>\n",
              "type": "module",
              "displayName": "`--tls-cipher-list=list`"
            },
            {
              "textRaw": "`--trace-deprecation`",
              "name": "`--trace-deprecation`",
              "meta": {
                "added": [
                  "v0.8.0"
                ],
                "changes": []
              },
              "desc": "<p>Print stack traces for deprecations.</p>\n",
              "type": "module",
              "displayName": "`--trace-deprecation`"
            },
            {
              "textRaw": "`--trace-event-categories`",
              "name": "`--trace-event-categories`",
              "meta": {
                "added": [
                  "v7.7.0"
                ],
                "changes": []
              },
              "desc": "<p>A comma separated list of categories that should be traced when trace event\ntracing is enabled using <code>--trace-events-enabled</code>.</p>\n",
              "type": "module",
              "displayName": "`--trace-event-categories`"
            },
            {
              "textRaw": "`--trace-event-file-pattern`",
              "name": "`--trace-event-file-pattern`",
              "meta": {
                "added": [
                  "v9.8.0"
                ],
                "changes": []
              },
              "desc": "<p>Template string specifying the filepath for the trace event data, it\nsupports <code>${rotation}</code> and <code>${pid}</code>.</p>\n",
              "type": "module",
              "displayName": "`--trace-event-file-pattern`"
            },
            {
              "textRaw": "`--trace-events-enabled`",
              "name": "`--trace-events-enabled`",
              "meta": {
                "added": [
                  "v7.7.0"
                ],
                "changes": []
              },
              "desc": "<p>Enables the collection of trace event tracing information.</p>\n",
              "type": "module",
              "displayName": "`--trace-events-enabled`"
            },
            {
              "textRaw": "`--trace-sync-io`",
              "name": "`--trace-sync-io`",
              "meta": {
                "added": [
                  "v2.1.0"
                ],
                "changes": []
              },
              "desc": "<p>Prints a stack trace whenever synchronous I/O is detected after the first turn\nof the event loop.</p>\n",
              "type": "module",
              "displayName": "`--trace-sync-io`"
            },
            {
              "textRaw": "`--trace-warnings`",
              "name": "`--trace-warnings`",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Print stack traces for process warnings (including deprecations).</p>\n",
              "type": "module",
              "displayName": "`--trace-warnings`"
            },
            {
              "textRaw": "`--track-heap-objects`",
              "name": "`--track-heap-objects`",
              "meta": {
                "added": [
                  "v2.4.0"
                ],
                "changes": []
              },
              "desc": "<p>Track heap object allocations for heap snapshots.</p>\n",
              "type": "module",
              "displayName": "`--track-heap-objects`"
            },
            {
              "textRaw": "`--use-bundled-ca`, `--use-openssl-ca`",
              "name": "`--use-bundled-ca`,_`--use-openssl-ca`",
              "meta": {
                "added": [
                  "v6.11.0"
                ],
                "changes": []
              },
              "desc": "<p>Use bundled Mozilla CA store as supplied by current Node.js version\nor use OpenSSL&#39;s default CA store. The default store is selectable\nat build-time.</p>\n<p>The bundled CA store, as supplied by Node.js, is a snapshot of Mozilla CA store\nthat is fixed at release time. It is identical on all supported platforms.</p>\n<p>Using OpenSSL store allows for external modifications of the store. For most\nLinux and BSD distributions, this store is maintained by the distribution\nmaintainers and system administrators. OpenSSL CA store location is dependent on\nconfiguration of the OpenSSL library but this can be altered at runtime using\nenvironment variables.</p>\n<p>See <code>SSL_CERT_DIR</code> and <code>SSL_CERT_FILE</code>.</p>\n",
              "type": "module",
              "displayName": "`--use-bundled-ca`, `--use-openssl-ca`"
            },
            {
              "textRaw": "`--v8-options`",
              "name": "`--v8-options`",
              "meta": {
                "added": [
                  "v0.1.3"
                ],
                "changes": []
              },
              "desc": "<p>Print V8 command line options.</p>\n<p>V8 options allow words to be separated by both dashes (<code>-</code>) or\nunderscores (<code>_</code>).</p>\n<p>For example, <code>--stack-trace-limit</code> is equivalent to <code>--stack_trace_limit</code>.</p>\n",
              "type": "module",
              "displayName": "`--v8-options`"
            },
            {
              "textRaw": "`--v8-pool-size=num`",
              "name": "`--v8-pool-size=num`",
              "meta": {
                "added": [
                  "v5.10.0"
                ],
                "changes": []
              },
              "desc": "<p>Set V8&#39;s thread pool size which will be used to allocate background jobs.</p>\n<p>If set to <code>0</code> then V8 will choose an appropriate size of the thread pool based\non the number of online processors.</p>\n<p>If the value provided is larger than V8&#39;s maximum, then the largest value\nwill be chosen.</p>\n",
              "type": "module",
              "displayName": "`--v8-pool-size=num`"
            },
            {
              "textRaw": "`--zero-fill-buffers`",
              "name": "`--zero-fill-buffers`",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Automatically zero-fills all newly allocated <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> and <a href=\"buffer.html#buffer_class_slowbuffer\"><code>SlowBuffer</code></a>\ninstances.</p>\n",
              "type": "module",
              "displayName": "`--zero-fill-buffers`"
            },
            {
              "textRaw": "`-c`, `--check`",
              "name": "`-c`,_`--check`",
              "meta": {
                "added": [
                  "v5.0.0",
                  "v4.2.0"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/19600",
                    "description": "The `--require` option is now supported when checking a file."
                  }
                ]
              },
              "desc": "<p>Syntax check the script without executing.</p>\n",
              "type": "module",
              "displayName": "`-c`, `--check`"
            },
            {
              "textRaw": "`-e`, `--eval \"script\"`",
              "name": "`-e`,_`--eval_\"script\"`",
              "meta": {
                "added": [
                  "v0.5.2"
                ],
                "changes": [
                  {
                    "version": "v5.11.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5348",
                    "description": "Built-in libraries are now available as predefined variables."
                  }
                ]
              },
              "desc": "<p>Evaluate the following argument as JavaScript. The modules which are\npredefined in the REPL can also be used in <code>script</code>.</p>\n<p>On Windows, using <code>cmd.exe</code> a single quote will not work correctly because it\nonly recognizes double <code>&quot;</code> for quoting. In Powershell or Git bash, both <code>&#39;</code>\nand <code>&quot;</code> are usable.</p>\n",
              "type": "module",
              "displayName": "`-e`, `--eval \"script\"`"
            },
            {
              "textRaw": "`-h`, `--help`",
              "name": "`-h`,_`--help`",
              "meta": {
                "added": [
                  "v0.1.3"
                ],
                "changes": []
              },
              "desc": "<p>Print node command line options.\nThe output of this option is less detailed than this document.</p>\n",
              "type": "module",
              "displayName": "`-h`, `--help`"
            },
            {
              "textRaw": "`-i`, `--interactive`",
              "name": "`-i`,_`--interactive`",
              "meta": {
                "added": [
                  "v0.7.7"
                ],
                "changes": []
              },
              "desc": "<p>Opens the REPL even if stdin does not appear to be a terminal.</p>\n",
              "type": "module",
              "displayName": "`-i`, `--interactive`"
            },
            {
              "textRaw": "`-p`, `--print \"script\"`",
              "name": "`-p`,_`--print_\"script\"`",
              "meta": {
                "added": [
                  "v0.6.4"
                ],
                "changes": [
                  {
                    "version": "v5.11.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5348",
                    "description": "Built-in libraries are now available as predefined variables."
                  }
                ]
              },
              "desc": "<p>Identical to <code>-e</code> but prints the result.</p>\n",
              "type": "module",
              "displayName": "`-p`, `--print \"script\"`"
            },
            {
              "textRaw": "`-r`, `--require module`",
              "name": "`-r`,_`--require_module`",
              "meta": {
                "added": [
                  "v1.6.0"
                ],
                "changes": []
              },
              "desc": "<p>Preload the specified module at startup.</p>\n<p>Follows <code>require()</code>&#39;s module resolution\nrules. <code>module</code> may be either a path to a file, or a node module name.</p>\n",
              "type": "module",
              "displayName": "`-r`, `--require module`"
            },
            {
              "textRaw": "`-v`, `--version`",
              "name": "`-v`,_`--version`",
              "meta": {
                "added": [
                  "v0.1.3"
                ],
                "changes": []
              },
              "desc": "<p>Print node&#39;s version.</p>\n",
              "type": "module",
              "displayName": "`-v`, `--version`"
            }
          ],
          "type": "misc",
          "displayName": "Options"
        },
        {
          "textRaw": "Environment Variables",
          "name": "environment_variables",
          "modules": [
            {
              "textRaw": "`NODE_DEBUG=module[,…]`",
              "name": "`node_debug=module[,…]`",
              "meta": {
                "added": [
                  "v0.1.32"
                ],
                "changes": []
              },
              "desc": "<p><code>&#39;,&#39;</code>-separated list of core modules that should print debug information.</p>\n",
              "type": "module",
              "displayName": "`NODE_DEBUG=module[,…]`"
            },
            {
              "textRaw": "`NODE_DISABLE_COLORS=1`",
              "name": "`node_disable_colors=1`",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "desc": "<p>When set to <code>1</code> colors will not be used in the REPL.</p>\n",
              "type": "module",
              "displayName": "`NODE_DISABLE_COLORS=1`"
            },
            {
              "textRaw": "`NODE_EXTRA_CA_CERTS=file`",
              "name": "`node_extra_ca_certs=file`",
              "meta": {
                "added": [
                  "v7.3.0"
                ],
                "changes": []
              },
              "desc": "<p>When set, the well known &quot;root&quot; CAs (like VeriSign) will be extended with the\nextra certificates in <code>file</code>. The file should consist of one or more trusted\ncertificates in PEM format. A message will be emitted (once) with\n<a href=\"process.html#process_process_emitwarning_warning_type_code_ctor\"><code>process.emitWarning()</code></a> if the file is missing or\nmalformed, but any errors are otherwise ignored.</p>\n<p>Note that neither the well known nor extra certificates are used when the <code>ca</code>\noptions property is explicitly specified for a TLS or HTTPS client or server.</p>\n",
              "type": "module",
              "displayName": "`NODE_EXTRA_CA_CERTS=file`"
            },
            {
              "textRaw": "`NODE_ICU_DATA=file`",
              "name": "`node_icu_data=file`",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": []
              },
              "desc": "<p>Data path for ICU (<code>Intl</code> object) data. Will extend linked-in data when compiled\nwith small-icu support.</p>\n",
              "type": "module",
              "displayName": "`NODE_ICU_DATA=file`"
            },
            {
              "textRaw": "`NODE_NO_WARNINGS=1`",
              "name": "`node_no_warnings=1`",
              "meta": {
                "added": [
                  "v6.11.0"
                ],
                "changes": []
              },
              "desc": "<p>When set to <code>1</code>, process warnings are silenced.</p>\n",
              "type": "module",
              "displayName": "`NODE_NO_WARNINGS=1`"
            },
            {
              "textRaw": "`NODE_OPTIONS=options...`",
              "name": "`node_options=options...`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>A space-separated list of command line options. <code>options...</code> are interpreted as\nif they had been specified on the command line before the actual command line\n(so they can be overridden). Node.js will exit with an error if an option\nthat is not allowed in the environment is used, such as <code>-p</code> or a script file.</p>\n<p>Node options that are allowed are:</p>\n<ul>\n<li><code>--enable-fips</code></li>\n<li><code>--force-fips</code></li>\n<li><code>--icu-data-dir</code></li>\n<li><code>--inspect-brk</code></li>\n<li><code>--inspect-port</code></li>\n<li><code>--inspect</code></li>\n<li><code>--no-deprecation</code></li>\n<li><code>--no-warnings</code></li>\n<li><code>--openssl-config</code></li>\n<li><code>--redirect-warnings</code></li>\n<li><code>--require</code>, <code>-r</code></li>\n<li><code>--throw-deprecation</code></li>\n<li><code>--tls-cipher-list</code></li>\n<li><code>--trace-deprecation</code></li>\n<li><code>--trace-events-categories</code></li>\n<li><code>--trace-events-enabled</code></li>\n<li><code>--trace-event-file-pattern</code></li>\n<li><code>--trace-sync-io</code></li>\n<li><code>--trace-warnings</code></li>\n<li><code>--track-heap-objects</code></li>\n<li><code>--use-bundled-ca</code></li>\n<li><code>--use-openssl-ca</code></li>\n<li><code>--v8-pool-size</code></li>\n<li><code>--zero-fill-buffers</code></li>\n</ul>\n<p>V8 options that are allowed are:</p>\n<ul>\n<li><code>--abort-on-uncaught-exception</code></li>\n<li><code>--max-old-space-size</code></li>\n<li><code>--perf-basic-prof</code></li>\n<li><code>--perf-prof</code></li>\n<li><code>--stack-trace-limit</code></li>\n</ul>\n",
              "type": "module",
              "displayName": "`NODE_OPTIONS=options...`"
            },
            {
              "textRaw": "`NODE_PATH=path[:…]`",
              "name": "`node_path=path[:…]`",
              "meta": {
                "added": [
                  "v0.1.32"
                ],
                "changes": []
              },
              "desc": "<p><code>&#39;:&#39;</code>-separated list of directories prefixed to the module search path.</p>\n<p>On Windows, this is a <code>&#39;;&#39;</code>-separated list instead.</p>\n",
              "type": "module",
              "displayName": "`NODE_PATH=path[:…]`"
            },
            {
              "textRaw": "`NODE_PENDING_DEPRECATION=1`",
              "name": "`node_pending_deprecation=1`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>When set to <code>1</code>, emit pending deprecation warnings.</p>\n<p>Pending deprecations are generally identical to a runtime deprecation with the\nnotable exception that they are turned <em>off</em> by default and will not be emitted\nunless either the <code>--pending-deprecation</code> command line flag, or the\n<code>NODE_PENDING_DEPRECATION=1</code> environment variable, is set. Pending deprecations\nare used to provide a kind of selective &quot;early warning&quot; mechanism that\ndevelopers may leverage to detect deprecated API usage.</p>\n",
              "type": "module",
              "displayName": "`NODE_PENDING_DEPRECATION=1`"
            },
            {
              "textRaw": "`NODE_PRESERVE_SYMLINKS=1`",
              "name": "`node_preserve_symlinks=1`",
              "meta": {
                "added": [
                  "v7.1.0"
                ],
                "changes": []
              },
              "desc": "<p>When set to <code>1</code>, instructs the module loader to preserve symbolic links when\nresolving and caching modules.</p>\n",
              "type": "module",
              "displayName": "`NODE_PRESERVE_SYMLINKS=1`"
            },
            {
              "textRaw": "`NODE_REDIRECT_WARNINGS=file`",
              "name": "`node_redirect_warnings=file`",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>When set, process warnings will be emitted to the given file instead of\nprinting to stderr. The file will be created if it does not exist, and will be\nappended to if it does. If an error occurs while attempting to write the\nwarning to the file, the warning will be written to stderr instead. This is\nequivalent to using the <code>--redirect-warnings=file</code> command-line flag.</p>\n",
              "type": "module",
              "displayName": "`NODE_REDIRECT_WARNINGS=file`"
            },
            {
              "textRaw": "`NODE_REPL_HISTORY=file`",
              "name": "`node_repl_history=file`",
              "meta": {
                "added": [
                  "v3.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Path to the file used to store the persistent REPL history. The default path is\n<code>~/.node_repl_history</code>, which is overridden by this variable. Setting the value\nto an empty string (<code>&#39;&#39;</code> or <code>&#39; &#39;</code>) disables persistent REPL history.</p>\n",
              "type": "module",
              "displayName": "`NODE_REPL_HISTORY=file`"
            },
            {
              "textRaw": "`OPENSSL_CONF=file`",
              "name": "`openssl_conf=file`",
              "meta": {
                "added": [
                  "v6.11.0"
                ],
                "changes": []
              },
              "desc": "<p>Load an OpenSSL configuration file on startup. Among other uses, this can be\nused to enable FIPS-compliant crypto if Node.js is built with <code>./configure\n--openssl-fips</code>.</p>\n<p>If the <a href=\"#cli_openssl_config_file\"><code>--openssl-config</code></a> command line option is used, the environment\nvariable is ignored.</p>\n",
              "type": "module",
              "displayName": "`OPENSSL_CONF=file`"
            },
            {
              "textRaw": "`SSL_CERT_DIR=dir`",
              "name": "`ssl_cert_dir=dir`",
              "meta": {
                "added": [
                  "v7.7.0"
                ],
                "changes": []
              },
              "desc": "<p>If <code>--use-openssl-ca</code> is enabled, this overrides and sets OpenSSL&#39;s directory\ncontaining trusted certificates.</p>\n<p>Be aware that unless the child environment is explicitly set, this environment\nvariable will be inherited by any child processes, and if they use OpenSSL, it\nmay cause them to trust the same CAs as node.</p>\n",
              "type": "module",
              "displayName": "`SSL_CERT_DIR=dir`"
            },
            {
              "textRaw": "`SSL_CERT_FILE=file`",
              "name": "`ssl_cert_file=file`",
              "meta": {
                "added": [
                  "v7.7.0"
                ],
                "changes": []
              },
              "desc": "<p>If <code>--use-openssl-ca</code> is enabled, this overrides and sets OpenSSL&#39;s file\ncontaining trusted certificates.</p>\n<p>Be aware that unless the child environment is explicitly set, this environment\nvariable will be inherited by any child processes, and if they use OpenSSL, it\nmay cause them to trust the same CAs as node.</p>\n",
              "type": "module",
              "displayName": "`SSL_CERT_FILE=file`"
            },
            {
              "textRaw": "`UV_THREADPOOL_SIZE=size`",
              "name": "`uv_threadpool_size=size`",
              "desc": "<p>Set the number of threads used in libuv&#39;s threadpool to <code>size</code> threads.</p>\n<p>Asynchronous system APIs are used by Node.js whenever possible, but where they\ndo not exist, libuv&#39;s threadpool is used to create asynchronous node APIs based\non synchronous system APIs. Node.js APIs that use the threadpool are:</p>\n<ul>\n<li>all <code>fs</code> APIs, other than the file watcher APIs and those that are explicitly\nsynchronous</li>\n<li><code>crypto.pbkdf2()</code></li>\n<li><code>crypto.randomBytes()</code>, unless it is used without a callback</li>\n<li><code>crypto.randomFill()</code></li>\n<li><code>dns.lookup()</code></li>\n<li>all <code>zlib</code> APIs, other than those that are explicitly synchronous</li>\n</ul>\n<p>Because libuv&#39;s threadpool has a fixed size, it means that if for whatever\nreason any of these APIs takes a long time, other (seemingly unrelated) APIs\nthat run in libuv&#39;s threadpool will experience degraded performance. In order to\nmitigate this issue, one potential solution is to increase the size of libuv&#39;s\nthreadpool by setting the <code>&#39;UV_THREADPOOL_SIZE&#39;</code> environment variable to a value\ngreater than <code>4</code> (its current default value). For more information, see the\n<a href=\"http://docs.libuv.org/en/latest/threadpool.html\">libuv threadpool documentation</a>.</p>\n<!-- [end-include:cli.md] -->\n<!-- [start-include:console.md] -->\n",
              "type": "module",
              "displayName": "`UV_THREADPOOL_SIZE=size`"
            }
          ],
          "type": "misc",
          "displayName": "Environment Variables"
        }
      ]
    },
    {
      "textRaw": "Debugger",
      "name": "Debugger",
      "introduced_in": "v0.9.12",
      "stability": 2,
      "stabilityText": "Stable",
      "type": "misc",
      "desc": "<p>Node.js includes an out-of-process debugging utility accessible via a\n<a href=\"#debugger_v8_inspector_integration_for_node_js\">V8 Inspector</a> and built-in debugging client. To use it, start Node.js\nwith the <code>inspect</code> argument followed by the path to the script to debug; a\nprompt will be displayed indicating successful launch of the debugger:</p>\n<pre><code class=\"lang-txt\">$ node inspect myscript.js\n&lt; Debugger listening on ws://127.0.0.1:9229/80e7a814-7cd3-49fb-921a-2e02228cd5ba\n&lt; For help, see: https://nodejs.org/en/docs/inspector\n&lt; Debugger attached.\nBreak on start in myscript.js:1\n&gt; 1 (function (exports, require, module, __filename, __dirname) { global.x = 5;\n  2 setTimeout(() =&gt; {\n  3   console.log(&#39;world&#39;);\ndebug&gt;\n</code></pre>\n<p>Node.js&#39;s debugger client is not a full-featured debugger, but simple step and\ninspection are possible.</p>\n<p>Inserting the statement <code>debugger;</code> into the source code of a script will\nenable a breakpoint at that position in the code:</p>\n<!-- eslint-disable no-debugger -->\n<pre><code class=\"lang-js\">// myscript.js\nglobal.x = 5;\nsetTimeout(() =&gt; {\n  debugger;\n  console.log(&#39;world&#39;);\n}, 1000);\nconsole.log(&#39;hello&#39;);\n</code></pre>\n<p>Once the debugger is run, a breakpoint will occur at line 3:</p>\n<pre><code class=\"lang-txt\">$ node inspect myscript.js\n&lt; Debugger listening on ws://127.0.0.1:9229/80e7a814-7cd3-49fb-921a-2e02228cd5ba\n&lt; For help, see: https://nodejs.org/en/docs/inspector\n&lt; Debugger attached.\nBreak on start in myscript.js:1\n&gt; 1 (function (exports, require, module, __filename, __dirname) { global.x = 5;\n  2 setTimeout(() =&gt; {\n  3   debugger;\ndebug&gt; cont\n&lt; hello\nbreak in myscript.js:3\n  1 (function (exports, require, module, __filename, __dirname) { global.x = 5;\n  2 setTimeout(() =&gt; {\n&gt; 3   debugger;\n  4   console.log(&#39;world&#39;);\n  5 }, 1000);\ndebug&gt; next\nbreak in myscript.js:4\n  2 setTimeout(() =&gt; {\n  3   debugger;\n&gt; 4   console.log(&#39;world&#39;);\n  5 }, 1000);\n  6 console.log(&#39;hello&#39;);\ndebug&gt; repl\nPress Ctrl + C to leave debug repl\n&gt; x\n5\n&gt; 2 + 2\n4\ndebug&gt; next\n&lt; world\nbreak in myscript.js:5\n  3   debugger;\n  4   console.log(&#39;world&#39;);\n&gt; 5 }, 1000);\n  6 console.log(&#39;hello&#39;);\n  7\ndebug&gt; .exit\n</code></pre>\n<p>The <code>repl</code> command allows code to be evaluated remotely. The <code>next</code> command\nsteps to the next line. Type <code>help</code> to see what other commands are available.</p>\n<p>Pressing <code>enter</code> without typing a command will repeat the previous debugger\ncommand.</p>\n",
      "miscs": [
        {
          "textRaw": "Watchers",
          "name": "watchers",
          "desc": "<p>It is possible to watch expression and variable values while debugging. On\nevery breakpoint, each expression from the watchers list will be evaluated\nin the current context and displayed immediately before the breakpoint&#39;s\nsource code listing.</p>\n<p>To begin watching an expression, type <code>watch(&#39;my_expression&#39;)</code>. The command\n<code>watchers</code> will print the active watchers. To remove a watcher, type\n<code>unwatch(&#39;my_expression&#39;)</code>.</p>\n",
          "type": "misc",
          "displayName": "Watchers"
        },
        {
          "textRaw": "Command reference",
          "name": "command_reference",
          "modules": [
            {
              "textRaw": "Stepping",
              "name": "Stepping",
              "desc": "<ul>\n<li><code>cont</code>, <code>c</code> - Continue execution</li>\n<li><code>next</code>, <code>n</code> - Step next</li>\n<li><code>step</code>, <code>s</code> - Step in</li>\n<li><code>out</code>, <code>o</code> - Step out</li>\n<li><code>pause</code> - Pause running code (like pause button in Developer Tools)</li>\n</ul>\n",
              "type": "module",
              "displayName": "Breakpoints"
            },
            {
              "textRaw": "Breakpoints",
              "name": "breakpoints",
              "desc": "<ul>\n<li><code>setBreakpoint()</code>, <code>sb()</code> - Set breakpoint on current line</li>\n<li><code>setBreakpoint(line)</code>, <code>sb(line)</code> - Set breakpoint on specific line</li>\n<li><code>setBreakpoint(&#39;fn()&#39;)</code>, <code>sb(...)</code> - Set breakpoint on a first statement in\nfunctions body</li>\n<li><code>setBreakpoint(&#39;script.js&#39;, 1)</code>, <code>sb(...)</code> - Set breakpoint on first line of\n<code>script.js</code></li>\n<li><code>clearBreakpoint(&#39;script.js&#39;, 1)</code>, <code>cb(...)</code> - Clear breakpoint in <code>script.js</code>\non line 1</li>\n</ul>\n<p>It is also possible to set a breakpoint in a file (module) that\nis not loaded yet:</p>\n<pre><code class=\"lang-txt\">$ node inspect main.js\n&lt; Debugger listening on ws://127.0.0.1:9229/4e3db158-9791-4274-8909-914f7facf3bd\n&lt; For help, see: https://nodejs.org/en/docs/inspector\n&lt; Debugger attached.\nBreak on start in main.js:1\n&gt; 1 (function (exports, require, module, __filename, __dirname) { const mod = require(&#39;./mod.js&#39;);\n  2 mod.hello();\n  3 mod.hello();\ndebug&gt; setBreakpoint(&#39;mod.js&#39;, 22)\nWarning: script &#39;mod.js&#39; was not loaded yet.\ndebug&gt; c\nbreak in mod.js:22\n 20 // USE OR OTHER DEALINGS IN THE SOFTWARE.\n 21\n&gt;22 exports.hello = function() {\n 23   return &#39;hello from module&#39;;\n 24 };\ndebug&gt;\n</code></pre>\n",
              "type": "module",
              "displayName": "Breakpoints"
            },
            {
              "textRaw": "Execution control",
              "name": "Execution control",
              "desc": "<ul>\n<li><code>run</code> - Run script (automatically runs on debugger&#39;s start)</li>\n<li><code>restart</code> - Restart script</li>\n<li><code>kill</code> - Kill script</li>\n</ul>\n",
              "type": "module",
              "displayName": "Various"
            },
            {
              "textRaw": "Various",
              "name": "various",
              "desc": "<ul>\n<li><code>scripts</code> - List all loaded scripts</li>\n<li><code>version</code> - Display V8&#39;s version</li>\n</ul>\n",
              "type": "module",
              "displayName": "Various"
            }
          ],
          "type": "misc",
          "displayName": "Command reference"
        },
        {
          "textRaw": "Advanced Usage",
          "name": "advanced_usage",
          "modules": [
            {
              "textRaw": "V8 Inspector Integration for Node.js",
              "name": "v8_inspector_integration_for_node.js",
              "desc": "<p>V8 Inspector integration allows attaching Chrome DevTools to Node.js\ninstances for debugging and profiling. It uses the\n<a href=\"https://chromedevtools.github.io/devtools-protocol/\">Chrome DevTools Protocol</a>.</p>\n<p>V8 Inspector can be enabled by passing the <code>--inspect</code> flag when starting a\nNode.js application. It is also possible to supply a custom port with that flag,\ne.g. <code>--inspect=9222</code> will accept DevTools connections on port 9222.</p>\n<p>To break on the first line of the application code, pass the <code>--inspect-brk</code>\nflag instead of <code>--inspect</code>.</p>\n<pre><code class=\"lang-txt\">$ node --inspect index.js\nDebugger listening on 127.0.0.1:9229.\nTo start debugging, open the following URL in Chrome:\n    chrome-devtools://devtools/bundled/inspector.html?experiments=true&amp;v8only=true&amp;ws=127.0.0.1:9229/dc9010dd-f8b8-4ac5-a510-c1a114ec7d29\n</code></pre>\n<p>(In the example above, the UUID dc9010dd-f8b8-4ac5-a510-c1a114ec7d29\nat the end of the URL is generated on the fly, it varies in different\ndebugging sessions.)</p>\n<!-- [end-include:debugger.md] -->\n<!-- [start-include:deprecations.md] -->\n",
              "type": "module",
              "displayName": "V8 Inspector Integration for Node.js"
            }
          ],
          "type": "misc",
          "displayName": "Advanced Usage"
        }
      ]
    },
    {
      "textRaw": "Deprecated APIs",
      "name": "Deprecated APIs",
      "introduced_in": "v7.7.0",
      "type": "misc",
      "desc": "<p>Node.js may deprecate APIs when either: (a) use of the API is considered to be\nunsafe, (b) an improved alternative API has been made available, or (c)\nbreaking changes to the API are expected in a future major release.</p>\n<p>Node.js utilizes three kinds of Deprecations:</p>\n<ul>\n<li>Documentation-only</li>\n<li>Runtime</li>\n<li>End-of-Life</li>\n</ul>\n<p>A Documentation-only deprecation is one that is expressed only within the\nNode.js API docs. These generate no side-effects while running Node.js.\nSome Documentation-only deprecations trigger a runtime warning when launched\nwith <a href=\"cli.html#cli_pending_deprecation\"><code>--pending-deprecation</code></a> flag (or its alternative,\n<code>NODE_PENDING_DEPRECATION=1</code> environment variable), similarly to Runtime\ndeprecations below. Documentation-only deprecations that support that flag\nare explicitly labeled as such in the\n<a href=\"#deprecations_list_of_deprecated_apis\">list of Deprecated APIs</a>.</p>\n<p>A Runtime deprecation will, by default, generate a process warning that will\nbe printed to <code>stderr</code> the first time the deprecated API is used. When the\n<code>--throw-deprecation</code> command-line flag is used, a Runtime deprecation will\ncause an error to be thrown.</p>\n<p>An End-of-Life deprecation is used to identify code that either has been\nremoved or will soon be removed from Node.js.</p>\n",
      "miscs": [
        {
          "textRaw": "Revoking deprecations",
          "name": "revoking_deprecations",
          "desc": "<p>Occasionally, the deprecation of an API may be reversed. In such situations,\nthis document will be updated with information relevant to the decision.\nHowever, the deprecation identifier will not be modified.</p>\n",
          "type": "misc",
          "displayName": "Revoking deprecations"
        },
        {
          "textRaw": "List of Deprecated APIs",
          "name": "list_of_deprecated_apis",
          "desc": "<p><a id=\"DEP0001\"></a></p>\n",
          "modules": [
            {
              "textRaw": "DEP0001: http.OutgoingMessage.prototype.flush",
              "name": "dep0001:_http.outgoingmessage.prototype.flush",
              "desc": "<p>Type: Runtime</p>\n<p>The <code>OutgoingMessage.prototype.flush()</code> method is deprecated. Use\n<code>OutgoingMessage.prototype.flushHeaders()</code> instead.</p>\n<p><a id=\"DEP0002\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0001: http.OutgoingMessage.prototype.flush"
            },
            {
              "textRaw": "DEP0002: require('\\_linklist')",
              "name": "dep0002:_require('\\_linklist')",
              "desc": "<p>Type: End-of-Life</p>\n<p>The <code>_linklist</code> module is deprecated. Please use a userland alternative.</p>\n<p><a id=\"DEP0003\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0002: require('\\_linklist')"
            },
            {
              "textRaw": "DEP0003: \\_writableState.buffer",
              "name": "dep0003:_\\_writablestate.buffer",
              "desc": "<p>Type: Runtime</p>\n<p>The <code>_writableState.buffer</code> property is deprecated. Use the\n<code>_writableState.getBuffer()</code> method instead.</p>\n<p><a id=\"DEP0004\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0003: \\_writableState.buffer"
            },
            {
              "textRaw": "DEP0004: CryptoStream.prototype.readyState",
              "name": "dep0004:_cryptostream.prototype.readystate",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <code>CryptoStream.prototype.readyState</code> property is deprecated and should not\nbe used.</p>\n<p><a id=\"DEP0005\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0004: CryptoStream.prototype.readyState"
            },
            {
              "textRaw": "DEP0005: Buffer() constructor",
              "name": "dep0005:_buffer()_constructor",
              "desc": "<p>Type: Runtime (supports <a href=\"cli.html#cli_pending_deprecation\"><code>--pending-deprecation</code></a>)</p>\n<p>The <code>Buffer()</code> function and <code>new Buffer()</code> constructor are deprecated due to\nAPI usability issues that can potentially lead to accidental security issues.</p>\n<p>As an alternative, use of the following methods of constructing <code>Buffer</code> objects\nis strongly recommended:</p>\n<ul>\n<li><a href=\"buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc(size[, fill[, encoding]])</code></a> - Create a <code>Buffer</code> with\n<em>initialized</em> memory.</li>\n<li><a href=\"buffer.html#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe(size)</code></a> - Create a <code>Buffer</code> with\n<em>uninitialized</em> memory.</li>\n<li><a href=\"buffer.html#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow(size)</code></a> - Create a <code>Buffer</code> with <em>uninitialized</em>\n memory.</li>\n<li><a href=\"buffer.html#buffer_class_method_buffer_from_array\"><code>Buffer.from(array)</code></a> - Create a <code>Buffer</code> with a copy of <code>array</code></li>\n<li><a href=\"buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\"><code>Buffer.from(arrayBuffer[, byteOffset[, length]])</code></a> -\nCreate a <code>Buffer</code> that wraps the given <code>arrayBuffer</code>.</li>\n<li><a href=\"buffer.html#buffer_class_method_buffer_from_buffer\"><code>Buffer.from(buffer)</code></a> - Create a <code>Buffer</code> that copies <code>buffer</code>.</li>\n<li><a href=\"buffer.html#buffer_class_method_buffer_from_string_encoding\"><code>Buffer.from(string[, encoding])</code></a> - Create a <code>Buffer</code>\nthat copies <code>string</code>.</li>\n</ul>\n<p>As of v10.0.0, a deprecation warning is printed at runtime when\n<code>--pending-deprecation</code> is used or when the calling code is\noutside <code>node_modules</code> in order to better target developers, rather than users.</p>\n<p><a id=\"DEP0006\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0005: Buffer() constructor"
            },
            {
              "textRaw": "DEP0006: child\\_process options.customFds",
              "name": "dep0006:_child\\_process_options.customfds",
              "desc": "<p>Type: Runtime</p>\n<p>Within the <a href=\"child_process.html\"><code>child_process</code></a> module&#39;s <code>spawn()</code>, <code>fork()</code>, and <code>exec()</code>\nmethods, the <code>options.customFds</code> option is deprecated. The <code>options.stdio</code>\noption should be used instead.</p>\n<p><a id=\"DEP0007\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0006: child\\_process options.customFds"
            },
            {
              "textRaw": "DEP0007: Replace cluster worker.suicide with worker.exitedAfterDisconnect",
              "name": "dep0007:_replace_cluster_worker.suicide_with_worker.exitedafterdisconnect",
              "desc": "<p>Type: End-of-Life</p>\n<p>In an earlier version of the Node.js <code>cluster</code>, a boolean property with the name\n<code>suicide</code> was added to the <code>Worker</code> object. The intent of this property was to\nprovide an indication of how and why the <code>Worker</code> instance exited. In Node.js\n6.0.0, the old property was deprecated and replaced with a new\n<a href=\"cluster.html#cluster_worker_exitedafterdisconnect\"><code>worker.exitedAfterDisconnect</code></a> property. The old property name did not\nprecisely describe the actual semantics and was unnecessarily emotion-laden.</p>\n<p><a id=\"DEP0008\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0007: Replace cluster worker.suicide with worker.exitedAfterDisconnect"
            },
            {
              "textRaw": "DEP0008: require('constants')",
              "name": "dep0008:_require('constants')",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <code>constants</code> module has been deprecated. When requiring access to constants\nrelevant to specific Node.js builtin modules, developers should instead refer\nto the <code>constants</code> property exposed by the relevant module. For instance,\n<code>require(&#39;fs&#39;).constants</code> and <code>require(&#39;os&#39;).constants</code>.</p>\n<p><a id=\"DEP0009\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0008: require('constants')"
            },
            {
              "textRaw": "DEP0009: crypto.pbkdf2 without digest",
              "name": "dep0009:_crypto.pbkdf2_without_digest",
              "desc": "<p>Type: End-of-Life</p>\n<p>Use of the <a href=\"crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\"><code>crypto.pbkdf2()</code></a> API without specifying a digest was deprecated\nin Node.js 6.0 because the method defaulted to using the non-recommended\n<code>&#39;SHA1&#39;</code> digest. Previously, a deprecation warning was printed. Starting in\nNode.js 8.0.0, calling <code>crypto.pbkdf2()</code> or <code>crypto.pbkdf2Sync()</code> with an\nundefined <code>digest</code> will throw a <code>TypeError</code>.</p>\n<p><a id=\"DEP0010\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0009: crypto.pbkdf2 without digest"
            },
            {
              "textRaw": "DEP0010: crypto.createCredentials",
              "name": "dep0010:_crypto.createcredentials",
              "desc": "<p>Type: Runtime</p>\n<p>The <a href=\"crypto.html#crypto_crypto_createcredentials_details\"><code>crypto.createCredentials()</code></a> API is deprecated. Please use\n<a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> instead.</p>\n<p><a id=\"DEP0011\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0010: crypto.createCredentials"
            },
            {
              "textRaw": "DEP0011: crypto.Credentials",
              "name": "dep0011:_crypto.credentials",
              "desc": "<p>Type: Runtime</p>\n<p>The <code>crypto.Credentials</code> class is deprecated. Please use <a href=\"tls.html#tls_tls_createsecurecontext_options\"><code>tls.SecureContext</code></a>\ninstead.</p>\n<p><a id=\"DEP0012\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0011: crypto.Credentials"
            },
            {
              "textRaw": "DEP0012: Domain.dispose",
              "name": "dep0012:_domain.dispose",
              "desc": "<p>Type: End-of-Life</p>\n<p><code>Domain.dispose()</code> has been removed. Recover from failed I/O actions\nexplicitly via error event handlers set on the domain instead.</p>\n<p><a id=\"DEP0013\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0012: Domain.dispose"
            },
            {
              "textRaw": "DEP0013: fs asynchronous function without callback",
              "name": "dep0013:_fs_asynchronous_function_without_callback",
              "desc": "<p>Type: End-of-Life</p>\n<p>Calling an asynchronous function without a callback throws a <code>TypeError</code>\nin Node.js 10.0.0 onwards. (See <a href=\"https://github.com/nodejs/node/pull/12562\">https://github.com/nodejs/node/pull/12562</a>.)</p>\n<p><a id=\"DEP0014\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0013: fs asynchronous function without callback"
            },
            {
              "textRaw": "DEP0014: fs.read legacy String interface",
              "name": "dep0014:_fs.read_legacy_string_interface",
              "desc": "<p>Type: End-of-Life</p>\n<p>The <a href=\"#fs_fs_read_fd_buffer_offset_length_position_callback\"><code>fs.read()</code></a> legacy <code>String</code> interface is deprecated. Use the <code>Buffer</code>\nAPI as mentioned in the documentation instead.</p>\n<p><a id=\"DEP0015\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0014: fs.read legacy String interface"
            },
            {
              "textRaw": "DEP0015: fs.readSync legacy String interface",
              "name": "dep0015:_fs.readsync_legacy_string_interface",
              "desc": "<p>Type: End-of-Life</p>\n<p>The <a href=\"fs.html#fs_fs_readsync_fd_buffer_offset_length_position\"><code>fs.readSync()</code></a> legacy <code>String</code> interface is deprecated. Use the\n<code>Buffer</code> API as mentioned in the documentation instead.</p>\n<p><a id=\"DEP0016\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0015: fs.readSync legacy String interface"
            },
            {
              "textRaw": "DEP0016: GLOBAL/root",
              "name": "dep0016:_global/root",
              "desc": "<p>Type: Runtime</p>\n<p>The <code>GLOBAL</code> and <code>root</code> aliases for the <code>global</code> property have been deprecated\nand should no longer be used.</p>\n<p><a id=\"DEP0017\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0016: GLOBAL/root"
            },
            {
              "textRaw": "DEP0017: Intl.v8BreakIterator",
              "name": "dep0017:_intl.v8breakiterator",
              "desc": "<p>Type: End-of-Life</p>\n<p><code>Intl.v8BreakIterator</code> was a non-standard extension and has been removed.\nSee <a href=\"https://github.com/tc39/proposal-intl-segmenter\"><code>Intl.Segmenter</code></a>.</p>\n<p><a id=\"DEP0018\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0017: Intl.v8BreakIterator"
            },
            {
              "textRaw": "DEP0018: Unhandled promise rejections",
              "name": "dep0018:_unhandled_promise_rejections",
              "desc": "<p>Type: Runtime</p>\n<p>Unhandled promise rejections are deprecated. In the future, promise rejections\nthat are not handled will terminate the Node.js process with a non-zero exit\ncode.</p>\n<p><a id=\"DEP0019\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0018: Unhandled promise rejections"
            },
            {
              "textRaw": "DEP0019: require('.') resolved outside directory",
              "name": "dep0019:_require('.')_resolved_outside_directory",
              "desc": "<p>Type: Runtime</p>\n<p>In certain cases, <code>require(&#39;.&#39;)</code> may resolve outside the package directory.\nThis behavior is deprecated and will be removed in a future major Node.js\nrelease.</p>\n<p><a id=\"DEP0020\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0019: require('.') resolved outside directory"
            },
            {
              "textRaw": "DEP0020: Server.connections",
              "name": "dep0020:_server.connections",
              "desc": "<p>Type: Runtime</p>\n<p>The <a href=\"net.html#net_server_connections\"><code>Server.connections</code></a> property is deprecated. Please use the\n<a href=\"net.html#net_server_getconnections_callback\"><code>Server.getConnections()</code></a> method instead.</p>\n<p><a id=\"DEP0021\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0020: Server.connections"
            },
            {
              "textRaw": "DEP0021: Server.listenFD",
              "name": "dep0021:_server.listenfd",
              "desc": "<p>Type: Runtime</p>\n<p>The <code>Server.listenFD()</code> method is deprecated. Please use\n<a href=\"net.html#net_server_listen_handle_backlog_callback\"><code>Server.listen({fd: &lt;number&gt;})</code></a> instead.</p>\n<p><a id=\"DEP0022\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0021: Server.listenFD"
            },
            {
              "textRaw": "DEP0022: os.tmpDir()",
              "name": "dep0022:_os.tmpdir()",
              "desc": "<p>Type: Runtime</p>\n<p>The <code>os.tmpDir()</code> API is deprecated. Please use <a href=\"os.html#os_os_tmpdir\"><code>os.tmpdir()</code></a> instead.</p>\n<p><a id=\"DEP0023\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0022: os.tmpDir()"
            },
            {
              "textRaw": "DEP0023: os.getNetworkInterfaces()",
              "name": "dep0023:_os.getnetworkinterfaces()",
              "desc": "<p>Type: Runtime</p>\n<p>The <code>os.getNetworkInterfaces()</code> method is deprecated. Please use the\n<a href=\"os.html#os_os_networkinterfaces\"><code>os.networkInterfaces</code></a> property instead.</p>\n<p><a id=\"DEP0024\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0023: os.getNetworkInterfaces()"
            },
            {
              "textRaw": "DEP0024: REPLServer.prototype.convertToContext()",
              "name": "dep0024:_replserver.prototype.converttocontext()",
              "desc": "<p>Type: End-of-Life</p>\n<p>The <code>REPLServer.prototype.convertToContext()</code> API is deprecated and should\nnot be used.</p>\n<p><a id=\"DEP0025\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0024: REPLServer.prototype.convertToContext()"
            },
            {
              "textRaw": "DEP0025: require('sys')",
              "name": "dep0025:_require('sys')",
              "desc": "<p>Type: Runtime</p>\n<p>The <code>sys</code> module is deprecated. Please use the <a href=\"util.html\"><code>util</code></a> module instead.</p>\n<p><a id=\"DEP0026\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0025: require('sys')"
            },
            {
              "textRaw": "DEP0026: util.print()",
              "name": "dep0026:_util.print()",
              "desc": "<p>Type: Runtime</p>\n<p>The <a href=\"util.html#util_util_print_strings\"><code>util.print()</code></a> API is deprecated. Please use <a href=\"console.html#console_console_log_data_args\"><code>console.log()</code></a>\ninstead.</p>\n<p><a id=\"DEP0027\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0026: util.print()"
            },
            {
              "textRaw": "DEP0027: util.puts()",
              "name": "dep0027:_util.puts()",
              "desc": "<p>Type: Runtime</p>\n<p>The <a href=\"util.html#util_util_puts_strings\"><code>util.puts()</code></a> API is deprecated. Please use <a href=\"console.html#console_console_log_data_args\"><code>console.log()</code></a> instead.</p>\n<p><a id=\"DEP0028\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0027: util.puts()"
            },
            {
              "textRaw": "DEP0028: util.debug()",
              "name": "dep0028:_util.debug()",
              "desc": "<p>Type: Runtime</p>\n<p>The <a href=\"util.html#util_util_debug_string\"><code>util.debug()</code></a> API is deprecated. Please use <a href=\"console.html#console_console_error_data_args\"><code>console.error()</code></a>\ninstead.</p>\n<p><a id=\"DEP0029\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0028: util.debug()"
            },
            {
              "textRaw": "DEP0029: util.error()",
              "name": "dep0029:_util.error()",
              "desc": "<p>Type: Runtime</p>\n<p>The <a href=\"util.html#util_util_error_strings\"><code>util.error()</code></a> API is deprecated. Please use <a href=\"console.html#console_console_error_data_args\"><code>console.error()</code></a>\ninstead.</p>\n<p><a id=\"DEP0030\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0029: util.error()"
            },
            {
              "textRaw": "DEP0030: SlowBuffer",
              "name": "dep0030:_slowbuffer",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"buffer.html#buffer_class_slowbuffer\"><code>SlowBuffer</code></a> class has been deprecated. Please use\n<a href=\"buffer.html#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow(size)</code></a> instead.</p>\n<p><a id=\"DEP0031\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0030: SlowBuffer"
            },
            {
              "textRaw": "DEP0031: ecdh.setPublicKey()",
              "name": "dep0031:_ecdh.setpublickey()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"crypto.html#crypto_ecdh_setpublickey_publickey_encoding\"><code>ecdh.setPublicKey()</code></a> method is now deprecated as its inclusion in the\nAPI is not useful.</p>\n<p><a id=\"DEP0032\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0031: ecdh.setPublicKey()"
            },
            {
              "textRaw": "DEP0032: domain module",
              "name": "dep0032:_domain_module",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"domain.html\"><code>domain</code></a> module is deprecated and should not be used.</p>\n<p><a id=\"DEP0033\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0032: domain module"
            },
            {
              "textRaw": "DEP0033: EventEmitter.listenerCount()",
              "name": "dep0033:_eventemitter.listenercount()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"events.html#events_eventemitter_listenercount_emitter_eventname\"><code>EventEmitter.listenerCount(emitter, eventName)</code></a> API has been\ndeprecated. Please use <a href=\"events.html#events_emitter_listenercount_eventname\"><code>emitter.listenerCount(eventName)</code></a> instead.</p>\n<p><a id=\"DEP0034\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0033: EventEmitter.listenerCount()"
            },
            {
              "textRaw": "DEP0034: fs.exists(path, callback)",
              "name": "dep0034:_fs.exists(path,_callback)",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"fs.html#fs_fs_exists_path_callback\"><code>fs.exists(path, callback)</code></a> API has been deprecated. Please use\n<a href=\"#fs_fs_stat_path_callback\"><code>fs.stat()</code></a> or <a href=\"#fs_fs_access_path_mode_callback\"><code>fs.access()</code></a> instead.</p>\n<p><a id=\"DEP0035\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0034: fs.exists(path, callback)"
            },
            {
              "textRaw": "DEP0035: fs.lchmod(path, mode, callback)",
              "name": "dep0035:_fs.lchmod(path,_mode,_callback)",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"fs.html#fs_fs_lchmod_path_mode_callback\"><code>fs.lchmod(path, mode, callback)</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0036\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0035: fs.lchmod(path, mode, callback)"
            },
            {
              "textRaw": "DEP0036: fs.lchmodSync(path, mode)",
              "name": "dep0036:_fs.lchmodsync(path,_mode)",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"fs.html#fs_fs_lchmodsync_path_mode\"><code>fs.lchmodSync(path, mode)</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0037\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0036: fs.lchmodSync(path, mode)"
            },
            {
              "textRaw": "DEP0037: fs.lchown(path, uid, gid, callback)",
              "name": "dep0037:_fs.lchown(path,_uid,_gid,_callback)",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"fs.html#fs_fs_lchown_path_uid_gid_callback\"><code>fs.lchown(path, uid, gid, callback)</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0038\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0037: fs.lchown(path, uid, gid, callback)"
            },
            {
              "textRaw": "DEP0038: fs.lchownSync(path, uid, gid)",
              "name": "dep0038:_fs.lchownsync(path,_uid,_gid)",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"fs.html#fs_fs_lchownsync_path_uid_gid\"><code>fs.lchownSync(path, uid, gid)</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0039\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0038: fs.lchownSync(path, uid, gid)"
            },
            {
              "textRaw": "DEP0039: require.extensions",
              "name": "dep0039:_require.extensions",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"modules.html#modules_require_extensions\"><code>require.extensions</code></a> property has been deprecated.</p>\n<p><a id=\"DEP0040\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0039: require.extensions"
            },
            {
              "textRaw": "DEP0040: punycode module",
              "name": "dep0040:_punycode_module",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"punycode.html\"><code>punycode</code></a> module has been deprecated. Please use a userland alternative\ninstead.</p>\n<p><a id=\"DEP0041\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0040: punycode module"
            },
            {
              "textRaw": "DEP0041: NODE\\_REPL\\_HISTORY\\_FILE environment variable",
              "name": "dep0041:_node\\_repl\\_history\\_file_environment_variable",
              "desc": "<p>Type: End-of-Life</p>\n<p>The <code>NODE_REPL_HISTORY_FILE</code> environment variable was removed. Please use\n<code>NODE_REPL_HISTORY</code> instead.</p>\n<p><a id=\"DEP0042\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0041: NODE\\_REPL\\_HISTORY\\_FILE environment variable"
            },
            {
              "textRaw": "DEP0042: tls.CryptoStream",
              "name": "dep0042:_tls.cryptostream",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"tls.html#tls_class_cryptostream\"><code>tls.CryptoStream</code></a> class has been deprecated. Please use\n<a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> instead.</p>\n<p><a id=\"DEP0043\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0042: tls.CryptoStream"
            },
            {
              "textRaw": "DEP0043: tls.SecurePair",
              "name": "dep0043:_tls.securepair",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"tls.html#tls_class_securepair\"><code>tls.SecurePair</code></a> class has been deprecated. Please use\n<a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> instead.</p>\n<p><a id=\"DEP0044\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0043: tls.SecurePair"
            },
            {
              "textRaw": "DEP0044: util.isArray()",
              "name": "dep0044:_util.isarray()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_isarray_object\"><code>util.isArray()</code></a> API has been deprecated. Please use <code>Array.isArray()</code>\ninstead.</p>\n<p><a id=\"DEP0045\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0044: util.isArray()"
            },
            {
              "textRaw": "DEP0045: util.isBoolean()",
              "name": "dep0045:_util.isboolean()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_isboolean_object\"><code>util.isBoolean()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0046\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0045: util.isBoolean()"
            },
            {
              "textRaw": "DEP0046: util.isBuffer()",
              "name": "dep0046:_util.isbuffer()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_isbuffer_object\"><code>util.isBuffer()</code></a> API has been deprecated. Please use\n<a href=\"buffer.html#buffer_class_method_buffer_isbuffer_obj\"><code>Buffer.isBuffer()</code></a> instead.</p>\n<p><a id=\"DEP0047\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0046: util.isBuffer()"
            },
            {
              "textRaw": "DEP0047: util.isDate()",
              "name": "dep0047:_util.isdate()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_isdate_object\"><code>util.isDate()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0048\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0047: util.isDate()"
            },
            {
              "textRaw": "DEP0048: util.isError()",
              "name": "dep0048:_util.iserror()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_iserror_object\"><code>util.isError()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0049\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0048: util.isError()"
            },
            {
              "textRaw": "DEP0049: util.isFunction()",
              "name": "dep0049:_util.isfunction()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_isfunction_object\"><code>util.isFunction()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0050\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0049: util.isFunction()"
            },
            {
              "textRaw": "DEP0050: util.isNull()",
              "name": "dep0050:_util.isnull()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_isnull_object\"><code>util.isNull()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0051\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0050: util.isNull()"
            },
            {
              "textRaw": "DEP0051: util.isNullOrUndefined()",
              "name": "dep0051:_util.isnullorundefined()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_isnullorundefined_object\"><code>util.isNullOrUndefined()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0052\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0051: util.isNullOrUndefined()"
            },
            {
              "textRaw": "DEP0052: util.isNumber()",
              "name": "dep0052:_util.isnumber()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_isnumber_object\"><code>util.isNumber()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0053\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0052: util.isNumber()"
            },
            {
              "textRaw": "DEP0053 util.isObject()",
              "name": "dep0053_util.isobject()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_isobject_object\"><code>util.isObject()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0054\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0053 util.isObject()"
            },
            {
              "textRaw": "DEP0054: util.isPrimitive()",
              "name": "dep0054:_util.isprimitive()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_isprimitive_object\"><code>util.isPrimitive()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0055\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0054: util.isPrimitive()"
            },
            {
              "textRaw": "DEP0055: util.isRegExp()",
              "name": "dep0055:_util.isregexp()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_isregexp_object\"><code>util.isRegExp()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0056\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0055: util.isRegExp()"
            },
            {
              "textRaw": "DEP0056: util.isString()",
              "name": "dep0056:_util.isstring()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_isstring_object\"><code>util.isString()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0057\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0056: util.isString()"
            },
            {
              "textRaw": "DEP0057: util.isSymbol()",
              "name": "dep0057:_util.issymbol()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_issymbol_object\"><code>util.isSymbol()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0058\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0057: util.isSymbol()"
            },
            {
              "textRaw": "DEP0058: util.isUndefined()",
              "name": "dep0058:_util.isundefined()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_isundefined_object\"><code>util.isUndefined()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0059\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0058: util.isUndefined()"
            },
            {
              "textRaw": "DEP0059: util.log()",
              "name": "dep0059:_util.log()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_log_string\"><code>util.log()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0060\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0059: util.log()"
            },
            {
              "textRaw": "DEP0060: util.\\_extend()",
              "name": "dep0060:_util.\\_extend()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"util.html#util_util_extend_target_source\"><code>util._extend()</code></a> API has been deprecated.</p>\n<p><a id=\"DEP0061\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0060: util.\\_extend()"
            },
            {
              "textRaw": "DEP0061: fs.SyncWriteStream",
              "name": "dep0061:_fs.syncwritestream",
              "desc": "<p>Type: Runtime</p>\n<p>The <code>fs.SyncWriteStream</code> class was never intended to be a publicly accessible\nAPI. No alternative API is available. Please use a userland alternative.</p>\n<p><a id=\"DEP0062\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0061: fs.SyncWriteStream"
            },
            {
              "textRaw": "DEP0062: node --debug",
              "name": "dep0062:_node_--debug",
              "desc": "<p>Type: Runtime</p>\n<p><code>--debug</code> activates the legacy V8 debugger interface, which has been removed as\nof V8 5.8. It is replaced by Inspector which is activated with <code>--inspect</code>\ninstead.</p>\n<p><a id=\"DEP0063\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0062: node --debug"
            },
            {
              "textRaw": "DEP0063: ServerResponse.prototype.writeHeader()",
              "name": "dep0063:_serverresponse.prototype.writeheader()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <code>http</code> module <code>ServerResponse.prototype.writeHeader()</code> API has been\ndeprecated. Please use <code>ServerResponse.prototype.writeHead()</code> instead.</p>\n<p>The <code>ServerResponse.prototype.writeHeader()</code> method was never documented as an\nofficially supported API.</p>\n<p><a id=\"DEP0064\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0063: ServerResponse.prototype.writeHeader()"
            },
            {
              "textRaw": "DEP0064: tls.createSecurePair()",
              "name": "dep0064:_tls.createsecurepair()",
              "desc": "<p>Type: Runtime</p>\n<p>The <code>tls.createSecurePair()</code> API was deprecated in documentation in Node.js\n0.11.3. Users should use <code>tls.Socket</code> instead.</p>\n<p><a id=\"DEP0065\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0064: tls.createSecurePair()"
            },
            {
              "textRaw": "DEP0065: repl.REPL_MODE_MAGIC and NODE_REPL_MODE=magic",
              "name": "dep0065:_repl.repl_mode_magic_and_node_repl_mode=magic",
              "desc": "<p>Type: End-of-Life</p>\n<p>The <code>repl</code> module&#39;s <code>REPL_MODE_MAGIC</code> constant, used for <code>replMode</code> option, has\nbeen removed. Its behavior has been functionally identical to that of\n<code>REPL_MODE_SLOPPY</code> since Node.js 6.0.0, when V8 5.0 was imported. Please use\n<code>REPL_MODE_SLOPPY</code> instead.</p>\n<p>The <code>NODE_REPL_MODE</code> environment variable is used to set the underlying\n<code>replMode</code> of an interactive <code>node</code> session. Its value, <code>magic</code>, is also\nremoved. Please use <code>sloppy</code> instead.</p>\n<p><a id=\"DEP0066\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0065: repl.REPL_MODE_MAGIC and NODE_REPL_MODE=magic"
            },
            {
              "textRaw": "DEP0066: outgoingMessage.\\_headers, outgoingMessage.\\_headerNames",
              "name": "dep0066:_outgoingmessage.\\_headers,_outgoingmessage.\\_headernames",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <code>http</code> module <code>outgoingMessage._headers</code> and <code>outgoingMessage._headerNames</code>\nproperties have been deprecated. Please instead use one of the public methods\n(e.g. <code>outgoingMessage.getHeader()</code>, <code>outgoingMessage.getHeaders()</code>,\n<code>outgoingMessage.getHeaderNames()</code>, <code>outgoingMessage.hasHeader()</code>,\n<code>outgoingMessage.removeHeader()</code>, <code>outgoingMessage.setHeader()</code>) for working\nwith outgoing headers.</p>\n<p>The <code>outgoingMessage._headers</code> and <code>outgoingMessage._headerNames</code> properties\nwere never documented as officially supported properties.</p>\n<p><a id=\"DEP0067\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0066: outgoingMessage.\\_headers, outgoingMessage.\\_headerNames"
            },
            {
              "textRaw": "DEP0067: OutgoingMessage.prototype.\\_renderHeaders",
              "name": "dep0067:_outgoingmessage.prototype.\\_renderheaders",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <code>http</code> module <code>OutgoingMessage.prototype._renderHeaders()</code> API has been\ndeprecated.</p>\n<p>The <code>OutgoingMessage.prototype._renderHeaders</code> property was never documented as\nan officially supported API.</p>\n<p><a id=\"DEP0068\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0067: OutgoingMessage.prototype.\\_renderHeaders"
            },
            {
              "textRaw": "DEP0068: node debug",
              "name": "dep0068:_node_debug",
              "desc": "<p>Type: Runtime</p>\n<p><code>node debug</code> corresponds to the legacy CLI debugger which has been replaced with\na V8-inspector based CLI debugger available through <code>node inspect</code>.</p>\n<p><a id=\"DEP0069\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0068: node debug"
            },
            {
              "textRaw": "DEP0069: vm.runInDebugContext(string)",
              "name": "dep0069:_vm.runindebugcontext(string)",
              "desc": "<p>Type: End-of-Life</p>\n<p>DebugContext has been removed in V8 and is not available in Node.js 10+.</p>\n<p>DebugContext was an experimental API.</p>\n<p><a id=\"DEP0070\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0069: vm.runInDebugContext(string)"
            },
            {
              "textRaw": "DEP0070: async_hooks.currentId()",
              "name": "dep0070:_async_hooks.currentid()",
              "desc": "<p>Type: End-of-Life</p>\n<p><code>async_hooks.currentId()</code> was renamed to <code>async_hooks.executionAsyncId()</code> for\nclarity.</p>\n<p>This change was made while <code>async_hooks</code> was an experimental API.</p>\n<p><a id=\"DEP0071\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0070: async_hooks.currentId()"
            },
            {
              "textRaw": "DEP0071: async_hooks.triggerId()",
              "name": "dep0071:_async_hooks.triggerid()",
              "desc": "<p>Type: End-of-Life</p>\n<p><code>async_hooks.triggerId()</code> was renamed to <code>async_hooks.triggerAsyncId()</code> for\nclarity.</p>\n<p>This change was made while <code>async_hooks</code> was an experimental API.</p>\n<p><a id=\"DEP0072\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0071: async_hooks.triggerId()"
            },
            {
              "textRaw": "DEP0072: async_hooks.AsyncResource.triggerId()",
              "name": "dep0072:_async_hooks.asyncresource.triggerid()",
              "desc": "<p>Type: End-of-Life</p>\n<p><code>async_hooks.AsyncResource.triggerId()</code> was renamed to\n<code>async_hooks.AsyncResource.triggerAsyncId()</code> for clarity.</p>\n<p>This change was made while <code>async_hooks</code> was an experimental API.</p>\n<p><a id=\"DEP0073\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0072: async_hooks.AsyncResource.triggerId()"
            },
            {
              "textRaw": "DEP0073: Several internal properties of net.Server",
              "name": "dep0073:_several_internal_properties_of_net.server",
              "desc": "<p>Type: End-of-Life</p>\n<p>Accessing several internal, undocumented properties of <code>net.Server</code> instances\nwith inappropriate names has been deprecated.</p>\n<p>As the original API was undocumented and not generally useful for non-internal\ncode, no replacement API is provided.</p>\n<p><a id=\"DEP0074\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0073: Several internal properties of net.Server"
            },
            {
              "textRaw": "DEP0074: REPLServer.bufferedCommand",
              "name": "dep0074:_replserver.bufferedcommand",
              "desc": "<p>Type: Runtime</p>\n<p>The <code>REPLServer.bufferedCommand</code> property was deprecated in favor of\n<a href=\"repl.html#repl_replserver_clearbufferedcommand\"><code>REPLServer.clearBufferedCommand()</code></a>.</p>\n<p><a id=\"DEP0075\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0074: REPLServer.bufferedCommand"
            },
            {
              "textRaw": "DEP0075: REPLServer.parseREPLKeyword()",
              "name": "dep0075:_replserver.parsereplkeyword()",
              "desc": "<p>Type: Runtime</p>\n<p><code>REPLServer.parseREPLKeyword()</code> was removed from userland visibility.</p>\n<p><a id=\"DEP0076\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0075: REPLServer.parseREPLKeyword()"
            },
            {
              "textRaw": "DEP0076: tls.parseCertString()",
              "name": "dep0076:_tls.parsecertstring()",
              "desc": "<p>Type: Runtime</p>\n<p><code>tls.parseCertString()</code> is a trivial parsing helper that was made public by\nmistake. This function can usually be replaced with:</p>\n<pre><code class=\"lang-js\">const querystring = require(&#39;querystring&#39;);\nquerystring.parse(str, &#39;\\n&#39;, &#39;=&#39;);\n</code></pre>\n<p>This function is not completely equivalent to <code>querystring.parse()</code>. One\ndifference is that <code>querystring.parse()</code> does url decoding:</p>\n<pre><code class=\"lang-sh\">&gt; querystring.parse(&#39;%E5%A5%BD=1&#39;, &#39;\\n&#39;, &#39;=&#39;);\n{ &#39;好&#39;: &#39;1&#39; }\n&gt; tls.parseCertString(&#39;%E5%A5%BD=1&#39;);\n{ &#39;%E5%A5%BD&#39;: &#39;1&#39; }\n</code></pre>\n<p><a id=\"DEP0077\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0076: tls.parseCertString()"
            },
            {
              "textRaw": "DEP0077: Module.\\_debug()",
              "name": "dep0077:_module.\\_debug()",
              "desc": "<p>Type: Runtime</p>\n<p><code>Module._debug()</code> has been deprecated.</p>\n<p>The <code>Module._debug()</code> function was never documented as an officially\nsupported API.</p>\n<p><a id=\"DEP0078\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0077: Module.\\_debug()"
            },
            {
              "textRaw": "DEP0078: REPLServer.turnOffEditorMode()",
              "name": "dep0078:_replserver.turnoffeditormode()",
              "desc": "<p>Type: Runtime</p>\n<p><code>REPLServer.turnOffEditorMode()</code> was removed from userland visibility.</p>\n<p><a id=\"DEP0079\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0078: REPLServer.turnOffEditorMode()"
            },
            {
              "textRaw": "DEP0079: Custom inspection function on Objects via .inspect()",
              "name": "dep0079:_custom_inspection_function_on_objects_via_.inspect()",
              "desc": "<p>Type: Runtime</p>\n<p>Using a property named <code>inspect</code> on an object to specify a custom inspection\nfunction for <a href=\"#util_util_inspect_object_options\"><code>util.inspect()</code></a> is deprecated. Use <a href=\"util.html#util_util_inspect_custom\"><code>util.inspect.custom</code></a>\ninstead. For backward compatibility with Node.js prior to version 6.4.0, both\nmay be specified.</p>\n<p><a id=\"DEP0080\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0079: Custom inspection function on Objects via .inspect()"
            },
            {
              "textRaw": "DEP0080: path.\\_makeLong()",
              "name": "dep0080:_path.\\_makelong()",
              "desc": "<p>Type: Documentation-only</p>\n<p>The internal <code>path._makeLong()</code> was not intended for public use. However,\nuserland modules have found it useful. The internal API has been deprecated\nand replaced with an identical, public <code>path.toNamespacedPath()</code> method.</p>\n<p><a id=\"DEP0081\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0080: path.\\_makeLong()"
            },
            {
              "textRaw": "DEP0081: fs.truncate() using a file descriptor",
              "name": "dep0081:_fs.truncate()_using_a_file_descriptor",
              "desc": "<p>Type: Runtime</p>\n<p><code>fs.truncate()</code> <code>fs.truncateSync()</code> usage with a file descriptor has been\ndeprecated. Please use <code>fs.ftruncate()</code> or <code>fs.ftruncateSync()</code> to work with\nfile descriptors.</p>\n<p><a id=\"DEP0082\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0081: fs.truncate() using a file descriptor"
            },
            {
              "textRaw": "DEP0082: REPLServer.prototype.memory()",
              "name": "dep0082:_replserver.prototype.memory()",
              "desc": "<p>Type: Runtime</p>\n<p><code>REPLServer.prototype.memory()</code> is only necessary for the internal mechanics of\nthe <code>REPLServer</code> itself. Do not use this function.</p>\n<p><a id=\"DEP0083\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0082: REPLServer.prototype.memory()"
            },
            {
              "textRaw": "DEP0083: Disabling ECDH by setting ecdhCurve to false",
              "name": "dep0083:_disabling_ecdh_by_setting_ecdhcurve_to_false",
              "desc": "<p>Type: Runtime</p>\n<p>The <code>ecdhCurve</code> option to <code>tls.createSecureContext()</code> and <code>tls.TLSSocket</code> could\nbe set to <code>false</code> to disable ECDH entirely on the server only. This mode is\ndeprecated in preparation for migrating to OpenSSL 1.1.0 and consistency with\nthe client. Use the <code>ciphers</code> parameter instead.</p>\n<p><a id=\"DEP0084\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0083: Disabling ECDH by setting ecdhCurve to false"
            },
            {
              "textRaw": "DEP0084: requiring bundled internal dependencies",
              "name": "dep0084:_requiring_bundled_internal_dependencies",
              "desc": "<p>Type: Runtime</p>\n<p>Since Node.js versions 4.4.0 and 5.2.0, several modules only intended for\ninternal usage are mistakenly exposed to user code through <code>require()</code>. These\nmodules are:</p>\n<ul>\n<li><code>v8/tools/codemap</code></li>\n<li><code>v8/tools/consarray</code></li>\n<li><code>v8/tools/csvparser</code></li>\n<li><code>v8/tools/logreader</code></li>\n<li><code>v8/tools/profile_view</code></li>\n<li><code>v8/tools/profile</code></li>\n<li><code>v8/tools/SourceMap</code></li>\n<li><code>v8/tools/splaytree</code></li>\n<li><code>v8/tools/tickprocessor-driver</code></li>\n<li><code>v8/tools/tickprocessor</code></li>\n<li><code>node-inspect/lib/_inspect</code> (from 7.6.0)</li>\n<li><code>node-inspect/lib/internal/inspect_client</code> (from 7.6.0)</li>\n<li><code>node-inspect/lib/internal/inspect_repl</code> (from 7.6.0)</li>\n</ul>\n<p>The <code>v8/*</code> modules do not have any exports, and if not imported in a specific\norder would in fact throw errors. As such there are virtually no legitimate use\ncases for importing them through <code>require()</code>.</p>\n<p>On the other hand, <code>node-inspect</code> may be installed locally through a package\nmanager, as it is published on the npm registry under the same name. No source\ncode modification is necessary if that is done.</p>\n<p><a id=\"DEP0085\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0084: requiring bundled internal dependencies"
            },
            {
              "textRaw": "DEP0085: AsyncHooks Sensitive API",
              "name": "dep0085:_asynchooks_sensitive_api",
              "desc": "<p>Type: End-of-Life</p>\n<p>The AsyncHooks Sensitive API was never documented and had various minor issues.\n(See <a href=\"https://github.com/nodejs/node/issues/15572\">https://github.com/nodejs/node/issues/15572</a>.) Use the <code>AsyncResource</code>\nAPI instead.</p>\n<p><a id=\"DEP0086\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0085: AsyncHooks Sensitive API"
            },
            {
              "textRaw": "DEP0086: Remove runInAsyncIdScope",
              "name": "dep0086:_remove_runinasyncidscope",
              "desc": "<p>Type: End-of-Life</p>\n<p><code>runInAsyncIdScope</code> doesn&#39;t emit the <code>&#39;before&#39;</code> or <code>&#39;after&#39;</code> event and can thus\ncause a lot of issues. See <a href=\"https://github.com/nodejs/node/issues/14328\">https://github.com/nodejs/node/issues/14328</a> for more\ndetails.</p>\n<p><a id=\"DEP0089\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0086: Remove runInAsyncIdScope"
            },
            {
              "textRaw": "DEP0089: require('assert')",
              "name": "dep0089:_require('assert')",
              "desc": "<p>Type: Documentation-only</p>\n<p>Importing assert directly is not recommended as the exposed functions will use\nloose equality checks. Use <code>require(&#39;assert&#39;).strict</code> instead. The API is the\nsame as the legacy assert but it will always use strict equality checks.</p>\n<p><a id=\"DEP0090\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0089: require('assert')"
            },
            {
              "textRaw": "DEP0090: Invalid GCM authentication tag lengths",
              "name": "dep0090:_invalid_gcm_authentication_tag_lengths",
              "desc": "<p>Type: Runtime</p>\n<p>Node.js supports all GCM authentication tag lengths which are accepted by\nOpenSSL when calling <a href=\"crypto.html#crypto_decipher_setauthtag_buffer\"><code>decipher.setAuthTag()</code></a>. This behavior will change in\na future version at which point only authentication tag lengths of 128, 120,\n112, 104, 96, 64, and 32 bits will be allowed. Authentication tags whose length\nis not included in this list will be considered invalid in compliance with\n<a href=\"http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf\">NIST SP 800-38D</a>.</p>\n<p><a id=\"DEP0091\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0090: Invalid GCM authentication tag lengths"
            },
            {
              "textRaw": "DEP0091: crypto.DEFAULT_ENCODING",
              "name": "dep0091:_crypto.default_encoding",
              "desc": "<p>Type: Runtime</p>\n<p>The <a href=\"crypto.html#crypto_crypto_default_encoding\"><code>crypto.DEFAULT_ENCODING</code></a> property is deprecated.</p>\n<p><a id=\"DEP0092\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0091: crypto.DEFAULT_ENCODING"
            },
            {
              "textRaw": "DEP0092: Top-level `this` bound to `module.exports`",
              "name": "dep0092:_top-level_`this`_bound_to_`module.exports`",
              "desc": "<p>Type: Documentation-only</p>\n<p>Assigning properties to the top-level <code>this</code> as an alternative\nto <code>module.exports</code> is deprecated. Developers should use <code>exports</code>\nor <code>module.exports</code> instead.</p>\n<p><a id=\"DEP0093\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0092: Top-level `this` bound to `module.exports`"
            },
            {
              "textRaw": "DEP0093: crypto.fips is deprecated and replaced.",
              "name": "dep0093:_crypto.fips_is_deprecated_and_replaced.",
              "desc": "<p>Type: Documentation-only</p>\n<p>The <a href=\"crypto.html#crypto_crypto_fips\"><code>crypto.fips</code></a> property is deprecated. Please use <code>crypto.setFips()</code>\nand <code>crypto.getFips()</code> instead.</p>\n<p><a id=\"DEP0094\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0093: crypto.fips is deprecated and replaced."
            },
            {
              "textRaw": "DEP0094: Using `assert.fail()` with more than one argument.",
              "name": "dep0094:_using_`assert.fail()`_with_more_than_one_argument.",
              "desc": "<p>Type: Runtime</p>\n<p>Using <code>assert.fail()</code> with more than one argument is deprecated. Use\n<code>assert.fail()</code> with only one argument or use a different <code>assert</code> module\nmethod.</p>\n<p><a id=\"DEP0095\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0094: Using `assert.fail()` with more than one argument."
            },
            {
              "textRaw": "DEP0095: timers.enroll()",
              "name": "dep0095:_timers.enroll()",
              "desc": "<p>Type: Runtime</p>\n<p><code>timers.enroll()</code> is deprecated. Please use the publicly documented\n<a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a> or <a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a> instead.</p>\n<p><a id=\"DEP0096\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0095: timers.enroll()"
            },
            {
              "textRaw": "DEP0096: timers.unenroll()",
              "name": "dep0096:_timers.unenroll()",
              "desc": "<p>Type: Runtime</p>\n<p><code>timers.unenroll()</code> is deprecated. Please use the publicly documented\n<a href=\"timers.html#timers_cleartimeout_timeout\"><code>clearTimeout()</code></a> or <a href=\"timers.html#timers_clearinterval_timeout\"><code>clearInterval()</code></a> instead.</p>\n<p><a id=\"DEP0097\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0096: timers.unenroll()"
            },
            {
              "textRaw": "DEP0097: MakeCallback with domain property",
              "name": "dep0097:_makecallback_with_domain_property",
              "desc": "<p>Type: Runtime</p>\n<p>Users of <code>MakeCallback</code> that add the <code>domain</code> property to carry context,\nshould start using the <code>async_context</code> variant of <code>MakeCallback</code> or\n<code>CallbackScope</code>, or the high-level <code>AsyncResource</code> class.</p>\n<p><a id=\"DEP0098\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0097: MakeCallback with domain property"
            },
            {
              "textRaw": "DEP0098: AsyncHooks Embedder AsyncResource.emitBefore and AsyncResource.emitAfter APIs",
              "name": "dep0098:_asynchooks_embedder_asyncresource.emitbefore_and_asyncresource.emitafter_apis",
              "desc": "<p>Type: Runtime</p>\n<p>The embedded API provided by AsyncHooks exposes <code>.emitBefore()</code> and\n<code>.emitAfter()</code> methods which are very easy to use incorrectly which can lead\nto unrecoverable errors.</p>\n<p>Use <a href=\"async_hooks.html#async_hooks_asyncresource_runinasyncscope_fn_thisarg_args\"><code>asyncResource.runInAsyncScope()</code></a> API instead which provides a much\nsafer, and more convenient, alternative. See\n<a href=\"https://github.com/nodejs/node/pull/18513\">https://github.com/nodejs/node/pull/18513</a> for more details.</p>\n<p><a id=\"DEP0099\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0098: AsyncHooks Embedder AsyncResource.emitBefore and AsyncResource.emitAfter APIs"
            },
            {
              "textRaw": "DEP0099: async context-unaware node::MakeCallback C++ APIs",
              "name": "dep0099:_async_context-unaware_node::makecallback_c++_apis",
              "desc": "<p>Type: Compile-time</p>\n<p>Certain versions of <code>node::MakeCallback</code> APIs available to native modules are\ndeprecated. Please use the versions of the API that accept an <code>async_context</code>\nparameter.</p>\n<p><a id=\"DEP0100\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0099: async context-unaware node::MakeCallback C++ APIs"
            },
            {
              "textRaw": "DEP0100: process.assert()",
              "name": "dep0100:_process.assert()",
              "desc": "<p>Type: Runtime</p>\n<p><code>process.assert()</code> is deprecated. Please use the <a href=\"assert.html\"><code>assert</code></a> module instead.</p>\n<p>This was never a documented feature.</p>\n<p><a id=\"DEP0101\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0100: process.assert()"
            },
            {
              "textRaw": "DEP0101: --with-lttng",
              "name": "dep0101:_--with-lttng",
              "desc": "<p>Type: End-of-Life</p>\n<p>The <code>--with-lttng</code> compile-time option has been removed.</p>\n<p><a id=\"DEP0102\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0101: --with-lttng"
            },
            {
              "textRaw": "DEP0102: Using `noAssert` in Buffer#(read|write) operations.",
              "name": "dep0102:_using_`noassert`_in_buffer#(read|write)_operations.",
              "desc": "<p>Type: End-of-Life</p>\n<p>Using the <code>noAssert</code> argument has no functionality anymore. All input is going\nto be verified, no matter if it is set to true or not. Skipping the verification\ncould lead to hard to find errors and crashes.</p>\n<p><a id=\"DEP0103\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0102: Using `noAssert` in Buffer#(read|write) operations."
            },
            {
              "textRaw": "DEP0103: process.binding('util').is[...] typechecks",
              "name": "dep0103:_process.binding('util').is[...]_typechecks",
              "desc": "<p>Type: Documentation-only (supports <a href=\"cli.html#cli_pending_deprecation\"><code>--pending-deprecation</code></a>)</p>\n<p>Using <code>process.binding()</code> in general should be avoided. The type checking\nmethods in particular can be replaced by using <a href=\"util.html#util_util_types\"><code>util.types</code></a>.</p>\n<p><a id=\"DEP0104\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0103: process.binding('util').is[...] typechecks"
            },
            {
              "textRaw": "DEP0104: process.env string coercion",
              "name": "dep0104:_process.env_string_coercion",
              "desc": "<p>Type: Documentation-only (supports <a href=\"cli.html#cli_pending_deprecation\"><code>--pending-deprecation</code></a>)</p>\n<p>When assigning a non-string property to <a href=\"process.html#process_process_env\"><code>process.env</code></a>, the assigned value is\nimplicitly converted to a string. This behavior is deprecated if the assigned\nvalue is not a string, boolean, or number. In the future, such assignment may\nresult in a thrown error. Please convert the property to a string before\nassigning it to <code>process.env</code>.</p>\n<p><a id=\"DEP0105\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0104: process.env string coercion"
            },
            {
              "textRaw": "DEP0105: decipher.finaltol",
              "name": "dep0105:_decipher.finaltol",
              "desc": "<p>Type: Runtime</p>\n<p><code>decipher.finaltol()</code> has never been documented and is currently an alias for\n<a href=\"crypto.html#crypto_decipher_final_outputencoding\"><code>decipher.final()</code></a>. In the future, this API will likely be removed, and it\nis recommended to use <a href=\"crypto.html#crypto_decipher_final_outputencoding\"><code>decipher.final()</code></a> instead.</p>\n<p><a id=\"DEP0106\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0105: decipher.finaltol"
            },
            {
              "textRaw": "DEP0106: crypto.createCipher and crypto.createDecipher",
              "name": "dep0106:_crypto.createcipher_and_crypto.createdecipher",
              "desc": "<p>Type: Documentation-only</p>\n<p>Using <a href=\"crypto.html#crypto_crypto_createcipher_algorithm_password_options\"><code>crypto.createCipher()</code></a> and <a href=\"crypto.html#crypto_crypto_createdecipher_algorithm_password_options\"><code>crypto.createDecipher()</code></a> should be\navoided as they use a weak key derivation function (MD5 with no salt) and static\ninitialization vectors. It is recommended to derive a key using\n<a href=\"crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\"><code>crypto.pbkdf2()</code></a> and to use <a href=\"crypto.html#crypto_crypto_createcipheriv_algorithm_key_iv_options\"><code>crypto.createCipheriv()</code></a> and\n<a href=\"crypto.html#crypto_crypto_createdecipheriv_algorithm_key_iv_options\"><code>crypto.createDecipheriv()</code></a> to obtain the <a href=\"crypto.html#crypto_class_cipher\"><code>Cipher</code></a> and <a href=\"crypto.html#crypto_class_decipher\"><code>Decipher</code></a>\nobjects respectively.</p>\n<p><a id=\"DEP0107\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0106: crypto.createCipher and crypto.createDecipher"
            },
            {
              "textRaw": "DEP0107: tls.convertNPNProtocols()",
              "name": "dep0107:_tls.convertnpnprotocols()",
              "desc": "<p>Type: Runtime</p>\n<p>This was an undocumented helper function not intended for use outside Node.js\ncore and obsoleted by the removal of NPN (Next Protocol Negotiation) support.</p>\n<p><a id=\"DEP0108\"></a></p>\n",
              "type": "module",
              "displayName": "DEP0107: tls.convertNPNProtocols()"
            },
            {
              "textRaw": "DEP0108: zlib.bytesRead",
              "name": "dep0108:_zlib.bytesread",
              "desc": "<p>Type: Documentation-only</p>\n<p>Deprecated alias for <a href=\"#zlib_zlib_byteswritten\"><code>zlib.bytesWritten</code></a>. This original name was chosen\nbecause it also made sense to interpret the value as the number of bytes\nread by the engine, but is inconsistent with other streams in Node.js that\nexpose values under these names.</p>\n<!-- [end-include:deprecations.md] -->\n<!-- [start-include:dns.md] -->\n",
              "type": "module",
              "displayName": "DEP0108: zlib.bytesRead"
            }
          ],
          "type": "misc",
          "displayName": "List of Deprecated APIs"
        }
      ]
    },
    {
      "textRaw": "ECMAScript Modules",
      "name": "esm",
      "introduced_in": "v8.5.0",
      "type": "misc",
      "stability": 1,
      "stabilityText": "Experimental",
      "desc": "<p>Node.js contains support for ES Modules based upon the\n<a href=\"https://github.com/nodejs/node-eps/blob/master/002-es-modules.md\">Node.js EP for ES Modules</a>.</p>\n<p>Not all features of the EP are complete and will be landing as both VM support\nand implementation is ready. Error messages are still being polished.</p>\n",
      "miscs": [
        {
          "textRaw": "Enabling",
          "name": "Enabling",
          "type": "misc",
          "desc": "<p>The <code>--experimental-modules</code> flag can be used to enable features for loading\nESM modules.</p>\n<p>Once this has been set, files ending with <code>.mjs</code> will be able to be loaded\nas ES Modules.</p>\n<pre><code class=\"lang-sh\">node --experimental-modules my-app.mjs\n</code></pre>\n"
        },
        {
          "textRaw": "Features",
          "name": "Features",
          "type": "misc",
          "miscs": [
            {
              "textRaw": "Supported",
              "name": "supported",
              "desc": "<p>Only the CLI argument for the main entry point to the program can be an entry\npoint into an ESM graph. Dynamic import can also be used to create entry points\ninto ESM graphs at runtime.</p>\n",
              "properties": [
                {
                  "textRaw": "`meta` {Object} ",
                  "type": "Object",
                  "name": "meta",
                  "desc": "<p>The <code>import.meta</code> metaproperty is an <code>Object</code> that contains the following\nproperty:</p>\n<ul>\n<li><code>url</code> {string} The absolute <code>file:</code> URL of the module.</li>\n</ul>\n"
                }
              ],
              "type": "misc",
              "displayName": "Supported"
            },
            {
              "textRaw": "Unsupported",
              "name": "unsupported",
              "desc": "<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Reason</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>require(&#39;./foo.mjs&#39;)</code></td>\n<td>ES Modules have differing resolution and timing, use dynamic import</td>\n</tr>\n</tbody>\n</table>\n",
              "type": "misc",
              "displayName": "Unsupported"
            }
          ]
        },
        {
          "textRaw": "Notable differences between `import` and `require`",
          "name": "notable_differences_between_`import`_and_`require`",
          "modules": [
            {
              "textRaw": "No NODE_PATH",
              "name": "no_node_path",
              "desc": "<p><code>NODE_PATH</code> is not part of resolving <code>import</code> specifiers. Please use symlinks\nif this behavior is desired.</p>\n",
              "type": "module",
              "displayName": "No NODE_PATH"
            },
            {
              "textRaw": "No `require.extensions`",
              "name": "no_`require.extensions`",
              "desc": "<p><code>require.extensions</code> is not used by <code>import</code>. The expectation is that loader\nhooks can provide this workflow in the future.</p>\n",
              "type": "module",
              "displayName": "No `require.extensions`"
            },
            {
              "textRaw": "No `require.cache`",
              "name": "no_`require.cache`",
              "desc": "<p><code>require.cache</code> is not used by <code>import</code>. It has a separate cache.</p>\n",
              "type": "module",
              "displayName": "No `require.cache`"
            },
            {
              "textRaw": "URL based paths",
              "name": "url_based_paths",
              "desc": "<p>ESM are resolved and cached based upon <a href=\"https://url.spec.whatwg.org/\">URL</a>\nsemantics. This means that files containing special characters such as <code>#</code> and\n<code>?</code> need to be escaped.</p>\n<p>Modules will be loaded multiple times if the <code>import</code> specifier used to resolve\nthem have a different query or fragment.</p>\n<pre><code class=\"lang-js\">import &#39;./foo?query=1&#39;; // loads ./foo with query of &quot;?query=1&quot;\nimport &#39;./foo?query=2&#39;; // loads ./foo with query of &quot;?query=2&quot;\n</code></pre>\n<p>For now, only modules using the <code>file:</code> protocol can be loaded.</p>\n",
              "type": "module",
              "displayName": "URL based paths"
            }
          ],
          "type": "misc",
          "displayName": "Notable differences between `import` and `require`"
        },
        {
          "textRaw": "Interop with existing modules",
          "name": "interop_with_existing_modules",
          "desc": "<p>All CommonJS, JSON, and C++ modules can be used with <code>import</code>.</p>\n<p>Modules loaded this way will only be loaded once, even if their query\nor fragment string differs between <code>import</code> statements.</p>\n<p>When loaded via <code>import</code> these modules will provide a single <code>default</code> export\nrepresenting the value of <code>module.exports</code> at the time they finished evaluating.</p>\n<pre><code class=\"lang-js\">import fs from &#39;fs&#39;;\nfs.readFile(&#39;./foo.txt&#39;, (err, body) =&gt; {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(body);\n  }\n});\n</code></pre>\n",
          "type": "misc",
          "displayName": "Interop with existing modules"
        },
        {
          "textRaw": "Loader hooks",
          "name": "Loader hooks",
          "type": "misc",
          "desc": "<p>To customize the default module resolution, loader hooks can optionally be\nprovided via a <code>--loader ./loader-name.mjs</code> argument to Node.js.</p>\n<p>When hooks are used they only apply to ES module loading and not to any\nCommonJS modules loaded.</p>\n",
          "miscs": [
            {
              "textRaw": "Resolve hook",
              "name": "resolve_hook",
              "desc": "<p>The resolve hook returns the resolved file URL and module format for a\ngiven module specifier and parent file URL:</p>\n<pre><code class=\"lang-js\">const baseURL = new URL(&#39;file://&#39;);\nbaseURL.pathname = `${process.cwd()}/`;\n\nexport async function resolve(specifier,\n                              parentModuleURL = baseURL,\n                              defaultResolver) {\n  return {\n    url: new URL(specifier, parentModuleURL).href,\n    format: &#39;esm&#39;\n  };\n}\n</code></pre>\n<p>The <code>parentModuleURL</code> is provided as <code>undefined</code> when performing main Node.js\nload itself.</p>\n<p>The default Node.js ES module resolution function is provided as a third\nargument to the resolver for easy compatibility workflows.</p>\n<p>In addition to returning the resolved file URL value, the resolve hook also\nreturns a <code>format</code> property specifying the module format of the resolved\nmodule. This can be one of the following:</p>\n<table>\n<thead>\n<tr>\n<th><code>format</code></th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#39;esm&#39;</code></td>\n<td>Load a standard JavaScript module</td>\n</tr>\n<tr>\n<td><code>&#39;cjs&#39;</code></td>\n<td>Load a node-style CommonJS module</td>\n</tr>\n<tr>\n<td><code>&#39;builtin&#39;</code></td>\n<td>Load a node builtin CommonJS module</td>\n</tr>\n<tr>\n<td><code>&#39;json&#39;</code></td>\n<td>Load a JSON file</td>\n</tr>\n<tr>\n<td><code>&#39;addon&#39;</code></td>\n<td>Load a <a href=\"addons.html\">C++ Addon</a></td>\n</tr>\n<tr>\n<td><code>&#39;dynamic&#39;</code></td>\n<td>Use a <a href=\"#esm_dynamic_instantiate_hook\">dynamic instantiate hook</a></td>\n</tr>\n</tbody>\n</table>\n<p>For example, a dummy loader to load JavaScript restricted to browser resolution\nrules with only JS file extension and Node.js builtin modules support could\nbe written:</p>\n<pre><code class=\"lang-js\">import path from &#39;path&#39;;\nimport process from &#39;process&#39;;\nimport Module from &#39;module&#39;;\n\nconst builtins = Module.builtinModules;\nconst JS_EXTENSIONS = new Set([&#39;.js&#39;, &#39;.mjs&#39;]);\n\nconst baseURL = new URL(&#39;file://&#39;);\nbaseURL.pathname = `${process.cwd()}/`;\n\nexport function resolve(specifier, parentModuleURL = baseURL, defaultResolve) {\n  if (builtins.includes(specifier)) {\n    return {\n      url: specifier,\n      format: &#39;builtin&#39;\n    };\n  }\n  if (/^\\.{0,2}[/]/.test(specifier) !== true &amp;&amp; !specifier.startsWith(&#39;file:&#39;)) {\n    // For node_modules support:\n    // return defaultResolve(specifier, parentModuleURL);\n    throw new Error(\n      `imports must begin with &#39;/&#39;, &#39;./&#39;, or &#39;../&#39;; &#39;${specifier}&#39; does not`);\n  }\n  const resolved = new URL(specifier, parentModuleURL);\n  const ext = path.extname(resolved.pathname);\n  if (!JS_EXTENSIONS.has(ext)) {\n    throw new Error(\n      `Cannot load file with non-JavaScript file extension ${ext}.`);\n  }\n  return {\n    url: resolved.href,\n    format: &#39;esm&#39;\n  };\n}\n</code></pre>\n<p>With this loader, running:</p>\n<pre><code class=\"lang-console\">NODE_OPTIONS=&#39;--experimental-modules --loader ./custom-loader.mjs&#39; node x.js\n</code></pre>\n<p>would load the module <code>x.js</code> as an ES module with relative resolution support\n(with <code>node_modules</code> loading skipped in this example).</p>\n",
              "type": "misc",
              "displayName": "Resolve hook"
            },
            {
              "textRaw": "Dynamic instantiate hook",
              "name": "dynamic_instantiate_hook",
              "desc": "<p>To create a custom dynamic module that doesn&#39;t correspond to one of the\nexisting <code>format</code> interpretations, the <code>dynamicInstantiate</code> hook can be used.\nThis hook is called only for modules that return <code>format: &#39;dynamic&#39;</code> from\nthe <code>resolve</code> hook.</p>\n<pre><code class=\"lang-js\">export async function dynamicInstantiate(url) {\n  return {\n    exports: [&#39;customExportName&#39;],\n    execute: (exports) =&gt; {\n      // get and set functions provided for pre-allocated export names\n      exports.customExportName.set(&#39;value&#39;);\n    }\n  };\n}\n</code></pre>\n<p>With the list of module exports provided upfront, the <code>execute</code> function will\nthen be called at the exact point of module evaluation order for that module\nin the import tree.</p>\n<!-- [end-include:esm.md] -->\n<!-- [start-include:errors.md] -->\n",
              "type": "misc",
              "displayName": "Dynamic instantiate hook"
            }
          ]
        }
      ]
    },
    {
      "textRaw": "Errors",
      "name": "Errors",
      "introduced_in": "v4.0.0",
      "type": "misc",
      "desc": "<p>Applications running in Node.js will generally experience four categories of\nerrors:</p>\n<ul>\n<li>Standard JavaScript errors such as:<ul>\n<li>{EvalError} : thrown when a call to <code>eval()</code> fails.</li>\n<li>{SyntaxError} : thrown in response to improper JavaScript language\nsyntax.</li>\n<li>{RangeError} : thrown when a value is not within an expected range</li>\n<li>{ReferenceError} : thrown when using undefined variables</li>\n<li>{TypeError} : thrown when passing arguments of the wrong type</li>\n<li>{URIError} : thrown when a global URI handling function is misused.</li>\n</ul>\n</li>\n<li>System errors triggered by underlying operating system constraints such\nas attempting to open a file that does not exist, attempting to send data\nover a closed socket, etc;</li>\n<li>And User-specified errors triggered by application code.</li>\n<li><code>AssertionError</code>s are a special class of error that can be triggered whenever\nNode.js detects an exceptional logic violation that should never occur. These\nare raised typically by the <code>assert</code> module.</li>\n</ul>\n<p>All JavaScript and System errors raised by Node.js inherit from, or are\ninstances of, the standard JavaScript {Error} class and are guaranteed\nto provide <em>at least</em> the properties available on that class.</p>\n",
      "miscs": [
        {
          "textRaw": "Error Propagation and Interception",
          "name": "Error Propagation and Interception",
          "type": "misc",
          "desc": "<p>Node.js supports several mechanisms for propagating and handling errors that\noccur while an application is running. How these errors are reported and\nhandled depends entirely on the type of <code>Error</code> and the style of the API that is\ncalled.</p>\n<p>All JavaScript errors are handled as exceptions that <em>immediately</em> generate\nand throw an error using the standard JavaScript <code>throw</code> mechanism. These\nare handled using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try / catch</code> construct</a> provided by the\nJavaScript language.</p>\n<pre><code class=\"lang-js\">// Throws with a ReferenceError because z is undefined\ntry {\n  const m = 1;\n  const n = m + z;\n} catch (err) {\n  // Handle the error here.\n}\n</code></pre>\n<p>Any use of the JavaScript <code>throw</code> mechanism will raise an exception that\n<em>must</em> be handled using <code>try / catch</code> or the Node.js process will exit\nimmediately.</p>\n<p>With few exceptions, <em>Synchronous</em> APIs (any blocking method that does not\naccept a <code>callback</code> function, such as <a href=\"fs.html#fs_fs_readfilesync_path_options\"><code>fs.readFileSync</code></a>), will use <code>throw</code>\nto report errors.</p>\n<p>Errors that occur within <em>Asynchronous APIs</em> may be reported in multiple ways:</p>\n<ul>\n<li>Most asynchronous methods that accept a <code>callback</code> function will accept an\n<code>Error</code> object passed as the first argument to that function. If that first\nargument is not <code>null</code> and is an instance of <code>Error</code>, then an error occurred\nthat should be handled.</li>\n</ul>\n<!-- eslint-disable no-useless-return -->\n<pre><code class=\"lang-js\">  const fs = require(&#39;fs&#39;);\n  fs.readFile(&#39;a file that does not exist&#39;, (err, data) =&gt; {\n    if (err) {\n      console.error(&#39;There was an error reading the file!&#39;, err);\n      return;\n    }\n    // Otherwise handle the data\n  });\n</code></pre>\n<ul>\n<li><p>When an asynchronous method is called on an object that is an\n<a href=\"events.html\"><code>EventEmitter</code></a>, errors can be routed to that object&#39;s <code>&#39;error&#39;</code> event.</p>\n<pre><code class=\"lang-js\">const net = require(&#39;net&#39;);\nconst connection = net.connect(&#39;localhost&#39;);\n\n// Adding an &#39;error&#39; event handler to a stream:\nconnection.on(&#39;error&#39;, (err) =&gt; {\n  // If the connection is reset by the server, or if it can&#39;t\n  // connect at all, or on any sort of error encountered by\n  // the connection, the error will be sent here.\n  console.error(err);\n});\n\nconnection.pipe(process.stdout);\n</code></pre>\n</li>\n<li><p>A handful of typically asynchronous methods in the Node.js API may still\nuse the <code>throw</code> mechanism to raise exceptions that must be handled using\n<code>try / catch</code>. There is no comprehensive list of such methods; please\nrefer to the documentation of each method to determine the appropriate\nerror handling mechanism required.</p>\n</li>\n</ul>\n<p>The use of the <code>&#39;error&#39;</code> event mechanism is most common for <a href=\"stream.html\">stream-based</a>\nand <a href=\"events.html#events_class_eventemitter\">event emitter-based</a> APIs, which themselves represent a series of\nasynchronous operations over time (as opposed to a single operation that may\npass or fail).</p>\n<p>For <em>all</em> <a href=\"events.html\"><code>EventEmitter</code></a> objects, if an <code>&#39;error&#39;</code> event handler is not\nprovided, the error will be thrown, causing the Node.js process to report an\nuncaught exception and crash unless either: The <a href=\"domain.html\"><code>domain</code></a> module is\nused appropriately or a handler has been registered for the\n<a href=\"process.html#process_event_uncaughtexception\"><code>&#39;uncaughtException&#39;</code></a> event.</p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\nconst ee = new EventEmitter();\n\nsetImmediate(() =&gt; {\n  // This will crash the process because no &#39;error&#39; event\n  // handler has been added.\n  ee.emit(&#39;error&#39;, new Error(&#39;This will crash&#39;));\n});\n</code></pre>\n<p>Errors generated in this way <em>cannot</em> be intercepted using <code>try / catch</code> as\nthey are thrown <em>after</em> the calling code has already exited.</p>\n<p>Developers must refer to the documentation for each method to determine\nexactly how errors raised by those methods are propagated.</p>\n",
          "miscs": [
            {
              "textRaw": "Error-first callbacks",
              "name": "Error-first callbacks",
              "type": "misc",
              "desc": "<p>Most asynchronous methods exposed by the Node.js core API follow an idiomatic\npattern referred to as an <em>error-first callback</em> (sometimes referred to as\na <em>Node.js style callback</em>). With this pattern, a callback function is passed\nto the method as an argument. When the operation either completes or an error\nis raised, the callback function is called with\nthe <code>Error</code> object (if any) passed as the first argument. If no error was\nraised, the first argument will be passed as <code>null</code>.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\nfunction errorFirstCallback(err, data) {\n  if (err) {\n    console.error(&#39;There was an error&#39;, err);\n    return;\n  }\n  console.log(data);\n}\n\nfs.readFile(&#39;/some/file/that/does-not-exist&#39;, errorFirstCallback);\nfs.readFile(&#39;/some/file/that/does-exist&#39;, errorFirstCallback);\n</code></pre>\n<p>The JavaScript <code>try / catch</code> mechanism <strong>cannot</strong> be used to intercept errors\ngenerated by asynchronous APIs. A common mistake for beginners is to try to\nuse <code>throw</code> inside an error-first callback:</p>\n<pre><code class=\"lang-js\">// THIS WILL NOT WORK:\nconst fs = require(&#39;fs&#39;);\n\ntry {\n  fs.readFile(&#39;/some/file/that/does-not-exist&#39;, (err, data) =&gt; {\n    // mistaken assumption: throwing here...\n    if (err) {\n      throw err;\n    }\n  });\n} catch (err) {\n  // This will not catch the throw!\n  console.error(err);\n}\n</code></pre>\n<p>This will not work because the callback function passed to <code>fs.readFile()</code> is\ncalled asynchronously. By the time the callback has been called, the\nsurrounding code (including the <code>try { } catch (err) { }</code> block will have\nalready exited. Throwing an error inside the callback <strong>can crash the Node.js\nprocess</strong> in most cases. If <a href=\"domain.html\">domains</a> are enabled, or a handler has been\nregistered with <code>process.on(&#39;uncaughtException&#39;)</code>, such errors can be\nintercepted.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Exceptions vs. Errors",
          "name": "Exceptions vs. Errors",
          "type": "misc",
          "desc": "<p>A JavaScript exception is a value that is thrown as a result of an invalid\noperation or as the target of a <code>throw</code> statement. While it is not required\nthat these values are instances of <code>Error</code> or classes which inherit from\n<code>Error</code>, all exceptions thrown by Node.js or the JavaScript runtime <em>will</em> be\ninstances of <code>Error</code>.</p>\n<p>Some exceptions are <em>unrecoverable</em> at the JavaScript layer. Such exceptions\nwill <em>always</em> cause the Node.js process to crash. Examples include <code>assert()</code>\nchecks or <code>abort()</code> calls in the C++ layer.</p>\n"
        },
        {
          "textRaw": "System Errors",
          "name": "system_errors",
          "desc": "<p>System errors are generated when exceptions occur within the Node.js\nruntime environment. Typically, these are operational errors that occur\nwhen an application violates an operating system constraint such as attempting\nto read a file that does not exist or when the user does not have sufficient\npermissions.</p>\n<p>System errors are typically generated at the syscall level: an exhaustive list\nof error codes and their meanings is available by running <code>man 2 intro</code> or\n<code>man 3 errno</code> on most Unices; or <a href=\"http://man7.org/linux/man-pages/man3/errno.3.html\">online</a>.</p>\n<p>In Node.js, system errors are represented as augmented <code>Error</code> objects with\nadded properties.</p>\n",
          "classes": [
            {
              "textRaw": "Class: SystemError",
              "type": "class",
              "name": "SystemError",
              "desc": "<p><code>SystemError</code> instances may have an additional <code>info</code> property whose\nvalue is an object with additional details about the error conditions.</p>\n<p>The following properties are provided:</p>\n<ul>\n<li><code>code</code> {string} The string error code</li>\n<li><code>errno</code> {number} The system-provided error number</li>\n<li><code>message</code> {string} A system-provided human readable description of the error</li>\n<li><code>syscall</code> {string} The name of the system call that triggered the error</li>\n<li><code>path</code> {Buffer} When reporting a file system error, the <code>path</code> will identify\nthe file path.</li>\n<li><code>dest</code> {Buffer} When reporting a file system error, the <code>dest</code> will identify\nthe file path destination (if any).</li>\n</ul>\n",
              "properties": [
                {
                  "textRaw": "`code` {string} ",
                  "name": "code",
                  "desc": "<p>The <code>error.code</code> property is a string representing the error code, which is\ntypically <code>E</code> followed by a sequence of capital letters.</p>\n"
                },
                {
                  "textRaw": "`errno` {string|number} ",
                  "name": "errno",
                  "desc": "<p>The <code>error.errno</code> property is a number or a string.\nThe number is a <strong>negative</strong> value which corresponds to the error code defined\nin <a href=\"http://docs.libuv.org/en/v1.x/errors.html\"><code>libuv Error handling</code></a>. See <code>uv-errno.h</code> header file\n(<code>deps/uv/include/uv-errno.h</code> in the Node.js source tree) for details. In case\nof a string, it is the same as <code>error.code</code>.</p>\n"
                },
                {
                  "textRaw": "`syscall` {string} ",
                  "name": "syscall",
                  "desc": "<p>The <code>error.syscall</code> property is a string describing the <a href=\"http://man7.org/linux/man-pages/man2/syscall.2.html\">syscall</a> that failed.</p>\n"
                },
                {
                  "textRaw": "`path` {string} ",
                  "name": "path",
                  "desc": "<p>When present (e.g. in <code>fs</code> or <code>child_process</code>), the <code>error.path</code> property is a\nstring containing a relevant invalid pathname.</p>\n"
                },
                {
                  "textRaw": "`address` {string} ",
                  "name": "address",
                  "desc": "<p>When present (e.g. in <code>net</code> or <code>dgram</code>), the <code>error.address</code> property is a\nstring describing the address to which the connection failed.</p>\n"
                },
                {
                  "textRaw": "`port` {number} ",
                  "name": "port",
                  "desc": "<p>When present (e.g. in <code>net</code> or <code>dgram</code>), the <code>error.port</code> property is a number\nrepresenting the connection&#39;s port that is not available.</p>\n"
                }
              ]
            }
          ],
          "properties": [
            {
              "textRaw": "error.info",
              "name": "info",
              "desc": "<p><code>SystemError</code> instances may have an additional <code>info</code> property whose\nvalue is an object with additional details about the error conditions.</p>\n<p>The following properties are provided:</p>\n<ul>\n<li><code>code</code> {string} The string error code</li>\n<li><code>errno</code> {number} The system-provided error number</li>\n<li><code>message</code> {string} A system-provided human readable description of the error</li>\n<li><code>syscall</code> {string} The name of the system call that triggered the error</li>\n<li><code>path</code> {Buffer} When reporting a file system error, the <code>path</code> will identify\nthe file path.</li>\n<li><code>dest</code> {Buffer} When reporting a file system error, the <code>dest</code> will identify\nthe file path destination (if any).</li>\n</ul>\n",
              "properties": [
                {
                  "textRaw": "`code` {string} ",
                  "type": "string",
                  "name": "code",
                  "desc": "<p>The <code>error.code</code> property is a string representing the error code, which is\ntypically <code>E</code> followed by a sequence of capital letters.</p>\n"
                },
                {
                  "textRaw": "`errno` {string|number} ",
                  "type": "string|number",
                  "name": "errno",
                  "desc": "<p>The <code>error.errno</code> property is a number or a string.\nThe number is a <strong>negative</strong> value which corresponds to the error code defined\nin <a href=\"http://docs.libuv.org/en/v1.x/errors.html\"><code>libuv Error handling</code></a>. See <code>uv-errno.h</code> header file\n(<code>deps/uv/include/uv-errno.h</code> in the Node.js source tree) for details. In case\nof a string, it is the same as <code>error.code</code>.</p>\n"
                },
                {
                  "textRaw": "`syscall` {string} ",
                  "type": "string",
                  "name": "syscall",
                  "desc": "<p>The <code>error.syscall</code> property is a string describing the <a href=\"http://man7.org/linux/man-pages/man2/syscall.2.html\">syscall</a> that failed.</p>\n"
                },
                {
                  "textRaw": "`path` {string} ",
                  "type": "string",
                  "name": "path",
                  "desc": "<p>When present (e.g. in <code>fs</code> or <code>child_process</code>), the <code>error.path</code> property is a\nstring containing a relevant invalid pathname.</p>\n"
                },
                {
                  "textRaw": "`address` {string} ",
                  "type": "string",
                  "name": "address",
                  "desc": "<p>When present (e.g. in <code>net</code> or <code>dgram</code>), the <code>error.address</code> property is a\nstring describing the address to which the connection failed.</p>\n"
                },
                {
                  "textRaw": "`port` {number} ",
                  "type": "number",
                  "name": "port",
                  "desc": "<p>When present (e.g. in <code>net</code> or <code>dgram</code>), the <code>error.port</code> property is a number\nrepresenting the connection&#39;s port that is not available.</p>\n"
                }
              ]
            }
          ],
          "modules": [
            {
              "textRaw": "Common System Errors",
              "name": "common_system_errors",
              "desc": "<p>This list is <strong>not exhaustive</strong>, but enumerates many of the common system\nerrors encountered when writing a Node.js program. An exhaustive list may be\nfound <a href=\"http://man7.org/linux/man-pages/man3/errno.3.html\">here</a>.</p>\n<ul>\n<li><p><code>EACCES</code> (Permission denied): An attempt was made to access a file in a way\nforbidden by its file access permissions.</p>\n</li>\n<li><p><code>EADDRINUSE</code> (Address already in use): An attempt to bind a server\n(<a href=\"net.html\"><code>net</code></a>, <a href=\"http.html\"><code>http</code></a>, or <a href=\"https.html\"><code>https</code></a>) to a local address failed due to\nanother server on the local system already occupying that address.</p>\n</li>\n<li><p><code>ECONNREFUSED</code> (Connection refused): No connection could be made because the\ntarget machine actively refused it. This usually results from trying to\nconnect to a service that is inactive on the foreign host.</p>\n</li>\n<li><p><code>ECONNRESET</code> (Connection reset by peer): A connection was forcibly closed by\na peer. This normally results from a loss of the connection on the remote\nsocket due to a timeout or reboot. Commonly encountered via the <a href=\"http.html\"><code>http</code></a>\nand <a href=\"net.html\"><code>net</code></a> modules.</p>\n</li>\n<li><p><code>EEXIST</code> (File exists): An existing file was the target of an operation that\nrequired that the target not exist.</p>\n</li>\n<li><p><code>EISDIR</code> (Is a directory): An operation expected a file, but the given\npathname was a directory.</p>\n</li>\n<li><p><code>EMFILE</code> (Too many open files in system): Maximum number of\n<a href=\"https://en.wikipedia.org/wiki/File_descriptor\">file descriptors</a> allowable on the system has been reached, and\nrequests for another descriptor cannot be fulfilled until at least one\nhas been closed. This is encountered when opening many files at once in\nparallel, especially on systems (in particular, macOS) where there is a low\nfile descriptor limit for processes. To remedy a low limit, run\n<code>ulimit -n 2048</code> in the same shell that will run the Node.js process.</p>\n</li>\n<li><p><code>ENOENT</code> (No such file or directory): Commonly raised by <a href=\"fs.html\"><code>fs</code></a> operations\nto indicate that a component of the specified pathname does not exist — no\nentity (file or directory) could be found by the given path.</p>\n</li>\n<li><p><code>ENOTDIR</code> (Not a directory): A component of the given pathname existed, but\nwas not a directory as expected. Commonly raised by <a href=\"fs.html#fs_fs_readdir_path_options_callback\"><code>fs.readdir</code></a>.</p>\n</li>\n<li><p><code>ENOTEMPTY</code> (Directory not empty): A directory with entries was the target\nof an operation that requires an empty directory — usually <a href=\"fs.html#fs_fs_unlink_path_callback\"><code>fs.unlink</code></a>.</p>\n</li>\n<li><p><code>EPERM</code> (Operation not permitted): An attempt was made to perform an\noperation that requires elevated privileges.</p>\n</li>\n<li><p><code>EPIPE</code> (Broken pipe): A write on a pipe, socket, or FIFO for which there is\nno process to read the data. Commonly encountered at the <a href=\"net.html\"><code>net</code></a> and\n<a href=\"http.html\"><code>http</code></a> layers, indicative that the remote side of the stream being\nwritten to has been closed.</p>\n</li>\n<li><p><code>ETIMEDOUT</code> (Operation timed out): A connect or send request failed because\nthe connected party did not properly respond after a period of time. Usually\nencountered by <a href=\"http.html\"><code>http</code></a> or <a href=\"net.html\"><code>net</code></a> — often a sign that a <code>socket.end()</code>\nwas not properly called.</p>\n</li>\n</ul>\n<p><a id=\"nodejs-error-codes\"></a></p>\n",
              "type": "module",
              "displayName": "Common System Errors"
            }
          ],
          "type": "misc",
          "displayName": "System Errors"
        },
        {
          "textRaw": "Node.js Error Codes",
          "name": "node.js_error_codes",
          "desc": "<p><a id=\"ERR_AMBIGUOUS_ARGUMENT\"></a></p>\n",
          "modules": [
            {
              "textRaw": "ERR_AMBIGUOUS_ARGUMENT",
              "name": "err_ambiguous_argument",
              "desc": "<p>This is triggered by the <code>assert</code> module in case e.g.,\n<code>assert.throws(fn, message)</code> is used in a way that the message is the thrown\nerror message. This is ambiguous because the message is not verifying the error\nmessage and will only be thrown in case no error is thrown.</p>\n<p><a id=\"ERR_ARG_NOT_ITERABLE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_AMBIGUOUS_ARGUMENT"
            },
            {
              "textRaw": "ERR_ARG_NOT_ITERABLE",
              "name": "err_arg_not_iterable",
              "desc": "<p>An iterable argument (i.e. a value that works with <code>for...of</code> loops) was\nrequired, but not provided to a Node.js API.</p>\n<p><a id=\"ERR_ASSERTION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_ARG_NOT_ITERABLE"
            },
            {
              "textRaw": "ERR_ASSERTION",
              "name": "err_assertion",
              "desc": "<p>A special type of error that can be triggered whenever Node.js detects an\nexceptional logic violation that should never occur. These are raised typically\nby the <code>assert</code> module.</p>\n<p><a id=\"ERR_ASYNC_CALLBACK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_ASSERTION"
            },
            {
              "textRaw": "ERR_ASYNC_CALLBACK",
              "name": "err_async_callback",
              "desc": "<p>An attempt was made to register something that is not a function as an\n<code>AsyncHooks</code> callback.</p>\n<p><a id=\"ERR_ASYNC_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_ASYNC_CALLBACK"
            },
            {
              "textRaw": "ERR_ASYNC_TYPE",
              "name": "err_async_type",
              "desc": "<p>The type of an asynchronous resource was invalid. Note that users are also able\nto define their own types if using the public embedder API.</p>\n<p><a id=\"ERR_BUFFER_OUT_OF_BOUNDS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_ASYNC_TYPE"
            },
            {
              "textRaw": "ERR_BUFFER_OUT_OF_BOUNDS",
              "name": "err_buffer_out_of_bounds",
              "desc": "<p>An operation outside the bounds of a <code>Buffer</code> was attempted.</p>\n<p><a id=\"ERR_BUFFER_TOO_LARGE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_BUFFER_OUT_OF_BOUNDS"
            },
            {
              "textRaw": "ERR_BUFFER_TOO_LARGE",
              "name": "err_buffer_too_large",
              "desc": "<p>An attempt has been made to create a <code>Buffer</code> larger than the maximum allowed\nsize.</p>\n<p><a id=\"ERR_CANNOT_WATCH_SIGINT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_BUFFER_TOO_LARGE"
            },
            {
              "textRaw": "ERR_CANNOT_WATCH_SIGINT",
              "name": "err_cannot_watch_sigint",
              "desc": "<p>Node.js was unable to watch for the <code>SIGINT</code> signal.</p>\n<p><a id=\"ERR_CHILD_CLOSED_BEFORE_REPLY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CANNOT_WATCH_SIGINT"
            },
            {
              "textRaw": "ERR_CHILD_CLOSED_BEFORE_REPLY",
              "name": "err_child_closed_before_reply",
              "desc": "<p>A child process was closed before the parent received a reply.</p>\n<p><a id=\"ERR_CHILD_PROCESS_IPC_REQUIRED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CHILD_CLOSED_BEFORE_REPLY"
            },
            {
              "textRaw": "ERR_CHILD_PROCESS_IPC_REQUIRED",
              "name": "err_child_process_ipc_required",
              "desc": "<p>Used when a child process is being forked without specifying an IPC channel.</p>\n<p><a id=\"ERR_CHILD_PROCESS_STDIO_MAXBUFFER\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CHILD_PROCESS_IPC_REQUIRED"
            },
            {
              "textRaw": "ERR_CHILD_PROCESS_STDIO_MAXBUFFER",
              "name": "err_child_process_stdio_maxbuffer",
              "desc": "<p>Used when the main process is trying to read data from the child process&#39;s\nSTDERR / STDOUT, and the data&#39;s length is longer than the <code>maxBuffer</code> option.</p>\n<p><a id=\"ERR_CONSOLE_WRITABLE_STREAM\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CHILD_PROCESS_STDIO_MAXBUFFER"
            },
            {
              "textRaw": "ERR_CONSOLE_WRITABLE_STREAM",
              "name": "err_console_writable_stream",
              "desc": "<p><code>Console</code> was instantiated without <code>stdout</code> stream, or <code>Console</code> has a\nnon-writable <code>stdout</code> or <code>stderr</code> stream.</p>\n<p><a id=\"ERR_CPU_USAGE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CONSOLE_WRITABLE_STREAM"
            },
            {
              "textRaw": "ERR_CPU_USAGE",
              "name": "err_cpu_usage",
              "desc": "<p>The native call from <code>process.cpuUsage</code> could not be processed.</p>\n<p><a id=\"ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CPU_USAGE"
            },
            {
              "textRaw": "ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED",
              "name": "err_crypto_custom_engine_not_supported",
              "desc": "<p>A client certificate engine was requested that is not supported by the version\nof OpenSSL being used.</p>\n<p><a id=\"ERR_CRYPTO_ECDH_INVALID_FORMAT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED"
            },
            {
              "textRaw": "ERR_CRYPTO_ECDH_INVALID_FORMAT",
              "name": "err_crypto_ecdh_invalid_format",
              "desc": "<p>An invalid value for the <code>format</code> argument was passed to the <code>crypto.ECDH()</code>\nclass <code>getPublicKey()</code> method.</p>\n<p><a id=\"ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_ECDH_INVALID_FORMAT"
            },
            {
              "textRaw": "ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY",
              "name": "err_crypto_ecdh_invalid_public_key",
              "desc": "<p>An invalid value for the <code>key</code> argument has been passed to the\n<code>crypto.ECDH()</code> class <code>computeSecret()</code> method. It means that the public\nkey lies outside of the elliptic curve.</p>\n<p><a id=\"ERR_CRYPTO_ENGINE_UNKNOWN\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY"
            },
            {
              "textRaw": "ERR_CRYPTO_ENGINE_UNKNOWN",
              "name": "err_crypto_engine_unknown",
              "desc": "<p>An invalid crypto engine identifier was passed to\n<a href=\"crypto.html#crypto_crypto_setengine_engine_flags\"><code>require(&#39;crypto&#39;).setEngine()</code></a>.</p>\n<p><a id=\"ERR_CRYPTO_FIPS_FORCED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_ENGINE_UNKNOWN"
            },
            {
              "textRaw": "ERR_CRYPTO_FIPS_FORCED",
              "name": "err_crypto_fips_forced",
              "desc": "<p>The <a href=\"cli.html#cli_force_fips\"><code>--force-fips</code></a> command-line argument was used but there was an attempt\nto enable or disable FIPS mode in the <code>crypto</code> module.</p>\n<p><a id=\"ERR_CRYPTO_FIPS_UNAVAILABLE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_FIPS_FORCED"
            },
            {
              "textRaw": "ERR_CRYPTO_FIPS_UNAVAILABLE",
              "name": "err_crypto_fips_unavailable",
              "desc": "<p>An attempt was made to enable or disable FIPS mode, but FIPS mode was not\navailable.</p>\n<p><a id=\"ERR_CRYPTO_HASH_DIGEST_NO_UTF16\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_FIPS_UNAVAILABLE"
            },
            {
              "textRaw": "ERR_CRYPTO_HASH_DIGEST_NO_UTF16",
              "name": "err_crypto_hash_digest_no_utf16",
              "desc": "<p>The UTF-16 encoding was used with <a href=\"crypto.html#crypto_hash_digest_encoding\"><code>hash.digest()</code></a>. While the\n<code>hash.digest()</code> method does allow an <code>encoding</code> argument to be passed in,\ncausing the method to return a string rather than a <code>Buffer</code>, the UTF-16\nencoding (e.g. <code>ucs</code> or <code>utf16le</code>) is not supported.</p>\n<p><a id=\"ERR_CRYPTO_HASH_FINALIZED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_HASH_DIGEST_NO_UTF16"
            },
            {
              "textRaw": "ERR_CRYPTO_HASH_FINALIZED",
              "name": "err_crypto_hash_finalized",
              "desc": "<p><a href=\"crypto.html#crypto_hash_digest_encoding\"><code>hash.digest()</code></a> was called multiple times. The <code>hash.digest()</code> method must\nbe called no more than one time per instance of a <code>Hash</code> object.</p>\n<p><a id=\"ERR_CRYPTO_HASH_UPDATE_FAILED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_HASH_FINALIZED"
            },
            {
              "textRaw": "ERR_CRYPTO_HASH_UPDATE_FAILED",
              "name": "err_crypto_hash_update_failed",
              "desc": "<p><a href=\"crypto.html#crypto_hash_update_data_inputencoding\"><code>hash.update()</code></a> failed for any reason. This should rarely, if ever, happen.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_DIGEST\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_HASH_UPDATE_FAILED"
            },
            {
              "textRaw": "ERR_CRYPTO_INVALID_DIGEST",
              "name": "err_crypto_invalid_digest",
              "desc": "<p>An invalid <a href=\"crypto.html#crypto_crypto_gethashes\">crypto digest algorithm</a> was specified.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_STATE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_INVALID_DIGEST"
            },
            {
              "textRaw": "ERR_CRYPTO_INVALID_STATE",
              "name": "err_crypto_invalid_state",
              "desc": "<p>A crypto method was used on an object that was in an invalid state. For\ninstance, calling <a href=\"crypto.html#crypto_cipher_getauthtag\"><code>cipher.getAuthTag()</code></a> before calling <code>cipher.final()</code>.</p>\n<p><a id=\"ERR_CRYPTO_SIGN_KEY_REQUIRED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_INVALID_STATE"
            },
            {
              "textRaw": "ERR_CRYPTO_SIGN_KEY_REQUIRED",
              "name": "err_crypto_sign_key_required",
              "desc": "<p>A signing <code>key</code> was not provided to the <a href=\"crypto.html#crypto_sign_sign_privatekey_outputformat\"><code>sign.sign()</code></a> method.</p>\n<p><a id=\"ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_SIGN_KEY_REQUIRED"
            },
            {
              "textRaw": "ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH",
              "name": "err_crypto_timing_safe_equal_length",
              "desc": "<p><a href=\"crypto.html#crypto_crypto_timingsafeequal_a_b\"><code>crypto.timingSafeEqual()</code></a> was called with <code>Buffer</code>, <code>TypedArray</code>, or\n<code>DataView</code> arguments of different lengths.</p>\n<p><a id=\"ERR_DNS_SET_SERVERS_FAILED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH"
            },
            {
              "textRaw": "ERR_DNS_SET_SERVERS_FAILED",
              "name": "err_dns_set_servers_failed",
              "desc": "<p><code>c-ares</code> failed to set the DNS server.</p>\n<p><a id=\"ERR_DOMAIN_CALLBACK_NOT_AVAILABLE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_DNS_SET_SERVERS_FAILED"
            },
            {
              "textRaw": "ERR_DOMAIN_CALLBACK_NOT_AVAILABLE",
              "name": "err_domain_callback_not_available",
              "desc": "<p>The <code>domain</code> module was not usable since it could not establish the required\nerror handling hooks, because\n<a href=\"process.html#process_process_setuncaughtexceptioncapturecallback_fn\"><code>process.setUncaughtExceptionCaptureCallback()</code></a> had been called at an\nearlier point in time.</p>\n<p><a id=\"ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_DOMAIN_CALLBACK_NOT_AVAILABLE"
            },
            {
              "textRaw": "ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE",
              "name": "err_domain_cannot_set_uncaught_exception_capture",
              "desc": "<p><a href=\"process.html#process_process_setuncaughtexceptioncapturecallback_fn\"><code>process.setUncaughtExceptionCaptureCallback()</code></a> could not be called\nbecause the <code>domain</code> module has been loaded at an earlier point in time.</p>\n<p>The stack trace is extended to include the point in time at which the\n<code>domain</code> module had been loaded.</p>\n<p><a id=\"ERR_ENCODING_INVALID_ENCODED_DATA\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE"
            },
            {
              "textRaw": "ERR_ENCODING_INVALID_ENCODED_DATA",
              "name": "err_encoding_invalid_encoded_data",
              "desc": "<p>Data provided to <code>util.TextDecoder()</code> API was invalid according to the encoding\nprovided.</p>\n<p><a id=\"ERR_ENCODING_NOT_SUPPORTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_ENCODING_INVALID_ENCODED_DATA"
            },
            {
              "textRaw": "ERR_ENCODING_NOT_SUPPORTED",
              "name": "err_encoding_not_supported",
              "desc": "<p>Encoding provided to <code>util.TextDecoder()</code> API was not one of the\n<a href=\"util.html#util_whatwg_supported_encodings\">WHATWG Supported Encodings</a>.</p>\n<p><a id=\"ERR_FALSY_VALUE_REJECTION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_ENCODING_NOT_SUPPORTED"
            },
            {
              "textRaw": "ERR_FALSY_VALUE_REJECTION",
              "name": "err_falsy_value_rejection",
              "desc": "<p>A <code>Promise</code> that was callbackified via <code>util.callbackify()</code> was rejected with a\nfalsy value.</p>\n<p><a id=\"ERR_FS_FILE_TOO_LARGE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_FALSY_VALUE_REJECTION"
            },
            {
              "textRaw": "ERR_FS_FILE_TOO_LARGE",
              "name": "err_fs_file_too_large",
              "desc": "<p>An attempt has been made to read a file whose size is larger than the maximum\nallowed size for a <code>Buffer</code>.</p>\n<p><a id=\"ERR_FS_INVALID_SYMLINK_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_FS_FILE_TOO_LARGE"
            },
            {
              "textRaw": "ERR_FS_INVALID_SYMLINK_TYPE",
              "name": "err_fs_invalid_symlink_type",
              "desc": "<p>An invalid symlink type was passed to the <a href=\"fs.html#fs_fs_symlink_target_path_type_callback\"><code>fs.symlink()</code></a> or\n<a href=\"fs.html#fs_fs_symlinksync_target_path_type\"><code>fs.symlinkSync()</code></a> methods.</p>\n<p><a id=\"ERR_HTTP_HEADERS_SENT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_FS_INVALID_SYMLINK_TYPE"
            },
            {
              "textRaw": "ERR_HTTP_HEADERS_SENT",
              "name": "err_http_headers_sent",
              "desc": "<p>An attempt was made to add more headers after the headers had already been sent.</p>\n<p><a id=\"ERR_HTTP_INVALID_HEADER_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP_HEADERS_SENT"
            },
            {
              "textRaw": "ERR_HTTP_INVALID_HEADER_VALUE",
              "name": "err_http_invalid_header_value",
              "desc": "<p>An invalid HTTP header value was specified.</p>\n<p><a id=\"ERR_HTTP_INVALID_STATUS_CODE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP_INVALID_HEADER_VALUE"
            },
            {
              "textRaw": "ERR_HTTP_INVALID_STATUS_CODE",
              "name": "err_http_invalid_status_code",
              "desc": "<p>Status code was outside the regular status code range (100-999).</p>\n<p><a id=\"ERR_HTTP_TRAILER_INVALID\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP_INVALID_STATUS_CODE"
            },
            {
              "textRaw": "ERR_HTTP_TRAILER_INVALID",
              "name": "err_http_trailer_invalid",
              "desc": "<p>The <code>Trailer</code> header was set even though the transfer encoding does not support\nthat.</p>\n<p><a id=\"ERR_HTTP2_ALTSVC_INVALID_ORIGIN\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP_TRAILER_INVALID"
            },
            {
              "textRaw": "ERR_HTTP2_ALTSVC_INVALID_ORIGIN",
              "name": "err_http2_altsvc_invalid_origin",
              "desc": "<p>HTTP/2 ALTSVC frames require a valid origin.</p>\n<p><a id=\"ERR_HTTP2_ALTSVC_LENGTH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_ALTSVC_INVALID_ORIGIN"
            },
            {
              "textRaw": "ERR_HTTP2_ALTSVC_LENGTH",
              "name": "err_http2_altsvc_length",
              "desc": "<p>HTTP/2 ALTSVC frames are limited to a maximum of 16,382 payload bytes.</p>\n<p><a id=\"ERR_HTTP2_CONNECT_AUTHORITY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_ALTSVC_LENGTH"
            },
            {
              "textRaw": "ERR_HTTP2_CONNECT_AUTHORITY",
              "name": "err_http2_connect_authority",
              "desc": "<p>For HTTP/2 requests using the <code>CONNECT</code> method, the <code>:authority</code> pseudo-header\nis required.</p>\n<p><a id=\"ERR_HTTP2_CONNECT_PATH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_CONNECT_AUTHORITY"
            },
            {
              "textRaw": "ERR_HTTP2_CONNECT_PATH",
              "name": "err_http2_connect_path",
              "desc": "<p>For HTTP/2 requests using the <code>CONNECT</code> method, the <code>:path</code> pseudo-header is\nforbidden.</p>\n<p><a id=\"ERR_HTTP2_CONNECT_SCHEME\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_CONNECT_PATH"
            },
            {
              "textRaw": "ERR_HTTP2_CONNECT_SCHEME",
              "name": "err_http2_connect_scheme",
              "desc": "<p>For HTTP/2 requests using the <code>CONNECT</code> method, the <code>:scheme</code> pseudo-header is\nforbidden.</p>\n<p><a id=\"ERR_HTTP2_GOAWAY_SESSION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_CONNECT_SCHEME"
            },
            {
              "textRaw": "ERR_HTTP2_GOAWAY_SESSION",
              "name": "err_http2_goaway_session",
              "desc": "<p>New HTTP/2 Streams may not be opened after the <code>Http2Session</code> has received a\n<code>GOAWAY</code> frame from the connected peer.</p>\n<p><a id=\"ERR_HTTP2_HEADER_SINGLE_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_GOAWAY_SESSION"
            },
            {
              "textRaw": "ERR_HTTP2_HEADER_SINGLE_VALUE",
              "name": "err_http2_header_single_value",
              "desc": "<p>Multiple values were provided for an HTTP/2 header field that was required to\nhave only a single value.</p>\n<p><a id=\"ERR_HTTP2_HEADERS_AFTER_RESPOND\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_HEADER_SINGLE_VALUE"
            },
            {
              "textRaw": "ERR_HTTP2_HEADERS_AFTER_RESPOND",
              "name": "err_http2_headers_after_respond",
              "desc": "<p>An additional headers was specified after an HTTP/2 response was initiated.</p>\n<p><a id=\"ERR_HTTP2_HEADERS_SENT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_HEADERS_AFTER_RESPOND"
            },
            {
              "textRaw": "ERR_HTTP2_HEADERS_SENT",
              "name": "err_http2_headers_sent",
              "desc": "<p>An attempt was made to send multiple response headers.</p>\n<p><a id=\"ERR_HTTP2_INFO_STATUS_NOT_ALLOWED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_HEADERS_SENT"
            },
            {
              "textRaw": "ERR_HTTP2_INFO_STATUS_NOT_ALLOWED",
              "name": "err_http2_info_status_not_allowed",
              "desc": "<p>Informational HTTP status codes (<code>1xx</code>) may not be set as the response status\ncode on HTTP/2 responses.</p>\n<p><a id=\"ERR_HTTP2_INVALID_CONNECTION_HEADERS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INFO_STATUS_NOT_ALLOWED"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_CONNECTION_HEADERS",
              "name": "err_http2_invalid_connection_headers",
              "desc": "<p>HTTP/1 connection specific headers are forbidden to be used in HTTP/2\nrequests and responses.</p>\n<p><a id=\"ERR_HTTP2_INVALID_HEADER_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_CONNECTION_HEADERS"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_HEADER_VALUE",
              "name": "err_http2_invalid_header_value",
              "desc": "<p>An invalid HTTP/2 header value was specified.</p>\n<p><a id=\"ERR_HTTP2_INVALID_INFO_STATUS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_HEADER_VALUE"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_INFO_STATUS",
              "name": "err_http2_invalid_info_status",
              "desc": "<p>An invalid HTTP informational status code has been specified. Informational\nstatus codes must be an integer between <code>100</code> and <code>199</code> (inclusive).</p>\n<p><a id=\"ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_INFO_STATUS"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH",
              "name": "err_http2_invalid_packed_settings_length",
              "desc": "<p>Input <code>Buffer</code> and <code>Uint8Array</code> instances passed to the\n<code>http2.getUnpackedSettings()</code> API must have a length that is a multiple of\nsix.</p>\n<p><a id=\"ERR_HTTP2_INVALID_PSEUDOHEADER\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_PSEUDOHEADER",
              "name": "err_http2_invalid_pseudoheader",
              "desc": "<p>Only valid HTTP/2 pseudoheaders (<code>:status</code>, <code>:path</code>, <code>:authority</code>, <code>:scheme</code>,\nand <code>:method</code>) may be used.</p>\n<p><a id=\"ERR_HTTP2_INVALID_SESSION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_PSEUDOHEADER"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_SESSION",
              "name": "err_http2_invalid_session",
              "desc": "<p>An action was performed on an <code>Http2Session</code> object that had already been\ndestroyed.</p>\n<p><a id=\"ERR_HTTP2_INVALID_SETTING_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_SESSION"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_SETTING_VALUE",
              "name": "err_http2_invalid_setting_value",
              "desc": "<p>An invalid value has been specified for an HTTP/2 setting.</p>\n<p><a id=\"ERR_HTTP2_INVALID_STREAM\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_SETTING_VALUE"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_STREAM",
              "name": "err_http2_invalid_stream",
              "desc": "<p>An operation was performed on a stream that had already been destroyed.</p>\n<p><a id=\"ERR_HTTP2_MAX_PENDING_SETTINGS_ACK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_STREAM"
            },
            {
              "textRaw": "ERR_HTTP2_MAX_PENDING_SETTINGS_ACK",
              "name": "err_http2_max_pending_settings_ack",
              "desc": "<p>Whenever an HTTP/2 <code>SETTINGS</code> frame is sent to a connected peer, the peer is\nrequired to send an acknowledgment that it has received and applied the new\n<code>SETTINGS</code>. By default, a maximum number of unacknowledged <code>SETTINGS</code> frames may\nbe sent at any given time. This error code is used when that limit has been\nreached.</p>\n<p><a id=\"ERR_HTTP2_NO_SOCKET_MANIPULATION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_MAX_PENDING_SETTINGS_ACK"
            },
            {
              "textRaw": "ERR_HTTP2_NO_SOCKET_MANIPULATION",
              "name": "err_http2_no_socket_manipulation",
              "desc": "<p>An attempt was made to directly manipulate (read, write, pause, resume, etc.) a\nsocket attached to an <code>Http2Session</code>.</p>\n<p><a id=\"ERR_HTTP2_OUT_OF_STREAMS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_NO_SOCKET_MANIPULATION"
            },
            {
              "textRaw": "ERR_HTTP2_OUT_OF_STREAMS",
              "name": "err_http2_out_of_streams",
              "desc": "<p>The number of streams created on a single HTTP/2 session reached the maximum\nlimit.</p>\n<p><a id=\"ERR_HTTP2_PAYLOAD_FORBIDDEN\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_OUT_OF_STREAMS"
            },
            {
              "textRaw": "ERR_HTTP2_PAYLOAD_FORBIDDEN",
              "name": "err_http2_payload_forbidden",
              "desc": "<p>A message payload was specified for an HTTP response code for which a payload is\nforbidden.</p>\n<p><a id=\"ERR_HTTP2_PING_CANCEL\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_PAYLOAD_FORBIDDEN"
            },
            {
              "textRaw": "ERR_HTTP2_PING_CANCEL",
              "name": "err_http2_ping_cancel",
              "desc": "<p>An HTTP/2 ping was canceled.</p>\n<p><a id=\"ERR_HTTP2_PING_LENGTH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_PING_CANCEL"
            },
            {
              "textRaw": "ERR_HTTP2_PING_LENGTH",
              "name": "err_http2_ping_length",
              "desc": "<p>HTTP/2 ping payloads must be exactly 8 bytes in length.</p>\n<p><a id=\"ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_PING_LENGTH"
            },
            {
              "textRaw": "ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED",
              "name": "err_http2_pseudoheader_not_allowed",
              "desc": "<p>An HTTP/2 pseudo-header has been used inappropriately. Pseudo-headers are header\nkey names that begin with the <code>:</code> prefix.</p>\n<p><a id=\"ERR_HTTP2_PUSH_DISABLED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED"
            },
            {
              "textRaw": "ERR_HTTP2_PUSH_DISABLED",
              "name": "err_http2_push_disabled",
              "desc": "<p>An attempt was made to create a push stream, which had been disabled by the\nclient.</p>\n<p><a id=\"ERR_HTTP2_SEND_FILE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_PUSH_DISABLED"
            },
            {
              "textRaw": "ERR_HTTP2_SEND_FILE",
              "name": "err_http2_send_file",
              "desc": "<p>An attempt was made to use the <code>Http2Stream.prototype.responseWithFile()</code> API to\nsend a directory.</p>\n<p><a id=\"ERR_HTTP2_SEND_FILE_NOSEEK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_SEND_FILE"
            },
            {
              "textRaw": "ERR_HTTP2_SEND_FILE_NOSEEK",
              "name": "err_http2_send_file_noseek",
              "desc": "<p>An attempt was made to use the <code>Http2Stream.prototype.responseWithFile()</code> API to\nsend something other than a regular file, but <code>offset</code> or <code>length</code> options were\nprovided.</p>\n<p><a id=\"ERR_HTTP2_SESSION_ERROR\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_SEND_FILE_NOSEEK"
            },
            {
              "textRaw": "ERR_HTTP2_SESSION_ERROR",
              "name": "err_http2_session_error",
              "desc": "<p>The <code>Http2Session</code> closed with a non-zero error code.</p>\n<p><a id=\"ERR_HTTP2_SOCKET_BOUND\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_SESSION_ERROR"
            },
            {
              "textRaw": "ERR_HTTP2_SOCKET_BOUND",
              "name": "err_http2_socket_bound",
              "desc": "<p>An attempt was made to connect a <code>Http2Session</code> object to a <code>net.Socket</code> or\n<code>tls.TLSSocket</code> that had already been bound to another <code>Http2Session</code> object.</p>\n<p><a id=\"ERR_HTTP2_STATUS_101\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_SOCKET_BOUND"
            },
            {
              "textRaw": "ERR_HTTP2_STATUS_101",
              "name": "err_http2_status_101",
              "desc": "<p>Use of the <code>101</code> Informational status code is forbidden in HTTP/2.</p>\n<p><a id=\"ERR_HTTP2_STATUS_INVALID\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_STATUS_101"
            },
            {
              "textRaw": "ERR_HTTP2_STATUS_INVALID",
              "name": "err_http2_status_invalid",
              "desc": "<p>An invalid HTTP status code has been specified. Status codes must be an integer\nbetween <code>100</code> and <code>599</code> (inclusive).</p>\n<p><a id=\"ERR_HTTP2_STREAM_CANCEL\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_STATUS_INVALID"
            },
            {
              "textRaw": "ERR_HTTP2_STREAM_CANCEL",
              "name": "err_http2_stream_cancel",
              "desc": "<p>An <code>Http2Stream</code> was destroyed before any data was transmitted to the connected\npeer.</p>\n<p><a id=\"ERR_HTTP2_STREAM_ERROR\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_STREAM_CANCEL"
            },
            {
              "textRaw": "ERR_HTTP2_STREAM_ERROR",
              "name": "err_http2_stream_error",
              "desc": "<p>A non-zero error code was been specified in an <code>RST_STREAM</code> frame.</p>\n<p><a id=\"ERR_HTTP2_STREAM_SELF_DEPENDENCY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_STREAM_ERROR"
            },
            {
              "textRaw": "ERR_HTTP2_STREAM_SELF_DEPENDENCY",
              "name": "err_http2_stream_self_dependency",
              "desc": "<p>When setting the priority for an HTTP/2 stream, the stream may be marked as\na dependency for a parent stream. This error code is used when an attempt is\nmade to mark a stream and dependent of itself.</p>\n<p><a id=\"ERR_HTTP2_TRAILERS_ALREADY_SENT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_STREAM_SELF_DEPENDENCY"
            },
            {
              "textRaw": "ERR_HTTP2_TRAILERS_ALREADY_SENT",
              "name": "err_http2_trailers_already_sent",
              "desc": "<p>Trailing headers have already been sent on the <code>Http2Stream</code>.</p>\n<p><a id=\"ERR_HTTP2_TRAILERS_NOT_READY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_TRAILERS_ALREADY_SENT"
            },
            {
              "textRaw": "ERR_HTTP2_TRAILERS_NOT_READY",
              "name": "err_http2_trailers_not_ready",
              "desc": "<p>The <code>http2stream.sendTrailers()</code> method cannot be called until after the\n<code>&#39;wantTrailers&#39;</code> event is emitted on an <code>Http2Stream</code> object. The\n<code>&#39;wantTrailers&#39;</code> event will only be emitted if the <code>waitForTrailers</code> option\nis set for the <code>Http2Stream</code>.</p>\n<p><a id=\"ERR_HTTP2_UNSUPPORTED_PROTOCOL\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_TRAILERS_NOT_READY"
            },
            {
              "textRaw": "ERR_HTTP2_UNSUPPORTED_PROTOCOL",
              "name": "err_http2_unsupported_protocol",
              "desc": "<p><code>http2.connect()</code> was passed a URL that uses any protocol other than <code>http:</code> or\n<code>https:</code>.</p>\n<p><a id=\"ERR_INDEX_OUT_OF_RANGE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_UNSUPPORTED_PROTOCOL"
            },
            {
              "textRaw": "ERR_INDEX_OUT_OF_RANGE",
              "name": "err_index_out_of_range",
              "desc": "<p>A given index was out of the accepted range (e.g. negative offsets).</p>\n<p><a id=\"ERR_INSPECTOR_ALREADY_CONNECTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INDEX_OUT_OF_RANGE"
            },
            {
              "textRaw": "ERR_INSPECTOR_ALREADY_CONNECTED",
              "name": "err_inspector_already_connected",
              "desc": "<p>While using the <code>inspector</code> module, an attempt was made to connect when the\ninspector was already connected.</p>\n<p><a id=\"ERR_INSPECTOR_CLOSED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INSPECTOR_ALREADY_CONNECTED"
            },
            {
              "textRaw": "ERR_INSPECTOR_CLOSED",
              "name": "err_inspector_closed",
              "desc": "<p>While using the <code>inspector</code> module, an attempt was made to use the inspector\nafter the session had already closed.</p>\n<p><a id=\"ERR_INSPECTOR_NOT_AVAILABLE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INSPECTOR_CLOSED"
            },
            {
              "textRaw": "ERR_INSPECTOR_NOT_AVAILABLE",
              "name": "err_inspector_not_available",
              "desc": "<p>The <code>inspector</code> module is not available for use.</p>\n<p><a id=\"ERR_INSPECTOR_NOT_CONNECTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INSPECTOR_NOT_AVAILABLE"
            },
            {
              "textRaw": "ERR_INSPECTOR_NOT_CONNECTED",
              "name": "err_inspector_not_connected",
              "desc": "<p>While using the <code>inspector</code> module, an attempt was made to use the inspector\nbefore it was connected.</p>\n<p><a id=\"ERR_INVALID_ADDRESS_FAMILY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INSPECTOR_NOT_CONNECTED"
            },
            {
              "textRaw": "ERR_INVALID_ADDRESS_FAMILY",
              "name": "err_invalid_address_family",
              "desc": "<p>The provided address family is not understood by the Node.js API.</p>\n<p><a id=\"ERR_INVALID_ARG_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_ADDRESS_FAMILY"
            },
            {
              "textRaw": "ERR_INVALID_ARG_TYPE",
              "name": "err_invalid_arg_type",
              "desc": "<p>An argument of the wrong type was passed to a Node.js API.</p>\n<p><a id=\"ERR_INVALID_ARG_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_ARG_TYPE"
            },
            {
              "textRaw": "ERR_INVALID_ARG_VALUE",
              "name": "err_invalid_arg_value",
              "desc": "<p>An invalid or unsupported value was passed for a given argument.</p>\n<p><a id=\"ERR_INVALID_ARRAY_LENGTH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_ARG_VALUE"
            },
            {
              "textRaw": "ERR_INVALID_ARRAY_LENGTH",
              "name": "err_invalid_array_length",
              "desc": "<p>An array was not of the expected length or in a valid range.</p>\n<p><a id=\"ERR_INVALID_ASYNC_ID\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_ARRAY_LENGTH"
            },
            {
              "textRaw": "ERR_INVALID_ASYNC_ID",
              "name": "err_invalid_async_id",
              "desc": "<p>An invalid <code>asyncId</code> or <code>triggerAsyncId</code> was passed using <code>AsyncHooks</code>. An id\nless than -1 should never happen.</p>\n<p><a id=\"ERR_INVALID_BUFFER_SIZE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_ASYNC_ID"
            },
            {
              "textRaw": "ERR_INVALID_BUFFER_SIZE",
              "name": "err_invalid_buffer_size",
              "desc": "<p>A swap was performed on a <code>Buffer</code> but its size was not compatible with the\noperation.</p>\n<p><a id=\"ERR_INVALID_CALLBACK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_BUFFER_SIZE"
            },
            {
              "textRaw": "ERR_INVALID_CALLBACK",
              "name": "err_invalid_callback",
              "desc": "<p>A callback function was required but was not been provided to a Node.js API.</p>\n<p><a id=\"ERR_INVALID_CHAR\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_CALLBACK"
            },
            {
              "textRaw": "ERR_INVALID_CHAR",
              "name": "err_invalid_char",
              "desc": "<p>Invalid characters were detected in headers.</p>\n<p><a id=\"ERR_INVALID_CURSOR_POS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_CHAR"
            },
            {
              "textRaw": "ERR_INVALID_CURSOR_POS",
              "name": "err_invalid_cursor_pos",
              "desc": "<p>A cursor on a given stream cannot be moved to a specified row without a\nspecified column.</p>\n<p><a id=\"ERR_INVALID_DOMAIN_NAME\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_CURSOR_POS"
            },
            {
              "textRaw": "ERR_INVALID_DOMAIN_NAME",
              "name": "err_invalid_domain_name",
              "desc": "<p><code>hostname</code> can not be parsed from a provided URL.</p>\n<p><a id=\"ERR_INVALID_FD\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_DOMAIN_NAME"
            },
            {
              "textRaw": "ERR_INVALID_FD",
              "name": "err_invalid_fd",
              "desc": "<p>A file descriptor (&#39;fd&#39;) was not valid (e.g. it was a negative value).</p>\n<p><a id=\"ERR_INVALID_FD_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_FD"
            },
            {
              "textRaw": "ERR_INVALID_FD_TYPE",
              "name": "err_invalid_fd_type",
              "desc": "<p>A file descriptor (&#39;fd&#39;) type was not valid.</p>\n<p><a id=\"ERR_INVALID_FILE_URL_HOST\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_FD_TYPE"
            },
            {
              "textRaw": "ERR_INVALID_FILE_URL_HOST",
              "name": "err_invalid_file_url_host",
              "desc": "<p>A Node.js API that consumes <code>file:</code> URLs (such as certain functions in the\n<a href=\"fs.html\"><code>fs</code></a> module) encountered a file URL with an incompatible host. This\nsituation can only occur on Unix-like systems where only <code>localhost</code> or an empty\nhost is supported.</p>\n<p><a id=\"ERR_INVALID_FILE_URL_PATH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_FILE_URL_HOST"
            },
            {
              "textRaw": "ERR_INVALID_FILE_URL_PATH",
              "name": "err_invalid_file_url_path",
              "desc": "<p>A Node.js API that consumes <code>file:</code> URLs (such as certain functions in the\n<a href=\"fs.html\"><code>fs</code></a> module) encountered a file URL with an incompatible path. The exact\nsemantics for determining whether a path can be used is platform-dependent.</p>\n<p><a id=\"ERR_INVALID_HANDLE_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_FILE_URL_PATH"
            },
            {
              "textRaw": "ERR_INVALID_HANDLE_TYPE",
              "name": "err_invalid_handle_type",
              "desc": "<p>An attempt was made to send an unsupported &quot;handle&quot; over an IPC communication\nchannel to a child process. See <a href=\"child_process.html#child_process_subprocess_send_message_sendhandle_options_callback\"><code>subprocess.send()</code></a> and <a href=\"process.html#process_process_send_message_sendhandle_options_callback\"><code>process.send()</code></a> for\nmore information.</p>\n<p><a id=\"ERR_INVALID_HTTP_TOKEN\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_HANDLE_TYPE"
            },
            {
              "textRaw": "ERR_INVALID_HTTP_TOKEN",
              "name": "err_invalid_http_token",
              "desc": "<p>An invalid HTTP token was supplied.</p>\n<p><a id=\"ERR_INVALID_IP_ADDRESS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_HTTP_TOKEN"
            },
            {
              "textRaw": "ERR_INVALID_IP_ADDRESS",
              "name": "err_invalid_ip_address",
              "desc": "<p>An IP address is not valid.</p>\n<p><a id=\"ERR_INVALID_OPT_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_IP_ADDRESS"
            },
            {
              "textRaw": "ERR_INVALID_OPT_VALUE",
              "name": "err_invalid_opt_value",
              "desc": "<p>An invalid or unexpected value was passed in an options object.</p>\n<p><a id=\"ERR_INVALID_OPT_VALUE_ENCODING\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_OPT_VALUE"
            },
            {
              "textRaw": "ERR_INVALID_OPT_VALUE_ENCODING",
              "name": "err_invalid_opt_value_encoding",
              "desc": "<p>An invalid or unknown file encoding was passed.</p>\n<p><a id=\"ERR_INVALID_PERFORMANCE_MARK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_OPT_VALUE_ENCODING"
            },
            {
              "textRaw": "ERR_INVALID_PERFORMANCE_MARK",
              "name": "err_invalid_performance_mark",
              "desc": "<p>While using the Performance Timing API (<code>perf_hooks</code>), a performance mark is\ninvalid.</p>\n<p><a id=\"ERR_INVALID_PROTOCOL\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_PERFORMANCE_MARK"
            },
            {
              "textRaw": "ERR_INVALID_PROTOCOL",
              "name": "err_invalid_protocol",
              "desc": "<p>An invalid <code>options.protocol</code> was passed.</p>\n<p><a id=\"ERR_INVALID_REPL_EVAL_CONFIG\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_PROTOCOL"
            },
            {
              "textRaw": "ERR_INVALID_REPL_EVAL_CONFIG",
              "name": "err_invalid_repl_eval_config",
              "desc": "<p>Both <code>breakEvalOnSigint</code> and <code>eval</code> options were set in the REPL config, which\nis not supported.</p>\n<p><a id=\"ERR_INVALID_RETURN_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_REPL_EVAL_CONFIG"
            },
            {
              "textRaw": "ERR_INVALID_RETURN_VALUE",
              "name": "err_invalid_return_value",
              "desc": "<p>Thrown in case a function option does not return an expected value on execution.\nFor example when a function is expected to return a promise.</p>\n<p><a id=\"ERR_INVALID_SYNC_FORK_INPUT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_RETURN_VALUE"
            },
            {
              "textRaw": "ERR_INVALID_SYNC_FORK_INPUT",
              "name": "err_invalid_sync_fork_input",
              "desc": "<p>A <code>Buffer</code>, <code>Uint8Array</code> or <code>string</code> was provided as stdio input to a\nsynchronous fork. See the documentation for the <a href=\"child_process.html\"><code>child_process</code></a> module\nfor more information.</p>\n<p><a id=\"ERR_INVALID_THIS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_SYNC_FORK_INPUT"
            },
            {
              "textRaw": "ERR_INVALID_THIS",
              "name": "err_invalid_this",
              "desc": "<p>A Node.js API function was called with an incompatible <code>this</code> value.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const urlSearchParams = new URLSearchParams(&#39;foo=bar&amp;baz=new&#39;);\n\nconst buf = Buffer.alloc(1);\nurlSearchParams.has.call(buf, &#39;foo&#39;);\n// Throws a TypeError with code &#39;ERR_INVALID_THIS&#39;\n</code></pre>\n<p><a id=\"ERR_INVALID_TUPLE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_THIS"
            },
            {
              "textRaw": "ERR_INVALID_TUPLE",
              "name": "err_invalid_tuple",
              "desc": "<p>An element in the <code>iterable</code> provided to the <a href=\"url.html#url_the_whatwg_url_api\">WHATWG</a>\n<a href=\"url.html#url_constructor_new_urlsearchparams_iterable\"><code>URLSearchParams</code> constructor</a> did not\nrepresent a <code>[name, value]</code> tuple – that is, if an element is not iterable, or\ndoes not consist of exactly two elements.</p>\n<p><a id=\"ERR_INVALID_URI\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_TUPLE"
            },
            {
              "textRaw": "ERR_INVALID_URI",
              "name": "err_invalid_uri",
              "desc": "<p>An invalid URI was passed.</p>\n<p><a id=\"ERR_INVALID_URL\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_URI"
            },
            {
              "textRaw": "ERR_INVALID_URL",
              "name": "err_invalid_url",
              "desc": "<p>An invalid URL was passed to the <a href=\"url.html#url_the_whatwg_url_api\">WHATWG</a>\n<a href=\"url.html#url_constructor_new_url_input_base\"><code>URL</code> constructor</a> to be parsed. The thrown error object\ntypically has an additional property <code>&#39;input&#39;</code> that contains the URL that failed\nto parse.</p>\n<p><a id=\"ERR_INVALID_URL_SCHEME\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_URL"
            },
            {
              "textRaw": "ERR_INVALID_URL_SCHEME",
              "name": "err_invalid_url_scheme",
              "desc": "<p>An attempt was made to use a URL of an incompatible scheme (protocol) for a\nspecific purpose. It is only used in the <a href=\"url.html#url_the_whatwg_url_api\">WHATWG URL API</a> support in the\n<a href=\"fs.html\"><code>fs</code></a> module (which only accepts URLs with <code>&#39;file&#39;</code> scheme), but may be used\nin other Node.js APIs as well in the future.</p>\n<p><a id=\"ERR_IPC_CHANNEL_CLOSED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_URL_SCHEME"
            },
            {
              "textRaw": "ERR_IPC_CHANNEL_CLOSED",
              "name": "err_ipc_channel_closed",
              "desc": "<p>An attempt was made to use an IPC communication channel that was already closed.</p>\n<p><a id=\"ERR_IPC_DISCONNECTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_IPC_CHANNEL_CLOSED"
            },
            {
              "textRaw": "ERR_IPC_DISCONNECTED",
              "name": "err_ipc_disconnected",
              "desc": "<p>An attempt was made to disconnect an IPC communication channel that was already\ndisconnected. See the documentation for the <a href=\"child_process.html\"><code>child_process</code></a> module\nfor more information.</p>\n<p><a id=\"ERR_IPC_ONE_PIPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_IPC_DISCONNECTED"
            },
            {
              "textRaw": "ERR_IPC_ONE_PIPE",
              "name": "err_ipc_one_pipe",
              "desc": "<p>An attempt was made to create a child Node.js process using more than one IPC\ncommunication channel. See the documentation for the <a href=\"child_process.html\"><code>child_process</code></a> module\nfor more information.</p>\n<p><a id=\"ERR_IPC_SYNC_FORK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_IPC_ONE_PIPE"
            },
            {
              "textRaw": "ERR_IPC_SYNC_FORK",
              "name": "err_ipc_sync_fork",
              "desc": "<p>An attempt was made to open an IPC communication channel with a synchronously\nforked Node.js process. See the documentation for the <a href=\"child_process.html\"><code>child_process</code></a> module\nfor more information.</p>\n<p><a id=\"ERR_MEMORY_ALLOCATION_FAILED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_IPC_SYNC_FORK"
            },
            {
              "textRaw": "ERR_MEMORY_ALLOCATION_FAILED",
              "name": "err_memory_allocation_failed",
              "desc": "<p>An attempt was made to allocate memory (usually in the C++ layer) but it\nfailed.</p>\n<p><a id=\"ERR_METHOD_NOT_IMPLEMENTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_MEMORY_ALLOCATION_FAILED"
            },
            {
              "textRaw": "ERR_METHOD_NOT_IMPLEMENTED",
              "name": "err_method_not_implemented",
              "desc": "<p>A method is required but not implemented.</p>\n<p><a id=\"ERR_MISSING_ARGS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_METHOD_NOT_IMPLEMENTED"
            },
            {
              "textRaw": "ERR_MISSING_ARGS",
              "name": "err_missing_args",
              "desc": "<p>A required argument of a Node.js API was not passed. This is only used for\nstrict compliance with the API specification (which in some cases may accept\n<code>func(undefined)</code> but not <code>func()</code>). In most native Node.js APIs,\n<code>func(undefined)</code> and <code>func()</code> are treated identically, and the\n<a href=\"#ERR_INVALID_ARG_TYPE\"><code>ERR_INVALID_ARG_TYPE</code></a> error code may be used instead.</p>\n<p><a id=\"ERR_MISSING_MODULE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_MISSING_ARGS"
            },
            {
              "textRaw": "ERR_MISSING_MODULE",
              "name": "err_missing_module",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>An <a href=\"esm.html\">ES6 module</a> could not be resolved.</p>\n<p><a id=\"ERR_MODULE_RESOLUTION_LEGACY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_MISSING_MODULE"
            },
            {
              "textRaw": "ERR_MODULE_RESOLUTION_LEGACY",
              "name": "err_module_resolution_legacy",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>A failure occurred resolving imports in an <a href=\"esm.html\">ES6 module</a>.</p>\n<p><a id=\"ERR_MULTIPLE_CALLBACK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_MODULE_RESOLUTION_LEGACY"
            },
            {
              "textRaw": "ERR_MULTIPLE_CALLBACK",
              "name": "err_multiple_callback",
              "desc": "<p>A callback was called more than once.</p>\n<p>A callback is almost always meant to only be called once as the query\ncan either be fulfilled or rejected but not both at the same time. The latter\nwould be possible by calling a callback more than once.</p>\n<p><a id=\"ERR_NAPI_CONS_FUNCTION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_MULTIPLE_CALLBACK"
            },
            {
              "textRaw": "ERR_NAPI_CONS_FUNCTION",
              "name": "err_napi_cons_function",
              "desc": "<p>While using <code>N-API</code>, a constructor passed was not a function.</p>\n<p><a id=\"ERR_NAPI_INVALID_DATAVIEW_ARGS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NAPI_CONS_FUNCTION"
            },
            {
              "textRaw": "ERR_NAPI_INVALID_DATAVIEW_ARGS",
              "name": "err_napi_invalid_dataview_args",
              "desc": "<p>While calling <code>napi_create_dataview()</code>, a given <code>offset</code> was outside the bounds\nof the dataview or <code>offset + length</code> was larger than a length of given <code>buffer</code>.</p>\n<p><a id=\"ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NAPI_INVALID_DATAVIEW_ARGS"
            },
            {
              "textRaw": "ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT",
              "name": "err_napi_invalid_typedarray_alignment",
              "desc": "<p>While calling <code>napi_create_typedarray()</code>, the provided <code>offset</code> was not a\nmultiple of the element size.</p>\n<p><a id=\"ERR_NAPI_INVALID_TYPEDARRAY_LENGTH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT"
            },
            {
              "textRaw": "ERR_NAPI_INVALID_TYPEDARRAY_LENGTH",
              "name": "err_napi_invalid_typedarray_length",
              "desc": "<p>While calling <code>napi_create_typedarray()</code>, <code>(length * size_of_element) +\nbyte_offset</code> was larger than the length of given <code>buffer</code>.</p>\n<p><a id=\"ERR_NO_CRYPTO\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NAPI_INVALID_TYPEDARRAY_LENGTH"
            },
            {
              "textRaw": "ERR_NO_CRYPTO",
              "name": "err_no_crypto",
              "desc": "<p>An attempt was made to use crypto features while Node.js was not compiled with\nOpenSSL crypto support.</p>\n<p><a id=\"ERR_NO_ICU\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NO_CRYPTO"
            },
            {
              "textRaw": "ERR_NO_ICU",
              "name": "err_no_icu",
              "desc": "<p>An attempt was made to use features that require <a href=\"intl.html#intl_options_for_building_node_js\">ICU</a>, but Node.js was not\ncompiled with ICU support.</p>\n<p><a id=\"ERR_NO_LONGER_SUPPORTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NO_ICU"
            },
            {
              "textRaw": "ERR_NO_LONGER_SUPPORTED",
              "name": "err_no_longer_supported",
              "desc": "<p>A Node.js API was called in an unsupported manner, such as\n<code>Buffer.write(string, encoding, offset[, length])</code>.</p>\n<p><a id=\"ERR_OUT_OF_RANGE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NO_LONGER_SUPPORTED"
            },
            {
              "textRaw": "ERR_OUT_OF_RANGE",
              "name": "err_out_of_range",
              "desc": "<p>A given value is out of the accepted range.</p>\n<p><a id=\"ERR_REQUIRE_ESM\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_OUT_OF_RANGE"
            },
            {
              "textRaw": "ERR_REQUIRE_ESM",
              "name": "err_require_esm",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>An attempt was made to <code>require()</code> an <a href=\"esm.html\">ES6 module</a>.</p>\n<p><a id=\"ERR_SCRIPT_EXECUTION_INTERRUPTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_REQUIRE_ESM"
            },
            {
              "textRaw": "ERR_SCRIPT_EXECUTION_INTERRUPTED",
              "name": "err_script_execution_interrupted",
              "desc": "<p>Script execution was interrupted by <code>SIGINT</code> (For example, when Ctrl+C was\npressed).</p>\n<p><a id=\"ERR_SERVER_ALREADY_LISTEN\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SCRIPT_EXECUTION_INTERRUPTED"
            },
            {
              "textRaw": "ERR_SERVER_ALREADY_LISTEN",
              "name": "err_server_already_listen",
              "desc": "<p>The <a href=\"net.html#net_server_listen\"><code>server.listen()</code></a> method was called while a <code>net.Server</code> was already\nlistening. This applies to all instances of <code>net.Server</code>, including HTTP, HTTPS,\nand HTTP/2 <code>Server</code> instances.</p>\n<p><a id=\"ERR_SERVER_NOT_RUNNING\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SERVER_ALREADY_LISTEN"
            },
            {
              "textRaw": "ERR_SERVER_NOT_RUNNING",
              "name": "err_server_not_running",
              "desc": "<p>The <a href=\"#net_server_close_callback\"><code>server.close()</code></a> method was called when a <code>net.Server</code> was not\nrunning. This applies to all instances of <code>net.Server</code>, including HTTP, HTTPS,\nand HTTP/2 <code>Server</code> instances.</p>\n<p><a id=\"ERR_SOCKET_ALREADY_BOUND\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SERVER_NOT_RUNNING"
            },
            {
              "textRaw": "ERR_SOCKET_ALREADY_BOUND",
              "name": "err_socket_already_bound",
              "desc": "<p>An attempt was made to bind a socket that has already been bound.</p>\n<p><a id=\"ERR_SOCKET_BAD_BUFFER_SIZE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_ALREADY_BOUND"
            },
            {
              "textRaw": "ERR_SOCKET_BAD_BUFFER_SIZE",
              "name": "err_socket_bad_buffer_size",
              "desc": "<p>An invalid (negative) size was passed for either the <code>recvBufferSize</code> or\n<code>sendBufferSize</code> options in <a href=\"#dgram_dgram_createsocket_options_callback\"><code>dgram.createSocket()</code></a>.</p>\n<p><a id=\"ERR_SOCKET_BAD_PORT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_BAD_BUFFER_SIZE"
            },
            {
              "textRaw": "ERR_SOCKET_BAD_PORT",
              "name": "err_socket_bad_port",
              "desc": "<p>An API function expecting a port &gt; 0 and &lt; 65536 received an invalid value.</p>\n<p><a id=\"ERR_SOCKET_BAD_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_BAD_PORT"
            },
            {
              "textRaw": "ERR_SOCKET_BAD_TYPE",
              "name": "err_socket_bad_type",
              "desc": "<p>An API function expecting a socket type (<code>udp4</code> or <code>udp6</code>) received an invalid\nvalue.</p>\n<p><a id=\"ERR_SOCKET_BUFFER_SIZE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_BAD_TYPE"
            },
            {
              "textRaw": "ERR_SOCKET_BUFFER_SIZE",
              "name": "err_socket_buffer_size",
              "desc": "<p>While using <a href=\"#dgram_dgram_createsocket_options_callback\"><code>dgram.createSocket()</code></a>, the size of the receive or send <code>Buffer</code>\ncould not be determined.</p>\n<p><a id=\"ERR_SOCKET_CANNOT_SEND\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_BUFFER_SIZE"
            },
            {
              "textRaw": "ERR_SOCKET_CANNOT_SEND",
              "name": "err_socket_cannot_send",
              "desc": "<p>Data could be sent on a socket.</p>\n<p><a id=\"ERR_SOCKET_CLOSED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_CANNOT_SEND"
            },
            {
              "textRaw": "ERR_SOCKET_CLOSED",
              "name": "err_socket_closed",
              "desc": "<p>An attempt was made to operate on an already closed socket.</p>\n<p><a id=\"ERR_SOCKET_DGRAM_NOT_RUNNING\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_CLOSED"
            },
            {
              "textRaw": "ERR_SOCKET_DGRAM_NOT_RUNNING",
              "name": "err_socket_dgram_not_running",
              "desc": "<p>A call was made and the UDP subsystem was not running.</p>\n<p><a id=\"ERR_STDERR_CLOSE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_DGRAM_NOT_RUNNING"
            },
            {
              "textRaw": "ERR_STDERR_CLOSE",
              "name": "err_stderr_close",
              "desc": "<p>An attempt was made to close the <code>process.stderr</code> stream. By design, Node.js\ndoes not allow <code>stdout</code> or <code>stderr</code> streams to be closed by user code.</p>\n<p><a id=\"ERR_STDOUT_CLOSE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STDERR_CLOSE"
            },
            {
              "textRaw": "ERR_STDOUT_CLOSE",
              "name": "err_stdout_close",
              "desc": "<p>An attempt was made to close the <code>process.stdout</code> stream. By design, Node.js\ndoes not allow <code>stdout</code> or <code>stderr</code> streams to be closed by user code.</p>\n<p><a id=\"ERR_STREAM_CANNOT_PIPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STDOUT_CLOSE"
            },
            {
              "textRaw": "ERR_STREAM_CANNOT_PIPE",
              "name": "err_stream_cannot_pipe",
              "desc": "<p>An attempt was made to call <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> on a <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> stream.</p>\n<p><a id=\"ERR_STREAM_NULL_VALUES\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_CANNOT_PIPE"
            },
            {
              "textRaw": "ERR_STREAM_NULL_VALUES",
              "name": "err_stream_null_values",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#stream_writable_write_chunk_encoding_callback\"><code>stream.write()</code></a> with a <code>null</code> chunk.</p>\n<p><a id=\"ERR_STREAM_PREMATURE_CLOSE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_NULL_VALUES"
            },
            {
              "textRaw": "ERR_STREAM_PREMATURE_CLOSE",
              "name": "err_stream_premature_close",
              "desc": "<p>An error returned by <code>stream.finished()</code> and <code>stream.pipeline()</code>, when a stream\nor a pipeline ends non gracefully with no explicit error.</p>\n<p><a id=\"ERR_STREAM_PUSH_AFTER_EOF\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_PREMATURE_CLOSE"
            },
            {
              "textRaw": "ERR_STREAM_PUSH_AFTER_EOF",
              "name": "err_stream_push_after_eof",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#stream_readable_push_chunk_encoding\"><code>stream.push()</code></a> after a <code>null</code>(EOF) had been\npushed to the stream.</p>\n<p><a id=\"ERR_STREAM_READ_NOT_IMPLEMENTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_PUSH_AFTER_EOF"
            },
            {
              "textRaw": "ERR_STREAM_READ_NOT_IMPLEMENTED",
              "name": "err_stream_read_not_implemented",
              "desc": "<p>An attempt was made to use a readable stream that did not implement\n<a href=\"stream.html#stream_readable_read_size_1\"><code>readable._read()</code></a>.</p>\n<p><a id=\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_READ_NOT_IMPLEMENTED"
            },
            {
              "textRaw": "ERR_STREAM_UNSHIFT_AFTER_END_EVENT",
              "name": "err_stream_unshift_after_end_event",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#stream_readable_unshift_chunk\"><code>stream.unshift()</code></a> after the <code>&#39;end&#39;</code> event was\nemitted.</p>\n<p><a id=\"ERR_STREAM_WRAP\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_UNSHIFT_AFTER_END_EVENT"
            },
            {
              "textRaw": "ERR_STREAM_WRAP",
              "name": "err_stream_wrap",
              "desc": "<p>Prevents an abort if a string decoder was set on the Socket or if the decoder\nis in <code>objectMode</code>.</p>\n<p>Example</p>\n<pre><code class=\"lang-js\">const Socket = require(&#39;net&#39;).Socket;\nconst instance = new Socket();\n\ninstance.setEncoding(&#39;utf8&#39;);\n</code></pre>\n<p><a id=\"ERR_STREAM_WRITE_AFTER_END\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_WRAP"
            },
            {
              "textRaw": "ERR_STREAM_WRITE_AFTER_END",
              "name": "err_stream_write_after_end",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#stream_writable_write_chunk_encoding_callback\"><code>stream.write()</code></a> after <code>stream.end()</code> has been\ncalled.</p>\n<p><a id=\"ERR_SYSTEM_ERROR\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_WRITE_AFTER_END"
            },
            {
              "textRaw": "ERR_SYSTEM_ERROR",
              "name": "err_system_error",
              "desc": "<p>An unspecified or non-specific system error has occurred within the Node.js\nprocess. The error object will have an <code>err.info</code> object property with\nadditional details.</p>\n<p><a id=\"ERR_STREAM_DESTROYED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SYSTEM_ERROR"
            },
            {
              "textRaw": "ERR_STREAM_DESTROYED",
              "name": "err_stream_destroyed",
              "desc": "<p>A stream method was called that cannot complete because the stream was\ndestroyed using <code>stream.destroy()</code>.</p>\n<p><a id=\"ERR_STRING_TOO_LONG\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_DESTROYED"
            },
            {
              "textRaw": "ERR_STRING_TOO_LONG",
              "name": "err_string_too_long",
              "desc": "<p>An attempt has been made to create a string longer than the maximum allowed\nlength.</p>\n<p><a id=\"ERR_TLS_CERT_ALTNAME_INVALID\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STRING_TOO_LONG"
            },
            {
              "textRaw": "ERR_TLS_CERT_ALTNAME_INVALID",
              "name": "err_tls_cert_altname_invalid",
              "desc": "<p>While using TLS, the hostname/IP of the peer did not match any of the\n<code>subjectAltNames</code> in its certificate.</p>\n<p><a id=\"ERR_TLS_DH_PARAM_SIZE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_CERT_ALTNAME_INVALID"
            },
            {
              "textRaw": "ERR_TLS_DH_PARAM_SIZE",
              "name": "err_tls_dh_param_size",
              "desc": "<p>While using TLS, the parameter offered for the Diffie-Hellman (<code>DH</code>)\nkey-agreement protocol is too small. By default, the key length must be greater\nthan or equal to 1024 bits to avoid vulnerabilities, even though it is strongly\nrecommended to use 2048 bits or larger for stronger security.</p>\n<p><a id=\"ERR_TLS_HANDSHAKE_TIMEOUT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_DH_PARAM_SIZE"
            },
            {
              "textRaw": "ERR_TLS_HANDSHAKE_TIMEOUT",
              "name": "err_tls_handshake_timeout",
              "desc": "<p>A TLS/SSL handshake timed out. In this case, the server must also abort the\nconnection.</p>\n<p><a id=\"ERR_TLS_REQUIRED_SERVER_NAME\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_HANDSHAKE_TIMEOUT"
            },
            {
              "textRaw": "ERR_TLS_REQUIRED_SERVER_NAME",
              "name": "err_tls_required_server_name",
              "desc": "<p>While using TLS, the <code>server.addContext()</code> method was called without providing\na hostname in the first parameter.</p>\n<p><a id=\"ERR_TLS_SESSION_ATTACK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_REQUIRED_SERVER_NAME"
            },
            {
              "textRaw": "ERR_TLS_SESSION_ATTACK",
              "name": "err_tls_session_attack",
              "desc": "<p>An excessive amount of TLS renegotiations is detected, which is a potential\nvector for denial-of-service attacks.</p>\n<p><a id=\"ERR_TLS_SNI_FROM_SERVER\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_SESSION_ATTACK"
            },
            {
              "textRaw": "ERR_TLS_SNI_FROM_SERVER",
              "name": "err_tls_sni_from_server",
              "desc": "<p>An attempt was made to issue Server Name Indication from a TLS server-side\nsocket, which is only valid from a client.</p>\n<p><a id=\"ERR_TLS_RENEGOTIATION_DISABLED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_SNI_FROM_SERVER"
            },
            {
              "textRaw": "ERR_TLS_RENEGOTIATION_DISABLED",
              "name": "err_tls_renegotiation_disabled",
              "desc": "<p>An attempt was made to renegotiate TLS on a socket instance with TLS disabled.</p>\n<p><a id=\"ERR_TRACE_EVENTS_CATEGORY_REQUIRED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_RENEGOTIATION_DISABLED"
            },
            {
              "textRaw": "ERR_TRACE_EVENTS_CATEGORY_REQUIRED",
              "name": "err_trace_events_category_required",
              "desc": "<p>The <code>trace_events.createTracing()</code> method requires at least one trace event\ncategory.</p>\n<p><a id=\"ERR_TRACE_EVENTS_UNAVAILABLE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TRACE_EVENTS_CATEGORY_REQUIRED"
            },
            {
              "textRaw": "ERR_TRACE_EVENTS_UNAVAILABLE",
              "name": "err_trace_events_unavailable",
              "desc": "<p>The <code>trace_events</code> module could not be loaded because Node.js was compiled with\nthe <code>--without-v8-platform</code> flag.</p>\n<p><a id=\"ERR_TRANSFORM_ALREADY_TRANSFORMING\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TRACE_EVENTS_UNAVAILABLE"
            },
            {
              "textRaw": "ERR_TRANSFORM_ALREADY_TRANSFORMING",
              "name": "err_transform_already_transforming",
              "desc": "<p>A <code>Transform</code> stream finished while it was still transforming.</p>\n<p><a id=\"ERR_TRANSFORM_WITH_LENGTH_0\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TRANSFORM_ALREADY_TRANSFORMING"
            },
            {
              "textRaw": "ERR_TRANSFORM_WITH_LENGTH_0",
              "name": "err_transform_with_length_0",
              "desc": "<p>A <code>Transform</code> stream finished with data still in the write buffer.</p>\n<p><a id=\"ERR_TTY_INIT_FAILED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TRANSFORM_WITH_LENGTH_0"
            },
            {
              "textRaw": "ERR_TTY_INIT_FAILED",
              "name": "err_tty_init_failed",
              "desc": "<p>The initialization of a TTY failed due to a system error.</p>\n<p><a id=\"ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TTY_INIT_FAILED"
            },
            {
              "textRaw": "ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET",
              "name": "err_uncaught_exception_capture_already_set",
              "desc": "<p><a href=\"process.html#process_process_setuncaughtexceptioncapturecallback_fn\"><code>process.setUncaughtExceptionCaptureCallback()</code></a> was called twice,\nwithout first resetting the callback to <code>null</code>.</p>\n<p>This error is designed to prevent accidentally overwriting a callback registered\nfrom another module.</p>\n<p><a id=\"ERR_UNESCAPED_CHARACTERS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET"
            },
            {
              "textRaw": "ERR_UNESCAPED_CHARACTERS",
              "name": "err_unescaped_characters",
              "desc": "<p>A string that contained unescaped characters was received.</p>\n<p><a id=\"ERR_UNHANDLED_ERROR\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNESCAPED_CHARACTERS"
            },
            {
              "textRaw": "ERR_UNHANDLED_ERROR",
              "name": "err_unhandled_error",
              "desc": "<p>An unhandled error occurred (for instance, when an <code>&#39;error&#39;</code> event is emitted\nby an <a href=\"events.html\"><code>EventEmitter</code></a> but an <code>&#39;error&#39;</code> handler is not registered).</p>\n<p><a id=\"ERR_UNKNOWN_ENCODING\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNHANDLED_ERROR"
            },
            {
              "textRaw": "ERR_UNKNOWN_ENCODING",
              "name": "err_unknown_encoding",
              "desc": "<p>An invalid or unknown encoding option was passed to an API.</p>\n<p><a id=\"ERR_UNKNOWN_FILE_EXTENSION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNKNOWN_ENCODING"
            },
            {
              "textRaw": "ERR_UNKNOWN_FILE_EXTENSION",
              "name": "err_unknown_file_extension",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>An attempt was made to load a module with an unknown or unsupported file\nextension.</p>\n<p><a id=\"ERR_UNKNOWN_MODULE_FORMAT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNKNOWN_FILE_EXTENSION"
            },
            {
              "textRaw": "ERR_UNKNOWN_MODULE_FORMAT",
              "name": "err_unknown_module_format",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>An attempt was made to load a module with an unknown or unsupported format.</p>\n<p><a id=\"ERR_UNKNOWN_SIGNAL\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNKNOWN_MODULE_FORMAT"
            },
            {
              "textRaw": "ERR_UNKNOWN_SIGNAL",
              "name": "err_unknown_signal",
              "desc": "<p>An invalid or unknown process signal was passed to an API expecting a valid\nsignal (such as <a href=\"child_process.html#child_process_subprocess_kill_signal\"><code>subprocess.kill()</code></a>).</p>\n<p><a id=\"ERR_UNKNOWN_STDIN_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNKNOWN_SIGNAL"
            },
            {
              "textRaw": "ERR_UNKNOWN_STDIN_TYPE",
              "name": "err_unknown_stdin_type",
              "desc": "<p>An attempt was made to launch a Node.js process with an unknown <code>stdin</code> file\ntype. This error is usually an indication of a bug within Node.js itself,\nalthough it is possible for user code to trigger it.</p>\n<p><a id=\"ERR_UNKNOWN_STREAM_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNKNOWN_STDIN_TYPE"
            },
            {
              "textRaw": "ERR_UNKNOWN_STREAM_TYPE",
              "name": "err_unknown_stream_type",
              "desc": "<p>An attempt was made to launch a Node.js process with an unknown <code>stdout</code> or\n<code>stderr</code> file type. This error is usually an indication of a bug within Node.js\nitself, although it is possible for user code to trigger it.</p>\n<p><a id=\"ERR_V8BREAKITERATOR\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNKNOWN_STREAM_TYPE"
            },
            {
              "textRaw": "ERR_V8BREAKITERATOR",
              "name": "err_v8breakiterator",
              "desc": "<p>The V8 <code>BreakIterator</code> API was used but the full ICU data set is not installed.</p>\n<p><a id=\"ERR_VALID_PERFORMANCE_ENTRY_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_V8BREAKITERATOR"
            },
            {
              "textRaw": "ERR_VALID_PERFORMANCE_ENTRY_TYPE",
              "name": "err_valid_performance_entry_type",
              "desc": "<p>While using the Performance Timing API (<code>perf_hooks</code>), no valid performance\nentry types were found.</p>\n<p><a id=\"ERR_VALUE_OUT_OF_RANGE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VALID_PERFORMANCE_ENTRY_TYPE"
            },
            {
              "textRaw": "ERR_VALUE_OUT_OF_RANGE",
              "name": "err_value_out_of_range",
              "desc": "<p>Superseded by <code>ERR_OUT_OF_RANGE</code>.</p>\n<p><a id=\"ERR_VM_MODULE_ALREADY_LINKED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VALUE_OUT_OF_RANGE"
            },
            {
              "textRaw": "ERR_VM_MODULE_ALREADY_LINKED",
              "name": "err_vm_module_already_linked",
              "desc": "<p>The module attempted to be linked is not eligible for linking, because of one of\nthe following reasons:</p>\n<ul>\n<li>It has already been linked (<code>linkingStatus</code> is <code>&#39;linked&#39;</code>)</li>\n<li>It is being linked (<code>linkingStatus</code> is <code>&#39;linking&#39;</code>)</li>\n<li>Linking has failed for this module (<code>linkingStatus</code> is <code>&#39;errored&#39;</code>)</li>\n</ul>\n<p><a id=\"ERR_VM_MODULE_DIFFERENT_CONTEXT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VM_MODULE_ALREADY_LINKED"
            },
            {
              "textRaw": "ERR_VM_MODULE_DIFFERENT_CONTEXT",
              "name": "err_vm_module_different_context",
              "desc": "<p>The module being returned from the linker function is from a different context\nthan the parent module. Linked modules must share the same context.</p>\n<p><a id=\"ERR_VM_MODULE_LINKING_ERRORED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VM_MODULE_DIFFERENT_CONTEXT"
            },
            {
              "textRaw": "ERR_VM_MODULE_LINKING_ERRORED",
              "name": "err_vm_module_linking_errored",
              "desc": "<p>The linker function returned a module for which linking has failed.</p>\n<p><a id=\"ERR_VM_MODULE_NOT_LINKED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VM_MODULE_LINKING_ERRORED"
            },
            {
              "textRaw": "ERR_VM_MODULE_NOT_LINKED",
              "name": "err_vm_module_not_linked",
              "desc": "<p>The module must be successfully linked before instantiation.</p>\n<p><a id=\"ERR_VM_MODULE_NOT_MODULE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VM_MODULE_NOT_LINKED"
            },
            {
              "textRaw": "ERR_VM_MODULE_NOT_MODULE",
              "name": "err_vm_module_not_module",
              "desc": "<p>The fulfilled value of a linking promise is not a <code>vm.Module</code> object.</p>\n<p><a id=\"ERR_VM_MODULE_STATUS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VM_MODULE_NOT_MODULE"
            },
            {
              "textRaw": "ERR_VM_MODULE_STATUS",
              "name": "err_vm_module_status",
              "desc": "<p>The current module&#39;s status does not allow for this operation. The specific\nmeaning of the error depends on the specific function.</p>\n<p><a id=\"ERR_ZLIB_INITIALIZATION_FAILED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VM_MODULE_STATUS"
            },
            {
              "textRaw": "ERR_ZLIB_INITIALIZATION_FAILED",
              "name": "err_zlib_initialization_failed",
              "desc": "<p>Creation of a <a href=\"zlib.html\"><code>zlib</code></a> object failed due to incorrect configuration.</p>\n<!-- [end-include:errors.md] -->\n<!-- [start-include:events.md] -->\n",
              "type": "module",
              "displayName": "ERR_ZLIB_INITIALIZATION_FAILED"
            }
          ],
          "type": "misc",
          "displayName": "Node.js Error Codes"
        }
      ],
      "classes": [
        {
          "textRaw": "Class: Error",
          "type": "class",
          "name": "Error",
          "desc": "<p>A generic JavaScript <code>Error</code> object that does not denote any specific\ncircumstance of why the error occurred. <code>Error</code> objects capture a &quot;stack trace&quot;\ndetailing the point in the code at which the <code>Error</code> was instantiated, and may\nprovide a text description of the error.</p>\n<p>For crypto only, <code>Error</code> objects will include the OpenSSL error stack in a\nseparate property called <code>opensslErrorStack</code> if it is available when the error\nis thrown.</p>\n<p>All errors generated by Node.js, including all System and JavaScript errors,\nwill either be instances of, or inherit from, the <code>Error</code> class.</p>\n",
          "methods": [
            {
              "textRaw": "Error.captureStackTrace(targetObject[, constructorOpt])",
              "type": "method",
              "name": "captureStackTrace",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`targetObject` {Object} ",
                      "name": "targetObject",
                      "type": "Object"
                    },
                    {
                      "textRaw": "`constructorOpt` {Function} ",
                      "name": "constructorOpt",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "targetObject"
                    },
                    {
                      "name": "constructorOpt",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns\na string representing the location in the code at which\n<code>Error.captureStackTrace()</code> was called.</p>\n<pre><code class=\"lang-js\">const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // similar to `new Error().stack`\n</code></pre>\n<p>The first line of the trace will be prefixed with\n<code>${myObject.name}: ${myObject.message}</code>.</p>\n<p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames\nabove <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the\ngenerated stack trace.</p>\n<p>The <code>constructorOpt</code> argument is useful for hiding implementation\ndetails of error generation from an end user. For instance:</p>\n<pre><code class=\"lang-js\">function MyError() {\n  Error.captureStackTrace(this, MyError);\n}\n\n// Without passing MyError to captureStackTrace, the MyError\n// frame would show up in the .stack property. By passing\n// the constructor, we omit that frame, and retain all frames below it.\nnew MyError().stack;\n</code></pre>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`stackTraceLimit` {number} ",
              "type": "number",
              "name": "stackTraceLimit",
              "desc": "<p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames\ncollected by a stack trace (whether generated by <code>new Error().stack</code> or\n<code>Error.captureStackTrace(obj)</code>).</p>\n<p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured <em>after</em> the value has been changed.</p>\n<p>If set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.</p>\n"
            },
            {
              "textRaw": "`code` {string} ",
              "type": "string",
              "name": "code",
              "desc": "<p>The <code>error.code</code> property is a string label that identifies the kind of error.\nSee <a href=\"#nodejs-error-codes\">Node.js Error Codes</a> for details about specific codes.</p>\n"
            },
            {
              "textRaw": "`message` {string} ",
              "type": "string",
              "name": "message",
              "desc": "<p>The <code>error.message</code> property is the string description of the error as set by\ncalling <code>new Error(message)</code>. The <code>message</code> passed to the constructor will also\nappear in the first line of the stack trace of the <code>Error</code>, however changing\nthis property after the <code>Error</code> object is created <em>may not</em> change the first\nline of the stack trace (for example, when <code>error.stack</code> is read before this\nproperty is changed).</p>\n<pre><code class=\"lang-js\">const err = new Error(&#39;The message&#39;);\nconsole.error(err.message);\n// Prints: The message\n</code></pre>\n"
            },
            {
              "textRaw": "`stack` {string} ",
              "type": "string",
              "name": "stack",
              "desc": "<p>The <code>error.stack</code> property is a string describing the point in the code at which\nthe <code>Error</code> was instantiated.</p>\n<pre><code class=\"lang-txt\">Error: Things keep happening!\n   at /home/gbusey/file.js:525:2\n   at Frobnicator.refrobulate (/home/gbusey/business-logic.js:424:21)\n   at Actor.&lt;anonymous&gt; (/home/gbusey/actors.js:400:8)\n   at increaseSynergy (/home/gbusey/actors.js:701:6)\n</code></pre>\n<p>The first line is formatted as <code>&lt;error class name&gt;: &lt;error message&gt;</code>, and\nis followed by a series of stack frames (each line beginning with &quot;at &quot;).\nEach frame describes a call site within the code that lead to the error being\ngenerated. V8 attempts to display a name for each function (by variable name,\nfunction name, or object method name), but occasionally it will not be able to\nfind a suitable name. If V8 cannot determine a name for the function, only\nlocation information will be displayed for that frame. Otherwise, the\ndetermined function name will be displayed with location information appended\nin parentheses.</p>\n<p>Frames are only generated for JavaScript functions. If, for example, execution\nsynchronously passes through a C++ addon function called <code>cheetahify</code> which\nitself calls a JavaScript function, the frame representing the <code>cheetahify</code> call\nwill not be present in the stack traces:</p>\n<pre><code class=\"lang-js\">const cheetahify = require(&#39;./native-binding.node&#39;);\n\nfunction makeFaster() {\n  // cheetahify *synchronously* calls speedy.\n  cheetahify(function speedy() {\n    throw new Error(&#39;oh no!&#39;);\n  });\n}\n\nmakeFaster();\n// will throw:\n//   /home/gbusey/file.js:6\n//       throw new Error(&#39;oh no!&#39;);\n//           ^\n//   Error: oh no!\n//       at speedy (/home/gbusey/file.js:6:11)\n//       at makeFaster (/home/gbusey/file.js:5:3)\n//       at Object.&lt;anonymous&gt; (/home/gbusey/file.js:10:1)\n//       at Module._compile (module.js:456:26)\n//       at Object.Module._extensions..js (module.js:474:10)\n//       at Module.load (module.js:356:32)\n//       at Function.Module._load (module.js:312:12)\n//       at Function.Module.runMain (module.js:497:10)\n//       at startup (node.js:119:16)\n//       at node.js:906:3\n</code></pre>\n<p>The location information will be one of:</p>\n<ul>\n<li><code>native</code>, if the frame represents a call internal to V8 (as in <code>[].forEach</code>).</li>\n<li><code>plain-filename.js:line:column</code>, if the frame represents a call internal\n to Node.js.</li>\n<li><code>/absolute/path/to/file.js:line:column</code>, if the frame represents a call in\na user program, or its dependencies.</li>\n</ul>\n<p>The string representing the stack trace is lazily generated when the\n<code>error.stack</code> property is <strong>accessed</strong>.</p>\n<p>The number of frames captured by the stack trace is bounded by the smaller of\n<code>Error.stackTraceLimit</code> or the number of available frames on the current event\nloop tick.</p>\n<p>System-level errors are generated as augmented <code>Error</code> instances, which are\ndetailed <a href=\"#errors_system_errors\">here</a>.</p>\n"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`message` {string} ",
                  "name": "message",
                  "type": "string"
                }
              ],
              "desc": "<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the\nprovided text message. If an object is passed as <code>message</code>, the text message\nis generated by calling <code>message.toString()</code>. The <code>error.stack</code> property will\nrepresent the point in the code at which <code>new Error()</code> was called. Stack traces\nare dependent on <a href=\"https://github.com/v8/v8/wiki/Stack-Trace-API\">V8&#39;s stack trace API</a>. Stack traces extend only to either\n(a) the beginning of <em>synchronous code execution</em>, or (b) the number of frames\ngiven by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>\n"
            },
            {
              "params": [
                {
                  "name": "message"
                }
              ],
              "desc": "<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the\nprovided text message. If an object is passed as <code>message</code>, the text message\nis generated by calling <code>message.toString()</code>. The <code>error.stack</code> property will\nrepresent the point in the code at which <code>new Error()</code> was called. Stack traces\nare dependent on <a href=\"https://github.com/v8/v8/wiki/Stack-Trace-API\">V8&#39;s stack trace API</a>. Stack traces extend only to either\n(a) the beginning of <em>synchronous code execution</em>, or (b) the number of frames\ngiven by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: AssertionError",
          "type": "class",
          "name": "AssertionError",
          "desc": "<p>A subclass of <code>Error</code> that indicates the failure of an assertion. For details,\nsee <a href=\"assert.html#assert_class_assert_assertionerror\"><code>Class: assert.AssertionError</code></a>.</p>\n"
        },
        {
          "textRaw": "Class: RangeError",
          "type": "class",
          "name": "RangeError",
          "desc": "<p>A subclass of <code>Error</code> that indicates that a provided argument was not within the\nset or range of acceptable values for a function; whether that is a numeric\nrange, or outside the set of options for a given function parameter.</p>\n<pre><code class=\"lang-js\">require(&#39;net&#39;).connect(-1);\n// throws &quot;RangeError: &quot;port&quot; option should be &gt;= 0 and &lt; 65536: -1&quot;\n</code></pre>\n<p>Node.js will generate and throw <code>RangeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>\n"
        },
        {
          "textRaw": "Class: ReferenceError",
          "type": "class",
          "name": "ReferenceError",
          "desc": "<p>A subclass of <code>Error</code> that indicates that an attempt is being made to access a\nvariable that is not defined. Such errors commonly indicate typos in code, or\nan otherwise broken program.</p>\n<p>While client code may generate and propagate these errors, in practice, only V8\nwill do so.</p>\n<pre><code class=\"lang-js\">doesNotExist;\n// throws ReferenceError, doesNotExist is not a variable in this program.\n</code></pre>\n<p>Unless an application is dynamically generating and running code,\n<code>ReferenceError</code> instances should always be considered a bug in the code\nor its dependencies.</p>\n"
        },
        {
          "textRaw": "Class: SyntaxError",
          "type": "class",
          "name": "SyntaxError",
          "desc": "<p>A subclass of <code>Error</code> that indicates that a program is not valid JavaScript.\nThese errors may only be generated and propagated as a result of code\nevaluation. Code evaluation may happen as a result of <code>eval</code>, <code>Function</code>,\n<code>require</code>, or <a href=\"vm.html\">vm</a>. These errors are almost always indicative of a broken\nprogram.</p>\n<pre><code class=\"lang-js\">try {\n  require(&#39;vm&#39;).runInThisContext(&#39;binary ! isNotOk&#39;);\n} catch (err) {\n  // err will be a SyntaxError\n}\n</code></pre>\n<p><code>SyntaxError</code> instances are unrecoverable in the context that created them –\nthey may only be caught by other contexts.</p>\n"
        },
        {
          "textRaw": "Class: TypeError",
          "type": "class",
          "name": "TypeError",
          "desc": "<p>A subclass of <code>Error</code> that indicates that a provided argument is not an\nallowable type. For example, passing a function to a parameter which expects a\nstring would be considered a <code>TypeError</code>.</p>\n<pre><code class=\"lang-js\">require(&#39;url&#39;).parse(() =&gt; { });\n// throws TypeError, since it expected a string\n</code></pre>\n<p>Node.js will generate and throw <code>TypeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>\n"
        }
      ]
    },
    {
      "textRaw": "Global Objects",
      "name": "Global Objects",
      "introduced_in": "v0.10.0",
      "type": "misc",
      "desc": "<p>These objects are available in all modules. The following variables may appear\nto be global but are not. They exist only in the scope of modules, see the\n<a href=\"modules.html\">module system documentation</a>:</p>\n<ul>\n<li><a href=\"#modules_dirname\"><code>__dirname</code></a></li>\n<li><a href=\"#modules_filename\"><code>__filename</code></a></li>\n<li><a href=\"modules.html#modules_exports\"><code>exports</code></a></li>\n<li><a href=\"modules.html#modules_module\"><code>module</code></a></li>\n<li><a href=\"globals.html#globals_require\"><code>require()</code></a></li>\n</ul>\n<p>The objects listed here are specific to Node.js. There are a number of\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\">built-in objects</a> that are part of the JavaScript language itself, which are\nalso globally accessible.</p>\n",
      "globals": [
        {
          "textRaw": "Class: Buffer",
          "type": "global",
          "name": "Buffer",
          "meta": {
            "added": [
              "v0.1.103"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li>{Function}</li>\n</ul>\n<p>Used to handle binary data. See the <a href=\"buffer.html\">buffer section</a>.</p>\n"
        },
        {
          "textRaw": "clearImmediate(immediateObject)",
          "type": "global",
          "name": "clearImmediate",
          "meta": {
            "added": [
              "v0.9.1"
            ],
            "changes": []
          },
          "desc": "<p><a href=\"timers.html#timers_clearimmediate_immediate\"><code>clearImmediate</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n"
        },
        {
          "textRaw": "clearInterval(intervalObject)",
          "type": "global",
          "name": "clearInterval",
          "meta": {
            "added": [
              "v0.0.1"
            ],
            "changes": []
          },
          "desc": "<p><a href=\"timers.html#timers_clearinterval_timeout\"><code>clearInterval</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n"
        },
        {
          "textRaw": "clearTimeout(timeoutObject)",
          "type": "global",
          "name": "clearTimeout",
          "meta": {
            "added": [
              "v0.0.1"
            ],
            "changes": []
          },
          "desc": "<p><a href=\"timers.html#timers_cleartimeout_timeout\"><code>clearTimeout</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n"
        },
        {
          "textRaw": "console",
          "name": "console",
          "meta": {
            "added": [
              "v0.1.100"
            ],
            "changes": []
          },
          "type": "global",
          "desc": "<ul>\n<li>{Object}</li>\n</ul>\n<p>Used to print to stdout and stderr. See the <a href=\"console.html\"><code>console</code></a> section.</p>\n"
        },
        {
          "textRaw": "global",
          "name": "global",
          "meta": {
            "added": [
              "v0.1.27"
            ],
            "changes": []
          },
          "type": "global",
          "desc": "<ul>\n<li>{Object} The global namespace object.</li>\n</ul>\n<p>In browsers, the top-level scope is the global scope. This means that\nwithin the browser <code>var something</code> will define a new global variable. In\nNode.js this is different. The top-level scope is not the global scope;\n<code>var something</code> inside a Node.js module will be local to that module.</p>\n"
        },
        {
          "textRaw": "process",
          "name": "process",
          "meta": {
            "added": [
              "v0.1.7"
            ],
            "changes": []
          },
          "type": "global",
          "desc": "<ul>\n<li>{Object}</li>\n</ul>\n<p>The process object. See the <a href=\"process.html#process_process\"><code>process</code> object</a> section.</p>\n"
        },
        {
          "textRaw": "setImmediate(callback[, ...args])",
          "type": "global",
          "name": "setImmediate",
          "meta": {
            "added": [
              "v0.9.1"
            ],
            "changes": []
          },
          "desc": "<p><a href=\"timers.html#timers_setimmediate_callback_args\"><code>setImmediate</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n"
        },
        {
          "textRaw": "setInterval(callback, delay[, ...args])",
          "type": "global",
          "name": "setInterval",
          "meta": {
            "added": [
              "v0.0.1"
            ],
            "changes": []
          },
          "desc": "<p><a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n"
        },
        {
          "textRaw": "setTimeout(callback, delay[, ...args])",
          "type": "global",
          "name": "setTimeout",
          "meta": {
            "added": [
              "v0.0.1"
            ],
            "changes": []
          },
          "desc": "<p><a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n"
        },
        {
          "textRaw": "URL",
          "name": "URL",
          "meta": {
            "added": [
              "v10.0.0"
            ],
            "changes": []
          },
          "type": "global",
          "desc": "<p>The WHATWG <code>URL</code> class. See the <a href=\"url.html#url_class_url\"><code>URL</code></a> section.</p>\n"
        },
        {
          "textRaw": "URLSearchParams",
          "name": "URLSearchParams",
          "meta": {
            "added": [
              "v10.0.0"
            ],
            "changes": []
          },
          "type": "global",
          "desc": "<p>The WHATWG <code>URLSearchParams</code> class. See the <a href=\"#url_class_urlsearchparams\"><code>URLSearchParams</code></a> section.</p>\n<!-- [end-include:globals.md] -->\n<!-- [start-include:http.md] -->\n"
        },
        {
          "textRaw": "Process",
          "name": "Process",
          "introduced_in": "v0.10.0",
          "type": "global",
          "desc": "<p>The <code>process</code> object is a <code>global</code> that provides information about, and control\nover, the current Node.js process. As a global, it is always available to\nNode.js applications without using <code>require()</code>.</p>\n",
          "modules": [
            {
              "textRaw": "Process Events",
              "name": "process_events",
              "desc": "<p>The <code>process</code> object is an instance of <a href=\"events.html\"><code>EventEmitter</code></a>.</p>\n",
              "events": [
                {
                  "textRaw": "Event: 'beforeExit'",
                  "type": "event",
                  "name": "beforeExit",
                  "meta": {
                    "added": [
                      "v0.11.12"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;beforeExit&#39;</code> event is emitted when Node.js empties its event loop and has\nno additional work to schedule. Normally, the Node.js process will exit when\nthere is no work scheduled, but a listener registered on the <code>&#39;beforeExit&#39;</code>\nevent can make asynchronous calls, and thereby cause the Node.js process to\ncontinue.</p>\n<p>The listener callback function is invoked with the value of\n<a href=\"#process_process_exitcode\"><code>process.exitCode</code></a> passed as the only argument.</p>\n<p>The <code>&#39;beforeExit&#39;</code> event is <em>not</em> emitted for conditions causing explicit\ntermination, such as calling <a href=\"#process_process_exit_code\"><code>process.exit()</code></a> or uncaught exceptions.</p>\n<p>The <code>&#39;beforeExit&#39;</code> should <em>not</em> be used as an alternative to the <code>&#39;exit&#39;</code> event\nunless the intention is to schedule additional work.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'disconnect'",
                  "type": "event",
                  "name": "disconnect",
                  "meta": {
                    "added": [
                      "v0.7.7"
                    ],
                    "changes": []
                  },
                  "desc": "<p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process.html\">Child Process</a>\nand <a href=\"cluster.html\">Cluster</a> documentation), the <code>&#39;disconnect&#39;</code> event will be emitted when\nthe IPC channel is closed.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'exit'",
                  "type": "event",
                  "name": "exit",
                  "meta": {
                    "added": [
                      "v0.1.7"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>The <code>&#39;exit&#39;</code> event is emitted when the Node.js process is about to exit as a\nresult of either:</p>\n<ul>\n<li>The <code>process.exit()</code> method being called explicitly;</li>\n<li>The Node.js event loop no longer having any additional work to perform.</li>\n</ul>\n<p>There is no way to prevent the exiting of the event loop at this point, and once\nall <code>&#39;exit&#39;</code> listeners have finished running the Node.js process will terminate.</p>\n<p>The listener callback function is invoked with the exit code specified either\nby the <a href=\"#process_process_exitcode\"><code>process.exitCode</code></a> property, or the <code>exitCode</code> argument passed to the\n<a href=\"#process_process_exit_code\"><code>process.exit()</code></a> method.</p>\n<pre><code class=\"lang-js\">process.on(&#39;exit&#39;, (code) =&gt; {\n  console.log(`About to exit with code: ${code}`);\n});\n</code></pre>\n<p>Listener functions <strong>must</strong> only perform <strong>synchronous</strong> operations. The Node.js\nprocess will exit immediately after calling the <code>&#39;exit&#39;</code> event listeners\ncausing any additional work still queued in the event loop to be abandoned.\nIn the following example, for instance, the timeout will never occur:</p>\n<pre><code class=\"lang-js\">process.on(&#39;exit&#39;, (code) =&gt; {\n  setTimeout(() =&gt; {\n    console.log(&#39;This will not run&#39;);\n  }, 0);\n});\n</code></pre>\n"
                },
                {
                  "textRaw": "Event: 'message'",
                  "type": "event",
                  "name": "message",
                  "meta": {
                    "added": [
                      "v0.5.10"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process.html\">Child Process</a>\nand <a href=\"cluster.html\">Cluster</a> documentation), the <code>&#39;message&#39;</code> event is emitted whenever a\nmessage sent by a parent process using <a href=\"child_process.html#child_process_subprocess_send_message_sendhandle_options_callback\"><code>childprocess.send()</code></a> is received by\nthe child process.</p>\n<p>The message goes through serialization and parsing. The resulting message might\nnot be the same as what is originally sent.</p>\n"
                },
                {
                  "textRaw": "Event: 'rejectionHandled'",
                  "type": "event",
                  "name": "rejectionHandled",
                  "meta": {
                    "added": [
                      "v1.4.1"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>The <code>&#39;rejectionHandled&#39;</code> event is emitted whenever a <code>Promise</code> has been rejected\nand an error handler was attached to it (using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>promise.catch()</code></a>, for\nexample) later than one turn of the Node.js event loop.</p>\n<p>The <code>Promise</code> object would have previously been emitted in an\n<code>&#39;unhandledRejection&#39;</code> event, but during the course of processing gained a\nrejection handler.</p>\n<p>There is no notion of a top level for a <code>Promise</code> chain at which rejections can\nalways be handled. Being inherently asynchronous in nature, a <code>Promise</code>\nrejection can be handled at a future point in time — possibly much later than\nthe event loop turn it takes for the <code>&#39;unhandledRejection&#39;</code> event to be emitted.</p>\n<p>Another way of stating this is that, unlike in synchronous code where there is\nan ever-growing list of unhandled exceptions, with Promises there can be a\ngrowing-and-shrinking list of unhandled rejections.</p>\n<p>In synchronous code, the <code>&#39;uncaughtException&#39;</code> event is emitted when the list of\nunhandled exceptions grows.</p>\n<p>In asynchronous code, the <code>&#39;unhandledRejection&#39;</code> event is emitted when the list\nof unhandled rejections grows, and the <code>&#39;rejectionHandled&#39;</code> event is emitted\nwhen the list of unhandled rejections shrinks.</p>\n<pre><code class=\"lang-js\">const unhandledRejections = new Map();\nprocess.on(&#39;unhandledRejection&#39;, (reason, promise) =&gt; {\n  unhandledRejections.set(promise, reason);\n});\nprocess.on(&#39;rejectionHandled&#39;, (promise) =&gt; {\n  unhandledRejections.delete(promise);\n});\n</code></pre>\n<p>In this example, the <code>unhandledRejections</code> <code>Map</code> will grow and shrink over time,\nreflecting rejections that start unhandled and then become handled. It is\npossible to record such errors in an error log, either periodically (which is\nlikely best for long-running application) or upon process exit (which is likely\nmost convenient for scripts).</p>\n"
                },
                {
                  "textRaw": "Event: 'uncaughtException'",
                  "type": "event",
                  "name": "uncaughtException",
                  "meta": {
                    "added": [
                      "v0.1.18"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;uncaughtException&#39;</code> event is emitted when an uncaught JavaScript\nexception bubbles all the way back to the event loop. By default, Node.js\nhandles such exceptions by printing the stack trace to <code>stderr</code> and exiting.\nAdding a handler for the <code>&#39;uncaughtException&#39;</code> event overrides this default\nbehavior.</p>\n<p>The listener function is called with the <code>Error</code> object passed as the only\nargument.</p>\n<pre><code class=\"lang-js\">process.on(&#39;uncaughtException&#39;, (err) =&gt; {\n  fs.writeSync(1, `Caught exception: ${err}\\n`);\n});\n\nsetTimeout(() =&gt; {\n  console.log(&#39;This will still run.&#39;);\n}, 500);\n\n// Intentionally cause an exception, but don&#39;t catch it.\nnonexistentFunc();\nconsole.log(&#39;This will not run.&#39;);\n</code></pre>\n",
                  "modules": [
                    {
                      "textRaw": "Warning: Using `'uncaughtException'` correctly",
                      "name": "warning:_using_`'uncaughtexception'`_correctly",
                      "desc": "<p>Note that <code>&#39;uncaughtException&#39;</code> is a crude mechanism for exception handling\nintended to be used only as a last resort. The event <em>should not</em> be used as\nan equivalent to <code>On Error Resume Next</code>. Unhandled exceptions inherently mean\nthat an application is in an undefined state. Attempting to resume application\ncode without properly recovering from the exception can cause additional\nunforeseen and unpredictable issues.</p>\n<p>Exceptions thrown from within the event handler will not be caught. Instead the\nprocess will exit with a non-zero exit code and the stack trace will be printed.\nThis is to avoid infinite recursion.</p>\n<p>Attempting to resume normally after an uncaught exception can be similar to\npulling out of the power cord when upgrading a computer — nine out of ten\ntimes nothing happens - but the 10th time, the system becomes corrupted.</p>\n<p>The correct use of <code>&#39;uncaughtException&#39;</code> is to perform synchronous cleanup\nof allocated resources (e.g. file descriptors, handles, etc) before shutting\ndown the process. <strong>It is not safe to resume normal operation after\n<code>&#39;uncaughtException&#39;</code>.</strong></p>\n<p>To restart a crashed application in a more reliable way, whether\n<code>&#39;uncaughtException&#39;</code> is emitted or not, an external monitor should be employed\nin a separate process to detect application failures and recover or restart as\nneeded.</p>\n",
                      "type": "module",
                      "displayName": "Warning: Using `'uncaughtException'` correctly"
                    }
                  ],
                  "params": []
                },
                {
                  "textRaw": "Event: 'unhandledRejection'",
                  "type": "event",
                  "name": "unhandledRejection",
                  "meta": {
                    "added": [
                      "v1.4.1"
                    ],
                    "changes": [
                      {
                        "version": "v7.0.0",
                        "pr-url": "https://github.com/nodejs/node/pull/8217",
                        "description": "Not handling `Promise` rejections has been deprecated."
                      },
                      {
                        "version": "v6.6.0",
                        "pr-url": "https://github.com/nodejs/node/pull/8223",
                        "description": "Unhandled `Promise` rejections will now emit a process warning."
                      }
                    ]
                  },
                  "desc": "<p>The <code>&#39;unhandledRejection&#39;</code> event is emitted whenever a <code>Promise</code> is rejected and\nno error handler is attached to the promise within a turn of the event loop.\nWhen programming with Promises, exceptions are encapsulated as &quot;rejected\npromises&quot;. Rejections can be caught and handled using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>promise.catch()</code></a> and\nare propagated through a <code>Promise</code> chain. The <code>&#39;unhandledRejection&#39;</code> event is\nuseful for detecting and keeping track of promises that were rejected whose\nrejections have not yet been handled.</p>\n<p>The listener function is called with the following arguments:</p>\n<ul>\n<li><code>reason</code> {Error|any} The object with which the promise was rejected\n(typically an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object).</li>\n<li><code>p</code> the <code>Promise</code> that was rejected.</li>\n</ul>\n<pre><code class=\"lang-js\">process.on(&#39;unhandledRejection&#39;, (reason, p) =&gt; {\n  console.log(&#39;Unhandled Rejection at:&#39;, p, &#39;reason:&#39;, reason);\n  // application specific logging, throwing an error, or other logic here\n});\n\nsomePromise.then((res) =&gt; {\n  return reportToUser(JSON.pasre(res)); // note the typo (`pasre`)\n}); // no `.catch()` or `.then()`\n</code></pre>\n<p>The following will also trigger the <code>&#39;unhandledRejection&#39;</code> event to be\nemitted:</p>\n<pre><code class=\"lang-js\">function SomeResource() {\n  // Initially set the loaded status to a rejected promise\n  this.loaded = Promise.reject(new Error(&#39;Resource not yet loaded!&#39;));\n}\n\nconst resource = new SomeResource();\n// no .catch or .then on resource.loaded for at least a turn\n</code></pre>\n<p>In this example case, it is possible to track the rejection as a developer error\nas would typically be the case for other <code>&#39;unhandledRejection&#39;</code> events. To\naddress such failures, a non-operational\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>.catch(() =&gt; { })</code></a> handler may be attached to\n<code>resource.loaded</code>, which would prevent the <code>&#39;unhandledRejection&#39;</code> event from\nbeing emitted. Alternatively, the <a href=\"#process_event_rejectionhandled\"><code>&#39;rejectionHandled&#39;</code></a> event may be used.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'warning'",
                  "type": "event",
                  "name": "warning",
                  "meta": {
                    "added": [
                      "v6.0.0"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>The <code>&#39;warning&#39;</code> event is emitted whenever Node.js emits a process warning.</p>\n<p>A process warning is similar to an error in that it describes exceptional\nconditions that are being brought to the user&#39;s attention. However, warnings\nare not part of the normal Node.js and JavaScript error handling flow.\nNode.js can emit warnings whenever it detects bad coding practices that could\nlead to sub-optimal application performance, bugs, or security vulnerabilities.</p>\n<pre><code class=\"lang-js\">process.on(&#39;warning&#39;, (warning) =&gt; {\n  console.warn(warning.name);    // Print the warning name\n  console.warn(warning.message); // Print the warning message\n  console.warn(warning.stack);   // Print the stack trace\n});\n</code></pre>\n<p>By default, Node.js will print process warnings to <code>stderr</code>. The <code>--no-warnings</code>\ncommand-line option can be used to suppress the default console output but the\n<code>&#39;warning&#39;</code> event will still be emitted by the <code>process</code> object.</p>\n<p>The following example illustrates the warning that is printed to <code>stderr</code> when\ntoo many listeners have been added to an event:</p>\n<pre><code class=\"lang-txt\">$ node\n&gt; events.defaultMaxListeners = 1;\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\n&gt; (node:38638) MaxListenersExceededWarning: Possible EventEmitter memory leak\ndetected. 2 foo listeners added. Use emitter.setMaxListeners() to increase limit\n</code></pre>\n<p>In contrast, the following example turns off the default warning output and\nadds a custom handler to the <code>&#39;warning&#39;</code> event:</p>\n<pre><code class=\"lang-txt\">$ node --no-warnings\n&gt; const p = process.on(&#39;warning&#39;, (warning) =&gt; console.warn(&#39;Do not do that!&#39;));\n&gt; events.defaultMaxListeners = 1;\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\n&gt; Do not do that!\n</code></pre>\n<p>The <code>--trace-warnings</code> command-line option can be used to have the default\nconsole output for warnings include the full stack trace of the warning.</p>\n<p>Launching Node.js using the <code>--throw-deprecation</code> command line flag will\ncause custom deprecation warnings to be thrown as exceptions.</p>\n<p>Using the <code>--trace-deprecation</code> command line flag will cause the custom\ndeprecation to be printed to <code>stderr</code> along with the stack trace.</p>\n<p>Using the <code>--no-deprecation</code> command line flag will suppress all reporting\nof the custom deprecation.</p>\n<p>The <code>*-deprecation</code> command line flags only affect warnings that use the name\n<code>&#39;DeprecationWarning&#39;</code>.</p>\n",
                  "modules": [
                    {
                      "textRaw": "Emitting custom warnings",
                      "name": "emitting_custom_warnings",
                      "desc": "<p>See the <a href=\"#process_process_emitwarning_warning_type_code_ctor\"><code>process.emitWarning()</code></a> method for issuing\ncustom or application-specific warnings.</p>\n",
                      "type": "module",
                      "displayName": "Emitting custom warnings"
                    }
                  ]
                },
                {
                  "textRaw": "Signal Events",
                  "name": "SIGINT, SIGHUP, etc.",
                  "type": "event",
                  "desc": "<p>Signal events will be emitted when the Node.js process receives a signal. Please\nrefer to signal(7) for a listing of standard POSIX signal names such as\n<code>&#39;SIGINT&#39;</code>, <code>&#39;SIGHUP&#39;</code>, etc.</p>\n<p>The signal handler will receive the signal&#39;s name (<code>&#39;SIGINT&#39;</code>,\n <code>&#39;SIGTERM&#39;</code>, etc.) as the first argument.</p>\n<p>The name of each event will be the uppercase common name for the signal (e.g.\n<code>&#39;SIGINT&#39;</code> for <code>SIGINT</code> signals).</p>\n<pre><code class=\"lang-js\">// Begin reading from stdin so the process does not exit.\nprocess.stdin.resume();\n\nprocess.on(&#39;SIGINT&#39;, () =&gt; {\n  console.log(&#39;Received SIGINT. Press Control-D to exit.&#39;);\n});\n\n// Using a single function to handle multiple signals\nfunction handle(signal) {\n  console.log(`Received ${signal}`);\n}\n\nprocess.on(&#39;SIGINT&#39;, handle);\nprocess.on(&#39;SIGTERM&#39;, handle);\n</code></pre>\n<ul>\n<li><code>&#39;SIGUSR1&#39;</code> is reserved by Node.js to start the <a href=\"debugger.html\">debugger</a>. It&#39;s possible to\ninstall a listener but doing so might interfere with the debugger.</li>\n<li><code>&#39;SIGTERM&#39;</code> and <code>&#39;SIGINT&#39;</code> have default handlers on non-Windows platforms that\nreset the terminal mode before exiting with code <code>128 + signal number</code>. If one\nof these signals has a listener installed, its default behavior will be\nremoved (Node.js will no longer exit).</li>\n<li><code>&#39;SIGPIPE&#39;</code> is ignored by default. It can have a listener installed.</li>\n<li><code>&#39;SIGHUP&#39;</code> is generated on Windows when the console window is closed, and on\nother platforms under various similar conditions, see signal(7). It can have a\nlistener installed, however Node.js will be unconditionally terminated by\nWindows about 10 seconds later. On non-Windows platforms, the default\nbehavior of <code>SIGHUP</code> is to terminate Node.js, but once a listener has been\ninstalled its default behavior will be removed.</li>\n<li><code>&#39;SIGTERM&#39;</code> is not supported on Windows, it can be listened on.</li>\n<li><code>&#39;SIGINT&#39;</code> from the terminal is supported on all platforms, and can usually be\ngenerated with <code>&lt;Ctrl&gt;+C</code> (though this may be configurable). It is not\ngenerated when terminal raw mode is enabled.</li>\n<li><code>&#39;SIGBREAK&#39;</code> is delivered on Windows when <code>&lt;Ctrl&gt;+&lt;Break&gt;</code> is pressed, on\nnon-Windows platforms it can be listened on, but there is no way to send or\ngenerate it.</li>\n<li><code>&#39;SIGWINCH&#39;</code> is delivered when the console has been resized. On Windows, this\nwill only happen on write to the console when the cursor is being moved, or\nwhen a readable tty is used in raw mode.</li>\n<li><code>&#39;SIGKILL&#39;</code> cannot have a listener installed, it will unconditionally\nterminate Node.js on all platforms.</li>\n<li><code>&#39;SIGSTOP&#39;</code> cannot have a listener installed.</li>\n<li><code>&#39;SIGBUS&#39;</code>, <code>&#39;SIGFPE&#39;</code>, <code>&#39;SIGSEGV&#39;</code> and <code>&#39;SIGILL&#39;</code>, when not raised\n artificially using kill(2), inherently leave the process in a state from\n which it is not safe to attempt to call JS listeners. Doing so might lead to\n the process hanging in an endless loop, since listeners attached using\n <code>process.on()</code> are called asynchronously and therefore unable to correct the\n underlying problem.</li>\n</ul>\n<p>Windows does not support sending signals, but Node.js offers some emulation\nwith <a href=\"#process_process_kill_pid_signal\"><code>process.kill()</code></a>, and <a href=\"child_process.html#child_process_subprocess_kill_signal\"><code>subprocess.kill()</code></a>. Sending signal <code>0</code> can\nbe used to test for the existence of a process. Sending <code>SIGINT</code>, <code>SIGTERM</code>,\nand <code>SIGKILL</code> cause the unconditional termination of the target process.</p>\n",
                  "params": []
                }
              ],
              "type": "module",
              "displayName": "Process Events"
            },
            {
              "textRaw": "Exit Codes",
              "name": "exit_codes",
              "desc": "<p>Node.js will normally exit with a <code>0</code> status code when no more async\noperations are pending. The following status codes are used in other\ncases:</p>\n<ul>\n<li><code>1</code> <strong>Uncaught Fatal Exception</strong> - There was an uncaught exception,\nand it was not handled by a domain or an <a href=\"process.html#process_event_uncaughtexception\"><code>&#39;uncaughtException&#39;</code></a> event\nhandler.</li>\n<li><code>2</code> - Unused (reserved by Bash for builtin misuse)</li>\n<li><code>3</code> <strong>Internal JavaScript Parse Error</strong> - The JavaScript source code\ninternal in Node.js&#39;s bootstrapping process caused a parse error. This\nis extremely rare, and generally can only happen during development\nof Node.js itself.</li>\n<li><code>4</code> <strong>Internal JavaScript Evaluation Failure</strong> - The JavaScript\nsource code internal in Node.js&#39;s bootstrapping process failed to\nreturn a function value when evaluated. This is extremely rare, and\ngenerally can only happen during development of Node.js itself.</li>\n<li><code>5</code> <strong>Fatal Error</strong> - There was a fatal unrecoverable error in V8.\nTypically a message will be printed to stderr with the prefix <code>FATAL\nERROR</code>.</li>\n<li><code>6</code> <strong>Non-function Internal Exception Handler</strong> - There was an\nuncaught exception, but the internal fatal exception handler\nfunction was somehow set to a non-function, and could not be called.</li>\n<li><code>7</code> <strong>Internal Exception Handler Run-Time Failure</strong> - There was an\nuncaught exception, and the internal fatal exception handler\nfunction itself threw an error while attempting to handle it. This\ncan happen, for example, if an <a href=\"process.html#process_event_uncaughtexception\"><code>&#39;uncaughtException&#39;</code></a> or\n<code>domain.on(&#39;error&#39;)</code> handler throws an error.</li>\n<li><code>8</code> - Unused. In previous versions of Node.js, exit code 8 sometimes\nindicated an uncaught exception.</li>\n<li><code>9</code> - <strong>Invalid Argument</strong> - Either an unknown option was specified,\nor an option requiring a value was provided without a value.</li>\n<li><code>10</code> <strong>Internal JavaScript Run-Time Failure</strong> - The JavaScript\nsource code internal in Node.js&#39;s bootstrapping process threw an error\nwhen the bootstrapping function was called. This is extremely rare,\nand generally can only happen during development of Node.js itself.</li>\n<li><code>12</code> <strong>Invalid Debug Argument</strong> - The <code>--inspect</code> and/or <code>--inspect-brk</code>\noptions were set, but the port number chosen was invalid or unavailable.</li>\n<li><code>&gt;128</code> <strong>Signal Exits</strong> - If Node.js receives a fatal signal such as\n<code>SIGKILL</code> or <code>SIGHUP</code>, then its exit code will be <code>128</code> plus the\nvalue of the signal code. This is a standard POSIX practice, since\nexit codes are defined to be 7-bit integers, and signal exits set\nthe high-order bit, and then contain the value of the signal code.\nFor example, signal <code>SIGABRT</code> has value <code>6</code>, so the expected exit\ncode will be <code>128</code> + <code>6</code>, or <code>134</code>.</li>\n</ul>\n<!-- [end-include:process.md] -->\n<!-- [start-include:punycode.md] -->\n",
              "type": "module",
              "displayName": "Exit Codes"
            }
          ],
          "methods": [
            {
              "textRaw": "process.abort()",
              "type": "method",
              "name": "abort",
              "meta": {
                "added": [
                  "v0.7.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.abort()</code> method causes the Node.js process to exit immediately and\ngenerate a core file.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "process.chdir(directory)",
              "type": "method",
              "name": "chdir",
              "meta": {
                "added": [
                  "v0.1.17"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`directory` {string} ",
                      "name": "directory",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "directory"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.chdir()</code> method changes the current working directory of the\nNode.js process or throws an exception if doing so fails (for instance, if\nthe specified <code>directory</code> does not exist).</p>\n<pre><code class=\"lang-js\">console.log(`Starting directory: ${process.cwd()}`);\ntry {\n  process.chdir(&#39;/tmp&#39;);\n  console.log(`New directory: ${process.cwd()}`);\n} catch (err) {\n  console.error(`chdir: ${err}`);\n}\n</code></pre>\n"
            },
            {
              "textRaw": "process.cpuUsage([previousValue])",
              "type": "method",
              "name": "cpuUsage",
              "meta": {
                "added": [
                  "v6.1.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "options": [
                      {
                        "textRaw": "`user` {integer} ",
                        "name": "user",
                        "type": "integer"
                      },
                      {
                        "textRaw": "`system` {integer} ",
                        "name": "system",
                        "type": "integer"
                      }
                    ],
                    "name": "return",
                    "type": "Object"
                  },
                  "params": [
                    {
                      "textRaw": "`previousValue` {Object} A previous return value from calling `process.cpuUsage()` ",
                      "name": "previousValue",
                      "type": "Object",
                      "desc": "A previous return value from calling `process.cpuUsage()`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "previousValue",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.cpuUsage()</code> method returns the user and system CPU time usage of\nthe current process, in an object with properties <code>user</code> and <code>system</code>, whose\nvalues are microsecond values (millionth of a second). These values measure time\nspent in user and system code respectively, and may end up being greater than\nactual elapsed time if multiple CPU cores are performing work for this process.</p>\n<p>The result of a previous call to <code>process.cpuUsage()</code> can be passed as the\nargument to the function, to get a diff reading.</p>\n<pre><code class=\"lang-js\">const startUsage = process.cpuUsage();\n// { user: 38579, system: 6986 }\n\n// spin the CPU for 500 milliseconds\nconst now = Date.now();\nwhile (Date.now() - now &lt; 500);\n\nconsole.log(process.cpuUsage(startUsage));\n// { user: 514883, system: 11226 }\n</code></pre>\n"
            },
            {
              "textRaw": "process.cwd()",
              "type": "method",
              "name": "cwd",
              "meta": {
                "added": [
                  "v0.1.8"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string} ",
                    "name": "return",
                    "type": "string"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>The <code>process.cwd()</code> method returns the current working directory of the Node.js\nprocess.</p>\n<pre><code class=\"lang-js\">console.log(`Current directory: ${process.cwd()}`);\n</code></pre>\n"
            },
            {
              "textRaw": "process.disconnect()",
              "type": "method",
              "name": "disconnect",
              "meta": {
                "added": [
                  "v0.7.2"
                ],
                "changes": []
              },
              "desc": "<p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process.html\">Child Process</a>\nand <a href=\"cluster.html\">Cluster</a> documentation), the <code>process.disconnect()</code> method will close the\nIPC channel to the parent process, allowing the child process to exit gracefully\nonce there are no other connections keeping it alive.</p>\n<p>The effect of calling <code>process.disconnect()</code> is that same as calling the parent\nprocess&#39;s <a href=\"child_process.html#child_process_subprocess_disconnect\"><code>ChildProcess.disconnect()</code></a>.</p>\n<p>If the Node.js process was not spawned with an IPC channel,\n<code>process.disconnect()</code> will be <code>undefined</code>.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "process.dlopen(module, filename[, flags])",
              "type": "method",
              "name": "dlopen",
              "meta": {
                "added": [
                  "v0.1.16"
                ],
                "changes": [
                  {
                    "version": "v9.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12794",
                    "description": "Added support for the `flags` argument."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`module` {Object} ",
                      "name": "module",
                      "type": "Object"
                    },
                    {
                      "textRaw": "`filename` {string} ",
                      "name": "filename",
                      "type": "string"
                    },
                    {
                      "textRaw": "`flags` {os.constants.dlopen} **Default:** `os.constants.dlopen.RTLD_LAZY` ",
                      "name": "flags",
                      "type": "os.constants.dlopen",
                      "default": "`os.constants.dlopen.RTLD_LAZY`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "module"
                    },
                    {
                      "name": "filename"
                    },
                    {
                      "name": "flags",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.dlopen()</code> method allows to dynamically load shared\nobjects. It is primarily used by <code>require()</code> to load\nC++ Addons, and should not be used directly, except in special\ncases. In other words, <a href=\"globals.html#globals_require\"><code>require()</code></a> should be preferred over\n<code>process.dlopen()</code>, unless there are specific reasons.</p>\n<p>The <code>flags</code> argument is an integer that allows to specify dlopen\nbehavior. See the <a href=\"os.html#os_dlopen_constants\"><code>os.constants.dlopen</code></a> documentation for details.</p>\n<p>If there are specific reasons to use <code>process.dlopen()</code> (for instance,\nto specify dlopen flags), it&#39;s often useful to use <a href=\"modules.html#modules_require_resolve_request_options\"><code>require.resolve()</code></a>\nto look up the module&#39;s path.</p>\n<p>An important drawback when calling <code>process.dlopen()</code> is that the <code>module</code>\ninstance must be passed. Functions exported by the C++ Addon will be accessible\nvia <code>module.exports</code>.</p>\n<p>The example below shows how to load a C++ Addon, named as <code>binding</code>,\nthat exports a <code>foo</code> function. All the symbols will be loaded before\nthe call returns, by passing the <code>RTLD_NOW</code> constant. In this example\nthe constant is assumed to be available.</p>\n<pre><code class=\"lang-js\">const os = require(&#39;os&#39;);\nprocess.dlopen(module, require.resolve(&#39;binding&#39;),\n               os.constants.dlopen.RTLD_NOW);\nmodule.exports.foo();\n</code></pre>\n"
            },
            {
              "textRaw": "process.emitWarning(warning[, options])",
              "type": "method",
              "name": "emitWarning",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`warning` {string|Error} The warning to emit. ",
                      "name": "warning",
                      "type": "string|Error",
                      "desc": "The warning to emit."
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`type` {string} When `warning` is a `String`, `type` is the name to use for the *type* of warning being emitted. **Default:** `'Warning'`. ",
                          "name": "type",
                          "type": "string",
                          "default": "`'Warning'`",
                          "desc": "When `warning` is a `String`, `type` is the name to use for the *type* of warning being emitted."
                        },
                        {
                          "textRaw": "`code` {string} A unique identifier for the warning instance being emitted. ",
                          "name": "code",
                          "type": "string",
                          "desc": "A unique identifier for the warning instance being emitted."
                        },
                        {
                          "textRaw": "`ctor` {Function} When `warning` is a `String`, `ctor` is an optional function used to limit the generated stack trace. **Default:** `process.emitWarning`. ",
                          "name": "ctor",
                          "type": "Function",
                          "default": "`process.emitWarning`",
                          "desc": "When `warning` is a `String`, `ctor` is an optional function used to limit the generated stack trace."
                        },
                        {
                          "textRaw": "`detail` {string} Additional text to include with the error. ",
                          "name": "detail",
                          "type": "string",
                          "desc": "Additional text to include with the error."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "warning"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.emitWarning()</code> method can be used to emit custom or application\nspecific process warnings. These can be listened for by adding a handler to the\n<a href=\"#process_event_warning\"><code>&#39;warning&#39;</code></a> event.</p>\n<pre><code class=\"lang-js\">// Emit a warning with a code and additional detail.\nprocess.emitWarning(&#39;Something happened!&#39;, {\n  code: &#39;MY_WARNING&#39;,\n  detail: &#39;This is some additional information&#39;\n});\n// Emits:\n// (node:56338) [MY_WARNING] Warning: Something happened!\n// This is some additional information\n</code></pre>\n<p>In this example, an <code>Error</code> object is generated internally by\n<code>process.emitWarning()</code> and passed through to the\n<a href=\"#process_event_warning\"><code>&#39;warning&#39;</code></a> handler.</p>\n<pre><code class=\"lang-js\">process.on(&#39;warning&#39;, (warning) =&gt; {\n  console.warn(warning.name);    // &#39;Warning&#39;\n  console.warn(warning.message); // &#39;Something happened!&#39;\n  console.warn(warning.code);    // &#39;MY_WARNING&#39;\n  console.warn(warning.stack);   // Stack trace\n  console.warn(warning.detail);  // &#39;This is some additional information&#39;\n});\n</code></pre>\n<p>If <code>warning</code> is passed as an <code>Error</code> object, the <code>options</code> argument is ignored.</p>\n"
            },
            {
              "textRaw": "process.emitWarning(warning[, type[, code]][, ctor])",
              "type": "method",
              "name": "emitWarning",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`warning` {string|Error} The warning to emit. ",
                      "name": "warning",
                      "type": "string|Error",
                      "desc": "The warning to emit."
                    },
                    {
                      "textRaw": "`type` {string} When `warning` is a `String`, `type` is the name to use for the *type* of warning being emitted. **Default:** `'Warning'`. ",
                      "name": "type",
                      "type": "string",
                      "default": "`'Warning'`",
                      "desc": "When `warning` is a `String`, `type` is the name to use for the *type* of warning being emitted.",
                      "optional": true
                    },
                    {
                      "textRaw": "`code` {string} A unique identifier for the warning instance being emitted. ",
                      "name": "code",
                      "type": "string",
                      "desc": "A unique identifier for the warning instance being emitted.",
                      "optional": true
                    },
                    {
                      "textRaw": "`ctor` {Function} When `warning` is a `String`, `ctor` is an optional function used to limit the generated stack trace. **Default:** `process.emitWarning`. ",
                      "name": "ctor",
                      "type": "Function",
                      "default": "`process.emitWarning`",
                      "desc": "When `warning` is a `String`, `ctor` is an optional function used to limit the generated stack trace.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "warning"
                    },
                    {
                      "name": "type",
                      "optional": true
                    },
                    {
                      "name": "code",
                      "optional": true
                    },
                    {
                      "name": "ctor",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.emitWarning()</code> method can be used to emit custom or application\nspecific process warnings. These can be listened for by adding a handler to the\n<a href=\"#process_event_warning\"><code>&#39;warning&#39;</code></a> event.</p>\n<pre><code class=\"lang-js\">// Emit a warning using a string.\nprocess.emitWarning(&#39;Something happened!&#39;);\n// Emits: (node: 56338) Warning: Something happened!\n</code></pre>\n<pre><code class=\"lang-js\">// Emit a warning using a string and a type.\nprocess.emitWarning(&#39;Something Happened!&#39;, &#39;CustomWarning&#39;);\n// Emits: (node:56338) CustomWarning: Something Happened!\n</code></pre>\n<pre><code class=\"lang-js\">process.emitWarning(&#39;Something happened!&#39;, &#39;CustomWarning&#39;, &#39;WARN001&#39;);\n// Emits: (node:56338) [WARN001] CustomWarning: Something happened!\n</code></pre>\n<p>In each of the previous examples, an <code>Error</code> object is generated internally by\n<code>process.emitWarning()</code> and passed through to the <a href=\"#process_event_warning\"><code>&#39;warning&#39;</code></a>\nhandler.</p>\n<pre><code class=\"lang-js\">process.on(&#39;warning&#39;, (warning) =&gt; {\n  console.warn(warning.name);\n  console.warn(warning.message);\n  console.warn(warning.code);\n  console.warn(warning.stack);\n});\n</code></pre>\n<p>If <code>warning</code> is passed as an <code>Error</code> object, it will be passed through to the\n<code>&#39;warning&#39;</code> event handler unmodified (and the optional <code>type</code>,\n<code>code</code> and <code>ctor</code> arguments will be ignored):</p>\n<pre><code class=\"lang-js\">// Emit a warning using an Error object.\nconst myWarning = new Error(&#39;Something happened!&#39;);\n// Use the Error name property to specify the type name\nmyWarning.name = &#39;CustomWarning&#39;;\nmyWarning.code = &#39;WARN001&#39;;\n\nprocess.emitWarning(myWarning);\n// Emits: (node:56338) [WARN001] CustomWarning: Something happened!\n</code></pre>\n<p>A <code>TypeError</code> is thrown if <code>warning</code> is anything other than a string or <code>Error</code>\nobject.</p>\n<p>Note that while process warnings use <code>Error</code> objects, the process warning\nmechanism is <strong>not</strong> a replacement for normal error handling mechanisms.</p>\n<p>The following additional handling is implemented if the warning <code>type</code> is\n<code>&#39;DeprecationWarning&#39;</code>:</p>\n<ul>\n<li>If the <code>--throw-deprecation</code> command-line flag is used, the deprecation\nwarning is thrown as an exception rather than being emitted as an event.</li>\n<li>If the <code>--no-deprecation</code> command-line flag is used, the deprecation\nwarning is suppressed.</li>\n<li>If the <code>--trace-deprecation</code> command-line flag is used, the deprecation\nwarning is printed to <code>stderr</code> along with the full stack trace.</li>\n</ul>\n",
              "modules": [
                {
                  "textRaw": "Avoiding duplicate warnings",
                  "name": "avoiding_duplicate_warnings",
                  "desc": "<p>As a best practice, warnings should be emitted only once per process. To do\nso, it is recommended to place the <code>emitWarning()</code> behind a simple boolean\nflag as illustrated in the example below:</p>\n<pre><code class=\"lang-js\">function emitMyWarning() {\n  if (!emitMyWarning.warned) {\n    emitMyWarning.warned = true;\n    process.emitWarning(&#39;Only warn once!&#39;);\n  }\n}\nemitMyWarning();\n// Emits: (node: 56339) Warning: Only warn once!\nemitMyWarning();\n// Emits nothing\n</code></pre>\n",
                  "type": "module",
                  "displayName": "Avoiding duplicate warnings"
                }
              ]
            },
            {
              "textRaw": "process.exit([code])",
              "type": "method",
              "name": "exit",
              "meta": {
                "added": [
                  "v0.1.13"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`code` {integer} The exit code. **Default:** `0`. ",
                      "name": "code",
                      "type": "integer",
                      "default": "`0`",
                      "desc": "The exit code.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "code",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.exit()</code> method instructs Node.js to terminate the process\nsynchronously with an exit status of <code>code</code>. If <code>code</code> is omitted, exit uses\neither the &#39;success&#39; code <code>0</code> or the value of <code>process.exitCode</code> if it has been\nset. Node.js will not terminate until all the <a href=\"#process_event_exit\"><code>&#39;exit&#39;</code></a> event listeners are\ncalled.</p>\n<p>To exit with a &#39;failure&#39; code:</p>\n<pre><code class=\"lang-js\">process.exit(1);\n</code></pre>\n<p>The shell that executed Node.js should see the exit code as <code>1</code>.</p>\n<p>Calling <code>process.exit()</code> will force the process to exit as quickly as possible\neven if there are still asynchronous operations pending that have not yet\ncompleted fully, including I/O operations to <code>process.stdout</code> and\n<code>process.stderr</code>.</p>\n<p>In most situations, it is not actually necessary to call <code>process.exit()</code>\nexplicitly. The Node.js process will exit on its own <em>if there is no additional\nwork pending</em> in the event loop. The <code>process.exitCode</code> property can be set to\ntell the process which exit code to use when the process exits gracefully.</p>\n<p>For instance, the following example illustrates a <em>misuse</em> of the\n<code>process.exit()</code> method that could lead to data printed to stdout being\ntruncated and lost:</p>\n<pre><code class=\"lang-js\">// This is an example of what *not* to do:\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exit(1);\n}\n</code></pre>\n<p>The reason this is problematic is because writes to <code>process.stdout</code> in Node.js\nare sometimes <em>asynchronous</em> and may occur over multiple ticks of the Node.js\nevent loop. Calling <code>process.exit()</code>, however, forces the process to exit\n<em>before</em> those additional writes to <code>stdout</code> can be performed.</p>\n<p>Rather than calling <code>process.exit()</code> directly, the code <em>should</em> set the\n<code>process.exitCode</code> and allow the process to exit naturally by avoiding\nscheduling any additional work for the event loop:</p>\n<pre><code class=\"lang-js\">// How to properly set the exit code while letting\n// the process exit gracefully.\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exitCode = 1;\n}\n</code></pre>\n<p>If it is necessary to terminate the Node.js process due to an error condition,\nthrowing an <em>uncaught</em> error and allowing the process to terminate accordingly\nis safer than calling <code>process.exit()</code>.</p>\n"
            },
            {
              "textRaw": "process.getegid()",
              "type": "method",
              "name": "getegid",
              "meta": {
                "added": [
                  "v2.0.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.getegid()</code> method returns the numerical effective group identity\nof the Node.js process. (See getegid(2).)</p>\n<pre><code class=\"lang-js\">if (process.getegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "process.geteuid()",
              "type": "method",
              "name": "geteuid",
              "meta": {
                "added": [
                  "v2.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "name": "return",
                    "type": "Object"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>The <code>process.geteuid()</code> method returns the numerical effective user identity of\nthe process. (See geteuid(2).)</p>\n<pre><code class=\"lang-js\">if (process.geteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
            },
            {
              "textRaw": "process.getgid()",
              "type": "method",
              "name": "getgid",
              "meta": {
                "added": [
                  "v0.1.31"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "name": "return",
                    "type": "Object"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>The <code>process.getgid()</code> method returns the numerical group identity of the\nprocess. (See getgid(2).)</p>\n<pre><code class=\"lang-js\">if (process.getgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
            },
            {
              "textRaw": "process.getgroups()",
              "type": "method",
              "name": "getgroups",
              "meta": {
                "added": [
                  "v0.9.4"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer[]} ",
                    "name": "return",
                    "type": "integer[]"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>The <code>process.getgroups()</code> method returns an array with the supplementary group\nIDs. POSIX leaves it unspecified if the effective group ID is included but\nNode.js ensures it always is.</p>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
            },
            {
              "textRaw": "process.getuid()",
              "type": "method",
              "name": "getuid",
              "meta": {
                "added": [
                  "v0.1.28"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>The <code>process.getuid()</code> method returns the numeric user identity of the process.\n(See getuid(2).)</p>\n<pre><code class=\"lang-js\">if (process.getuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
            },
            {
              "textRaw": "process.hasUncaughtExceptionCaptureCallback()",
              "type": "method",
              "name": "hasUncaughtExceptionCaptureCallback",
              "meta": {
                "added": [
                  "v9.3.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Indicates whether a callback has been set using\n<a href=\"process.html#process_process_setuncaughtexceptioncapturecallback_fn\"><code>process.setUncaughtExceptionCaptureCallback()</code></a>.</p>\n"
            },
            {
              "textRaw": "process.hrtime([time])",
              "type": "method",
              "name": "hrtime",
              "meta": {
                "added": [
                  "v0.7.6"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer[]} ",
                    "name": "return",
                    "type": "integer[]"
                  },
                  "params": [
                    {
                      "textRaw": "`time` {integer[]} The result of a previous call to `process.hrtime()` ",
                      "name": "time",
                      "type": "integer[]",
                      "desc": "The result of a previous call to `process.hrtime()`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "time",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.hrtime()</code> method returns the current high-resolution real time\nin a <code>[seconds, nanoseconds]</code> tuple <code>Array</code>, where <code>nanoseconds</code> is the\nremaining part of the real time that can&#39;t be represented in second precision.</p>\n<p><code>time</code> is an optional parameter that must be the result of a previous\n<code>process.hrtime()</code> call to diff with the current time. If the parameter\npassed in is not a tuple <code>Array</code>, a <code>TypeError</code> will be thrown. Passing in a\nuser-defined array instead of the result of a previous call to\n<code>process.hrtime()</code> will lead to undefined behavior.</p>\n<p>These times are relative to an arbitrary time in the\npast, and not related to the time of day and therefore not subject to clock\ndrift. The primary use is for measuring performance between intervals:</p>\n<pre><code class=\"lang-js\">const NS_PER_SEC = 1e9;\nconst time = process.hrtime();\n// [ 1800216, 25 ]\n\nsetTimeout(() =&gt; {\n  const diff = process.hrtime(time);\n  // [ 1, 552 ]\n\n  console.log(`Benchmark took ${diff[0] * NS_PER_SEC + diff[1]} nanoseconds`);\n  // benchmark took 1000000552 nanoseconds\n}, 1000);\n</code></pre>\n"
            },
            {
              "textRaw": "process.initgroups(user, extraGroup)",
              "type": "method",
              "name": "initgroups",
              "meta": {
                "added": [
                  "v0.9.4"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`user` {string|number} The user name or numeric identifier. ",
                      "name": "user",
                      "type": "string|number",
                      "desc": "The user name or numeric identifier."
                    },
                    {
                      "textRaw": "`extraGroup` {string|number} A group name or numeric identifier. ",
                      "name": "extraGroup",
                      "type": "string|number",
                      "desc": "A group name or numeric identifier."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "user"
                    },
                    {
                      "name": "extraGroup"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.initgroups()</code> method reads the <code>/etc/group</code> file and initializes\nthe group access list, using all groups of which the user is a member. This is\na privileged operation that requires that the Node.js process either have <code>root</code>\naccess or the <code>CAP_SETGID</code> capability.</p>\n<p>Note that care must be taken when dropping privileges. Example:</p>\n<pre><code class=\"lang-js\">console.log(process.getgroups());         // [ 0 ]\nprocess.initgroups(&#39;bnoordhuis&#39;, 1000);   // switch user\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000, 0 ]\nprocess.setgid(1000);                     // drop root gid\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000 ]\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
            },
            {
              "textRaw": "process.kill(pid[, signal])",
              "type": "method",
              "name": "kill",
              "meta": {
                "added": [
                  "v0.0.6"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`pid` {number} A process ID ",
                      "name": "pid",
                      "type": "number",
                      "desc": "A process ID"
                    },
                    {
                      "textRaw": "`signal` {string|number} The signal to send, either as a string or number. **Default:** `'SIGTERM'`. ",
                      "name": "signal",
                      "type": "string|number",
                      "default": "`'SIGTERM'`",
                      "desc": "The signal to send, either as a string or number.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "pid"
                    },
                    {
                      "name": "signal",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.kill()</code> method sends the <code>signal</code> to the process identified by\n<code>pid</code>.</p>\n<p>Signal names are strings such as <code>&#39;SIGINT&#39;</code> or <code>&#39;SIGHUP&#39;</code>. See <a href=\"#process_signal_events\">Signal Events</a>\nand kill(2) for more information.</p>\n<p>This method will throw an error if the target <code>pid</code> does not exist. As a special\ncase, a signal of <code>0</code> can be used to test for the existence of a process.\nWindows platforms will throw an error if the <code>pid</code> is used to kill a process\ngroup.</p>\n<p>Even though the name of this function is <code>process.kill()</code>, it is really just a\nsignal sender, like the <code>kill</code> system call. The signal sent may do something\nother than kill the target process.</p>\n<pre><code class=\"lang-js\">process.on(&#39;SIGHUP&#39;, () =&gt; {\n  console.log(&#39;Got SIGHUP signal.&#39;);\n});\n\nsetTimeout(() =&gt; {\n  console.log(&#39;Exiting.&#39;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &#39;SIGHUP&#39;);\n</code></pre>\n<p>When <code>SIGUSR1</code> is received by a Node.js process, Node.js will start the\ndebugger, see <a href=\"#process_signal_events\">Signal Events</a>.</p>\n"
            },
            {
              "textRaw": "process.memoryUsage()",
              "type": "method",
              "name": "memoryUsage",
              "meta": {
                "added": [
                  "v0.1.16"
                ],
                "changes": [
                  {
                    "version": "v7.2.0",
                    "pr-url": "https://github.com/nodejs/node/pull/9587",
                    "description": "Added `external` to the returned object."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "options": [
                      {
                        "textRaw": "`rss` {integer} ",
                        "name": "rss",
                        "type": "integer"
                      },
                      {
                        "textRaw": "`heapTotal` {integer} ",
                        "name": "heapTotal",
                        "type": "integer"
                      },
                      {
                        "textRaw": "`heapUsed` {integer} ",
                        "name": "heapUsed",
                        "type": "integer"
                      },
                      {
                        "textRaw": "`external` {integer} ",
                        "name": "external",
                        "type": "integer"
                      }
                    ],
                    "name": "return",
                    "type": "Object"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>The <code>process.memoryUsage()</code> method returns an object describing the memory usage\nof the Node.js process measured in bytes.</p>\n<p>For example, the code:</p>\n<pre><code class=\"lang-js\">console.log(process.memoryUsage());\n</code></pre>\n<p>Will generate:</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472,\n  external: 49879\n}\n</code></pre>\n<p><code>heapTotal</code> and <code>heapUsed</code> refer to V8&#39;s memory usage.\n<code>external</code> refers to the memory usage of C++ objects bound to JavaScript\nobjects managed by V8. <code>rss</code>, Resident Set Size, is the amount of space\noccupied in the main memory device (that is a subset of the total allocated\nmemory) for the process, which includes the <em>heap</em>, <em>code segment</em> and <em>stack</em>.</p>\n<p>The <em>heap</em> is where objects, strings, and closures are stored. Variables are\nstored in the <em>stack</em> and the actual JavaScript code resides in the\n<em>code segment</em>.</p>\n"
            },
            {
              "textRaw": "process.nextTick(callback[, ...args])",
              "type": "method",
              "name": "nextTick",
              "meta": {
                "added": [
                  "v0.1.26"
                ],
                "changes": [
                  {
                    "version": "v1.8.1",
                    "pr-url": "https://github.com/nodejs/node/pull/1077",
                    "description": "Additional arguments after `callback` are now supported."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function"
                    },
                    {
                      "textRaw": "`...args` {any} Additional arguments to pass when invoking the `callback` ",
                      "name": "...args",
                      "type": "any",
                      "desc": "Additional arguments to pass when invoking the `callback`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback"
                    },
                    {
                      "name": "...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.nextTick()</code> method adds the <code>callback</code> to the &quot;next tick queue&quot;.\nOnce the current turn of the event loop turn runs to completion, all callbacks\ncurrently in the next tick queue will be called.</p>\n<p>This is <em>not</em> a simple alias to <a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout(fn, 0)</code></a>. It is much more\nefficient. It runs before any additional I/O events (including\ntimers) fire in subsequent ticks of the event loop.</p>\n<pre><code class=\"lang-js\">console.log(&#39;start&#39;);\nprocess.nextTick(() =&gt; {\n  console.log(&#39;nextTick callback&#39;);\n});\nconsole.log(&#39;scheduled&#39;);\n// Output:\n// start\n// scheduled\n// nextTick callback\n</code></pre>\n<p>This is important when developing APIs in order to give users the opportunity\nto assign event handlers <em>after</em> an object has been constructed but before any\nI/O has occurred:</p>\n<pre><code class=\"lang-js\">function MyThing(options) {\n  this.setupOptions(options);\n\n  process.nextTick(() =&gt; {\n    this.startDoingStuff();\n  });\n}\n\nconst thing = new MyThing();\nthing.getReadyForStuff();\n\n// thing.startDoingStuff() gets called now, not before.\n</code></pre>\n<p>It is very important for APIs to be either 100% synchronous or 100%\nasynchronous. Consider this example:</p>\n<pre><code class=\"lang-js\">// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}\n</code></pre>\n<p>This API is hazardous because in the following case:</p>\n<pre><code class=\"lang-js\">const maybeTrue = Math.random() &gt; 0.5;\n\nmaybeSync(maybeTrue, () =&gt; {\n  foo();\n});\n\nbar();\n</code></pre>\n<p>It is not clear whether <code>foo()</code> or <code>bar()</code> will be called first.</p>\n<p>The following approach is much better:</p>\n<pre><code class=\"lang-js\">function definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}\n</code></pre>\n<p>The next tick queue is completely drained on each pass of the event loop\n<strong>before</strong> additional I/O is processed. As a result, recursively setting\n<code>nextTick()</code> callbacks will block any I/O from happening, just like a\n<code>while(true);</code> loop.</p>\n"
            },
            {
              "textRaw": "process.send(message[, sendHandle[, options]][, callback])",
              "type": "method",
              "name": "send",
              "meta": {
                "added": [
                  "v0.5.9"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`message` {Object} ",
                      "name": "message",
                      "type": "Object"
                    },
                    {
                      "textRaw": "`sendHandle` {net.Server|net.Socket} ",
                      "name": "sendHandle",
                      "type": "net.Server|net.Socket",
                      "optional": true
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "message"
                    },
                    {
                      "name": "sendHandle",
                      "optional": true
                    },
                    {
                      "name": "options",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>If Node.js is spawned with an IPC channel, the <code>process.send()</code> method can be\nused to send messages to the parent process. Messages will be received as a\n<a href=\"child_process.html#child_process_event_message\"><code>&#39;message&#39;</code></a> event on the parent&#39;s <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> object.</p>\n<p>If Node.js was not spawned with an IPC channel, <code>process.send()</code> will be\n<code>undefined</code>.</p>\n<p>The message goes through serialization and parsing. The resulting message might\nnot be the same as what is originally sent.</p>\n"
            },
            {
              "textRaw": "process.setegid(id)",
              "type": "method",
              "name": "setegid",
              "meta": {
                "added": [
                  "v2.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`id` {string|number} A group name or ID ",
                      "name": "id",
                      "type": "string|number",
                      "desc": "A group name or ID"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "id"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.setegid()</code> method sets the effective group identity of the process.\n(See setegid(2).) The <code>id</code> can be passed as either a numeric ID or a group\nname string. If a group name is specified, this method blocks while resolving\nthe associated a numeric ID.</p>\n<pre><code class=\"lang-js\">if (process.getegid &amp;&amp; process.setegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n  try {\n    process.setegid(501);\n    console.log(`New gid: ${process.getegid()}`);\n  } catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
            },
            {
              "textRaw": "process.seteuid(id)",
              "type": "method",
              "name": "seteuid",
              "meta": {
                "added": [
                  "v2.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`id` {string|number} A user name or ID ",
                      "name": "id",
                      "type": "string|number",
                      "desc": "A user name or ID"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "id"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.seteuid()</code> method sets the effective user identity of the process.\n(See seteuid(2).) The <code>id</code> can be passed as either a numeric ID or a username\nstring. If a username is specified, the method blocks while resolving the\nassociated numeric ID.</p>\n<pre><code class=\"lang-js\">if (process.geteuid &amp;&amp; process.seteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n  try {\n    process.seteuid(501);\n    console.log(`New uid: ${process.geteuid()}`);\n  } catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
            },
            {
              "textRaw": "process.setgid(id)",
              "type": "method",
              "name": "setgid",
              "meta": {
                "added": [
                  "v0.1.31"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`id` {string|number} The group name or ID ",
                      "name": "id",
                      "type": "string|number",
                      "desc": "The group name or ID"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "id"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.setgid()</code> method sets the group identity of the process. (See\nsetgid(2).) The <code>id</code> can be passed as either a numeric ID or a group name\nstring. If a group name is specified, this method blocks while resolving the\nassociated numeric ID.</p>\n<pre><code class=\"lang-js\">if (process.getgid &amp;&amp; process.setgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n  try {\n    process.setgid(501);\n    console.log(`New gid: ${process.getgid()}`);\n  } catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
            },
            {
              "textRaw": "process.setgroups(groups)",
              "type": "method",
              "name": "setgroups",
              "meta": {
                "added": [
                  "v0.9.4"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`groups` {integer[]} ",
                      "name": "groups",
                      "type": "integer[]"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "groups"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.setgroups()</code> method sets the supplementary group IDs for the\nNode.js process. This is a privileged operation that requires the Node.js\nprocess to have <code>root</code> or the <code>CAP_SETGID</code> capability.</p>\n<p>The <code>groups</code> array can contain numeric group IDs, group names or both.</p>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
            },
            {
              "textRaw": "process.setuid(id)",
              "type": "method",
              "name": "setuid",
              "meta": {
                "added": [
                  "v0.1.28"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.setuid(id)</code> method sets the user identity of the process. (See\nsetuid(2).) The <code>id</code> can be passed as either a numeric ID or a username string.\nIf a username is specified, the method blocks while resolving the associated\nnumeric ID.</p>\n<pre><code class=\"lang-js\">if (process.getuid &amp;&amp; process.setuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n  try {\n    process.setuid(501);\n    console.log(`New uid: ${process.getuid()}`);\n  } catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "id"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "process.setUncaughtExceptionCaptureCallback(fn)",
              "type": "method",
              "name": "setUncaughtExceptionCaptureCallback",
              "meta": {
                "added": [
                  "v9.3.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`fn` {Function|null} ",
                      "name": "fn",
                      "type": "Function|null"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "fn"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.setUncaughtExceptionCapture</code> function sets a function that will\nbe invoked when an uncaught exception occurs, which will receive the exception\nvalue itself as its first argument.</p>\n<p>If such a function is set, the <a href=\"process.html#process_event_uncaughtexception\"><code>&#39;uncaughtException&#39;</code></a> event will\nnot be emitted. If <code>--abort-on-uncaught-exception</code> was passed from the\ncommand line or set through <a href=\"v8.html#v8_v8_setflagsfromstring_flags\"><code>v8.setFlagsFromString()</code></a>, the process will\nnot abort.</p>\n<p>To unset the capture function, <code>process.setUncaughtExceptionCapture(null)</code>\nmay be used. Calling this method with a non-<code>null</code> argument while another\ncapture function is set will throw an error.</p>\n<p>Using this function is mutually exclusive with using the deprecated\n<a href=\"domain.html\"><code>domain</code></a> built-in module.</p>\n"
            },
            {
              "textRaw": "process.umask([mask])",
              "type": "method",
              "name": "umask",
              "meta": {
                "added": [
                  "v0.1.19"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`mask` {number} ",
                      "name": "mask",
                      "type": "number",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "mask",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>process.umask()</code> method sets or returns the Node.js process&#39;s file mode\ncreation mask. Child processes inherit the mask from the parent process. Invoked\nwithout an argument, the current mask is returned, otherwise the umask is set to\nthe argument value and the previous mask is returned.</p>\n<pre><code class=\"lang-js\">const newmask = 0o022;\nconst oldmask = process.umask(newmask);\nconsole.log(\n  `Changed umask from ${oldmask.toString(8)} to ${newmask.toString(8)}`\n);\n</code></pre>\n"
            },
            {
              "textRaw": "process.uptime()",
              "type": "method",
              "name": "uptime",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {number} ",
                    "name": "return",
                    "type": "number"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>The <code>process.uptime()</code> method returns the number of seconds the current Node.js\nprocess has been running.</p>\n<p>The return value includes fractions of a second. Use <code>Math.floor()</code> to get whole\nseconds.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`arch` {string} ",
              "type": "string",
              "name": "arch",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.arch</code> property returns a string identifying the operating system\nCPU architecture for which the Node.js binary was compiled.</p>\n<p>The current possible values are: <code>&#39;arm&#39;</code>, <code>&#39;arm64&#39;</code>, <code>&#39;ia32&#39;</code>, <code>&#39;mips&#39;</code>,\n<code>&#39;mipsel&#39;</code>, <code>&#39;ppc&#39;</code>, <code>&#39;ppc64&#39;</code>, <code>&#39;s390&#39;</code>, <code>&#39;s390x&#39;</code>, <code>&#39;x32&#39;</code>, and <code>&#39;x64&#39;</code>.</p>\n<pre><code class=\"lang-js\">console.log(`This processor architecture is ${process.arch}`);\n</code></pre>\n"
            },
            {
              "textRaw": "`argv` {string[]} ",
              "type": "string[]",
              "name": "argv",
              "meta": {
                "added": [
                  "v0.1.27"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.argv</code> property returns an array containing the command line\narguments passed when the Node.js process was launched. The first element will\nbe <a href=\"#process_process_execpath\"><code>process.execPath</code></a>. See <code>process.argv0</code> if access to the original value of\n<code>argv[0]</code> is needed. The second element will be the path to the JavaScript\nfile being executed. The remaining elements will be any additional command line\narguments.</p>\n<p>For example, assuming the following script for <code>process-args.js</code>:</p>\n<pre><code class=\"lang-js\">// print process.argv\nprocess.argv.forEach((val, index) =&gt; {\n  console.log(`${index}: ${val}`);\n});\n</code></pre>\n<p>Launching the Node.js process as:</p>\n<pre><code class=\"lang-console\">$ node process-args.js one two=three four\n</code></pre>\n<p>Would generate the output:</p>\n<pre><code class=\"lang-text\">0: /usr/local/bin/node\n1: /Users/mjr/work/node/process-args.js\n2: one\n3: two=three\n4: four\n</code></pre>\n"
            },
            {
              "textRaw": "`argv0` {string} ",
              "type": "string",
              "name": "argv0",
              "meta": {
                "added": [
                  "v6.4.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.argv0</code> property stores a read-only copy of the original value of\n<code>argv[0]</code> passed when Node.js starts.</p>\n<pre><code class=\"lang-console\">$ bash -c &#39;exec -a customArgv0 ./node&#39;\n&gt; process.argv[0]\n&#39;/Volumes/code/external/node/out/Release/node&#39;\n&gt; process.argv0\n&#39;customArgv0&#39;\n</code></pre>\n"
            },
            {
              "textRaw": "`channel` {Object} ",
              "type": "Object",
              "name": "channel",
              "meta": {
                "added": [
                  "v7.1.0"
                ],
                "changes": []
              },
              "desc": "<p>If the Node.js process was spawned with an IPC channel (see the\n<a href=\"child_process.html\">Child Process</a> documentation), the <code>process.channel</code>\nproperty is a reference to the IPC channel. If no IPC channel exists, this\nproperty is <code>undefined</code>.</p>\n"
            },
            {
              "textRaw": "`config` {Object} ",
              "type": "Object",
              "name": "config",
              "meta": {
                "added": [
                  "v0.7.7"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.config</code> property returns an <code>Object</code> containing the JavaScript\nrepresentation of the configure options used to compile the current Node.js\nexecutable. This is the same as the <code>config.gypi</code> file that was produced when\nrunning the <code>./configure</code> script.</p>\n<p>An example of the possible output looks like:</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  target_defaults:\n   { cflags: [],\n     default_configuration: &#39;Release&#39;,\n     defines: [],\n     include_dirs: [],\n     libraries: [] },\n  variables:\n   {\n     host_arch: &#39;x64&#39;,\n     node_install_npm: &#39;true&#39;,\n     node_prefix: &#39;&#39;,\n     node_shared_cares: &#39;false&#39;,\n     node_shared_http_parser: &#39;false&#39;,\n     node_shared_libuv: &#39;false&#39;,\n     node_shared_zlib: &#39;false&#39;,\n     node_use_dtrace: &#39;false&#39;,\n     node_use_openssl: &#39;true&#39;,\n     node_shared_openssl: &#39;false&#39;,\n     strict_aliasing: &#39;true&#39;,\n     target_arch: &#39;x64&#39;,\n     v8_use_snapshot: &#39;true&#39;\n   }\n}\n</code></pre>\n<p>The <code>process.config</code> property is <strong>not</strong> read-only and there are existing\nmodules in the ecosystem that are known to extend, modify, or entirely replace\nthe value of <code>process.config</code>.</p>\n"
            },
            {
              "textRaw": "`connected` {boolean} ",
              "type": "boolean",
              "name": "connected",
              "meta": {
                "added": [
                  "v0.7.2"
                ],
                "changes": []
              },
              "desc": "<p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process.html\">Child Process</a>\nand <a href=\"cluster.html\">Cluster</a> documentation), the <code>process.connected</code> property will return\n<code>true</code> so long as the IPC channel is connected and will return <code>false</code> after\n<code>process.disconnect()</code> is called.</p>\n<p>Once <code>process.connected</code> is <code>false</code>, it is no longer possible to send messages\nover the IPC channel using <code>process.send()</code>.</p>\n"
            },
            {
              "textRaw": "`debugPort` {number} ",
              "type": "number",
              "name": "debugPort",
              "meta": {
                "added": [
                  "v0.7.2"
                ],
                "changes": []
              },
              "desc": "<p>The port used by Node.js&#39;s debugger when enabled.</p>\n<pre><code class=\"lang-js\">process.debugPort = 5858;\n</code></pre>\n"
            },
            {
              "textRaw": "`env` {Object} ",
              "type": "Object",
              "name": "env",
              "meta": {
                "added": [
                  "v0.1.27"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18990",
                    "description": "Implicit conversion of variable value to string is deprecated."
                  }
                ]
              },
              "desc": "<p>The <code>process.env</code> property returns an object containing the user environment.\nSee environ(7).</p>\n<p>An example of this object looks like:</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  TERM: &#39;xterm-256color&#39;,\n  SHELL: &#39;/usr/local/bin/bash&#39;,\n  USER: &#39;maciej&#39;,\n  PATH: &#39;~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;,\n  PWD: &#39;/Users/maciej&#39;,\n  EDITOR: &#39;vim&#39;,\n  SHLVL: &#39;1&#39;,\n  HOME: &#39;/Users/maciej&#39;,\n  LOGNAME: &#39;maciej&#39;,\n  _: &#39;/usr/local/bin/node&#39;\n}\n</code></pre>\n<p>It is possible to modify this object, but such modifications will not be\nreflected outside the Node.js process. In other words, the following example\nwould not work:</p>\n<pre><code class=\"lang-console\">$ node -e &#39;process.env.foo = &quot;bar&quot;&#39; &amp;&amp; echo $foo\n</code></pre>\n<p>While the following will:</p>\n<pre><code class=\"lang-js\">process.env.foo = &#39;bar&#39;;\nconsole.log(process.env.foo);\n</code></pre>\n<p>Assigning a property on <code>process.env</code> will implicitly convert the value\nto a string. <strong>This behavior is deprecated.</strong> Future versions of Node.js may\nthrow an error when the value is not a string, number, or boolean.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">process.env.test = null;\nconsole.log(process.env.test);\n// =&gt; &#39;null&#39;\nprocess.env.test = undefined;\nconsole.log(process.env.test);\n// =&gt; &#39;undefined&#39;\n</code></pre>\n<p>Use <code>delete</code> to delete a property from <code>process.env</code>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">process.env.TEST = 1;\ndelete process.env.TEST;\nconsole.log(process.env.TEST);\n// =&gt; undefined\n</code></pre>\n<p>On Windows operating systems, environment variables are case-insensitive.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">process.env.TEST = 1;\nconsole.log(process.env.test);\n// =&gt; 1\n</code></pre>\n"
            },
            {
              "textRaw": "`execArgv` {string[]} ",
              "type": "string[]",
              "name": "execArgv",
              "meta": {
                "added": [
                  "v0.7.7"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.execArgv</code> property returns the set of Node.js-specific command-line\noptions passed when the Node.js process was launched. These options do not\nappear in the array returned by the <a href=\"#process_process_argv\"><code>process.argv</code></a> property, and do not\ninclude the Node.js executable, the name of the script, or any options following\nthe script name. These options are useful in order to spawn child processes with\nthe same execution environment as the parent.</p>\n<pre><code class=\"lang-console\">$ node --harmony script.js --version\n</code></pre>\n<p>Results in <code>process.execArgv</code>:</p>\n<!-- eslint-disable semi -->\n<pre><code class=\"lang-js\">[&#39;--harmony&#39;]\n</code></pre>\n<p>And <code>process.argv</code>:</p>\n<!-- eslint-disable semi -->\n<pre><code class=\"lang-js\">[&#39;/usr/local/bin/node&#39;, &#39;script.js&#39;, &#39;--version&#39;]\n</code></pre>\n"
            },
            {
              "textRaw": "`execPath` {string} ",
              "type": "string",
              "name": "execPath",
              "meta": {
                "added": [
                  "v0.1.100"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.execPath</code> property returns the absolute pathname of the executable\nthat started the Node.js process.</p>\n<!-- eslint-disable semi -->\n<pre><code class=\"lang-js\">&#39;/usr/local/bin/node&#39;\n</code></pre>\n"
            },
            {
              "textRaw": "`exitCode` {integer} ",
              "type": "integer",
              "name": "exitCode",
              "meta": {
                "added": [
                  "v0.11.8"
                ],
                "changes": []
              },
              "desc": "<p>A number which will be the process exit code, when the process either\nexits gracefully, or is exited via <a href=\"#process_process_exit_code\"><code>process.exit()</code></a> without specifying\na code.</p>\n<p>Specifying a code to <a href=\"#process_process_exit_code\"><code>process.exit(code)</code></a> will override any\nprevious setting of <code>process.exitCode</code>.</p>\n"
            },
            {
              "textRaw": "`mainModule` {Object} ",
              "type": "Object",
              "name": "mainModule",
              "meta": {
                "added": [
                  "v0.1.17"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.mainModule</code> property provides an alternative way of retrieving\n<a href=\"modules.html#modules_accessing_the_main_module\"><code>require.main</code></a>. The difference is that if the main module changes at\nruntime, <a href=\"modules.html#modules_accessing_the_main_module\"><code>require.main</code></a> may still refer to the original main module in\nmodules that were required before the change occurred. Generally, it&#39;s\nsafe to assume that the two refer to the same module.</p>\n<p>As with <a href=\"modules.html#modules_accessing_the_main_module\"><code>require.main</code></a>, <code>process.mainModule</code> will be <code>undefined</code> if there\nis no entry script.</p>\n"
            },
            {
              "textRaw": "`noDeprecation` {boolean} ",
              "type": "boolean",
              "name": "noDeprecation",
              "meta": {
                "added": [
                  "v0.8.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.noDeprecation</code> property indicates whether the <code>--no-deprecation</code>\nflag is set on the current Node.js process. See the documentation for\nthe <a href=\"#process_event_warning\"><code>&#39;warning&#39;</code> event</a> and the\n<a href=\"#process_process_emitwarning_warning_type_code_ctor\"><code>emitWarning()</code> method</a> for more information about this\nflag&#39;s behavior.</p>\n"
            },
            {
              "textRaw": "`pid` {integer} ",
              "type": "integer",
              "name": "pid",
              "meta": {
                "added": [
                  "v0.1.15"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.pid</code> property returns the PID of the process.</p>\n<pre><code class=\"lang-js\">console.log(`This process is pid ${process.pid}`);\n</code></pre>\n"
            },
            {
              "textRaw": "`platform` {string} ",
              "type": "string",
              "name": "platform",
              "meta": {
                "added": [
                  "v0.1.16"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.platform</code> property returns a string identifying the operating\nsystem platform on which the Node.js process is running.</p>\n<p>Currently possible values are:</p>\n<ul>\n<li><code>&#39;aix&#39;</code></li>\n<li><code>&#39;darwin&#39;</code></li>\n<li><code>&#39;freebsd&#39;</code></li>\n<li><code>&#39;linux&#39;</code></li>\n<li><code>&#39;openbsd&#39;</code></li>\n<li><code>&#39;sunos&#39;</code></li>\n<li><code>&#39;win32&#39;</code></li>\n</ul>\n<pre><code class=\"lang-js\">console.log(`This platform is ${process.platform}`);\n</code></pre>\n<p>The value <code>&#39;android&#39;</code> may also be returned if the Node.js is built on the\nAndroid operating system. However, Android support in Node.js\n<a href=\"https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os\">is experimental</a>.</p>\n"
            },
            {
              "textRaw": "`ppid` {integer} ",
              "type": "integer",
              "name": "ppid",
              "meta": {
                "added": [
                  "v9.2.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.ppid</code> property returns the PID of the current parent process.</p>\n<pre><code class=\"lang-js\">console.log(`The parent process is pid ${process.ppid}`);\n</code></pre>\n"
            },
            {
              "textRaw": "`release` {Object} ",
              "type": "Object",
              "name": "release",
              "meta": {
                "added": [
                  "v3.0.0"
                ],
                "changes": [
                  {
                    "version": "v4.2.0",
                    "pr-url": "https://github.com/nodejs/node/pull/3212",
                    "description": "The `lts` property is now supported."
                  }
                ]
              },
              "desc": "<p>The <code>process.release</code> property returns an <code>Object</code> containing metadata related\nto the current release, including URLs for the source tarball and headers-only\ntarball.</p>\n<p><code>process.release</code> contains the following properties:</p>\n<ul>\n<li><code>name</code> {string} A value that will always be <code>&#39;node&#39;</code> for Node.js. For\nlegacy io.js releases, this will be <code>&#39;io.js&#39;</code>.</li>\n<li><code>sourceUrl</code> {string} an absolute URL pointing to a <em><code>.tar.gz</code></em> file containing\nthe source code of the current release.</li>\n<li><code>headersUrl</code>{string} an absolute URL pointing to a <em><code>.tar.gz</code></em> file containing\nonly the source header files for the current release. This file is\nsignificantly smaller than the full source file and can be used for compiling\nNode.js native add-ons.</li>\n<li><code>libUrl</code> {string} an absolute URL pointing to a <em><code>node.lib</code></em> file matching the\narchitecture and version of the current release. This file is used for\ncompiling Node.js native add-ons. <em>This property is only present on Windows\nbuilds of Node.js and will be missing on all other platforms.</em></li>\n<li><code>lts</code> {string} a string label identifying the <a href=\"https://github.com/nodejs/LTS/\">LTS</a> label for this release.\nThis property only exists for LTS releases and is <code>undefined</code> for all other\nrelease types, including <em>Current</em> releases. Currently the valid values are:<ul>\n<li><code>&#39;Argon&#39;</code> for the 4.x LTS line beginning with 4.2.0.</li>\n<li><code>&#39;Boron&#39;</code> for the 6.x LTS line beginning with 6.9.0.</li>\n<li><code>&#39;Carbon&#39;</code> for the 8.x LTS line beginning with 8.9.1.</li>\n</ul>\n</li>\n</ul>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  name: &#39;node&#39;,\n  lts: &#39;Argon&#39;,\n  sourceUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5.tar.gz&#39;,\n  headersUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5-headers.tar.gz&#39;,\n  libUrl: &#39;https://nodejs.org/download/release/v4.4.5/win-x64/node.lib&#39;\n}\n</code></pre>\n<p>In custom builds from non-release versions of the source tree, only the\n<code>name</code> property may be present. The additional properties should not be\nrelied upon to exist.</p>\n"
            },
            {
              "textRaw": "`stderr` {Stream} ",
              "type": "Stream",
              "name": "stderr",
              "desc": "<p>The <code>process.stderr</code> property returns a stream connected to\n<code>stderr</code> (fd <code>2</code>). It is a <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> (which is a <a href=\"stream.html#stream_duplex_and_transform_streams\">Duplex</a>\nstream) unless fd <code>2</code> refers to a file, in which case it is\na <a href=\"stream.html#stream_writable_streams\">Writable</a> stream.</p>\n<p><code>process.stderr</code> differs from other Node.js streams in important ways, see\n<a href=\"process.html#process_a_note_on_process_i_o\">note on process I/O</a> for more information.</p>\n"
            },
            {
              "textRaw": "`stdin` {Stream} ",
              "type": "Stream",
              "name": "stdin",
              "desc": "<p>The <code>process.stdin</code> property returns a stream connected to\n<code>stdin</code> (fd <code>0</code>). It is a <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> (which is a <a href=\"stream.html#stream_duplex_and_transform_streams\">Duplex</a>\nstream) unless fd <code>0</code> refers to a file, in which case it is\na <a href=\"stream.html#stream_readable_streams\">Readable</a> stream.</p>\n<pre><code class=\"lang-js\">process.stdin.setEncoding(&#39;utf8&#39;);\n\nprocess.stdin.on(&#39;readable&#39;, () =&gt; {\n  const chunk = process.stdin.read();\n  if (chunk !== null) {\n    process.stdout.write(`data: ${chunk}`);\n  }\n});\n\nprocess.stdin.on(&#39;end&#39;, () =&gt; {\n  process.stdout.write(&#39;end&#39;);\n});\n</code></pre>\n<p>As a <a href=\"stream.html#stream_duplex_and_transform_streams\">Duplex</a> stream, <code>process.stdin</code> can also be used in &quot;old&quot; mode that\nis compatible with scripts written for Node.js prior to v0.10.\nFor more information see <a href=\"stream.html#stream_compatibility_with_older_node_js_versions\">Stream compatibility</a>.</p>\n<p>In &quot;old&quot; streams mode the <code>stdin</code> stream is paused by default, so one\nmust call <code>process.stdin.resume()</code> to read from it. Note also that calling\n<code>process.stdin.resume()</code> itself would switch stream to &quot;old&quot; mode.</p>\n"
            },
            {
              "textRaw": "`stdout` {Stream} ",
              "type": "Stream",
              "name": "stdout",
              "desc": "<p>The <code>process.stdout</code> property returns a stream connected to\n<code>stdout</code> (fd <code>1</code>). It is a <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> (which is a <a href=\"stream.html#stream_duplex_and_transform_streams\">Duplex</a>\nstream) unless fd <code>1</code> refers to a file, in which case it is\na <a href=\"stream.html#stream_writable_streams\">Writable</a> stream.</p>\n<p>For example, to copy <code>process.stdin</code> to <code>process.stdout</code>:</p>\n<pre><code class=\"lang-js\">process.stdin.pipe(process.stdout);\n</code></pre>\n<p><code>process.stdout</code> differs from other Node.js streams in important ways, see\n<a href=\"process.html#process_a_note_on_process_i_o\">note on process I/O</a> for more information.</p>\n",
              "modules": [
                {
                  "textRaw": "A note on process I/O",
                  "name": "a_note_on_process_i/o",
                  "desc": "<p><code>process.stdout</code> and <code>process.stderr</code> differ from other Node.js streams in\nimportant ways:</p>\n<ol>\n<li>They are used internally by <a href=\"console.html#console_console_log_data_args\"><code>console.log()</code></a> and <a href=\"console.html#console_console_error_data_args\"><code>console.error()</code></a>,\nrespectively.</li>\n<li>They cannot be closed (<a href=\"stream.html#stream_writable_end_chunk_encoding_callback\"><code>end()</code></a> will throw).</li>\n<li>They will never emit the <a href=\"#stream_event_finish\"><code>&#39;finish&#39;</code></a> event.</li>\n<li>Writes may be synchronous depending on what the stream is connected to\nand whether the system is Windows or POSIX:<ul>\n<li>Files: <em>synchronous</em> on Windows and POSIX</li>\n<li>TTYs (Terminals): <em>asynchronous</em> on Windows, <em>synchronous</em> on POSIX</li>\n<li>Pipes (and sockets): <em>synchronous</em> on Windows, <em>asynchronous</em> on POSIX</li>\n</ul>\n</li>\n</ol>\n<p>These behaviors are partly for historical reasons, as changing them would\ncreate backwards incompatibility, but they are also expected by some users.</p>\n<p>Synchronous writes avoid problems such as output written with <code>console.log()</code> or\n<code>console.error()</code> being unexpectedly interleaved, or not written at all if\n<code>process.exit()</code> is called before an asynchronous write completes. See\n<a href=\"#process_process_exit_code\"><code>process.exit()</code></a> for more information.</p>\n<p><strong><em>Warning</em></strong>: Synchronous writes block the event loop until the write has\ncompleted. This can be near instantaneous in the case of output to a file, but\nunder high system load, pipes that are not being read at the receiving end, or\nwith slow terminals or file systems, its possible for the event loop to be\nblocked often enough and long enough to have severe negative performance\nimpacts. This may not be a problem when writing to an interactive terminal\nsession, but consider this particularly careful when doing production logging to\nthe process output streams.</p>\n<p>To check if a stream is connected to a <a href=\"tty.html\">TTY</a> context, check the <code>isTTY</code>\nproperty.</p>\n<p>For instance:</p>\n<pre><code class=\"lang-console\">$ node -p &quot;Boolean(process.stdin.isTTY)&quot;\ntrue\n$ echo &quot;foo&quot; | node -p &quot;Boolean(process.stdin.isTTY)&quot;\nfalse\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse\n</code></pre>\n<p>See the <a href=\"tty.html\">TTY</a> documentation for more information.</p>\n",
                  "type": "module",
                  "displayName": "A note on process I/O"
                }
              ]
            },
            {
              "textRaw": "`throwDeprecation` {boolean} ",
              "type": "boolean",
              "name": "throwDeprecation",
              "meta": {
                "added": [
                  "v0.9.12"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.throwDeprecation</code> property indicates whether the\n<code>--throw-deprecation</code> flag is set on the current Node.js process. See the\ndocumentation for the <a href=\"#process_event_warning\"><code>&#39;warning&#39;</code> event</a> and the\n<a href=\"#process_process_emitwarning_warning_type_code_ctor\"><code>emitWarning()</code> method</a> for more information about this\nflag&#39;s behavior.</p>\n"
            },
            {
              "textRaw": "`title` {string} ",
              "type": "string",
              "name": "title",
              "meta": {
                "added": [
                  "v0.1.104"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.title</code> property returns the current process title (i.e. returns\nthe current value of <code>ps</code>). Assigning a new value to <code>process.title</code> modifies\nthe current value of <code>ps</code>.</p>\n<p>When a new value is assigned, different platforms will impose different maximum\nlength restrictions on the title. Usually such restrictions are quite limited.\nFor instance, on Linux and macOS, <code>process.title</code> is limited to the size of the\nbinary name plus the length of the command line arguments because setting the\n<code>process.title</code> overwrites the <code>argv</code> memory of the process. Node.js v0.8\nallowed for longer process title strings by also overwriting the <code>environ</code>\nmemory but that was potentially insecure and confusing in some (rather obscure)\ncases.</p>\n"
            },
            {
              "textRaw": "`traceDeprecation` {boolean} ",
              "type": "boolean",
              "name": "traceDeprecation",
              "meta": {
                "added": [
                  "v0.8.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.traceDeprecation</code> property indicates whether the\n<code>--trace-deprecation</code> flag is set on the current Node.js process. See the\ndocumentation for the <a href=\"#process_event_warning\"><code>&#39;warning&#39;</code> event</a> and the\n<a href=\"#process_process_emitwarning_warning_type_code_ctor\"><code>emitWarning()</code> method</a> for more information about this\nflag&#39;s behavior.</p>\n"
            },
            {
              "textRaw": "`version` {string} ",
              "type": "string",
              "name": "version",
              "meta": {
                "added": [
                  "v0.1.3"
                ],
                "changes": []
              },
              "desc": "<p>The <code>process.version</code> property returns the Node.js version string.</p>\n<pre><code class=\"lang-js\">console.log(`Version: ${process.version}`);\n</code></pre>\n"
            },
            {
              "textRaw": "`versions` {Object} ",
              "type": "Object",
              "name": "versions",
              "meta": {
                "added": [
                  "v0.2.0"
                ],
                "changes": [
                  {
                    "version": "v4.2.0",
                    "pr-url": "https://github.com/nodejs/node/pull/3102",
                    "description": "The `icu` property is now supported."
                  },
                  {
                    "version": "v9.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/15785",
                    "description": "The `v8` property now includes a Node.js specific suffix."
                  }
                ]
              },
              "desc": "<p>The <code>process.versions</code> property returns an object listing the version strings of\nNode.js and its dependencies. <code>process.versions.modules</code> indicates the current\nABI version, which is increased whenever a C++ API changes. Node.js will refuse\nto load modules that were compiled against a different module ABI version.</p>\n<pre><code class=\"lang-js\">console.log(process.versions);\n</code></pre>\n<p>Will generate an object similar to:</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{ http_parser: &#39;2.7.0&#39;,\n  node: &#39;8.9.0&#39;,\n  v8: &#39;6.3.292.48-node.6&#39;,\n  uv: &#39;1.18.0&#39;,\n  zlib: &#39;1.2.11&#39;,\n  ares: &#39;1.13.0&#39;,\n  modules: &#39;60&#39;,\n  nghttp2: &#39;1.29.0&#39;,\n  napi: &#39;2&#39;,\n  openssl: &#39;1.0.2n&#39;,\n  icu: &#39;60.1&#39;,\n  unicode: &#39;10.0&#39;,\n  cldr: &#39;32.0&#39;,\n  tz: &#39;2016b&#39; }\n</code></pre>\n"
            }
          ]
        }
      ],
      "miscs": [
        {
          "textRaw": "\\_\\_dirname",
          "name": "\\_\\_dirname",
          "desc": "<p>This variable may appear to be global but is not. See <a href=\"#modules_dirname\"><code>__dirname</code></a>.</p>\n",
          "type": "misc",
          "displayName": "\\_\\_dirname"
        },
        {
          "textRaw": "\\_\\_filename",
          "name": "\\_\\_filename",
          "desc": "<p>This variable may appear to be global but is not. See <a href=\"#modules_filename\"><code>__filename</code></a>.</p>\n",
          "type": "misc",
          "displayName": "\\_\\_filename"
        },
        {
          "textRaw": "exports",
          "name": "exports",
          "desc": "<p>This variable may appear to be global but is not. See <a href=\"modules.html#modules_exports\"><code>exports</code></a>.</p>\n",
          "type": "misc",
          "displayName": "exports"
        },
        {
          "textRaw": "module",
          "name": "module",
          "desc": "<p>This variable may appear to be global but is not. See <a href=\"modules.html#modules_module\"><code>module</code></a>.</p>\n",
          "type": "misc",
          "displayName": "module"
        }
      ],
      "methods": [
        {
          "textRaw": "require()",
          "type": "method",
          "name": "require",
          "desc": "<p>This variable may appear to be global but is not. See <a href=\"globals.html#globals_require\"><code>require()</code></a>.</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ]
    },
    {
      "textRaw": "Internationalization Support",
      "name": "Internationalization Support",
      "introduced_in": "v8.2.0",
      "type": "misc",
      "desc": "<p>Node.js has many features that make it easier to write internationalized\nprograms. Some of them are:</p>\n<ul>\n<li>Locale-sensitive or Unicode-aware functions in the <a href=\"https://tc39.github.io/ecma262/\">ECMAScript Language\nSpecification</a>:<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\"><code>String.prototype.normalize()</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\"><code>String.prototype.toLowerCase()</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\"><code>String.prototype.toUpperCase()</code></a></li>\n</ul>\n</li>\n<li>All functionality described in the <a href=\"https://tc39.github.io/ecma402/\">ECMAScript Internationalization API\nSpecification</a> (aka ECMA-402):<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\"><code>Intl</code></a> object</li>\n<li>Locale-sensitive methods like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"><code>String.prototype.localeCompare()</code></a> and\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\"><code>Date.prototype.toLocaleString()</code></a></li>\n</ul>\n</li>\n<li>The <a href=\"url.html#url_the_whatwg_url_api\">WHATWG URL parser</a>&#39;s <a href=\"https://en.wikipedia.org/wiki/Internationalized_domain_name\">internationalized domain names</a> (IDNs) support</li>\n<li><a href=\"buffer.html#buffer_buffer_transcode_source_fromenc_toenc\"><code>require(&#39;buffer&#39;).transcode()</code></a></li>\n<li>More accurate <a href=\"repl.html#repl_repl\">REPL</a> line editing</li>\n<li><a href=\"util.html#util_class_util_textdecoder\"><code>require(&#39;util&#39;).TextDecoder</code></a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-unicode-property-escapes\"><code>RegExp</code> Unicode Property Escapes</a></li>\n</ul>\n<p>Node.js (and its underlying V8 engine) uses <a href=\"intl.html#intl_options_for_building_node_js\">ICU</a> to implement these features\nin native C/C++ code. However, some of them require a very large ICU data file\nin order to support all locales of the world. Because it is expected that most\nNode.js users will make use of only a small portion of ICU functionality, only\na subset of the full ICU data set is provided by Node.js by default. Several\noptions are provided for customizing and expanding the ICU data set either when\nbuilding or running Node.js.</p>\n",
      "miscs": [
        {
          "textRaw": "Options for building Node.js",
          "name": "options_for_building_node.js",
          "desc": "<p>To control how ICU is used in Node.js, four <code>configure</code> options are available\nduring compilation. Additional details on how to compile Node.js are documented\nin <a href=\"https://github.com/nodejs/node/blob/master/BUILDING.md\">BUILDING.md</a>.</p>\n<ul>\n<li><code>--with-intl=none</code> / <code>--without-intl</code></li>\n<li><code>--with-intl=system-icu</code></li>\n<li><code>--with-intl=small-icu</code> (default)</li>\n<li><code>--with-intl=full-icu</code></li>\n</ul>\n<p>An overview of available Node.js and JavaScript features for each <code>configure</code>\noption:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th><code>none</code></th>\n<th><code>system-icu</code></th>\n<th><code>small-icu</code></th>\n<th><code>full-icu</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\"><code>String.prototype.normalize()</code></a></td>\n<td>none (function is no-op)</td>\n<td>full</td>\n<td>full</td>\n<td>full</td>\n</tr>\n<tr>\n<td><code>String.prototype.to*Case()</code></td>\n<td>full</td>\n<td>full</td>\n<td>full</td>\n<td>full</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\"><code>Intl</code></a></td>\n<td>none (object does not exist)</td>\n<td>partial/full (depends on OS)</td>\n<td>partial (English-only)</td>\n<td>full</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\"><code>String.prototype.localeCompare()</code></a></td>\n<td>partial (not locale-aware)</td>\n<td>full</td>\n<td>full</td>\n<td>full</td>\n</tr>\n<tr>\n<td><code>String.prototype.toLocale*Case()</code></td>\n<td>partial (not locale-aware)</td>\n<td>full</td>\n<td>full</td>\n<td>full</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\"><code>Number.prototype.toLocaleString()</code></a></td>\n<td>partial (not locale-aware)</td>\n<td>partial/full (depends on OS)</td>\n<td>partial (English-only)</td>\n<td>full</td>\n</tr>\n<tr>\n<td><code>Date.prototype.toLocale*String()</code></td>\n<td>partial (not locale-aware)</td>\n<td>partial/full (depends on OS)</td>\n<td>partial (English-only)</td>\n<td>full</td>\n</tr>\n<tr>\n<td><a href=\"url.html#url_the_whatwg_url_api\">WHATWG URL Parser</a></td>\n<td>partial (no IDN support)</td>\n<td>full</td>\n<td>full</td>\n<td>full</td>\n</tr>\n<tr>\n<td><a href=\"buffer.html#buffer_buffer_transcode_source_fromenc_toenc\"><code>require(&#39;buffer&#39;).transcode()</code></a></td>\n<td>none (function does not exist)</td>\n<td>full</td>\n<td>full</td>\n<td>full</td>\n</tr>\n<tr>\n<td><a href=\"repl.html#repl_repl\">REPL</a></td>\n<td>partial (inaccurate line editing)</td>\n<td>full</td>\n<td>full</td>\n<td>full</td>\n</tr>\n<tr>\n<td><a href=\"util.html#util_class_util_textdecoder\"><code>require(&#39;util&#39;).TextDecoder</code></a></td>\n<td>partial (basic encodings support)</td>\n<td>partial/full (depends on OS)</td>\n<td>partial (Unicode-only)</td>\n<td>full</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/tc39/proposal-regexp-unicode-property-escapes\"><code>RegExp</code> Unicode Property Escapes</a></td>\n<td>none (invalid <code>RegExp</code> error)</td>\n<td>full</td>\n<td>full</td>\n<td>full</td>\n</tr>\n</tbody>\n</table>\n<p>The &quot;(not locale-aware)&quot; designation denotes that the function carries out its\noperation just like the non-<code>Locale</code> version of the function, if one\nexists. For example, under <code>none</code> mode, <code>Date.prototype.toLocaleString()</code>&#39;s\noperation is identical to that of <code>Date.prototype.toString()</code>.</p>\n",
          "modules": [
            {
              "textRaw": "Disable all internationalization features (`none`)",
              "name": "disable_all_internationalization_features_(`none`)",
              "desc": "<p>If this option is chosen, most internationalization features mentioned above\nwill be <strong>unavailable</strong> in the resulting <code>node</code> binary.</p>\n",
              "type": "module",
              "displayName": "Disable all internationalization features (`none`)"
            },
            {
              "textRaw": "Build with a pre-installed ICU (`system-icu`)",
              "name": "build_with_a_pre-installed_icu_(`system-icu`)",
              "desc": "<p>Node.js can link against an ICU build already installed on the system. In fact,\nmost Linux distributions already come with ICU installed, and this option would\nmake it possible to reuse the same set of data used by other components in the\nOS.</p>\n<p>Functionalities that only require the ICU library itself, such as\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\"><code>String.prototype.normalize()</code></a> and the <a href=\"url.html#url_the_whatwg_url_api\">WHATWG URL parser</a>, are fully\nsupported under <code>system-icu</code>. Features that require ICU locale data in\naddition, such as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> <em>may</em> be fully or partially\nsupported, depending on the completeness of the ICU data installed on the\nsystem.</p>\n",
              "type": "module",
              "displayName": "Build with a pre-installed ICU (`system-icu`)"
            },
            {
              "textRaw": "Embed a limited set of ICU data (`small-icu`)",
              "name": "embed_a_limited_set_of_icu_data_(`small-icu`)",
              "desc": "<p>This option makes the resulting binary link against the ICU library statically,\nand includes a subset of ICU data (typically only the English locale) within\nthe <code>node</code> executable.</p>\n<p>Functionalities that only require the ICU library itself, such as\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\"><code>String.prototype.normalize()</code></a> and the <a href=\"url.html#url_the_whatwg_url_api\">WHATWG URL parser</a>, are fully\nsupported under <code>small-icu</code>. Features that require ICU locale data in addition,\nsuch as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a>, generally only work with the English locale:</p>\n<pre><code class=\"lang-js\">const january = new Date(9e8);\nconst english = new Intl.DateTimeFormat(&#39;en&#39;, { month: &#39;long&#39; });\nconst spanish = new Intl.DateTimeFormat(&#39;es&#39;, { month: &#39;long&#39; });\n\nconsole.log(english.format(january));\n// Prints &quot;January&quot;\nconsole.log(spanish.format(january));\n// Prints &quot;M01&quot; on small-icu\n// Should print &quot;enero&quot;\n</code></pre>\n<p>This mode provides a good balance between features and binary size, and it is\nthe default behavior if no <code>--with-intl</code> flag is passed. The official binaries\nare also built in this mode.</p>\n",
              "modules": [
                {
                  "textRaw": "Providing ICU data at runtime",
                  "name": "providing_icu_data_at_runtime",
                  "desc": "<p>If the <code>small-icu</code> option is used, one can still provide additional locale data\nat runtime so that the JS methods would work for all ICU locales. Assuming the\ndata file is stored at <code>/some/directory</code>, it can be made available to ICU\nthrough either:</p>\n<ul>\n<li><p>The <a href=\"cli.html#cli_node_icu_data_file\"><code>NODE_ICU_DATA</code></a> environment variable:</p>\n<pre><code class=\"lang-shell\">env NODE_ICU_DATA=/some/directory node\n</code></pre>\n</li>\n<li><p>The <a href=\"cli.html#cli_icu_data_dir_file\"><code>--icu-data-dir</code></a> CLI parameter:</p>\n<pre><code class=\"lang-shell\">node --icu-data-dir=/some/directory\n</code></pre>\n</li>\n</ul>\n<p>(If both are specified, the <code>--icu-data-dir</code> CLI parameter takes precedence.)</p>\n<p>ICU is able to automatically find and load a variety of data formats, but the\ndata must be appropriate for the ICU version, and the file correctly named.\nThe most common name for the data file is <code>icudt5X[bl].dat</code>, where <code>5X</code> denotes\nthe intended ICU version, and <code>b</code> or <code>l</code> indicates the system&#39;s endianness.\nCheck <a href=\"http://userguide.icu-project.org/icudata\">&quot;ICU Data&quot;</a> article in the ICU User Guide for other supported formats\nand more details on ICU data in general.</p>\n<p>The <a href=\"https://www.npmjs.com/package/full-icu\">full-icu</a> npm module can greatly simplify ICU data installation by\ndetecting the ICU version of the running <code>node</code> executable and downloading the\nappropriate data file. After installing the module through <code>npm i full-icu</code>,\nthe data file will be available at <code>./node_modules/full-icu</code>. This path can be\nthen passed either to <code>NODE_ICU_DATA</code> or <code>--icu-data-dir</code> as shown above to\nenable full <code>Intl</code> support.</p>\n",
                  "type": "module",
                  "displayName": "Providing ICU data at runtime"
                }
              ],
              "type": "module",
              "displayName": "Embed a limited set of ICU data (`small-icu`)"
            },
            {
              "textRaw": "Embed the entire ICU (`full-icu`)",
              "name": "embed_the_entire_icu_(`full-icu`)",
              "desc": "<p>This option makes the resulting binary link against ICU statically and include\na full set of ICU data. A binary created this way has no further external\ndependencies and supports all locales, but might be rather large. See\n<a href=\"https://github.com/nodejs/node/blob/master/BUILDING.md#build-with-full-icu-support-all-locales-supported-by-icu\">BUILDING.md</a> on how to compile a binary using this mode.</p>\n",
              "type": "module",
              "displayName": "Embed the entire ICU (`full-icu`)"
            }
          ],
          "type": "misc",
          "displayName": "Options for building Node.js"
        },
        {
          "textRaw": "Detecting internationalization support",
          "name": "detecting_internationalization_support",
          "desc": "<p>To verify that ICU is enabled at all (<code>system-icu</code>, <code>small-icu</code>, or\n<code>full-icu</code>), simply checking the existence of <code>Intl</code> should suffice:</p>\n<pre><code class=\"lang-js\">const hasICU = typeof Intl === &#39;object&#39;;\n</code></pre>\n<p>Alternatively, checking for <code>process.versions.icu</code>, a property defined only\nwhen ICU is enabled, works too:</p>\n<pre><code class=\"lang-js\">const hasICU = typeof process.versions.icu === &#39;string&#39;;\n</code></pre>\n<p>To check for support for a non-English locale (i.e. <code>full-icu</code> or\n<code>system-icu</code>), <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\"><code>Intl.DateTimeFormat</code></a> can be a good distinguishing factor:</p>\n<pre><code class=\"lang-js\">const hasFullICU = (() =&gt; {\n  try {\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat(&#39;es&#39;, { month: &#39;long&#39; });\n    return spanish.format(january) === &#39;enero&#39;;\n  } catch (err) {\n    return false;\n  }\n})();\n</code></pre>\n<p>For more verbose tests for <code>Intl</code> support, the following resources may be found\nto be helpful:</p>\n<ul>\n<li><a href=\"https://github.com/srl295/btest402\">btest402</a>: Generally used to check whether Node.js with <code>Intl</code> support is\nbuilt correctly.</li>\n<li><a href=\"https://github.com/tc39/test262/tree/master/test/intl402\">Test262</a>: ECMAScript&#39;s official conformance test suite includes a section\ndedicated to ECMA-402.</li>\n</ul>\n<!-- [end-include:intl.md] -->\n<!-- [start-include:modules.md] -->\n",
          "type": "misc",
          "displayName": "Detecting internationalization support"
        }
      ]
    }
  ],
  "modules": [
    {
      "textRaw": "Assert",
      "name": "assert",
      "introduced_in": "v0.1.21",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>assert</code> module provides a simple set of assertion tests that can be used to\ntest invariants.</p>\n<p>A <code>strict</code> and a <code>legacy</code> mode exist, while it is recommended to only use\n<a href=\"#assert_strict_mode\"><code>strict mode</code></a>.</p>\n<p>For more information about the used equality comparisons see\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\">MDN&#39;s guide on equality comparisons and sameness</a>.</p>\n",
      "classes": [
        {
          "textRaw": "Class: assert.AssertionError",
          "type": "class",
          "name": "assert.AssertionError",
          "desc": "<p>A subclass of <code>Error</code> that indicates the failure of an assertion. All errors\nthrown by the <code>assert</code> module will be instances of the <code>AssertionError</code> class.</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`message` {string} If provided, the error message is going to be set to this value. ",
                      "name": "message",
                      "type": "string",
                      "desc": "If provided, the error message is going to be set to this value."
                    },
                    {
                      "textRaw": "`actual` {any} The `actual` property on the error instance is going to contain this value. Internally used for the `actual` error input in case e.g., [`assert.strictEqual()`] is used. ",
                      "name": "actual",
                      "type": "any",
                      "desc": "The `actual` property on the error instance is going to contain this value. Internally used for the `actual` error input in case e.g., [`assert.strictEqual()`] is used."
                    },
                    {
                      "textRaw": "`expected` {any} The `expected` property on the error instance is going to contain this value. Internally used for the `expected` error input in case e.g., [`assert.strictEqual()`] is used. ",
                      "name": "expected",
                      "type": "any",
                      "desc": "The `expected` property on the error instance is going to contain this value. Internally used for the `expected` error input in case e.g., [`assert.strictEqual()`] is used."
                    },
                    {
                      "textRaw": "`operator` {string} The `operator` property on the error instance is going to contain this value. Internally used to indicate what operation was used for comparison (or what assertion function triggered the error). ",
                      "name": "operator",
                      "type": "string",
                      "desc": "The `operator` property on the error instance is going to contain this value. Internally used to indicate what operation was used for comparison (or what assertion function triggered the error)."
                    },
                    {
                      "textRaw": "`stackStartFn` {Function} If provided, the generated stack trace is going to remove all frames up to the provided function. ",
                      "name": "stackStartFn",
                      "type": "Function",
                      "desc": "If provided, the generated stack trace is going to remove all frames up to the provided function."
                    }
                  ],
                  "name": "options",
                  "type": "Object"
                }
              ],
              "desc": "<p>A subclass of <code>Error</code> that indicates the failure of an assertion.</p>\n<p>All instances contain the built-in <code>Error</code> properties (<code>message</code> and <code>name</code>)\nand:</p>\n<ul>\n<li><code>actual</code> {any} Set to the actual value in case e.g.,\n<a href=\"#assert_assert_strictequal_actual_expected_message\"><code>assert.strictEqual()</code></a> is used.</li>\n<li><code>expected</code> {any} Set to the expected value in case e.g.,\n<a href=\"#assert_assert_strictequal_actual_expected_message\"><code>assert.strictEqual()</code></a> is used.</li>\n<li><code>generatedMessage</code> {boolean} Indicates if the message was auto-generated\n(<code>true</code>) or not.</li>\n<li><code>code</code> {string} This is always set to the string <code>ERR_ASSERTION</code> to indicate\nthat the error is actually an assertion error.</li>\n<li><code>operator</code> {string} Set to the passed in operator value.</li>\n</ul>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\n// Generate an AssertionError to compare the error message later:\nconst { message } = new assert.AssertionError({\n  actual: 1,\n  expected: 2,\n  operator: &#39;strictEqual&#39;\n});\n\n// Verify error output:\ntry {\n  assert.strictEqual(1, 2);\n} catch (err) {\n  assert(err instanceof assert.AssertionError);\n  assert.strictEqual(err.message, message);\n  assert.strictEqual(err.name, &#39;AssertionError [ERR_ASSERTION]&#39;);\n  assert.strictEqual(err.actual, 1);\n  assert.strictEqual(err.expected, 2);\n  assert.strictEqual(err.code, &#39;ERR_ASSERTION&#39;);\n  assert.strictEqual(err.operator, &#39;strictEqual&#39;);\n  assert.strictEqual(err.generatedMessage, true);\n}\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "name": "options"
                }
              ],
              "desc": "<p>A subclass of <code>Error</code> that indicates the failure of an assertion.</p>\n<p>All instances contain the built-in <code>Error</code> properties (<code>message</code> and <code>name</code>)\nand:</p>\n<ul>\n<li><code>actual</code> {any} Set to the actual value in case e.g.,\n<a href=\"#assert_assert_strictequal_actual_expected_message\"><code>assert.strictEqual()</code></a> is used.</li>\n<li><code>expected</code> {any} Set to the expected value in case e.g.,\n<a href=\"#assert_assert_strictequal_actual_expected_message\"><code>assert.strictEqual()</code></a> is used.</li>\n<li><code>generatedMessage</code> {boolean} Indicates if the message was auto-generated\n(<code>true</code>) or not.</li>\n<li><code>code</code> {string} This is always set to the string <code>ERR_ASSERTION</code> to indicate\nthat the error is actually an assertion error.</li>\n<li><code>operator</code> {string} Set to the passed in operator value.</li>\n</ul>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\n// Generate an AssertionError to compare the error message later:\nconst { message } = new assert.AssertionError({\n  actual: 1,\n  expected: 2,\n  operator: &#39;strictEqual&#39;\n});\n\n// Verify error output:\ntry {\n  assert.strictEqual(1, 2);\n} catch (err) {\n  assert(err instanceof assert.AssertionError);\n  assert.strictEqual(err.message, message);\n  assert.strictEqual(err.name, &#39;AssertionError [ERR_ASSERTION]&#39;);\n  assert.strictEqual(err.actual, 1);\n  assert.strictEqual(err.expected, 2);\n  assert.strictEqual(err.code, &#39;ERR_ASSERTION&#39;);\n  assert.strictEqual(err.operator, &#39;strictEqual&#39;);\n  assert.strictEqual(err.generatedMessage, true);\n}\n</code></pre>\n"
            }
          ]
        }
      ],
      "modules": [
        {
          "textRaw": "Strict mode",
          "name": "strict_mode",
          "meta": {
            "added": [
              "v9.9.0"
            ],
            "changes": [
              {
                "version": "v9.9.0",
                "pr-url": "https://github.com/nodejs/node/pull/17615",
                "description": "Added error diffs to the strict mode"
              },
              {
                "version": "v9.9.0",
                "pr-url": "https://github.com/nodejs/node/pull/17002",
                "description": "Added strict mode to the assert module."
              }
            ]
          },
          "desc": "<p>When using the <code>strict mode</code>, any <code>assert</code> function will use the equality used\nin the strict function mode. So <a href=\"#assert_assert_deepequal_actual_expected_message\"><code>assert.deepEqual()</code></a> will, for example,\nwork the same as <a href=\"assert.html#assert_assert_deepstrictequal_actual_expected_message\"><code>assert.deepStrictEqual()</code></a>.</p>\n<p>On top of that, error messages which involve objects produce an error diff\ninstead of displaying both objects. That is not the case for the legacy mode.</p>\n<p>It can be accessed using:</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;).strict;\n</code></pre>\n<p>Example error diff:</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;).strict;\n\nassert.deepEqual([[[1, 2, 3]], 4, 5], [[[1, 2, &#39;3&#39;]], 4, 5]);\n// AssertionError: Input A expected to strictly deep-equal input B:\n// + expected - actual ... Lines skipped\n//\n//   [\n//     [\n// ...\n//       2,\n// -     3\n// +     &#39;3&#39;\n//     ],\n// ...\n//     5\n//   ]\n</code></pre>\n<p>To deactivate the colors, use the <code>NODE_DISABLE_COLORS</code> environment variable.\nPlease note that this will also deactivate the colors in the REPL.</p>\n",
          "type": "module",
          "displayName": "Strict mode"
        },
        {
          "textRaw": "Legacy mode",
          "name": "legacy_mode",
          "stability": 0,
          "stabilityText": "Deprecated: Use strict mode instead.",
          "desc": "<p>When accessing <code>assert</code> directly instead of using the <code>strict</code> property, the\n<a href=\"https://tc39.github.io/ecma262/#sec-abstract-equality-comparison\">Abstract Equality Comparison</a> will be used for any function without &quot;strict&quot;\nin its name, such as <a href=\"#assert_assert_deepequal_actual_expected_message\"><code>assert.deepEqual()</code></a>.</p>\n<p>It can be accessed using:</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n</code></pre>\n<p>It is recommended to use the <a href=\"#assert_strict_mode\"><code>strict mode</code></a> instead as the\n<a href=\"https://tc39.github.io/ecma262/#sec-abstract-equality-comparison\">Abstract Equality Comparison</a> can often have surprising results. This is\nespecially true for <a href=\"#assert_assert_deepequal_actual_expected_message\"><code>assert.deepEqual()</code></a>, where the comparison rules are\nlax:</p>\n<pre><code class=\"lang-js\">// WARNING: This does not throw an AssertionError!\nassert.deepEqual(/a/gi, new Date());\n</code></pre>\n",
          "type": "module",
          "displayName": "Legacy mode"
        }
      ],
      "methods": [
        {
          "textRaw": "assert(value[, message])",
          "type": "method",
          "name": "assert",
          "meta": {
            "added": [
              "v0.5.9"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`value` {any} ",
                  "name": "value",
                  "type": "any"
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>An alias of <a href=\"#assert_assert_ok_value_message\"><code>assert.ok()</code></a>.</p>\n"
        },
        {
          "textRaw": "assert.deepEqual(actual, expected[, message])",
          "type": "method",
          "name": "deepEqual",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v9.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/15001",
                "description": "The `Error` names and messages are now properly compared"
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12142",
                "description": "The `Set` and `Map` content is also compared"
              },
              {
                "version": "v6.4.0, v4.7.1",
                "pr-url": "https://github.com/nodejs/node/pull/8002",
                "description": "Typed array slices are handled correctly now."
              },
              {
                "version": "v6.1.0, v4.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/6432",
                "description": "Objects with circular references can be used as inputs now."
              },
              {
                "version": "v5.10.1, v4.4.3",
                "pr-url": "https://github.com/nodejs/node/pull/5910",
                "description": "Handle non-`Uint8Array` typed arrays correctly."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`actual` {any} ",
                  "name": "actual",
                  "type": "any"
                },
                {
                  "textRaw": "`expected` {any} ",
                  "name": "expected",
                  "type": "any"
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p><strong>Strict mode</strong></p>\n<p>An alias of <a href=\"assert.html#assert_assert_deepstrictequal_actual_expected_message\"><code>assert.deepStrictEqual()</code></a>.</p>\n<p><strong>Legacy mode</strong></p>\n<blockquote>\n<p>Stability: 0 - Deprecated: Use <a href=\"assert.html#assert_assert_deepstrictequal_actual_expected_message\"><code>assert.deepStrictEqual()</code></a> instead.</p>\n</blockquote>\n<p>Tests for deep equality between the <code>actual</code> and <code>expected</code> parameters.\nPrimitive values are compared with the <a href=\"https://tc39.github.io/ecma262/#sec-abstract-equality-comparison\">Abstract Equality Comparison</a>\n( <code>==</code> ).</p>\n<p>Only <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">enumerable &quot;own&quot; properties</a> are considered. The\n<a href=\"#assert_assert_deepequal_actual_expected_message\"><code>assert.deepEqual()</code></a> implementation does not test the\n<a href=\"https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\"><code>[[Prototype]]</code></a> of objects or enumerable own <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>\nproperties. For such checks, consider using <a href=\"assert.html#assert_assert_deepstrictequal_actual_expected_message\"><code>assert.deepStrictEqual()</code></a>\ninstead. <a href=\"#assert_assert_deepequal_actual_expected_message\"><code>assert.deepEqual()</code></a> can have potentially surprising results. The\nfollowing example does not throw an <code>AssertionError</code> because the properties on\nthe <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"><code>RegExp</code></a> object are not enumerable:</p>\n<pre><code class=\"lang-js\">// WARNING: This does not throw an AssertionError!\nassert.deepEqual(/a/gi, new Date());\n</code></pre>\n<p>An exception is made for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a>. <code>Map</code>s and <code>Set</code>s have their\ncontained items compared too, as expected.</p>\n<p>&quot;Deep&quot; equality means that the enumerable &quot;own&quot; properties of child objects\nare evaluated also:</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nconst obj1 = {\n  a: {\n    b: 1\n  }\n};\nconst obj2 = {\n  a: {\n    b: 2\n  }\n};\nconst obj3 = {\n  a: {\n    b: 1\n  }\n};\nconst obj4 = Object.create(obj1);\n\nassert.deepEqual(obj1, obj1);\n// OK, object is equal to itself\n\nassert.deepEqual(obj1, obj2);\n// AssertionError: { a: { b: 1 } } deepEqual { a: { b: 2 } }\n// values of b are different\n\nassert.deepEqual(obj1, obj3);\n// OK, objects are equal\n\nassert.deepEqual(obj1, obj4);\n// AssertionError: { a: { b: 1 } } deepEqual {}\n// Prototypes are ignored\n</code></pre>\n<p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned. If the <code>message</code>\nparameter is an instance of an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> then it will be thrown instead of the\n<code>AssertionError</code>.</p>\n"
        },
        {
          "textRaw": "assert.deepStrictEqual(actual, expected[, message])",
          "type": "method",
          "name": "deepStrictEqual",
          "meta": {
            "added": [
              "v1.2.0"
            ],
            "changes": [
              {
                "version": "v9.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/15169",
                "description": "Enumerable symbol properties are now compared."
              },
              {
                "version": "v9.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/15036",
                "description": "The `NaN` is now compared using the [SameValueZero](https://tc39.github.io/ecma262/#sec-samevaluezero) comparison."
              },
              {
                "version": "v8.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/15001",
                "description": "The `Error` names and messages are now properly compared"
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12142",
                "description": "The `Set` and `Map` content is also compared"
              },
              {
                "version": "v6.4.0, v4.7.1",
                "pr-url": "https://github.com/nodejs/node/pull/8002",
                "description": "Typed array slices are handled correctly now."
              },
              {
                "version": "v6.1.0",
                "pr-url": "https://github.com/nodejs/node/pull/6432",
                "description": "Objects with circular references can be used as inputs now."
              },
              {
                "version": "v5.10.1, v4.4.3",
                "pr-url": "https://github.com/nodejs/node/pull/5910",
                "description": "Handle non-`Uint8Array` typed arrays correctly."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`actual` {any} ",
                  "name": "actual",
                  "type": "any"
                },
                {
                  "textRaw": "`expected` {any} ",
                  "name": "expected",
                  "type": "any"
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Tests for deep equality between the <code>actual</code> and <code>expected</code> parameters.\n&quot;Deep&quot; equality means that the enumerable &quot;own&quot; properties of child objects\nare recursively evaluated also by the following rules.</p>\n",
          "modules": [
            {
              "textRaw": "Comparison details",
              "name": "comparison_details",
              "desc": "<ul>\n<li>Primitive values are compared using the <a href=\"https://tc39.github.io/ecma262/#sec-samevalue\">SameValue Comparison</a>, used by\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"><code>Object.is()</code></a>.</li>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-object.prototype.tostring\">Type tags</a> of objects should be the same.</li>\n<li><a href=\"https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\"><code>[[Prototype]]</code></a> of objects are compared using\nthe <a href=\"https://tc39.github.io/ecma262/#sec-strict-equality-comparison\">Strict Equality Comparison</a>.</li>\n<li>Only <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\">enumerable &quot;own&quot; properties</a> are considered.</li>\n<li><a href=\"errors.html#errors_class_error\"><code>Error</code></a> names and messages are always compared, even if these are not\nenumerable properties.</li>\n<li>Enumerable own <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> properties are compared as well.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive#Primitive_wrapper_objects_in_JavaScript\">Object wrappers</a> are compared both as objects and unwrapped values.</li>\n<li><code>Object</code> properties are compared unordered.</li>\n<li><code>Map</code> keys and <code>Set</code> items are compared unordered.</li>\n<li>Recursion stops when both sides differ or both sides encounter a circular\nreference.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a> comparison does not rely on their values. See\nbelow for further details.</li>\n</ul>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;).strict;\n\n// This fails because 1 !== &#39;1&#39;.\nassert.deepStrictEqual({ a: 1 }, { a: &#39;1&#39; });\n// AssertionError: Input A expected to strictly deep-equal input B:\n// + expected - actual\n//   {\n// -   a: 1\n// +   a: &#39;1&#39;\n//   }\n\n// The following objects don&#39;t have own properties\nconst date = new Date();\nconst object = {};\nconst fakeDate = {};\nObject.setPrototypeOf(fakeDate, Date.prototype);\n\n// Different [[Prototype]]:\nassert.deepStrictEqual(object, fakeDate);\n// AssertionError: Input A expected to strictly deep-equal input B:\n// + expected - actual\n// - {}\n// + Date {}\n\n// Different type tags:\nassert.deepStrictEqual(date, fakeDate);\n// AssertionError: Input A expected to strictly deep-equal input B:\n// + expected - actual\n// - 2018-04-26T00:49:08.604Z\n// + Date {}\n\nassert.deepStrictEqual(NaN, NaN);\n// OK, because of the SameValue comparison\n\n// Different unwrapped numbers:\nassert.deepStrictEqual(new Number(1), new Number(2));\n// AssertionError: Input A expected to strictly deep-equal input B:\n// + expected - actual\n// - [Number: 1]\n// + [Number: 2]\n\nassert.deepStrictEqual(new String(&#39;foo&#39;), Object(&#39;foo&#39;));\n// OK because the object and the string are identical when unwrapped.\n\nassert.deepStrictEqual(-0, -0);\n// OK\n\n// Different zeros using the SameValue Comparison:\nassert.deepStrictEqual(0, -0);\n// AssertionError: Input A expected to strictly deep-equal input B:\n// + expected - actual\n// - 0\n// + -0\n\nconst symbol1 = Symbol();\nconst symbol2 = Symbol();\nassert.deepStrictEqual({ [symbol1]: 1 }, { [symbol1]: 1 });\n// OK, because it is the same symbol on both objects.\nassert.deepStrictEqual({ [symbol1]: 1 }, { [symbol2]: 1 });\n// AssertionError [ERR_ASSERTION]: Input objects not identical:\n// {\n//   [Symbol()]: 1\n// }\n\nconst weakMap1 = new WeakMap();\nconst weakMap2 = new WeakMap([[{}, {}]]);\nconst weakMap3 = new WeakMap();\nweakMap3.unequal = true;\n\nassert.deepStrictEqual(weakMap1, weakMap2);\n// OK, because it is impossible to compare the entries\n\n// Fails because weakMap3 has a property that weakMap1 does not contain:\nassert.deepStrictEqual(weakMap1, weakMap3);\n// AssertionError: Input A expected to strictly deep-equal input B:\n// + expected - actual\n//   WeakMap {\n// -   [items unknown]\n// +   [items unknown],\n// +   unequal: true\n//   }\n</code></pre>\n<p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned. If the <code>message</code>\nparameter is an instance of an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> then it will be thrown instead of the\n<code>AssertionError</code>.</p>\n",
              "type": "module",
              "displayName": "Comparison details"
            }
          ]
        },
        {
          "textRaw": "assert.doesNotReject(block[, error][, message])",
          "type": "method",
          "name": "doesNotReject",
          "meta": {
            "added": [
              "v10.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`block` {Function|Promise} ",
                  "name": "block",
                  "type": "Function|Promise"
                },
                {
                  "textRaw": "`error` {RegExp|Function} ",
                  "name": "error",
                  "type": "RegExp|Function",
                  "optional": true
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "block"
                },
                {
                  "name": "error",
                  "optional": true
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Awaits the <code>block</code> promise or, if <code>block</code> is a function, immediately calls the\nfunction and awaits the returned promise to complete. It will then check that\nthe promise is not rejected.</p>\n<p>If <code>block</code> is a function and it throws an error synchronously,\n<code>assert.doesNotReject()</code> will return a rejected <code>Promise</code> with that error. If\nthe function does not return a promise, <code>assert.doesNotReject()</code> will return a\nrejected <code>Promise</code> with an <a href=\"errors.html#errors_err_invalid_return_value\"><code>ERR_INVALID_RETURN_VALUE</code></a> error. In both cases\nthe error handler is skipped.</p>\n<p>Please note: Using <code>assert.doesNotReject()</code> is actually not useful because there\nis little benefit by catching a rejection and then rejecting it again. Instead,\nconsider adding a comment next to the specific code path that should not reject\nand keep error messages as expressive as possible.</p>\n<p>If specified, <code>error</code> can be a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"><code>Class</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"><code>RegExp</code></a> or a validation\nfunction. See <a href=\"#assert_assert_throws_block_error_message\"><code>assert.throws()</code></a> for more details.</p>\n<p>Besides the async nature to await the completion behaves identically to\n<a href=\"#assert_assert_doesnotthrow_block_error_message\"><code>assert.doesNotThrow()</code></a>.</p>\n<pre><code class=\"lang-js\">(async () =&gt; {\n  await assert.doesNotReject(\n    async () =&gt; {\n      throw new TypeError(&#39;Wrong value&#39;);\n    },\n    SyntaxError\n  );\n})();\n</code></pre>\n<pre><code class=\"lang-js\">assert.doesNotReject(Promise.reject(new TypeError(&#39;Wrong value&#39;)))\n  .then(() =&gt; {\n    // ...\n  });\n</code></pre>\n"
        },
        {
          "textRaw": "assert.doesNotThrow(block[, error][, message])",
          "type": "method",
          "name": "doesNotThrow",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v5.11.0, v4.4.5",
                "pr-url": "https://github.com/nodejs/node/pull/2407",
                "description": "The `message` parameter is respected now."
              },
              {
                "version": "v4.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/3276",
                "description": "The `error` parameter can now be an arrow function."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`block` {Function} ",
                  "name": "block",
                  "type": "Function"
                },
                {
                  "textRaw": "`error` {RegExp|Function} ",
                  "name": "error",
                  "type": "RegExp|Function",
                  "optional": true
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "block"
                },
                {
                  "name": "error",
                  "optional": true
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Asserts that the function <code>block</code> does not throw an error.</p>\n<p>Please note: Using <code>assert.doesNotThrow()</code> is actually not useful because there\nis no benefit by catching an error and then rethrowing it. Instead, consider\nadding a comment next to the specific code path that should not throw and keep\nerror messages as expressive as possible.</p>\n<p>When <code>assert.doesNotThrow()</code> is called, it will immediately call the <code>block</code>\nfunction.</p>\n<p>If an error is thrown and it is the same type as that specified by the <code>error</code>\nparameter, then an <code>AssertionError</code> is thrown. If the error is of a different\ntype, or if the <code>error</code> parameter is undefined, the error is propagated back\nto the caller.</p>\n<p>If specified, <code>error</code> can be a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"><code>Class</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"><code>RegExp</code></a> or a validation\nfunction. See <a href=\"#assert_assert_throws_block_error_message\"><code>assert.throws()</code></a> for more details.</p>\n<p>The following, for instance, will throw the <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> because there is no\nmatching error type in the assertion:</p>\n<!-- eslint-disable no-restricted-syntax -->\n<pre><code class=\"lang-js\">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&#39;Wrong value&#39;);\n  },\n  SyntaxError\n);\n</code></pre>\n<p>However, the following will result in an <code>AssertionError</code> with the message\n&#39;Got unwanted exception...&#39;:</p>\n<!-- eslint-disable no-restricted-syntax -->\n<pre><code class=\"lang-js\">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&#39;Wrong value&#39;);\n  },\n  TypeError\n);\n</code></pre>\n<p>If an <code>AssertionError</code> is thrown and a value is provided for the <code>message</code>\nparameter, the value of <code>message</code> will be appended to the <code>AssertionError</code>\nmessage:</p>\n<!-- eslint-disable no-restricted-syntax -->\n<pre><code class=\"lang-js\">assert.doesNotThrow(\n  () =&gt; {\n    throw new TypeError(&#39;Wrong value&#39;);\n  },\n  /Wrong value/,\n  &#39;Whoops&#39;\n);\n// Throws: AssertionError: Got unwanted exception: Whoops\n</code></pre>\n"
        },
        {
          "textRaw": "assert.equal(actual, expected[, message])",
          "type": "method",
          "name": "equal",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`actual` {any} ",
                  "name": "actual",
                  "type": "any"
                },
                {
                  "textRaw": "`expected` {any} ",
                  "name": "expected",
                  "type": "any"
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p><strong>Strict mode</strong></p>\n<p>An alias of <a href=\"#assert_assert_strictequal_actual_expected_message\"><code>assert.strictEqual()</code></a>.</p>\n<p><strong>Legacy mode</strong></p>\n<blockquote>\n<p>Stability: 0 - Deprecated: Use <a href=\"#assert_assert_strictequal_actual_expected_message\"><code>assert.strictEqual()</code></a> instead.</p>\n</blockquote>\n<p>Tests shallow, coercive equality between the <code>actual</code> and <code>expected</code> parameters\nusing the <a href=\"https://tc39.github.io/ecma262/#sec-abstract-equality-comparison\">Abstract Equality Comparison</a> ( <code>==</code> ).</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nassert.equal(1, 1);\n// OK, 1 == 1\nassert.equal(1, &#39;1&#39;);\n// OK, 1 == &#39;1&#39;\n\nassert.equal(1, 2);\n// AssertionError: 1 == 2\nassert.equal({ a: { b: 1 } }, { a: { b: 1 } });\n// AssertionError: { a: { b: 1 } } == { a: { b: 1 } }\n</code></pre>\n<p>If the values are not equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned. If the <code>message</code>\nparameter is an instance of an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> then it will be thrown instead of the\n<code>AssertionError</code>.</p>\n"
        },
        {
          "textRaw": "assert.fail([message])",
          "type": "method",
          "name": "fail",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`message` {any} **Default:** `'Failed'` ",
                  "name": "message",
                  "type": "any",
                  "default": "`'Failed'`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Throws an <code>AssertionError</code> with the provided error message or a default error\nmessage. If the <code>message</code> parameter is an instance of an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> then it\nwill be thrown instead of the <code>AssertionError</code>.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;).strict;\n\nassert.fail();\n// AssertionError [ERR_ASSERTION]: Failed\n\nassert.fail(&#39;boom&#39;);\n// AssertionError [ERR_ASSERTION]: boom\n\nassert.fail(new TypeError(&#39;need array&#39;));\n// TypeError: need array\n</code></pre>\n<p>Using <code>assert.fail()</code> with more than two arguments is possible but deprecated.\nSee below for further details.</p>\n"
        },
        {
          "textRaw": "assert.fail(actual, expected[, message[, operator[, stackStartFunction]]])",
          "type": "method",
          "name": "fail",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/18418",
                "description": "Calling `assert.fail()` with more than one argument is deprecated and emits a warning."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`actual` {any} ",
                  "name": "actual",
                  "type": "any"
                },
                {
                  "textRaw": "`expected` {any} ",
                  "name": "expected",
                  "type": "any"
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                },
                {
                  "textRaw": "`operator` {string} **Default:** `'!='` ",
                  "name": "operator",
                  "type": "string",
                  "default": "`'!='`",
                  "optional": true
                },
                {
                  "textRaw": "`stackStartFunction` {Function} **Default:** `assert.fail` ",
                  "name": "stackStartFunction",
                  "type": "Function",
                  "default": "`assert.fail`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                },
                {
                  "name": "operator",
                  "optional": true
                },
                {
                  "name": "stackStartFunction",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Stability: 0 - Deprecated: Use <code>assert.fail([message])</code> or other assert\nfunctions instead.</p>\n<p>If <code>message</code> is falsy, the error message is set as the values of <code>actual</code> and\n<code>expected</code> separated by the provided <code>operator</code>. If just the two <code>actual</code> and\n<code>expected</code> arguments are provided, <code>operator</code> will default to <code>&#39;!=&#39;</code>. If\n<code>message</code> is provided as third argument it will be used as the error message and\nthe other arguments will be stored as properties on the thrown object. If\n<code>stackStartFunction</code> is provided, all stack frames above that function will be\nremoved from stacktrace (see <a href=\"errors.html#errors_error_capturestacktrace_targetobject_constructoropt\"><code>Error.captureStackTrace</code></a>). If no arguments are\ngiven, the default message <code>Failed</code> will be used.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;).strict;\n\nassert.fail(&#39;a&#39;, &#39;b&#39;);\n// AssertionError [ERR_ASSERTION]: &#39;a&#39; != &#39;b&#39;\n\nassert.fail(1, 2, undefined, &#39;&gt;&#39;);\n// AssertionError [ERR_ASSERTION]: 1 &gt; 2\n\nassert.fail(1, 2, &#39;fail&#39;);\n// AssertionError [ERR_ASSERTION]: fail\n\nassert.fail(1, 2, &#39;whoops&#39;, &#39;&gt;&#39;);\n// AssertionError [ERR_ASSERTION]: whoops\n\nassert.fail(1, 2, new TypeError(&#39;need array&#39;));\n// TypeError: need array\n</code></pre>\n<p>In the last three cases <code>actual</code>, <code>expected</code>, and <code>operator</code> have no\ninfluence on the error message.</p>\n<p>Example use of <code>stackStartFunction</code> for truncating the exception&#39;s stacktrace:</p>\n<pre><code class=\"lang-js\">function suppressFrame() {\n  assert.fail(&#39;a&#39;, &#39;b&#39;, undefined, &#39;!==&#39;, suppressFrame);\n}\nsuppressFrame();\n// AssertionError [ERR_ASSERTION]: &#39;a&#39; !== &#39;b&#39;\n//     at repl:1:1\n//     at ContextifyScript.Script.runInThisContext (vm.js:44:33)\n//     ...\n</code></pre>\n"
        },
        {
          "textRaw": "assert.ifError(value)",
          "type": "method",
          "name": "ifError",
          "meta": {
            "added": [
              "v0.1.97"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/18247",
                "description": "Instead of throwing the original error it is now wrapped into an `AssertionError` that contains the full stack trace."
              },
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/18247",
                "description": "Value may now only be `undefined` or `null`. Before any truthy input was accepted."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`value` {any} ",
                  "name": "value",
                  "type": "any"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "value"
                }
              ]
            }
          ],
          "desc": "<p>Throws <code>value</code> if <code>value</code> is not <code>undefined</code> or <code>null</code>. This is useful when\ntesting the <code>error</code> argument in callbacks. The stack trace contains all frames\nfrom the error passed to <code>ifError()</code> including the potential new frames for\n<code>ifError()</code> itself. See below for an example.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;).strict;\n\nassert.ifError(null);\n// OK\nassert.ifError(0);\n// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 0\nassert.ifError(&#39;error&#39;);\n// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: &#39;error&#39;\nassert.ifError(new Error());\n// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: Error\n\n// Create some random error frames.\nlet err;\n(function errorFrame() {\n  err = new Error(&#39;test error&#39;);\n})();\n\n(function ifErrorFrame() {\n  assert.ifError(err);\n})();\n// AssertionError [ERR_ASSERTION]: ifError got unwanted exception: test error\n//     at ifErrorFrame\n//     at errorFrame\n</code></pre>\n"
        },
        {
          "textRaw": "assert.notDeepEqual(actual, expected[, message])",
          "type": "method",
          "name": "notDeepEqual",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v9.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/15001",
                "description": "The `Error` names and messages are now properly compared"
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12142",
                "description": "The `Set` and `Map` content is also compared"
              },
              {
                "version": "v6.4.0, v4.7.1",
                "pr-url": "https://github.com/nodejs/node/pull/8002",
                "description": "Typed array slices are handled correctly now."
              },
              {
                "version": "v6.1.0, v4.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/6432",
                "description": "Objects with circular references can be used as inputs now."
              },
              {
                "version": "v5.10.1, v4.4.3",
                "pr-url": "https://github.com/nodejs/node/pull/5910",
                "description": "Handle non-`Uint8Array` typed arrays correctly."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`actual` {any} ",
                  "name": "actual",
                  "type": "any"
                },
                {
                  "textRaw": "`expected` {any} ",
                  "name": "expected",
                  "type": "any"
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p><strong>Strict mode</strong></p>\n<p>An alias of <a href=\"#assert_assert_notdeepstrictequal_actual_expected_message\"><code>assert.notDeepStrictEqual()</code></a>.</p>\n<p><strong>Legacy mode</strong></p>\n<blockquote>\n<p>Stability: 0 - Deprecated: Use <a href=\"#assert_assert_notdeepstrictequal_actual_expected_message\"><code>assert.notDeepStrictEqual()</code></a> instead.</p>\n</blockquote>\n<p>Tests for any deep inequality. Opposite of <a href=\"#assert_assert_deepequal_actual_expected_message\"><code>assert.deepEqual()</code></a>.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nconst obj1 = {\n  a: {\n    b: 1\n  }\n};\nconst obj2 = {\n  a: {\n    b: 2\n  }\n};\nconst obj3 = {\n  a: {\n    b: 1\n  }\n};\nconst obj4 = Object.create(obj1);\n\nassert.notDeepEqual(obj1, obj1);\n// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj2);\n// OK: obj1 and obj2 are not deeply equal\n\nassert.notDeepEqual(obj1, obj3);\n// AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n\nassert.notDeepEqual(obj1, obj4);\n// OK: obj1 and obj4 are not deeply equal\n</code></pre>\n<p>If the values are deeply equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned. If the <code>message</code>\nparameter is an instance of an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> then it will be thrown instead of the\n<code>AssertionError</code>.</p>\n"
        },
        {
          "textRaw": "assert.notDeepStrictEqual(actual, expected[, message])",
          "type": "method",
          "name": "notDeepStrictEqual",
          "meta": {
            "added": [
              "v1.2.0"
            ],
            "changes": [
              {
                "version": "v9.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/15398",
                "description": "The `-0` and `+0` are not considered equal anymore."
              },
              {
                "version": "v9.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/15036",
                "description": "The `NaN` is now compared using the [SameValueZero](https://tc39.github.io/ecma262/#sec-samevaluezero) comparison."
              },
              {
                "version": "v9.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/15001",
                "description": "The `Error` names and messages are now properly compared"
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12142",
                "description": "The `Set` and `Map` content is also compared"
              },
              {
                "version": "v6.4.0, v4.7.1",
                "pr-url": "https://github.com/nodejs/node/pull/8002",
                "description": "Typed array slices are handled correctly now."
              },
              {
                "version": "v6.1.0",
                "pr-url": "https://github.com/nodejs/node/pull/6432",
                "description": "Objects with circular references can be used as inputs now."
              },
              {
                "version": "v5.10.1, v4.4.3",
                "pr-url": "https://github.com/nodejs/node/pull/5910",
                "description": "Handle non-`Uint8Array` typed arrays correctly."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`actual` {any} ",
                  "name": "actual",
                  "type": "any"
                },
                {
                  "textRaw": "`expected` {any} ",
                  "name": "expected",
                  "type": "any"
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Tests for deep strict inequality. Opposite of <a href=\"assert.html#assert_assert_deepstrictequal_actual_expected_message\"><code>assert.deepStrictEqual()</code></a>.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;).strict;\n\nassert.notDeepStrictEqual({ a: 1 }, { a: &#39;1&#39; });\n// OK\n</code></pre>\n<p>If the values are deeply and strictly equal, an <code>AssertionError</code> is thrown with\na <code>message</code> property set equal to the value of the <code>message</code> parameter. If the\n<code>message</code> parameter is undefined, a default error message is assigned. If the\n<code>message</code> parameter is an instance of an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> then it will be thrown\ninstead of the <code>AssertionError</code>.</p>\n"
        },
        {
          "textRaw": "assert.notEqual(actual, expected[, message])",
          "type": "method",
          "name": "notEqual",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`actual` {any} ",
                  "name": "actual",
                  "type": "any"
                },
                {
                  "textRaw": "`expected` {any} ",
                  "name": "expected",
                  "type": "any"
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p><strong>Strict mode</strong></p>\n<p>An alias of <a href=\"#assert_assert_notstrictequal_actual_expected_message\"><code>assert.notStrictEqual()</code></a>.</p>\n<p><strong>Legacy mode</strong></p>\n<blockquote>\n<p>Stability: 0 - Deprecated: Use <a href=\"#assert_assert_notstrictequal_actual_expected_message\"><code>assert.notStrictEqual()</code></a> instead.</p>\n</blockquote>\n<p>Tests shallow, coercive inequality with the <a href=\"https://tc39.github.io/ecma262/#sec-abstract-equality-comparison\">Abstract Equality Comparison</a>\n( <code>!=</code> ).</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\n\nassert.notEqual(1, 2);\n// OK\n\nassert.notEqual(1, 1);\n// AssertionError: 1 != 1\n\nassert.notEqual(1, &#39;1&#39;);\n// AssertionError: 1 != &#39;1&#39;\n</code></pre>\n<p>If the values are equal, an <code>AssertionError</code> is thrown with a <code>message</code> property\nset equal to the value of the <code>message</code> parameter. If the <code>message</code> parameter is\nundefined, a default error message is assigned. If the <code>message</code> parameter is an\ninstance of an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> then it will be thrown instead of the\n<code>AssertionError</code>.</p>\n"
        },
        {
          "textRaw": "assert.notStrictEqual(actual, expected[, message])",
          "type": "method",
          "name": "notStrictEqual",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/17003",
                "description": "Used comparison changed from Strict Equality to `Object.is()`"
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`actual` {any} ",
                  "name": "actual",
                  "type": "any"
                },
                {
                  "textRaw": "`expected` {any} ",
                  "name": "expected",
                  "type": "any"
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Tests strict inequality between the <code>actual</code> and <code>expected</code> parameters as\ndetermined by the <a href=\"https://tc39.github.io/ecma262/#sec-samevalue\">SameValue Comparison</a>.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;).strict;\n\nassert.notStrictEqual(1, 2);\n// OK\n\nassert.notStrictEqual(1, 1);\n// AssertionError [ERR_ASSERTION]: Identical input passed to notStrictEqual: 1\n\nassert.notStrictEqual(1, &#39;1&#39;);\n// OK\n</code></pre>\n<p>If the values are strictly equal, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is undefined, a default error message is assigned. If the <code>message</code>\nparameter is an instance of an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> then it will be thrown instead of the\n<code>AssertionError</code>.</p>\n"
        },
        {
          "textRaw": "assert.ok(value[, message])",
          "type": "method",
          "name": "ok",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/18319",
                "description": "The `assert.ok()` (no arguments) will now use a predefined error message."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`value` {any} ",
                  "name": "value",
                  "type": "any"
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Tests if <code>value</code> is truthy. It is equivalent to\n<code>assert.equal(!!value, true, message)</code>.</p>\n<p>If <code>value</code> is not truthy, an <code>AssertionError</code> is thrown with a <code>message</code>\nproperty set equal to the value of the <code>message</code> parameter. If the <code>message</code>\nparameter is <code>undefined</code>, a default error message is assigned. If the <code>message</code>\nparameter is an instance of an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> then it will be thrown instead of the\n<code>AssertionError</code>.\nIf no arguments are passed in at all <code>message</code> will be set to the string:\n<code>&#39;No value argument passed to `assert.ok()`&#39;</code>.</p>\n<p>Be aware that in the <code>repl</code> the error message will be different to the one\nthrown in a file! See below for further details.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;).strict;\n\nassert.ok(true);\n// OK\nassert.ok(1);\n// OK\n\nassert.ok();\n// AssertionError: No value argument passed to `assert.ok()`\n\nassert.ok(false, &#39;it\\&#39;s false&#39;);\n// AssertionError: it&#39;s false\n\n// In the repl:\nassert.ok(typeof 123 === &#39;string&#39;);\n// AssertionError: false == true\n\n// In a file (e.g. test.js):\nassert.ok(typeof 123 === &#39;string&#39;);\n// AssertionError: The expression evaluated to a falsy value:\n//\n//   assert.ok(typeof 123 === &#39;string&#39;)\n\nassert.ok(false);\n// AssertionError: The expression evaluated to a falsy value:\n//\n//   assert.ok(false)\n\nassert.ok(0);\n// AssertionError: The expression evaluated to a falsy value:\n//\n//   assert.ok(0)\n\n// Using `assert()` works the same:\nassert(0);\n// AssertionError: The expression evaluated to a falsy value:\n//\n//   assert(0)\n</code></pre>\n"
        },
        {
          "textRaw": "assert.rejects(block[, error][, message])",
          "type": "method",
          "name": "rejects",
          "meta": {
            "added": [
              "v10.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`block` {Function|Promise} ",
                  "name": "block",
                  "type": "Function|Promise"
                },
                {
                  "textRaw": "`error` {RegExp|Function|Object|Error} ",
                  "name": "error",
                  "type": "RegExp|Function|Object|Error",
                  "optional": true
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "block"
                },
                {
                  "name": "error",
                  "optional": true
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Awaits the <code>block</code> promise or, if <code>block</code> is a function, immediately calls the\nfunction and awaits the returned promise to complete. It will then check that\nthe promise is rejected.</p>\n<p>If <code>block</code> is a function and it throws an error synchronously,\n<code>assert.rejects()</code> will return a rejected <code>Promise</code> with that error. If the\nfunction does not return a promise, <code>assert.rejects()</code> will return a rejected\n<code>Promise</code> with an <a href=\"errors.html#errors_err_invalid_return_value\"><code>ERR_INVALID_RETURN_VALUE</code></a> error. In both cases the error\nhandler is skipped.</p>\n<p>Besides the async nature to await the completion behaves identically to\n<a href=\"#assert_assert_throws_block_error_message\"><code>assert.throws()</code></a>.</p>\n<p>If specified, <code>error</code> can be a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"><code>Class</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"><code>RegExp</code></a>, a validation function,\nan object where each property will be tested for, or an instance of error where\neach property will be tested for including the non-enumerable <code>message</code> and\n<code>name</code> properties.</p>\n<p>If specified, <code>message</code> will be the message provided by the <code>AssertionError</code> if\nthe block fails to reject.</p>\n<pre><code class=\"lang-js\">(async () =&gt; {\n  await assert.rejects(\n    async () =&gt; {\n      throw new TypeError(&#39;Wrong value&#39;);\n    },\n    {\n      name: &#39;TypeError&#39;,\n      message: &#39;Wrong value&#39;\n    }\n  );\n})();\n</code></pre>\n<pre><code class=\"lang-js\">assert.rejects(\n  Promise.reject(new Error(&#39;Wrong value&#39;)),\n  Error\n).then(() =&gt; {\n  // ...\n});\n</code></pre>\n<p>Note that <code>error</code> cannot be a string. If a string is provided as the second\nargument, then <code>error</code> is assumed to be omitted and the string will be used for\n<code>message</code> instead. This can lead to easy-to-miss mistakes. Please read the\nexample in <a href=\"#assert_assert_throws_block_error_message\"><code>assert.throws()</code></a> carefully if using a string as the second\nargument gets considered.</p>\n"
        },
        {
          "textRaw": "assert.strictEqual(actual, expected[, message])",
          "type": "method",
          "name": "strictEqual",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/17003",
                "description": "Used comparison changed from Strict Equality to `Object.is()`"
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`actual` {any} ",
                  "name": "actual",
                  "type": "any"
                },
                {
                  "textRaw": "`expected` {any} ",
                  "name": "expected",
                  "type": "any"
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "actual"
                },
                {
                  "name": "expected"
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Tests strict equality between the <code>actual</code> and <code>expected</code> parameters as\ndetermined by the <a href=\"https://tc39.github.io/ecma262/#sec-samevalue\">SameValue Comparison</a>.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;).strict;\n\nassert.strictEqual(1, 2);\n// AssertionError [ERR_ASSERTION]: Input A expected to strictly equal input B:\n// + expected - actual\n// - 1\n// + 2\n\nassert.strictEqual(1, 1);\n// OK\n\nassert.strictEqual(1, &#39;1&#39;);\n// AssertionError [ERR_ASSERTION]: Input A expected to strictly equal input B:\n// + expected - actual\n// - 1\n// + &#39;1&#39;\n</code></pre>\n<p>If the values are not strictly equal, an <code>AssertionError</code> is thrown with a\n<code>message</code> property set equal to the value of the <code>message</code> parameter. If the\n<code>message</code> parameter is undefined, a default error message is assigned. If the\n<code>message</code> parameter is an instance of an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> then it will be thrown\ninstead of the <code>AssertionError</code>.</p>\n"
        },
        {
          "textRaw": "assert.throws(block[, error][, message])",
          "type": "method",
          "name": "throws",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v9.9.0",
                "pr-url": "https://github.com/nodejs/node/pull/17584",
                "description": "The `error` parameter can now be an object as well."
              },
              {
                "version": "v4.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/3276",
                "description": "The `error` parameter can now be an arrow function."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`block` {Function} ",
                  "name": "block",
                  "type": "Function"
                },
                {
                  "textRaw": "`error` {RegExp|Function|Object|Error} ",
                  "name": "error",
                  "type": "RegExp|Function|Object|Error",
                  "optional": true
                },
                {
                  "textRaw": "`message` {any} ",
                  "name": "message",
                  "type": "any",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "block"
                },
                {
                  "name": "error",
                  "optional": true
                },
                {
                  "name": "message",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Expects the function <code>block</code> to throw an error.</p>\n<p>If specified, <code>error</code> can be a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"><code>Class</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"><code>RegExp</code></a>, a validation function,\nan object where each property will be tested for, or an instance of error where\neach property will be tested for including the non-enumerable <code>message</code> and\n<code>name</code> properties.</p>\n<p>If specified, <code>message</code> will be the message provided by the <code>AssertionError</code> if\nthe block fails to throw.</p>\n<p>Custom error object / error instance:</p>\n<pre><code class=\"lang-js\">const err = new TypeError(&#39;Wrong value&#39;);\nerr.code = 404;\n\nassert.throws(\n  () =&gt; {\n    throw err;\n  },\n  {\n    name: &#39;TypeError&#39;,\n    message: &#39;Wrong value&#39;\n    // Note that only properties on the error object will be tested!\n  }\n);\n\n// Fails due to the different `message` and `name` properties:\nassert.throws(\n  () =&gt; {\n    const otherErr = new Error(&#39;Not found&#39;);\n    otherErr.code = 404;\n    throw otherErr;\n  },\n  err // This tests for `message`, `name` and `code`.\n);\n</code></pre>\n<p>Validate instanceof using constructor:</p>\n<pre><code class=\"lang-js\">assert.throws(\n  () =&gt; {\n    throw new Error(&#39;Wrong value&#39;);\n  },\n  Error\n);\n</code></pre>\n<p>Validate error message using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"><code>RegExp</code></a>:</p>\n<p>Using a regular expression runs <code>.toString</code> on the error object, and will\ntherefore also include the error name.</p>\n<pre><code class=\"lang-js\">assert.throws(\n  () =&gt; {\n    throw new Error(&#39;Wrong value&#39;);\n  },\n  /^Error: Wrong value$/\n);\n</code></pre>\n<p>Custom error validation:</p>\n<pre><code class=\"lang-js\">assert.throws(\n  () =&gt; {\n    throw new Error(&#39;Wrong value&#39;);\n  },\n  function(err) {\n    if ((err instanceof Error) &amp;&amp; /value/.test(err)) {\n      return true;\n    }\n  },\n  &#39;unexpected error&#39;\n);\n</code></pre>\n<p>Note that <code>error</code> cannot be a string. If a string is provided as the second\nargument, then <code>error</code> is assumed to be omitted and the string will be used for\n<code>message</code> instead. This can lead to easy-to-miss mistakes. Using the same\nmessage as the thrown error message is going to result in an\n<code>ERR_AMBIGUOUS_ARGUMENT</code> error. Please read the example below carefully if using\na string as the second argument gets considered:</p>\n<!-- eslint-disable no-restricted-syntax -->\n<pre><code class=\"lang-js\">function throwingFirst() {\n  throw new Error(&#39;First&#39;);\n}\nfunction throwingSecond() {\n  throw new Error(&#39;Second&#39;);\n}\nfunction notThrowing() {}\n\n// The second argument is a string and the input function threw an Error.\n// The first case will not throw as it does not match for the error message\n// thrown by the input function!\nassert.throws(throwingFirst, &#39;Second&#39;);\n// In the next example the message has no benefit over the message from the\n// error and since it is not clear if the user intended to actually match\n// against the error message, Node.js thrown an `ERR_AMBIGUOUS_ARGUMENT` error.\nassert.throws(throwingSecond, &#39;Second&#39;);\n// Throws an error:\n// TypeError [ERR_AMBIGUOUS_ARGUMENT]\n\n// The string is only used (as message) in case the function does not throw:\nassert.throws(notThrowing, &#39;Second&#39;);\n// AssertionError [ERR_ASSERTION]: Missing expected exception: Second\n\n// If it was intended to match for the error message do this instead:\nassert.throws(throwingSecond, /Second$/);\n// Does not throw because the error messages match.\nassert.throws(throwingFirst, /Second$/);\n// Throws an error:\n// Error: First\n//     at throwingFirst (repl:2:9)\n</code></pre>\n<p>Due to the confusing notation, it is recommended not to use a string as the\nsecond argument. This might lead to difficult-to-spot errors.</p>\n<!-- [end-include:assert.md] -->\n<!-- [start-include:async_hooks.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "Assert"
    },
    {
      "textRaw": "Async Hooks",
      "name": "async_hooks",
      "introduced_in": "v8.1.0",
      "stability": 1,
      "stabilityText": "Experimental",
      "desc": "<p>The <code>async_hooks</code> module provides an API to register callbacks tracking the\nlifetime of asynchronous resources created inside a Node.js application.\nIt can be accessed using:</p>\n<pre><code class=\"lang-js\">const async_hooks = require(&#39;async_hooks&#39;);\n</code></pre>\n",
      "modules": [
        {
          "textRaw": "Terminology",
          "name": "terminology",
          "desc": "<p>An asynchronous resource represents an object with an associated callback.\nThis callback may be called multiple times, for example, the <code>&#39;connection&#39;</code>\nevent in <code>net.createServer()</code>, or just a single time like in <code>fs.open()</code>.\nA resource can also be closed before the callback is called. <code>AsyncHook</code> does\nnot explicitly distinguish between these different cases but will represent them\nas the abstract concept that is a resource.</p>\n",
          "type": "module",
          "displayName": "Terminology"
        },
        {
          "textRaw": "Public API",
          "name": "public_api",
          "modules": [
            {
              "textRaw": "Overview",
              "name": "overview",
              "desc": "<p>Following is a simple overview of the public API.</p>\n<pre><code class=\"lang-js\">const async_hooks = require(&#39;async_hooks&#39;);\n\n// Return the ID of the current execution context.\nconst eid = async_hooks.executionAsyncId();\n\n// Return the ID of the handle responsible for triggering the callback of the\n// current execution scope to call.\nconst tid = async_hooks.triggerAsyncId();\n\n// Create a new AsyncHook instance. All of these callbacks are optional.\nconst asyncHook =\n    async_hooks.createHook({ init, before, after, destroy, promiseResolve });\n\n// Allow callbacks of this AsyncHook instance to call. This is not an implicit\n// action after running the constructor, and must be explicitly run to begin\n// executing callbacks.\nasyncHook.enable();\n\n// Disable listening for new asynchronous events.\nasyncHook.disable();\n\n//\n// The following are the callbacks that can be passed to createHook().\n//\n\n// init is called during object construction. The resource may not have\n// completed construction when this callback runs, therefore all fields of the\n// resource referenced by &quot;asyncId&quot; may not have been populated.\nfunction init(asyncId, type, triggerAsyncId, resource) { }\n\n// before is called just before the resource&#39;s callback is called. It can be\n// called 0-N times for handles (e.g. TCPWrap), and will be called exactly 1\n// time for requests (e.g. FSReqWrap).\nfunction before(asyncId) { }\n\n// after is called just after the resource&#39;s callback has finished.\nfunction after(asyncId) { }\n\n// destroy is called when an AsyncWrap instance is destroyed.\nfunction destroy(asyncId) { }\n\n// promiseResolve is called only for promise resources, when the\n// `resolve` function passed to the `Promise` constructor is invoked\n// (either directly or through other means of resolving a promise).\nfunction promiseResolve(asyncId) { }\n</code></pre>\n",
              "methods": [
                {
                  "textRaw": "async_hooks.createHook(callbacks)",
                  "type": "method",
                  "name": "createHook",
                  "meta": {
                    "added": [
                      "v8.1.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {AsyncHook} Instance used for disabling and enabling hooks ",
                        "name": "return",
                        "type": "AsyncHook",
                        "desc": "Instance used for disabling and enabling hooks"
                      },
                      "params": [
                        {
                          "textRaw": "`callbacks` {Object} The [Hook Callbacks][] to register ",
                          "options": [
                            {
                              "textRaw": "`init` {Function} The [`init` callback][]. ",
                              "name": "init",
                              "type": "Function",
                              "desc": "The [`init` callback][]."
                            },
                            {
                              "textRaw": "`before` {Function} The [`before` callback][]. ",
                              "name": "before",
                              "type": "Function",
                              "desc": "The [`before` callback][]."
                            },
                            {
                              "textRaw": "`after` {Function} The [`after` callback][]. ",
                              "name": "after",
                              "type": "Function",
                              "desc": "The [`after` callback][]."
                            },
                            {
                              "textRaw": "`destroy` {Function} The [`destroy` callback][]. ",
                              "name": "destroy",
                              "type": "Function",
                              "desc": "The [`destroy` callback][]."
                            }
                          ],
                          "name": "callbacks",
                          "type": "Object",
                          "desc": "The [Hook Callbacks][] to register"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "callbacks"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Registers functions to be called for different lifetime events of each async\noperation.</p>\n<p>The callbacks <code>init()</code>/<code>before()</code>/<code>after()</code>/<code>destroy()</code> are called for the\nrespective asynchronous event during a resource&#39;s lifetime.</p>\n<p>All callbacks are optional. For example, if only resource cleanup needs to\nbe tracked, then only the <code>destroy</code> callback needs to be passed. The\nspecifics of all functions that can be passed to <code>callbacks</code> is in the\n<a href=\"#async_hooks_hook_callbacks\">Hook Callbacks</a> section.</p>\n<pre><code class=\"lang-js\">const async_hooks = require(&#39;async_hooks&#39;);\n\nconst asyncHook = async_hooks.createHook({\n  init(asyncId, type, triggerAsyncId, resource) { },\n  destroy(asyncId) { }\n});\n</code></pre>\n<p>Note that the callbacks will be inherited via the prototype chain:</p>\n<pre><code class=\"lang-js\">class MyAsyncCallbacks {\n  init(asyncId, type, triggerAsyncId, resource) { }\n  destroy(asyncId) {}\n}\n\nclass MyAddedCallbacks extends MyAsyncCallbacks {\n  before(asyncId) { }\n  after(asyncId) { }\n}\n\nconst asyncHook = async_hooks.createHook(new MyAddedCallbacks());\n</code></pre>\n",
                  "modules": [
                    {
                      "textRaw": "Error Handling",
                      "name": "error_handling",
                      "desc": "<p>If any <code>AsyncHook</code> callbacks throw, the application will print the stack trace\nand exit. The exit path does follow that of an uncaught exception, but\nall <code>&#39;uncaughtException&#39;</code> listeners are removed, thus forcing the process to\nexit. The <code>&#39;exit&#39;</code> callbacks will still be called unless the application is run\nwith <code>--abort-on-uncaught-exception</code>, in which case a stack trace will be\nprinted and the application exits, leaving a core file.</p>\n<p>The reason for this error handling behavior is that these callbacks are running\nat potentially volatile points in an object&#39;s lifetime, for example during\nclass construction and destruction. Because of this, it is deemed necessary to\nbring down the process quickly in order to prevent an unintentional abort in the\nfuture. This is subject to change in the future if a comprehensive analysis is\nperformed to ensure an exception can follow the normal control flow without\nunintentional side effects.</p>\n",
                      "type": "module",
                      "displayName": "Error Handling"
                    },
                    {
                      "textRaw": "Printing in AsyncHooks callbacks",
                      "name": "printing_in_asynchooks_callbacks",
                      "desc": "<p>Because printing to the console is an asynchronous operation, <code>console.log()</code>\nwill cause the AsyncHooks callbacks to be called. Using <code>console.log()</code> or\nsimilar asynchronous operations inside an AsyncHooks callback function will thus\ncause an infinite recursion. An easy solution to this when debugging is to use a\nsynchronous logging operation such as <code>fs.writeSync(1, msg)</code>. This will print to\nstdout because <code>1</code> is the file descriptor for stdout and will not invoke\nAsyncHooks recursively because it is synchronous.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst util = require(&#39;util&#39;);\n\nfunction debug(...args) {\n  // use a function like this one when debugging inside an AsyncHooks callback\n  fs.writeSync(1, `${util.format(...args)}\\n`);\n}\n</code></pre>\n<p>If an asynchronous operation is needed for logging, it is possible to keep\ntrack of what caused the asynchronous operation using the information\nprovided by AsyncHooks itself. The logging should then be skipped when\nit was the logging itself that caused AsyncHooks callback to call. By\ndoing this the otherwise infinite recursion is broken.</p>\n",
                      "type": "module",
                      "displayName": "Printing in AsyncHooks callbacks"
                    }
                  ]
                },
                {
                  "textRaw": "asyncHook.enable()",
                  "type": "method",
                  "name": "enable",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {AsyncHook} A reference to `asyncHook`. ",
                        "name": "return",
                        "type": "AsyncHook",
                        "desc": "A reference to `asyncHook`."
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Enable the callbacks for a given <code>AsyncHook</code> instance. If no callbacks are\nprovided enabling is a noop.</p>\n<p>The <code>AsyncHook</code> instance is disabled by default. If the <code>AsyncHook</code> instance\nshould be enabled immediately after creation, the following pattern can be used.</p>\n<pre><code class=\"lang-js\">const async_hooks = require(&#39;async_hooks&#39;);\n\nconst hook = async_hooks.createHook(callbacks).enable();\n</code></pre>\n"
                },
                {
                  "textRaw": "asyncHook.disable()",
                  "type": "method",
                  "name": "disable",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {AsyncHook} A reference to `asyncHook`. ",
                        "name": "return",
                        "type": "AsyncHook",
                        "desc": "A reference to `asyncHook`."
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Disable the callbacks for a given <code>AsyncHook</code> instance from the global pool of\n<code>AsyncHook</code> callbacks to be executed. Once a hook has been disabled it will not\nbe called again until enabled.</p>\n<p>For API consistency <code>disable()</code> also returns the <code>AsyncHook</code> instance.</p>\n"
                },
                {
                  "textRaw": "async_hooks.executionAsyncId()",
                  "type": "method",
                  "name": "executionAsyncId",
                  "meta": {
                    "added": [
                      "v8.1.0"
                    ],
                    "changes": [
                      {
                        "version": "v8.2.0",
                        "pr-url": "https://github.com/nodejs/node/pull/13490",
                        "description": "Renamed from `currentId`"
                      }
                    ]
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {number} The `asyncId` of the current execution context. Useful to track when something calls. ",
                        "name": "return",
                        "type": "number",
                        "desc": "The `asyncId` of the current execution context. Useful to track when something calls."
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<pre><code class=\"lang-js\">const async_hooks = require(&#39;async_hooks&#39;);\n\nconsole.log(async_hooks.executionAsyncId());  // 1 - bootstrap\nfs.open(path, &#39;r&#39;, (err, fd) =&gt; {\n  console.log(async_hooks.executionAsyncId());  // 6 - open()\n});\n</code></pre>\n<p>The ID returned from <code>executionAsyncId()</code> is related to execution timing, not\ncausality (which is covered by <code>triggerAsyncId()</code>):</p>\n<pre><code class=\"lang-js\">const server = net.createServer(function onConnection(conn) {\n  // Returns the ID of the server, not of the new connection, because the\n  // onConnection callback runs in the execution scope of the server&#39;s\n  // MakeCallback().\n  async_hooks.executionAsyncId();\n\n}).listen(port, function onListening() {\n  // Returns the ID of a TickObject (i.e. process.nextTick()) because all\n  // callbacks passed to .listen() are wrapped in a nextTick().\n  async_hooks.executionAsyncId();\n});\n</code></pre>\n<p>Note that promise contexts may not get precise <code>executionAsyncIds</code> by default.\nSee the section on <a href=\"#async_hooks_promise_execution_tracking\">promise execution tracking</a>.</p>\n"
                },
                {
                  "textRaw": "async_hooks.triggerAsyncId()",
                  "type": "method",
                  "name": "triggerAsyncId",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {number} The ID of the resource responsible for calling the callback that is currently being executed. ",
                        "name": "return",
                        "type": "number",
                        "desc": "The ID of the resource responsible for calling the callback that is currently being executed."
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<pre><code class=\"lang-js\">const server = net.createServer((conn) =&gt; {\n  // The resource that caused (or triggered) this callback to be called\n  // was that of the new connection. Thus the return value of triggerAsyncId()\n  // is the asyncId of &quot;conn&quot;.\n  async_hooks.triggerAsyncId();\n\n}).listen(port, () =&gt; {\n  // Even though all callbacks passed to .listen() are wrapped in a nextTick()\n  // the callback itself exists because the call to the server&#39;s .listen()\n  // was made. So the return value would be the ID of the server.\n  async_hooks.triggerAsyncId();\n});\n</code></pre>\n<p>Note that promise contexts may not get valid <code>triggerAsyncId</code>s by default. See\nthe section on <a href=\"#async_hooks_promise_execution_tracking\">promise execution tracking</a>.</p>\n"
                }
              ],
              "modules": [
                {
                  "textRaw": "Hook Callbacks",
                  "name": "hook_callbacks",
                  "desc": "<p>Key events in the lifetime of asynchronous events have been categorized into\nfour areas: instantiation, before/after the callback is called, and when the\ninstance is destroyed.</p>\n",
                  "methods": [
                    {
                      "textRaw": "init(asyncId, type, triggerAsyncId, resource)",
                      "type": "method",
                      "name": "init",
                      "signatures": [
                        {
                          "params": [
                            {
                              "textRaw": "`asyncId` {number} A unique ID for the async resource. ",
                              "name": "asyncId",
                              "type": "number",
                              "desc": "A unique ID for the async resource."
                            },
                            {
                              "textRaw": "`type` {string} The type of the async resource. ",
                              "name": "type",
                              "type": "string",
                              "desc": "The type of the async resource."
                            },
                            {
                              "textRaw": "`triggerAsyncId` {number} The unique ID of the async resource in whose execution context this async resource was created. ",
                              "name": "triggerAsyncId",
                              "type": "number",
                              "desc": "The unique ID of the async resource in whose execution context this async resource was created."
                            },
                            {
                              "textRaw": "`resource` {Object} Reference to the resource representing the async operation, needs to be released during _destroy_. ",
                              "name": "resource",
                              "type": "Object",
                              "desc": "Reference to the resource representing the async operation, needs to be released during _destroy_."
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "asyncId"
                            },
                            {
                              "name": "type"
                            },
                            {
                              "name": "triggerAsyncId"
                            },
                            {
                              "name": "resource"
                            }
                          ]
                        }
                      ],
                      "desc": "<p>Called when a class is constructed that has the <em>possibility</em> to emit an\nasynchronous event. This <em>does not</em> mean the instance must call\n<code>before</code>/<code>after</code> before <code>destroy</code> is called, only that the possibility\nexists.</p>\n<p>This behavior can be observed by doing something like opening a resource then\nclosing it before the resource can be used. The following snippet demonstrates\nthis.</p>\n<pre><code class=\"lang-js\">require(&#39;net&#39;).createServer().listen(function() { this.close(); });\n// OR\nclearTimeout(setTimeout(() =&gt; {}, 10));\n</code></pre>\n<p>Every new resource is assigned an ID that is unique within the scope of the\ncurrent process.</p>\n",
                      "modules": [
                        {
                          "textRaw": "`type`",
                          "name": "`type`",
                          "desc": "<p>The <code>type</code> is a string identifying the type of resource that caused\n<code>init</code> to be called. Generally, it will correspond to the name of the\nresource&#39;s constructor.</p>\n<pre><code class=\"lang-text\">FSEVENTWRAP, FSREQWRAP, GETADDRINFOREQWRAP, GETNAMEINFOREQWRAP, HTTPPARSER,\nJSSTREAM, PIPECONNECTWRAP, PIPEWRAP, PROCESSWRAP, QUERYWRAP, SHUTDOWNWRAP,\nSIGNALWRAP, STATWATCHER, TCPCONNECTWRAP, TCPSERVER, TCPWRAP, TIMERWRAP, TTYWRAP,\nUDPSENDWRAP, UDPWRAP, WRITEWRAP, ZLIB, SSLCONNECTION, PBKDF2REQUEST,\nRANDOMBYTESREQUEST, TLSWRAP, Timeout, Immediate, TickObject\n</code></pre>\n<p>There is also the <code>PROMISE</code> resource type, which is used to track <code>Promise</code>\ninstances and asynchronous work scheduled by them.</p>\n<p>Users are able to define their own <code>type</code> when using the public embedder API.</p>\n<p>It is possible to have type name collisions. Embedders are encouraged to use\nunique prefixes, such as the npm package name, to prevent collisions when\nlistening to the hooks.</p>\n",
                          "type": "module",
                          "displayName": "`type`"
                        },
                        {
                          "textRaw": "`triggerAsyncId`",
                          "name": "`triggerasyncid`",
                          "desc": "<p><code>triggerAsyncId</code> is the <code>asyncId</code> of the resource that caused (or &quot;triggered&quot;)\nthe new resource to initialize and that caused <code>init</code> to call. This is different\nfrom <code>async_hooks.executionAsyncId()</code> that only shows <em>when</em> a resource was\ncreated, while <code>triggerAsyncId</code> shows <em>why</em> a resource was created.</p>\n<p>The following is a simple demonstration of <code>triggerAsyncId</code>:</p>\n<pre><code class=\"lang-js\">async_hooks.createHook({\n  init(asyncId, type, triggerAsyncId) {\n    const eid = async_hooks.executionAsyncId();\n    fs.writeSync(\n      1, `${type}(${asyncId}): trigger: ${triggerAsyncId} execution: ${eid}\\n`);\n  }\n}).enable();\n\nrequire(&#39;net&#39;).createServer((conn) =&gt; {}).listen(8080);\n</code></pre>\n<p>Output when hitting the server with <code>nc localhost 8080</code>:</p>\n<pre><code class=\"lang-console\">TCPSERVERWRAP(2): trigger: 1 execution: 1\nTCPWRAP(4): trigger: 2 execution: 0\n</code></pre>\n<p>The <code>TCPSERVERWRAP</code> is the server which receives the connections.</p>\n<p>The <code>TCPWRAP</code> is the new connection from the client. When a new\nconnection is made, the <code>TCPWrap</code> instance is immediately constructed. This\nhappens outside of any JavaScript stack. (An <code>executionAsyncId()</code> of <code>0</code> means\nthat it is being executed from C++ with no JavaScript stack above it.) With only\nthat information, it would be impossible to link resources together in\nterms of what caused them to be created, so <code>triggerAsyncId</code> is given the task\nof propagating what resource is responsible for the new resource&#39;s existence.</p>\n",
                          "type": "module",
                          "displayName": "`triggerAsyncId`"
                        },
                        {
                          "textRaw": "`resource`",
                          "name": "`resource`",
                          "desc": "<p><code>resource</code> is an object that represents the actual async resource that has\nbeen initialized. This can contain useful information that can vary based on\nthe value of <code>type</code>. For instance, for the <code>GETADDRINFOREQWRAP</code> resource type,\n<code>resource</code> provides the hostname used when looking up the IP address for the\nhostname in <code>net.Server.listen()</code>. The API for accessing this information is\ncurrently not considered public, but using the Embedder API, users can provide\nand document their own resource objects. For example, such a resource object\ncould contain the SQL query being executed.</p>\n<p>In the case of Promises, the <code>resource</code> object will have <code>promise</code> property\nthat refers to the <code>Promise</code> that is being initialized, and an\n<code>isChainedPromise</code> property, set to <code>true</code> if the promise has a parent promise,\nand <code>false</code> otherwise. For example, in the case of <code>b = a.then(handler)</code>, <code>a</code> is\nconsidered a parent <code>Promise</code> of <code>b</code>. Here, <code>b</code> is considered a chained promise.</p>\n<p>In some cases the resource object is reused for performance reasons, it is\nthus not safe to use it as a key in a <code>WeakMap</code> or add properties to it.</p>\n",
                          "type": "module",
                          "displayName": "`resource`"
                        },
                        {
                          "textRaw": "Asynchronous context example",
                          "name": "asynchronous_context_example",
                          "desc": "<p>The following is an example with additional information about the calls to\n<code>init</code> between the <code>before</code> and <code>after</code> calls, specifically what the\ncallback to <code>listen()</code> will look like. The output formatting is slightly more\nelaborate to make calling context easier to see.</p>\n<pre><code class=\"lang-js\">let indent = 0;\nasync_hooks.createHook({\n  init(asyncId, type, triggerAsyncId) {\n    const eid = async_hooks.executionAsyncId();\n    const indentStr = &#39; &#39;.repeat(indent);\n    fs.writeSync(\n      1,\n      `${indentStr}${type}(${asyncId}):` +\n      ` trigger: ${triggerAsyncId} execution: ${eid}\\n`);\n  },\n  before(asyncId) {\n    const indentStr = &#39; &#39;.repeat(indent);\n    fs.writeSync(1, `${indentStr}before:  ${asyncId}\\n`);\n    indent += 2;\n  },\n  after(asyncId) {\n    indent -= 2;\n    const indentStr = &#39; &#39;.repeat(indent);\n    fs.writeSync(1, `${indentStr}after:   ${asyncId}\\n`);\n  },\n  destroy(asyncId) {\n    const indentStr = &#39; &#39;.repeat(indent);\n    fs.writeSync(1, `${indentStr}destroy: ${asyncId}\\n`);\n  },\n}).enable();\n\nrequire(&#39;net&#39;).createServer(() =&gt; {}).listen(8080, () =&gt; {\n  // Let&#39;s wait 10ms before logging the server started.\n  setTimeout(() =&gt; {\n    console.log(&#39;&gt;&gt;&gt;&#39;, async_hooks.executionAsyncId());\n  }, 10);\n});\n</code></pre>\n<p>Output from only starting the server:</p>\n<pre><code class=\"lang-console\">TCPSERVERWRAP(2): trigger: 1 execution: 1\nTickObject(3): trigger: 2 execution: 1\nbefore:  3\n  Timeout(4): trigger: 3 execution: 3\n  TIMERWRAP(5): trigger: 3 execution: 3\nafter:   3\ndestroy: 3\nbefore:  5\n  before:  4\n    TTYWRAP(6): trigger: 4 execution: 4\n    SIGNALWRAP(7): trigger: 4 execution: 4\n    TTYWRAP(8): trigger: 4 execution: 4\n&gt;&gt;&gt; 4\n    TickObject(9): trigger: 4 execution: 4\n  after:   4\nafter:   5\nbefore:  9\nafter:   9\ndestroy: 4\ndestroy: 9\ndestroy: 5\n</code></pre>\n<p>As illustrated in the example, <code>executionAsyncId()</code> and <code>execution</code> each specify\nthe value of the current execution context; which is delineated by calls to\n<code>before</code> and <code>after</code>.</p>\n<p>Only using <code>execution</code> to graph resource allocation results in the following:</p>\n<pre><code class=\"lang-console\">TTYWRAP(6) -&gt; Timeout(4) -&gt; TIMERWRAP(5) -&gt; TickObject(3) -&gt; root(1)\n</code></pre>\n<p>The <code>TCPSERVERWRAP</code> is not part of this graph, even though it was the reason for\n<code>console.log()</code> being called. This is because binding to a port without a\nhostname is a <em>synchronous</em> operation, but to maintain a completely asynchronous\nAPI the user&#39;s callback is placed in a <code>process.nextTick()</code>.</p>\n<p>The graph only shows <em>when</em> a resource was created, not <em>why</em>, so to track\nthe <em>why</em> use <code>triggerAsyncId</code>.</p>\n",
                          "type": "module",
                          "displayName": "Asynchronous context example"
                        }
                      ]
                    },
                    {
                      "textRaw": "before(asyncId)",
                      "type": "method",
                      "name": "before",
                      "signatures": [
                        {
                          "params": [
                            {
                              "textRaw": "`asyncId` {number} ",
                              "name": "asyncId",
                              "type": "number"
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "asyncId"
                            }
                          ]
                        }
                      ],
                      "desc": "<p>When an asynchronous operation is initiated (such as a TCP server receiving a\nnew connection) or completes (such as writing data to disk) a callback is\ncalled to notify the user. The <code>before</code> callback is called just before said\ncallback is executed. <code>asyncId</code> is the unique identifier assigned to the\nresource about to execute the callback.</p>\n<p>The <code>before</code> callback will be called 0 to N times. The <code>before</code> callback\nwill typically be called 0 times if the asynchronous operation was cancelled\nor, for example, if no connections are received by a TCP server. Persistent\nasynchronous resources like a TCP server will typically call the <code>before</code>\ncallback multiple times, while other operations like <code>fs.open()</code> will call\nit only once.</p>\n"
                    },
                    {
                      "textRaw": "after(asyncId)",
                      "type": "method",
                      "name": "after",
                      "signatures": [
                        {
                          "params": [
                            {
                              "textRaw": "`asyncId` {number} ",
                              "name": "asyncId",
                              "type": "number"
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "asyncId"
                            }
                          ]
                        }
                      ],
                      "desc": "<p>Called immediately after the callback specified in <code>before</code> is completed.</p>\n<p>If an uncaught exception occurs during execution of the callback, then <code>after</code>\nwill run <em>after</em> the <code>&#39;uncaughtException&#39;</code> event is emitted or a <code>domain</code>&#39;s\nhandler runs.</p>\n"
                    },
                    {
                      "textRaw": "destroy(asyncId)",
                      "type": "method",
                      "name": "destroy",
                      "signatures": [
                        {
                          "params": [
                            {
                              "textRaw": "`asyncId` {number} ",
                              "name": "asyncId",
                              "type": "number"
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "asyncId"
                            }
                          ]
                        }
                      ],
                      "desc": "<p>Called after the resource corresponding to <code>asyncId</code> is destroyed. It is also\ncalled asynchronously from the embedder API <code>emitDestroy()</code>.</p>\n<p>Some resources depend on garbage collection for cleanup, so if a reference is\nmade to the <code>resource</code> object passed to <code>init</code> it is possible that <code>destroy</code>\nwill never be called, causing a memory leak in the application. If the resource\ndoes not depend on garbage collection, then this will not be an issue.</p>\n"
                    },
                    {
                      "textRaw": "promiseResolve(asyncId)",
                      "type": "method",
                      "name": "promiseResolve",
                      "signatures": [
                        {
                          "params": [
                            {
                              "textRaw": "`asyncId` {number} ",
                              "name": "asyncId",
                              "type": "number"
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "asyncId"
                            }
                          ]
                        }
                      ],
                      "desc": "<p>Called when the <code>resolve</code> function passed to the <code>Promise</code> constructor is\ninvoked (either directly or through other means of resolving a promise).</p>\n<p>Note that <code>resolve()</code> does not do any observable synchronous work.</p>\n<p>The <code>Promise</code> is not necessarily fulfilled or rejected at this point if the\n<code>Promise</code> was resolved by assuming the state of another <code>Promise</code>.</p>\n<pre><code class=\"lang-js\">new Promise((resolve) =&gt; resolve(true)).then((a) =&gt; {});\n</code></pre>\n<p>calls the following callbacks:</p>\n<pre><code class=\"lang-text\">init for PROMISE with id 5, trigger id: 1\n  promise resolve 5      # corresponds to resolve(true)\ninit for PROMISE with id 6, trigger id: 5  # the Promise returned by then()\n  before 6               # the then() callback is entered\n  promise resolve 6      # the then() callback resolves the promise by returning\n  after 6\n</code></pre>\n"
                    }
                  ],
                  "type": "module",
                  "displayName": "Hook Callbacks"
                }
              ],
              "type": "module",
              "displayName": "Overview"
            }
          ],
          "type": "module",
          "displayName": "Public API"
        },
        {
          "textRaw": "Promise execution tracking",
          "name": "promise_execution_tracking",
          "desc": "<p>By default, promise executions are not assigned <code>asyncId</code>s due to the relatively\nexpensive nature of the <a href=\"https://docs.google.com/document/d/1rda3yKGHimKIhg5YeoAmCOtyURgsbTH_qaYR79FELlk\">promise introspection API</a> provided by\nV8. This means that programs using promises or <code>async</code>/<code>await</code> will not get\ncorrect execution and trigger ids for promise callback contexts by default.</p>\n<p>Here&#39;s an example:</p>\n<pre><code class=\"lang-js\">const ah = require(&#39;async_hooks&#39;);\nPromise.resolve(1729).then(() =&gt; {\n  console.log(`eid ${ah.executionAsyncId()} tid ${ah.triggerAsyncId()}`);\n});\n// produces:\n// eid 1 tid 0\n</code></pre>\n<p>Observe that the <code>then()</code> callback claims to have executed in the context of the\nouter scope even though there was an asynchronous hop involved. Also note that\nthe <code>triggerAsyncId</code> value is <code>0</code>, which means that we are missing context about\nthe resource that caused (triggered) the <code>then()</code> callback to be executed.</p>\n<p>Installing async hooks via <code>async_hooks.createHook</code> enables promise execution\ntracking. Example:</p>\n<pre><code class=\"lang-js\">const ah = require(&#39;async_hooks&#39;);\nah.createHook({ init() {} }).enable(); // forces PromiseHooks to be enabled.\nPromise.resolve(1729).then(() =&gt; {\n  console.log(`eid ${ah.executionAsyncId()} tid ${ah.triggerAsyncId()}`);\n});\n// produces:\n// eid 7 tid 6\n</code></pre>\n<p>In this example, adding any actual hook function enabled the tracking of\npromises. There are two promises in the example above; the promise created by\n<code>Promise.resolve()</code> and the promise returned by the call to <code>then()</code>. In the\nexample above, the first promise got the <code>asyncId</code> <code>6</code> and the latter got\n<code>asyncId</code> <code>7</code>. During the execution of the <code>then()</code> callback, we are executing\nin the context of promise with <code>asyncId</code> <code>7</code>. This promise was triggered by\nasync resource <code>6</code>.</p>\n<p>Another subtlety with promises is that <code>before</code> and <code>after</code> callbacks are run\nonly on chained promises. That means promises not created by <code>then()</code>/<code>catch()</code>\nwill not have the <code>before</code> and <code>after</code> callbacks fired on them. For more details\nsee the details of the V8 <a href=\"https://docs.google.com/document/d/1rda3yKGHimKIhg5YeoAmCOtyURgsbTH_qaYR79FELlk\">PromiseHooks</a> API.</p>\n",
          "type": "module",
          "displayName": "Promise execution tracking"
        },
        {
          "textRaw": "JavaScript Embedder API",
          "name": "javascript_embedder_api",
          "desc": "<p>Library developers that handle their own asynchronous resources performing tasks\nlike I/O, connection pooling, or managing callback queues may use the\n<code>AsyncWrap</code> JavaScript API so that all the appropriate callbacks are called.</p>\n",
          "classes": [
            {
              "textRaw": "Class: AsyncResource",
              "type": "class",
              "name": "AsyncResource",
              "desc": "<p>The class <code>AsyncResource</code> is designed to be extended by the embedder&#39;s async\nresources. Using this, users can easily trigger the lifetime events of their\nown resources.</p>\n<p>The <code>init</code> hook will trigger when an <code>AsyncResource</code> is instantiated.</p>\n<p>The following is an overview of the <code>AsyncResource</code> API.</p>\n<pre><code class=\"lang-js\">const { AsyncResource, executionAsyncId } = require(&#39;async_hooks&#39;);\n\n// AsyncResource() is meant to be extended. Instantiating a\n// new AsyncResource() also triggers init. If triggerAsyncId is omitted then\n// async_hook.executionAsyncId() is used.\nconst asyncResource = new AsyncResource(\n  type, { triggerAsyncId: executionAsyncId(), requireManualDestroy: false }\n);\n\n// Run a function in the execution context of the resource. This will\n// * establish the context of the resource\n// * trigger the AsyncHooks before callbacks\n// * call the provided function `fn` with the supplied arguments\n// * trigger the AsyncHooks after callbacks\n// * restore the original execution context\nasyncResource.runInAsyncScope(fn, thisArg, ...args);\n\n// Call AsyncHooks destroy callbacks.\nasyncResource.emitDestroy();\n\n// Return the unique ID assigned to the AsyncResource instance.\nasyncResource.asyncId();\n\n// Return the trigger ID for the AsyncResource instance.\nasyncResource.triggerAsyncId();\n\n// Call AsyncHooks before callbacks.\n// Deprecated: Use asyncResource.runInAsyncScope instead.\nasyncResource.emitBefore();\n\n// Call AsyncHooks after callbacks.\n// Deprecated: Use asyncResource.runInAsyncScope instead.\nasyncResource.emitAfter();\n</code></pre>\n",
              "methods": [
                {
                  "textRaw": "asyncResource.runInAsyncScope(fn[, thisArg, ...args])",
                  "type": "method",
                  "name": "runInAsyncScope",
                  "meta": {
                    "added": [
                      "v9.6.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`fn` {Function} The function to call in the execution context of this async resource. ",
                          "name": "fn",
                          "type": "Function",
                          "desc": "The function to call in the execution context of this async resource."
                        },
                        {
                          "textRaw": "`thisArg` {any} The receiver to be used for the function call. ",
                          "name": "thisArg",
                          "type": "any",
                          "desc": "The receiver to be used for the function call.",
                          "optional": true
                        },
                        {
                          "textRaw": "`...args` {any} Optional arguments to pass to the function. ",
                          "name": "...args",
                          "type": "any",
                          "desc": "Optional arguments to pass to the function.",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "fn"
                        },
                        {
                          "name": "thisArg",
                          "optional": true
                        },
                        {
                          "name": "...args",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Call the provided function with the provided arguments in the execution context\nof the async resource. This will establish the context, trigger the AsyncHooks\nbefore callbacks, call the function, trigger the AsyncHooks after callbacks, and\nthen restore the original execution context.</p>\n"
                },
                {
                  "textRaw": "asyncResource.emitBefore()",
                  "type": "method",
                  "name": "emitBefore",
                  "meta": {
                    "deprecated": [
                      "v9.6.0"
                    ],
                    "changes": []
                  },
                  "stability": 0,
                  "stabilityText": "Deprecated: Use [`asyncResource.runInAsyncScope()`][] instead.",
                  "desc": "<p>Call all <code>before</code> callbacks to notify that a new asynchronous execution context\nis being entered. If nested calls to <code>emitBefore()</code> are made, the stack of\n<code>asyncId</code>s will be tracked and properly unwound.</p>\n<p><code>before</code> and <code>after</code> calls must be unwound in the same order that they\nare called. Otherwise, an unrecoverable exception will occur and the process\nwill abort. For this reason, the <code>emitBefore</code> and <code>emitAfter</code> APIs are\nconsidered deprecated. Please use <code>runInAsyncScope</code>, as it provides a much safer\nalternative.</p>\n",
                  "signatures": [
                    {
                      "params": []
                    }
                  ]
                },
                {
                  "textRaw": "asyncResource.emitAfter()",
                  "type": "method",
                  "name": "emitAfter",
                  "meta": {
                    "deprecated": [
                      "v9.6.0"
                    ],
                    "changes": []
                  },
                  "stability": 0,
                  "stabilityText": "Deprecated: Use [`asyncResource.runInAsyncScope()`][] instead.",
                  "desc": "<p>Call all <code>after</code> callbacks. If nested calls to <code>emitBefore()</code> were made, then\nmake sure the stack is unwound properly. Otherwise an error will be thrown.</p>\n<p>If the user&#39;s callback throws an exception, <code>emitAfter()</code> will automatically be\ncalled for all <code>asyncId</code>s on the stack if the error is handled by a domain or\n<code>&#39;uncaughtException&#39;</code> handler.</p>\n<p><code>before</code> and <code>after</code> calls must be unwound in the same order that they\nare called. Otherwise, an unrecoverable exception will occur and the process\nwill abort. For this reason, the <code>emitBefore</code> and <code>emitAfter</code> APIs are\nconsidered deprecated. Please use <code>runInAsyncScope</code>, as it provides a much safer\nalternative.</p>\n",
                  "signatures": [
                    {
                      "params": []
                    }
                  ]
                },
                {
                  "textRaw": "asyncResource.emitDestroy()",
                  "type": "method",
                  "name": "emitDestroy",
                  "desc": "<p>Call all <code>destroy</code> hooks. This should only ever be called once. An error will\nbe thrown if it is called more than once. This <strong>must</strong> be manually called. If\nthe resource is left to be collected by the GC then the <code>destroy</code> hooks will\nnever be called.</p>\n",
                  "signatures": [
                    {
                      "params": []
                    }
                  ]
                },
                {
                  "textRaw": "asyncResource.asyncId()",
                  "type": "method",
                  "name": "asyncId",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {number} The unique `asyncId` assigned to the resource. ",
                        "name": "return",
                        "type": "number",
                        "desc": "The unique `asyncId` assigned to the resource."
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<!-- [end-include:async_hooks.md] -->\n<!-- [start-include:buffer.md] -->\n"
                },
                {
                  "textRaw": "asyncResource.triggerAsyncId()",
                  "type": "method",
                  "name": "triggerAsyncId",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {number} The same `triggerAsyncId` that is passed to the `AsyncResource` constructor. ",
                        "name": "return",
                        "type": "number",
                        "desc": "The same `triggerAsyncId` that is passed to the `AsyncResource` constructor."
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<!-- [end-include:async_hooks.md] -->\n<!-- [start-include:buffer.md] -->\n"
                }
              ],
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`type` {string} The type of async event. ",
                      "name": "type",
                      "type": "string",
                      "desc": "The type of async event."
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`triggerAsyncId` {number} The ID of the execution context that created this async event. **Default:** `executionAsyncId()`. ",
                          "name": "triggerAsyncId",
                          "type": "number",
                          "default": "`executionAsyncId()`",
                          "desc": "The ID of the execution context that created this async event."
                        },
                        {
                          "textRaw": "`requireManualDestroy` {boolean} Disables automatic `emitDestroy` when the object is garbage collected. This usually does not need to be set (even if `emitDestroy` is called manually), unless the resource's `asyncId` is retrieved and the sensitive API's `emitDestroy` is called with it. **Default:** `false`. ",
                          "name": "requireManualDestroy",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "Disables automatic `emitDestroy` when the object is garbage collected. This usually does not need to be set (even if `emitDestroy` is called manually), unless the resource's `asyncId` is retrieved and the sensitive API's `emitDestroy` is called with it."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ],
                  "desc": "<p>Example usage:</p>\n<pre><code class=\"lang-js\">class DBQuery extends AsyncResource {\n  constructor(db) {\n    super(&#39;DBQuery&#39;);\n    this.db = db;\n  }\n\n  getInfo(query, callback) {\n    this.db.get(query, (err, data) =&gt; {\n      this.runInAsyncScope(callback, null, err, data);\n    });\n  }\n\n  close() {\n    this.db = null;\n    this.emitDestroy();\n  }\n}\n</code></pre>\n"
                },
                {
                  "params": [
                    {
                      "name": "type"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ],
                  "desc": "<p>Example usage:</p>\n<pre><code class=\"lang-js\">class DBQuery extends AsyncResource {\n  constructor(db) {\n    super(&#39;DBQuery&#39;);\n    this.db = db;\n  }\n\n  getInfo(query, callback) {\n    this.db.get(query, (err, data) =&gt; {\n      this.runInAsyncScope(callback, null, err, data);\n    });\n  }\n\n  close() {\n    this.db = null;\n    this.emitDestroy();\n  }\n}\n</code></pre>\n"
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "JavaScript Embedder API"
        }
      ],
      "type": "module",
      "displayName": "Async Hooks"
    },
    {
      "textRaw": "Buffer",
      "name": "buffer",
      "introduced_in": "v0.1.90",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>Prior to the introduction of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>, the JavaScript language had no\nmechanism for reading or manipulating streams of binary data. The <code>Buffer</code> class\nwas introduced as part of the Node.js API to enable interaction with octet\nstreams in TCP streams, file system operations, and other contexts.</p>\n<p>With <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> now available, the <code>Buffer</code> class implements the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> API in a manner that is more optimized and suitable for Node.js.</p>\n<p>Instances of the <code>Buffer</code> class are similar to arrays of integers but\ncorrespond to fixed-sized, raw memory allocations outside the V8 heap.\nThe size of the <code>Buffer</code> is established when it is created and cannot be\nchanged.</p>\n<p>The <code>Buffer</code> class is within the global scope, making it unlikely that one\nwould need to ever use <code>require(&#39;buffer&#39;).Buffer</code>.</p>\n<pre><code class=\"lang-js\">// Creates a zero-filled Buffer of length 10.\nconst buf1 = Buffer.alloc(10);\n\n// Creates a Buffer of length 10, filled with 0x1.\nconst buf2 = Buffer.alloc(10, 1);\n\n// Creates an uninitialized buffer of length 10.\n// This is faster than calling Buffer.alloc() but the returned\n// Buffer instance might contain old data that needs to be\n// overwritten using either fill() or write().\nconst buf3 = Buffer.allocUnsafe(10);\n\n// Creates a Buffer containing [0x1, 0x2, 0x3].\nconst buf4 = Buffer.from([1, 2, 3]);\n\n// Creates a Buffer containing UTF-8 bytes [0x74, 0xc3, 0xa9, 0x73, 0x74].\nconst buf5 = Buffer.from(&#39;tést&#39;);\n\n// Creates a Buffer containing Latin-1 bytes [0x74, 0xe9, 0x73, 0x74].\nconst buf6 = Buffer.from(&#39;tést&#39;, &#39;latin1&#39;);\n</code></pre>\n",
      "modules": [
        {
          "textRaw": "`Buffer.from()`, `Buffer.alloc()`, and `Buffer.allocUnsafe()`",
          "name": "`buffer.from()`,_`buffer.alloc()`,_and_`buffer.allocunsafe()`",
          "desc": "<p>In versions of Node.js prior to 6.0.0, <code>Buffer</code> instances were created using the\n<code>Buffer</code> constructor function, which allocates the returned <code>Buffer</code>\ndifferently based on what arguments are provided:</p>\n<ul>\n<li>Passing a number as the first argument to <code>Buffer()</code> (e.g. <code>new Buffer(10)</code>)\nallocates a new <code>Buffer</code> object of the specified size. Prior to Node.js 8.0.0,\nthe memory allocated for such <code>Buffer</code> instances is <em>not</em> initialized and\n<em>can contain sensitive data</em>. Such <code>Buffer</code> instances <em>must</em> be subsequently\ninitialized by using either <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> or by writing to the\nentire <code>Buffer</code>. While this behavior is <em>intentional</em> to improve performance,\ndevelopment experience has demonstrated that a more explicit distinction is\nrequired between creating a fast-but-uninitialized <code>Buffer</code> versus creating a\nslower-but-safer <code>Buffer</code>. Starting in Node.js 8.0.0, <code>Buffer(num)</code> and\n<code>new Buffer(num)</code> will return a <code>Buffer</code> with initialized memory.</li>\n<li>Passing a string, array, or <code>Buffer</code> as the first argument copies the\npassed object&#39;s data into the <code>Buffer</code>.</li>\n<li>Passing an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> returns a <code>Buffer</code> that\nshares allocated memory with the given array buffer.</li>\n</ul>\n<p>Because the behavior of <code>new Buffer()</code> is different depending on the type of the\nfirst argument, security and reliability issues can be inadvertently introduced\ninto applications when argument validation or <code>Buffer</code> initialization is not\nperformed.</p>\n<p>To make the creation of <code>Buffer</code> instances more reliable and less error-prone,\nthe various forms of the <code>new Buffer()</code> constructor have been <strong>deprecated</strong>\nand replaced by separate <code>Buffer.from()</code>, <a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc()</code></a>, and\n<a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> methods.</p>\n<p><em>Developers should migrate all existing uses of the <code>new Buffer()</code> constructors\nto one of these new APIs.</em></p>\n<ul>\n<li><a href=\"buffer.html#buffer_class_method_buffer_from_array\"><code>Buffer.from(array)</code></a> returns a new <code>Buffer</code> that <em>contains a copy</em> of the\nprovided octets.</li>\n<li><a href=\"#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\"><code>Buffer.from(arrayBuffer[, byteOffset[, length]])</code></a>\nreturns a new <code>Buffer</code> that <em>shares the same allocated memory</em> as the given\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.</li>\n<li><a href=\"buffer.html#buffer_class_method_buffer_from_buffer\"><code>Buffer.from(buffer)</code></a> returns a new <code>Buffer</code> that <em>contains a copy</em> of the\ncontents of the given <code>Buffer</code>.</li>\n<li><a href=\"#buffer_class_method_buffer_from_string_encoding\"><code>Buffer.from(string[, encoding])</code></a> returns a new\n<code>Buffer</code> that <em>contains a copy</em> of the provided string.</li>\n<li><a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc(size[, fill[, encoding]])</code></a> returns a new\ninitialized <code>Buffer</code> of the specified size. This method is slower than\n<a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe(size)</code></a> but guarantees that newly\ncreated <code>Buffer</code> instances never contain old data that is potentially\nsensitive.</li>\n<li><a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe(size)</code></a> and\n<a href=\"#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow(size)</code></a> each return a\nnew uninitialized <code>Buffer</code> of the specified <code>size</code>. Because the <code>Buffer</code> is\nuninitialized, the allocated segment of memory might contain old data that is\npotentially sensitive.</li>\n</ul>\n<p><code>Buffer</code> instances returned by <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> <em>may</em> be allocated off\na shared internal memory pool if <code>size</code> is less than or equal to half\n<a href=\"#buffer_class_property_buffer_poolsize\"><code>Buffer.poolSize</code></a>. Instances returned by <a href=\"#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow()</code></a> <em>never</em>\nuse the shared internal memory pool.</p>\n",
          "modules": [
            {
              "textRaw": "The `--zero-fill-buffers` command line option",
              "name": "the_`--zero-fill-buffers`_command_line_option",
              "meta": {
                "added": [
                  "v5.10.0"
                ],
                "changes": []
              },
              "desc": "<p>Node.js can be started using the <code>--zero-fill-buffers</code> command line option to\ncause all newly allocated <code>Buffer</code> instances to be zero-filled upon creation by\ndefault, including buffers returned by <code>new Buffer(size)</code>,\n<a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a>, <a href=\"#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow()</code></a>, and <code>new\nSlowBuffer(size)</code>. Use of this flag can have a significant negative impact on\nperformance. Use of the <code>--zero-fill-buffers</code> option is recommended only when\nnecessary to enforce that newly allocated <code>Buffer</code> instances cannot contain old\ndata that is potentially sensitive.</p>\n<pre><code class=\"lang-txt\">$ node --zero-fill-buffers\n&gt; Buffer.allocUnsafe(5);\n&lt;Buffer 00 00 00 00 00&gt;\n</code></pre>\n",
              "type": "module",
              "displayName": "The `--zero-fill-buffers` command line option"
            },
            {
              "textRaw": "What makes `Buffer.allocUnsafe()` and `Buffer.allocUnsafeSlow()` \"unsafe\"?",
              "name": "what_makes_`buffer.allocunsafe()`_and_`buffer.allocunsafeslow()`_\"unsafe\"?",
              "desc": "<p>When calling <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> and <a href=\"#buffer_class_method_buffer_allocunsafeslow_size\"><code>Buffer.allocUnsafeSlow()</code></a>, the\nsegment of allocated memory is <em>uninitialized</em> (it is not zeroed-out). While\nthis design makes the allocation of memory quite fast, the allocated segment of\nmemory might contain old data that is potentially sensitive. Using a <code>Buffer</code>\ncreated by <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> without <em>completely</em> overwriting the memory\ncan allow this old data to be leaked when the <code>Buffer</code> memory is read.</p>\n<p>While there are clear performance advantages to using <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a>,\nextra care <em>must</em> be taken in order to avoid introducing security\nvulnerabilities into an application.</p>\n",
              "type": "module",
              "displayName": "What makes `Buffer.allocUnsafe()` and `Buffer.allocUnsafeSlow()` \"unsafe\"?"
            }
          ],
          "type": "module",
          "displayName": "`Buffer.from()`, `Buffer.alloc()`, and `Buffer.allocUnsafe()`"
        },
        {
          "textRaw": "Buffers and Character Encodings",
          "name": "buffers_and_character_encodings",
          "meta": {
            "changes": [
              {
                "version": "v6.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/7111",
                "description": "Introduced `latin1` as an alias for `binary`."
              },
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/2859",
                "description": "Removed the deprecated `raw` and `raws` encodings."
              }
            ]
          },
          "desc": "<p>When string data is stored in or extracted out of a <code>Buffer</code> instance, a\ncharacter encoding may be specified.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;hello world&#39;, &#39;ascii&#39;);\n\nconsole.log(buf.toString(&#39;hex&#39;));\n// Prints: 68656c6c6f20776f726c64\nconsole.log(buf.toString(&#39;base64&#39;));\n// Prints: aGVsbG8gd29ybGQ=\n\nconsole.log(Buffer.from(&#39;fhqwhgads&#39;, &#39;ascii&#39;));\n// Prints: &lt;Buffer 66 68 71 77 68 67 61 64 73&gt;\nconsole.log(Buffer.from(&#39;fhqwhgads&#39;, &#39;utf16le&#39;));\n// Prints: &lt;Buffer 66 00 68 00 71 00 77 00 68 00 67 00 61 00 64 00 73 00&gt;\n</code></pre>\n<p>The character encodings currently supported by Node.js include:</p>\n<ul>\n<li><p><code>&#39;ascii&#39;</code> - For 7-bit ASCII data only. This encoding is fast and will strip\nthe high bit if set.</p>\n</li>\n<li><p><code>&#39;utf8&#39;</code> - Multibyte encoded Unicode characters. Many web pages and other\ndocument formats use UTF-8.</p>\n</li>\n<li><p><code>&#39;utf16le&#39;</code> - 2 or 4 bytes, little-endian encoded Unicode characters.\nSurrogate pairs (U+10000 to U+10FFFF) are supported.</p>\n</li>\n<li><p><code>&#39;ucs2&#39;</code> - Alias of <code>&#39;utf16le&#39;</code>.</p>\n</li>\n<li><p><code>&#39;base64&#39;</code> - Base64 encoding. When creating a <code>Buffer</code> from a string,\nthis encoding will also correctly accept &quot;URL and Filename Safe Alphabet&quot; as\nspecified in <a href=\"https://tools.ietf.org/html/rfc4648#section-5\">RFC4648, Section 5</a>.</p>\n</li>\n<li><p><code>&#39;latin1&#39;</code> - A way of encoding the <code>Buffer</code> into a one-byte encoded string\n(as defined by the IANA in <a href=\"https://tools.ietf.org/html/rfc1345\">RFC1345</a>,\npage 63, to be the Latin-1 supplement block and C0/C1 control codes).</p>\n</li>\n<li><p><code>&#39;binary&#39;</code> - Alias for <code>&#39;latin1&#39;</code>.</p>\n</li>\n<li><p><code>&#39;hex&#39;</code> - Encode each byte as two hexadecimal characters.</p>\n</li>\n</ul>\n<p>Modern Web browsers follow the <a href=\"https://encoding.spec.whatwg.org/\">WHATWG Encoding Standard</a> which aliases\nboth <code>&#39;latin1&#39;</code> and <code>&#39;ISO-8859-1&#39;</code> to <code>&#39;win-1252&#39;</code>. This means that while doing\nsomething like <code>http.get()</code>, if the returned charset is one of those listed in\nthe WHATWG specification it is possible that the server actually returned\n<code>&#39;win-1252&#39;</code>-encoded data, and using <code>&#39;latin1&#39;</code> encoding may incorrectly decode\nthe characters.</p>\n",
          "type": "module",
          "displayName": "Buffers and Character Encodings"
        },
        {
          "textRaw": "Buffers and TypedArray",
          "name": "buffers_and_typedarray",
          "meta": {
            "changes": [
              {
                "version": "v3.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/2002",
                "description": "The `Buffer`s class now inherits from `Uint8Array`."
              }
            ]
          },
          "desc": "<p><code>Buffer</code> instances are also <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> instances. However, there are subtle\nincompatibilities with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>. For example, while\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice\"><code>ArrayBuffer#slice()</code></a> creates a copy of the slice, the implementation of\n<a href=\"#buffer_buf_slice_start_end\"><code>Buffer#slice()</code></a> creates a view over the existing <code>Buffer</code>\nwithout copying, making <a href=\"#buffer_buf_slice_start_end\"><code>Buffer#slice()</code></a> far more efficient.</p>\n<p>It is also possible to create new <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instances from a <code>Buffer</code> with\nthe following caveats:</p>\n<ol>\n<li><p>The <code>Buffer</code> object&#39;s memory is copied to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>, not shared.</p>\n</li>\n<li><p>The <code>Buffer</code> object&#39;s memory is interpreted as an array of distinct\nelements, and not as a byte array of the target type. That is,\n<code>new Uint32Array(Buffer.from([1, 2, 3, 4]))</code> creates a 4-element <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>\nwith elements <code>[1, 2, 3, 4]</code>, not a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a> with a single element\n<code>[0x1020304]</code> or <code>[0x4030201]</code>.</p>\n</li>\n</ol>\n<p>It is possible to create a new <code>Buffer</code> that shares the same allocated memory as\na <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance by using the <code>TypeArray</code> object&#39;s <code>.buffer</code> property.</p>\n<pre><code class=\"lang-js\">const arr = new Uint16Array(2);\n\narr[0] = 5000;\narr[1] = 4000;\n\n// Copies the contents of `arr`\nconst buf1 = Buffer.from(arr);\n// Shares memory with `arr`\nconst buf2 = Buffer.from(arr.buffer);\n\nconsole.log(buf1);\n// Prints: &lt;Buffer 88 a0&gt;\nconsole.log(buf2);\n// Prints: &lt;Buffer 88 13 a0 0f&gt;\n\narr[1] = 6000;\n\nconsole.log(buf1);\n// Prints: &lt;Buffer 88 a0&gt;\nconsole.log(buf2);\n// Prints: &lt;Buffer 88 13 70 17&gt;\n</code></pre>\n<p>Note that when creating a <code>Buffer</code> using a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>&#39;s <code>.buffer</code>, it is\npossible to use only a portion of the underlying <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> by passing in\n<code>byteOffset</code> and <code>length</code> parameters.</p>\n<pre><code class=\"lang-js\">const arr = new Uint16Array(20);\nconst buf = Buffer.from(arr.buffer, 0, 16);\n\nconsole.log(buf.length);\n// Prints: 16\n</code></pre>\n<p>The <code>Buffer.from()</code> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from\"><code>TypedArray.from()</code></a> have different signatures and\nimplementations. Specifically, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> variants accept a second\nargument that is a mapping function that is invoked on every element of the\ntyped array:</p>\n<ul>\n<li><code>TypedArray.from(source[, mapFn[, thisArg]])</code></li>\n</ul>\n<p>The <code>Buffer.from()</code> method, however, does not support the use of a mapping\nfunction:</p>\n<ul>\n<li><a href=\"buffer.html#buffer_class_method_buffer_from_array\"><code>Buffer.from(array)</code></a></li>\n<li><a href=\"buffer.html#buffer_class_method_buffer_from_buffer\"><code>Buffer.from(buffer)</code></a></li>\n<li><a href=\"#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\"><code>Buffer.from(arrayBuffer[, byteOffset[, length]])</code></a></li>\n<li><a href=\"#buffer_class_method_buffer_from_string_encoding\"><code>Buffer.from(string[, encoding])</code></a></li>\n</ul>\n",
          "type": "module",
          "displayName": "Buffers and TypedArray"
        },
        {
          "textRaw": "Buffers and iteration",
          "name": "buffers_and_iteration",
          "desc": "<p><code>Buffer</code> instances can be iterated over using <code>for..of</code> syntax:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([1, 2, 3]);\n\n// Prints:\n//   1\n//   2\n//   3\nfor (const b of buf) {\n  console.log(b);\n}\n</code></pre>\n<p>Additionally, the <a href=\"#buffer_buf_values\"><code>buf.values()</code></a>, <a href=\"#buffer_buf_keys\"><code>buf.keys()</code></a>, and\n<a href=\"#buffer_buf_entries\"><code>buf.entries()</code></a> methods can be used to create iterators.</p>\n",
          "type": "module",
          "displayName": "Buffers and iteration"
        },
        {
          "textRaw": "Buffer Constants",
          "name": "buffer_constants",
          "meta": {
            "added": [
              "v8.2.0"
            ],
            "changes": []
          },
          "desc": "<p>Note that <code>buffer.constants</code> is a property on the <code>buffer</code> module returned by\n<code>require(&#39;buffer&#39;)</code>, not on the <code>Buffer</code> global or a <code>Buffer</code> instance.</p>\n",
          "properties": [
            {
              "textRaw": "`MAX_LENGTH` {integer} The largest size allowed for a single `Buffer` instance. ",
              "type": "integer",
              "name": "MAX_LENGTH",
              "meta": {
                "added": [
                  "v8.2.0"
                ],
                "changes": []
              },
              "desc": "<p>On 32-bit architectures, this value is <code>(2^30)-1</code> (~1GB).\nOn 64-bit architectures, this value is <code>(2^31)-1</code> (~2GB).</p>\n<p>This value is also available as <a href=\"#buffer_buffer_kmaxlength\"><code>buffer.kMaxLength</code></a>.</p>\n",
              "shortDesc": "The largest size allowed for a single `Buffer` instance."
            },
            {
              "textRaw": "`MAX_STRING_LENGTH` {integer} The largest length allowed for a single `string` instance. ",
              "type": "integer",
              "name": "MAX_STRING_LENGTH",
              "meta": {
                "added": [
                  "v8.2.0"
                ],
                "changes": []
              },
              "desc": "<p>Represents the largest <code>length</code> that a <code>string</code> primitive can have, counted\nin UTF-16 code units.</p>\n<p>This value may depend on the JS engine that is being used.</p>\n<!-- [end-include:buffer.md] -->\n<!-- [start-include:addons.md] -->\n",
              "shortDesc": "The largest length allowed for a single `string` instance."
            }
          ],
          "type": "module",
          "displayName": "Buffer Constants"
        }
      ],
      "classes": [
        {
          "textRaw": "Class: Buffer",
          "type": "class",
          "name": "Buffer",
          "desc": "<p>The <code>Buffer</code> class is a global type for dealing with binary data directly.\nIt can be constructed in a variety of ways.</p>\n",
          "classMethods": [
            {
              "textRaw": "Class Method: Buffer.alloc(size[, fill[, encoding]])",
              "type": "classMethod",
              "name": "alloc",
              "meta": {
                "added": [
                  "v5.10.0"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18129",
                    "description": "Attempting to fill a non-zero length buffer with a zero length buffer triggers a thrown exception."
                  },
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/17427",
                    "description": "Specifying an invalid string for `fill` triggers a thrown exception."
                  },
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/17428",
                    "description": "Specifying an invalid string for `fill` now results in a zero-filled buffer."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`size` {integer} The desired length of the new `Buffer`. ",
                      "name": "size",
                      "type": "integer",
                      "desc": "The desired length of the new `Buffer`."
                    },
                    {
                      "textRaw": "`fill` {string|Buffer|integer} A value to pre-fill the new `Buffer` with. **Default:** `0`. ",
                      "name": "fill",
                      "type": "string|Buffer|integer",
                      "default": "`0`",
                      "desc": "A value to pre-fill the new `Buffer` with.",
                      "optional": true
                    },
                    {
                      "textRaw": "`encoding` {string} If `fill` is a string, this is its encoding. **Default:** `'utf8'`. ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`",
                      "desc": "If `fill` is a string, this is its encoding.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "size"
                    },
                    {
                      "name": "fill",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>fill</code> is <code>undefined</code>, the\n<code>Buffer</code> will be <em>zero-filled</em>.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.alloc(5);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 00 00 00 00 00&gt;\n</code></pre>\n<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>size</code> is larger than\n<a href=\"#buffer_buffer_constants_max_length\"><code>buffer.constants.MAX_LENGTH</code></a> or smaller than 0, <a href=\"errors.html#ERR_INVALID_OPT_VALUE\"><code>ERR_INVALID_OPT_VALUE</code></a> is\nthrown. A zero-length <code>Buffer</code> is created if <code>size</code> is 0.</p>\n<p>If <code>fill</code> is specified, the allocated <code>Buffer</code> will be initialized by calling\n<a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(fill)</code></a>.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.alloc(5, &#39;a&#39;);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 61 61 61 61 61&gt;\n</code></pre>\n<p>If both <code>fill</code> and <code>encoding</code> are specified, the allocated <code>Buffer</code> will be\ninitialized by calling <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(fill, encoding)</code></a>.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.alloc(11, &#39;aGVsbG8gd29ybGQ=&#39;, &#39;base64&#39;);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64&gt;\n</code></pre>\n<p>Calling <a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc()</code></a> can be significantly slower than the alternative\n<a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> but ensures that the newly created <code>Buffer</code> instance\ncontents will <em>never contain sensitive data</em>.</p>\n<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>\n"
            },
            {
              "textRaw": "Class Method: Buffer.allocUnsafe(size)",
              "type": "classMethod",
              "name": "allocUnsafe",
              "meta": {
                "added": [
                  "v5.10.0"
                ],
                "changes": [
                  {
                    "version": "v7.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/7079",
                    "description": "Passing a negative `size` will now throw an error."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`size` {integer} The desired length of the new `Buffer`. ",
                      "name": "size",
                      "type": "integer",
                      "desc": "The desired length of the new `Buffer`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "size"
                    }
                  ]
                }
              ],
              "desc": "<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>size</code> is larger than\n<a href=\"#buffer_buffer_constants_max_length\"><code>buffer.constants.MAX_LENGTH</code></a> or smaller than 0, <a href=\"errors.html#ERR_INVALID_OPT_VALUE\"><code>ERR_INVALID_OPT_VALUE</code></a> is\nthrown. A zero-length <code>Buffer</code> is created if <code>size</code> is 0.</p>\n<p>The underlying memory for <code>Buffer</code> instances created in this way is <em>not\ninitialized</em>. The contents of the newly created <code>Buffer</code> are unknown and\n<em>may contain sensitive data</em>. Use <a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc()</code></a> instead to initialize\n<code>Buffer</code> instances with zeroes.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(10);\n\nconsole.log(buf);\n// Prints: (contents may vary): &lt;Buffer a0 8b 28 3f 01 00 00 00 50 32&gt;\n\nbuf.fill(0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;\n</code></pre>\n<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>\n<p>Note that the <code>Buffer</code> module pre-allocates an internal <code>Buffer</code> instance of\nsize <a href=\"#buffer_class_property_buffer_poolsize\"><code>Buffer.poolSize</code></a> that is used as a pool for the fast allocation of new\n<code>Buffer</code> instances created using <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> and the deprecated\n<code>new Buffer(size)</code> constructor only when <code>size</code> is less than or equal to\n<code>Buffer.poolSize &gt;&gt; 1</code> (floor of <a href=\"#buffer_class_property_buffer_poolsize\"><code>Buffer.poolSize</code></a> divided by two).</p>\n<p>Use of this pre-allocated internal memory pool is a key difference between\ncalling <code>Buffer.alloc(size, fill)</code> vs. <code>Buffer.allocUnsafe(size).fill(fill)</code>.\nSpecifically, <code>Buffer.alloc(size, fill)</code> will <em>never</em> use the internal <code>Buffer</code>\npool, while <code>Buffer.allocUnsafe(size).fill(fill)</code> <em>will</em> use the internal\n<code>Buffer</code> pool if <code>size</code> is less than or equal to half <a href=\"#buffer_class_property_buffer_poolsize\"><code>Buffer.poolSize</code></a>. The\ndifference is subtle but can be important when an application requires the\nadditional performance that <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> provides.</p>\n"
            },
            {
              "textRaw": "Class Method: Buffer.allocUnsafeSlow(size)",
              "type": "classMethod",
              "name": "allocUnsafeSlow",
              "meta": {
                "added": [
                  "v5.12.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`size` {integer} The desired length of the new `Buffer`. ",
                      "name": "size",
                      "type": "integer",
                      "desc": "The desired length of the new `Buffer`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "size"
                    }
                  ]
                }
              ],
              "desc": "<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>size</code> is larger than\n<a href=\"#buffer_buffer_constants_max_length\"><code>buffer.constants.MAX_LENGTH</code></a> or smaller than 0, <a href=\"errors.html#ERR_INVALID_OPT_VALUE\"><code>ERR_INVALID_OPT_VALUE</code></a> is\nthrown. A zero-length <code>Buffer</code> is created if <code>size</code> is 0.</p>\n<p>The underlying memory for <code>Buffer</code> instances created in this way is <em>not\ninitialized</em>. The contents of the newly created <code>Buffer</code> are unknown and\n<em>may contain sensitive data</em>. Use <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> to initialize\nsuch <code>Buffer</code> instances with zeroes.</p>\n<p>When using <a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> to allocate new <code>Buffer</code> instances,\nallocations under 4KB are sliced from a single pre-allocated <code>Buffer</code>. This\nallows applications to avoid the garbage collection overhead of creating many\nindividually allocated <code>Buffer</code> instances. This approach improves both\nperformance and memory usage by eliminating the need to track and clean up as\nmany persistent objects.</p>\n<p>However, in the case where a developer may need to retain a small chunk of\nmemory from a pool for an indeterminate amount of time, it may be appropriate\nto create an un-pooled <code>Buffer</code> instance using <code>Buffer.allocUnsafeSlow()</code> and\nthen copying out the relevant bits.</p>\n<pre><code class=\"lang-js\">// Need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on(&#39;readable&#39;, () =&gt; {\n  const data = socket.read();\n\n  // Allocate for retained data\n  const sb = Buffer.allocUnsafeSlow(10);\n\n  // Copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n\n  store.push(sb);\n});\n</code></pre>\n<p><code>Buffer.allocUnsafeSlow()</code> should be used only as a last resort after a\ndeveloper has observed undue memory retention in their applications.</p>\n<p>A <code>TypeError</code> will be thrown if <code>size</code> is not a number.</p>\n"
            },
            {
              "textRaw": "Class Method: Buffer.byteLength(string[, encoding])",
              "type": "classMethod",
              "name": "byteLength",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": [
                  {
                    "version": "v7.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/8946",
                    "description": "Passing invalid input will now throw an error."
                  },
                  {
                    "version": "v5.10.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5255",
                    "description": "The `string` parameter can now be any `TypedArray`, `DataView` or `ArrayBuffer`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} The number of bytes contained within `string`. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "The number of bytes contained within `string`."
                  },
                  "params": [
                    {
                      "textRaw": "`string` {string|Buffer|TypedArray|DataView|ArrayBuffer|SharedArrayBuffer} A value to calculate the length of. ",
                      "name": "string",
                      "type": "string|Buffer|TypedArray|DataView|ArrayBuffer|SharedArrayBuffer",
                      "desc": "A value to calculate the length of."
                    },
                    {
                      "textRaw": "`encoding` {string} If `string` is a string, this is its encoding. **Default:** `'utf8'`. ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`",
                      "desc": "If `string` is a string, this is its encoding.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns the actual byte length of a string. This is not the same as\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\"><code>String.prototype.length</code></a> since that returns the number of <em>characters</em> in\na string.</p>\n<p>For <code>&#39;base64&#39;</code> and <code>&#39;hex&#39;</code>, this function assumes valid input. For strings that\ncontain non-Base64/Hex-encoded data (e.g. whitespace), the return value might be\ngreater than the length of a <code>Buffer</code> created from the string.</p>\n<pre><code class=\"lang-js\">const str = &#39;\\u00bd + \\u00bc = \\u00be&#39;;\n\nconsole.log(`${str}: ${str.length} characters, ` +\n            `${Buffer.byteLength(str, &#39;utf8&#39;)} bytes`);\n// Prints: ½ + ¼ = ¾: 9 characters, 12 bytes\n</code></pre>\n<p>When <code>string</code> is a <code>Buffer</code>/<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>/<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>/<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>/\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>, the actual byte length is returned.</p>\n"
            },
            {
              "textRaw": "Class Method: Buffer.compare(buf1, buf2)",
              "type": "classMethod",
              "name": "compare",
              "meta": {
                "added": [
                  "v0.11.13"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/10236",
                    "description": "The arguments can now be `Uint8Array`s."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`buf1` {Buffer|Uint8Array} ",
                      "name": "buf1",
                      "type": "Buffer|Uint8Array"
                    },
                    {
                      "textRaw": "`buf2` {Buffer|Uint8Array} ",
                      "name": "buf2",
                      "type": "Buffer|Uint8Array"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buf1"
                    },
                    {
                      "name": "buf2"
                    }
                  ]
                }
              ],
              "desc": "<p>Compares <code>buf1</code> to <code>buf2</code> typically for the purpose of sorting arrays of\n<code>Buffer</code> instances. This is equivalent to calling\n<a href=\"#buffer_buf_compare_target_targetstart_targetend_sourcestart_sourceend\"><code>buf1.compare(buf2)</code></a>.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from(&#39;1234&#39;);\nconst buf2 = Buffer.from(&#39;0123&#39;);\nconst arr = [buf1, buf2];\n\nconsole.log(arr.sort(Buffer.compare));\n// Prints: [ &lt;Buffer 30 31 32 33&gt;, &lt;Buffer 31 32 33 34&gt; ]\n// (This result is equal to: [buf2, buf1])\n</code></pre>\n"
            },
            {
              "textRaw": "Class Method: Buffer.concat(list[, totalLength])",
              "type": "classMethod",
              "name": "concat",
              "meta": {
                "added": [
                  "v0.7.11"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/10236",
                    "description": "The elements of `list` can now be `Uint8Array`s."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} ",
                    "name": "return",
                    "type": "Buffer"
                  },
                  "params": [
                    {
                      "textRaw": "`list` {Buffer[] | Uint8Array[]} List of `Buffer` or [`Uint8Array`] instances to concat. ",
                      "name": "list",
                      "type": "Buffer[] | Uint8Array[]",
                      "desc": "List of `Buffer` or [`Uint8Array`] instances to concat."
                    },
                    {
                      "textRaw": "`totalLength` {integer} Total length of the `Buffer` instances in `list` when concatenated. ",
                      "name": "totalLength",
                      "type": "integer",
                      "desc": "Total length of the `Buffer` instances in `list` when concatenated.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "list"
                    },
                    {
                      "name": "totalLength",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns a new <code>Buffer</code> which is the result of concatenating all the <code>Buffer</code>\ninstances in the <code>list</code> together.</p>\n<p>If the list has no items, or if the <code>totalLength</code> is 0, then a new zero-length\n<code>Buffer</code> is returned.</p>\n<p>If <code>totalLength</code> is not provided, it is calculated from the <code>Buffer</code> instances\nin <code>list</code>. This however causes an additional loop to be executed in order to\ncalculate the <code>totalLength</code>, so it is faster to provide the length explicitly if\nit is already known.</p>\n<p>If <code>totalLength</code> is provided, it is coerced to an unsigned integer. If the\ncombined length of the <code>Buffer</code>s in <code>list</code> exceeds <code>totalLength</code>, the result is\ntruncated to <code>totalLength</code>.</p>\n<pre><code class=\"lang-js\">// Create a single `Buffer` from a list of three `Buffer` instances.\n\nconst buf1 = Buffer.alloc(10);\nconst buf2 = Buffer.alloc(14);\nconst buf3 = Buffer.alloc(18);\nconst totalLength = buf1.length + buf2.length + buf3.length;\n\nconsole.log(totalLength);\n// Prints: 42\n\nconst bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\n\nconsole.log(bufA);\n// Prints: &lt;Buffer 00 00 00 00 ...&gt;\nconsole.log(bufA.length);\n// Prints: 42\n</code></pre>\n"
            },
            {
              "textRaw": "Class Method: Buffer.from(array)",
              "type": "classMethod",
              "name": "from",
              "meta": {
                "added": [
                  "v5.10.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`array` {integer[]} ",
                      "name": "array",
                      "type": "integer[]"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "array"
                    }
                  ]
                }
              ],
              "desc": "<p>Allocates a new <code>Buffer</code> using an <code>array</code> of octets.</p>\n<pre><code class=\"lang-js\">// Creates a new Buffer containing UTF-8 bytes of the string &#39;buffer&#39;\nconst buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\n</code></pre>\n<p>A <code>TypeError</code> will be thrown if <code>array</code> is not an <code>Array</code>.</p>\n"
            },
            {
              "textRaw": "Class Method: Buffer.from(arrayBuffer[, byteOffset[, length]])",
              "type": "classMethod",
              "name": "from",
              "meta": {
                "added": [
                  "v5.10.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`arrayBuffer` {ArrayBuffer|SharedArrayBuffer} An [`ArrayBuffer`], [`SharedArrayBuffer`], or the `.buffer` property of a [`TypedArray`]. ",
                      "name": "arrayBuffer",
                      "type": "ArrayBuffer|SharedArrayBuffer",
                      "desc": "An [`ArrayBuffer`], [`SharedArrayBuffer`], or the `.buffer` property of a [`TypedArray`]."
                    },
                    {
                      "textRaw": "`byteOffset` {integer} Index of first byte to expose. **Default:** `0`. ",
                      "name": "byteOffset",
                      "type": "integer",
                      "default": "`0`",
                      "desc": "Index of first byte to expose.",
                      "optional": true
                    },
                    {
                      "textRaw": "`length` {integer} Number of bytes to expose. **Default:** `arrayBuffer.length - byteOffset`. ",
                      "name": "length",
                      "type": "integer",
                      "default": "`arrayBuffer.length - byteOffset`",
                      "desc": "Number of bytes to expose.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "arrayBuffer"
                    },
                    {
                      "name": "byteOffset",
                      "optional": true
                    },
                    {
                      "name": "length",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>This creates a view of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> without copying the underlying\nmemory. For example, when passed a reference to the <code>.buffer</code> property of a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance, the newly created <code>Buffer</code> will share the same\nallocated memory as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>.</p>\n<pre><code class=\"lang-js\">const arr = new Uint16Array(2);\n\narr[0] = 5000;\narr[1] = 4000;\n\n// Shares memory with `arr`\nconst buf = Buffer.from(arr.buffer);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 88 13 a0 0f&gt;\n\n// Changing the original Uint16Array changes the Buffer also\narr[1] = 6000;\n\nconsole.log(buf);\n// Prints: &lt;Buffer 88 13 70 17&gt;\n</code></pre>\n<p>The optional <code>byteOffset</code> and <code>length</code> arguments specify a memory range within\nthe <code>arrayBuffer</code> that will be shared by the <code>Buffer</code>.</p>\n<pre><code class=\"lang-js\">const ab = new ArrayBuffer(10);\nconst buf = Buffer.from(ab, 0, 2);\n\nconsole.log(buf.length);\n// Prints: 2\n</code></pre>\n<p>A <code>TypeError</code> will be thrown if <code>arrayBuffer</code> is not an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.</p>\n"
            },
            {
              "textRaw": "Class Method: Buffer.from(buffer)",
              "type": "classMethod",
              "name": "from",
              "meta": {
                "added": [
                  "v5.10.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|Uint8Array} An existing `Buffer` or [`Uint8Array`] from which to copy data. ",
                      "name": "buffer",
                      "type": "Buffer|Uint8Array",
                      "desc": "An existing `Buffer` or [`Uint8Array`] from which to copy data."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ],
              "desc": "<p>Copies the passed <code>buffer</code> data onto a new <code>Buffer</code> instance.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from(&#39;buffer&#39;);\nconst buf2 = Buffer.from(buf1);\n\nbuf1[0] = 0x61;\n\nconsole.log(buf1.toString());\n// Prints: auffer\nconsole.log(buf2.toString());\n// Prints: buffer\n</code></pre>\n<p>A <code>TypeError</code> will be thrown if <code>buffer</code> is not a <code>Buffer</code>.</p>\n"
            },
            {
              "textRaw": "Class Method: Buffer.from(string[, encoding])",
              "type": "classMethod",
              "name": "from",
              "meta": {
                "added": [
                  "v5.10.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`string` {string} A string to encode. ",
                      "name": "string",
                      "type": "string",
                      "desc": "A string to encode."
                    },
                    {
                      "textRaw": "`encoding` {string} The encoding of `string`. **Default:** `'utf8'`. ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`",
                      "desc": "The encoding of `string`.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a new <code>Buffer</code> containing <code>string</code>. The <code>encoding</code> parameter identifies\nthe character encoding of <code>string</code>.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from(&#39;this is a tést&#39;);\nconst buf2 = Buffer.from(&#39;7468697320697320612074c3a97374&#39;, &#39;hex&#39;);\n\nconsole.log(buf1.toString());\n// Prints: this is a tést\nconsole.log(buf2.toString());\n// Prints: this is a tést\nconsole.log(buf1.toString(&#39;ascii&#39;));\n// Prints: this is a tC)st\n</code></pre>\n<p>A <code>TypeError</code> will be thrown if <code>string</code> is not a string.</p>\n"
            },
            {
              "textRaw": "Class Method: Buffer.from(object[, offsetOrEncoding[, length]])",
              "type": "classMethod",
              "name": "from",
              "meta": {
                "added": [
                  "v8.2.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`object` {Object} An object supporting `Symbol.toPrimitive` or `valueOf()` ",
                      "name": "object",
                      "type": "Object",
                      "desc": "An object supporting `Symbol.toPrimitive` or `valueOf()`"
                    },
                    {
                      "textRaw": "`offsetOrEncoding` {number|string} A byte-offset or encoding, depending on the value returned either by `object.valueOf()` or `object[Symbol.toPrimitive]()`. ",
                      "name": "offsetOrEncoding",
                      "type": "number|string",
                      "desc": "A byte-offset or encoding, depending on the value returned either by `object.valueOf()` or `object[Symbol.toPrimitive]()`.",
                      "optional": true
                    },
                    {
                      "textRaw": "`length` {number} A length, depending on the value returned either by `object.valueOf()` or `object[Symbol.toPrimitive]()`. ",
                      "name": "length",
                      "type": "number",
                      "desc": "A length, depending on the value returned either by `object.valueOf()` or `object[Symbol.toPrimitive]()`.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    },
                    {
                      "name": "offsetOrEncoding",
                      "optional": true
                    },
                    {
                      "name": "length",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>For objects whose <code>valueOf()</code> function returns a value not strictly equal to\n<code>object</code>, returns <code>Buffer.from(object.valueOf(), offsetOrEncoding, length)</code>.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(new String(&#39;this is a test&#39;));\n// Prints: &lt;Buffer 74 68 69 73 20 69 73 20 61 20 74 65 73 74&gt;\n</code></pre>\n<p>For objects that support <code>Symbol.toPrimitive</code>, returns\n<code>Buffer.from(object[Symbol.toPrimitive](), offsetOrEncoding, length)</code>.</p>\n<pre><code class=\"lang-js\">class Foo {\n  [Symbol.toPrimitive]() {\n    return &#39;this is a test&#39;;\n  }\n}\n\nconst buf = Buffer.from(new Foo(), &#39;utf8&#39;);\n// Prints: &lt;Buffer 74 68 69 73 20 69 73 20 61 20 74 65 73 74&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "Class Method: Buffer.isBuffer(obj)",
              "type": "classMethod",
              "name": "isBuffer",
              "meta": {
                "added": [
                  "v0.1.101"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`obj` {Object} ",
                      "name": "obj",
                      "type": "Object"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "obj"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if <code>obj</code> is a <code>Buffer</code>, <code>false</code> otherwise.</p>\n"
            },
            {
              "textRaw": "Class Method: Buffer.isEncoding(encoding)",
              "type": "classMethod",
              "name": "isEncoding",
              "meta": {
                "added": [
                  "v0.9.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`encoding` {string} A character encoding name to check. ",
                      "name": "encoding",
                      "type": "string",
                      "desc": "A character encoding name to check."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if <code>encoding</code> contains a supported character encoding, or <code>false</code>\notherwise.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`poolSize` {integer} **Default:** `8192` ",
              "type": "integer",
              "name": "poolSize",
              "meta": {
                "added": [
                  "v0.11.3"
                ],
                "changes": []
              },
              "default": "`8192`",
              "desc": "<p>This is the size (in bytes) of pre-allocated internal <code>Buffer</code> instances used\nfor pooling. This value may be modified.</p>\n"
            },
            {
              "textRaw": "buf[index]",
              "name": "[index]",
              "meta": {
                "type": "property",
                "name": [
                  "index"
                ],
                "changes": []
              },
              "desc": "<p>The index operator <code>[index]</code> can be used to get and set the octet at position\n<code>index</code> in <code>buf</code>. The values refer to individual bytes, so the legal value\nrange is between <code>0x00</code> and <code>0xFF</code> (hex) or <code>0</code> and <code>255</code> (decimal).</p>\n<p>This operator is inherited from <code>Uint8Array</code>, so its behavior on out-of-bounds\naccess is the same as <code>UInt8Array</code> - that is, getting returns <code>undefined</code> and\nsetting does nothing.</p>\n<pre><code class=\"lang-js\">// Copy an ASCII string into a `Buffer` one byte at a time.\n\nconst str = &#39;Node.js&#39;;\nconst buf = Buffer.allocUnsafe(str.length);\n\nfor (let i = 0; i &lt; str.length; i++) {\n  buf[i] = str.charCodeAt(i);\n}\n\nconsole.log(buf.toString(&#39;ascii&#39;));\n// Prints: Node.js\n</code></pre>\n"
            },
            {
              "textRaw": "`buffer` {ArrayBuffer} The underlying `ArrayBuffer` object based on which this `Buffer` object is created. ",
              "type": "ArrayBuffer",
              "name": "buffer",
              "desc": "<pre><code class=\"lang-js\">const arrayBuffer = new ArrayBuffer(16);\nconst buffer = Buffer.from(arrayBuffer);\n\nconsole.log(buffer.buffer === arrayBuffer);\n// Prints: true\n</code></pre>\n",
              "shortDesc": "The underlying `ArrayBuffer` object based on which this `Buffer` object is created."
            },
            {
              "textRaw": "`length` {integer} ",
              "type": "integer",
              "name": "length",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "desc": "<p>Returns the amount of memory allocated for <code>buf</code> in bytes. Note that this\ndoes not necessarily reflect the amount of &quot;usable&quot; data within <code>buf</code>.</p>\n<pre><code class=\"lang-js\">// Create a `Buffer` and write a shorter ASCII string to it.\n\nconst buf = Buffer.alloc(1234);\n\nconsole.log(buf.length);\n// Prints: 1234\n\nbuf.write(&#39;some string&#39;, 0, &#39;ascii&#39;);\n\nconsole.log(buf.length);\n// Prints: 1234\n</code></pre>\n<p>While the <code>length</code> property is not immutable, changing the value of <code>length</code>\ncan result in undefined and inconsistent behavior. Applications that wish to\nmodify the length of a <code>Buffer</code> should therefore treat <code>length</code> as read-only and\nuse <a href=\"#buffer_buf_slice_start_end\"><code>buf.slice()</code></a> to create a new <code>Buffer</code>.</p>\n<pre><code class=\"lang-js\">let buf = Buffer.allocUnsafe(10);\n\nbuf.write(&#39;abcdefghj&#39;, 0, &#39;ascii&#39;);\n\nconsole.log(buf.length);\n// Prints: 10\n\nbuf = buf.slice(0, 5);\n\nconsole.log(buf.length);\n// Prints: 5\n</code></pre>\n"
            },
            {
              "textRaw": "buf.parent",
              "name": "parent",
              "meta": {
                "deprecated": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`buf.buffer`] instead.",
              "desc": "<p>The <code>buf.parent</code> property is a deprecated alias for <code>buf.buffer</code>.</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "buf.compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])",
              "type": "method",
              "name": "compare",
              "meta": {
                "added": [
                  "v0.11.13"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/10236",
                    "description": "The `target` parameter can now be a `Uint8Array`."
                  },
                  {
                    "version": "v5.11.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5880",
                    "description": "Additional parameters for specifying offsets are supported now."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`target` {Buffer|Uint8Array} A `Buffer` or [`Uint8Array`] with which to compare `buf`. ",
                      "name": "target",
                      "type": "Buffer|Uint8Array",
                      "desc": "A `Buffer` or [`Uint8Array`] with which to compare `buf`."
                    },
                    {
                      "textRaw": "`targetStart` {integer} The offset within `target` at which to begin comparison. **Default:** `0`. ",
                      "name": "targetStart",
                      "type": "integer",
                      "default": "`0`",
                      "desc": "The offset within `target` at which to begin comparison.",
                      "optional": true
                    },
                    {
                      "textRaw": "`targetEnd` {integer} The offset with `target` at which to end comparison (not inclusive). **Default:** `target.length`. ",
                      "name": "targetEnd",
                      "type": "integer",
                      "default": "`target.length`",
                      "desc": "The offset with `target` at which to end comparison (not inclusive).",
                      "optional": true
                    },
                    {
                      "textRaw": "`sourceStart` {integer} The offset within `buf` at which to begin comparison. **Default:** `0`. ",
                      "name": "sourceStart",
                      "type": "integer",
                      "default": "`0`",
                      "desc": "The offset within `buf` at which to begin comparison.",
                      "optional": true
                    },
                    {
                      "textRaw": "`sourceEnd` {integer} The offset within `buf` at which to end comparison (not inclusive). **Default:** [`buf.length`]. ",
                      "name": "sourceEnd",
                      "type": "integer",
                      "default": "[`buf.length`]",
                      "desc": "The offset within `buf` at which to end comparison (not inclusive).",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "target"
                    },
                    {
                      "name": "targetStart",
                      "optional": true
                    },
                    {
                      "name": "targetEnd",
                      "optional": true
                    },
                    {
                      "name": "sourceStart",
                      "optional": true
                    },
                    {
                      "name": "sourceEnd",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Compares <code>buf</code> with <code>target</code> and returns a number indicating whether <code>buf</code>\ncomes before, after, or is the same as <code>target</code> in sort order.\nComparison is based on the actual sequence of bytes in each <code>Buffer</code>.</p>\n<ul>\n<li><code>0</code> is returned if <code>target</code> is the same as <code>buf</code></li>\n<li><code>1</code> is returned if <code>target</code> should come <em>before</em> <code>buf</code> when sorted.</li>\n<li><code>-1</code> is returned if <code>target</code> should come <em>after</em> <code>buf</code> when sorted.</li>\n</ul>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from(&#39;ABC&#39;);\nconst buf2 = Buffer.from(&#39;BCD&#39;);\nconst buf3 = Buffer.from(&#39;ABCD&#39;);\n\nconsole.log(buf1.compare(buf1));\n// Prints: 0\nconsole.log(buf1.compare(buf2));\n// Prints: -1\nconsole.log(buf1.compare(buf3));\n// Prints: -1\nconsole.log(buf2.compare(buf1));\n// Prints: 1\nconsole.log(buf2.compare(buf3));\n// Prints: 1\nconsole.log([buf1, buf2, buf3].sort(Buffer.compare));\n// Prints: [ &lt;Buffer 41 42 43&gt;, &lt;Buffer 41 42 43 44&gt;, &lt;Buffer 42 43 44&gt; ]\n// (This result is equal to: [buf1, buf3, buf2])\n</code></pre>\n<p>The optional <code>targetStart</code>, <code>targetEnd</code>, <code>sourceStart</code>, and <code>sourceEnd</code>\narguments can be used to limit the comparison to specific ranges within <code>target</code>\nand <code>buf</code> respectively.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\nconst buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);\n\nconsole.log(buf1.compare(buf2, 5, 9, 0, 4));\n// Prints: 0\nconsole.log(buf1.compare(buf2, 0, 6, 4));\n// Prints: -1\nconsole.log(buf1.compare(buf2, 5, 6, 5));\n// Prints: 1\n</code></pre>\n<p><a href=\"errors.html#ERR_INDEX_OUT_OF_RANGE\"><code>ERR_INDEX_OUT_OF_RANGE</code></a> is thrown if <code>targetStart &lt; 0</code>, <code>sourceStart &lt; 0</code>,\n<code>targetEnd &gt; target.byteLength</code>, or <code>sourceEnd &gt; source.byteLength</code>.</p>\n"
            },
            {
              "textRaw": "buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])",
              "type": "method",
              "name": "copy",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} The number of bytes copied. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "The number of bytes copied."
                  },
                  "params": [
                    {
                      "textRaw": "`target` {Buffer|Uint8Array} A `Buffer` or [`Uint8Array`] to copy into. ",
                      "name": "target",
                      "type": "Buffer|Uint8Array",
                      "desc": "A `Buffer` or [`Uint8Array`] to copy into."
                    },
                    {
                      "textRaw": "`targetStart` {integer} The offset within `target` at which to begin writing. **Default:** `0`. ",
                      "name": "targetStart",
                      "type": "integer",
                      "default": "`0`",
                      "desc": "The offset within `target` at which to begin writing.",
                      "optional": true
                    },
                    {
                      "textRaw": "`sourceStart` {integer} The offset within `buf` from which to begin copying. **Default:** `0`. ",
                      "name": "sourceStart",
                      "type": "integer",
                      "default": "`0`",
                      "desc": "The offset within `buf` from which to begin copying.",
                      "optional": true
                    },
                    {
                      "textRaw": "`sourceEnd` {integer} The offset within `buf` at which to stop copying (not inclusive). **Default:** [`buf.length`]. ",
                      "name": "sourceEnd",
                      "type": "integer",
                      "default": "[`buf.length`]",
                      "desc": "The offset within `buf` at which to stop copying (not inclusive).",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "target"
                    },
                    {
                      "name": "targetStart",
                      "optional": true
                    },
                    {
                      "name": "sourceStart",
                      "optional": true
                    },
                    {
                      "name": "sourceEnd",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Copies data from a region of <code>buf</code> to a region in <code>target</code> even if the <code>target</code>\nmemory region overlaps with <code>buf</code>.</p>\n<pre><code class=\"lang-js\">// Create two `Buffer` instances.\nconst buf1 = Buffer.allocUnsafe(26);\nconst buf2 = Buffer.allocUnsafe(26).fill(&#39;!&#39;);\n\nfor (let i = 0; i &lt; 26; i++) {\n  // 97 is the decimal ASCII value for &#39;a&#39;\n  buf1[i] = i + 97;\n}\n\n// Copy `buf1` bytes 16 through 19 into `buf2` starting at byte 8 of `buf2`\nbuf1.copy(buf2, 8, 16, 20);\n\nconsole.log(buf2.toString(&#39;ascii&#39;, 0, 25));\n// Prints: !!!!!!!!qrst!!!!!!!!!!!!!\n</code></pre>\n<pre><code class=\"lang-js\">// Create a `Buffer` and copy data from one region to an overlapping region\n// within the same `Buffer`.\n\nconst buf = Buffer.allocUnsafe(26);\n\nfor (let i = 0; i &lt; 26; i++) {\n  // 97 is the decimal ASCII value for &#39;a&#39;\n  buf[i] = i + 97;\n}\n\nbuf.copy(buf, 0, 4, 10);\n\nconsole.log(buf.toString());\n// Prints: efghijghijklmnopqrstuvwxyz\n</code></pre>\n"
            },
            {
              "textRaw": "buf.entries()",
              "type": "method",
              "name": "entries",
              "meta": {
                "added": [
                  "v1.1.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Iterator} ",
                    "name": "return",
                    "type": "Iterator"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Creates and returns an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterator</a> of <code>[index, byte]</code> pairs from the contents of\n<code>buf</code>.</p>\n<pre><code class=\"lang-js\">// Log the entire contents of a `Buffer`.\n\nconst buf = Buffer.from(&#39;buffer&#39;);\n\nfor (const pair of buf.entries()) {\n  console.log(pair);\n}\n// Prints:\n//   [0, 98]\n//   [1, 117]\n//   [2, 102]\n//   [3, 102]\n//   [4, 101]\n//   [5, 114]\n</code></pre>\n"
            },
            {
              "textRaw": "buf.equals(otherBuffer)",
              "type": "method",
              "name": "equals",
              "meta": {
                "added": [
                  "v0.11.13"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/10236",
                    "description": "The arguments can now be `Uint8Array`s."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`otherBuffer` {Buffer} A `Buffer` or [`Uint8Array`] with which to compare `buf`. ",
                      "name": "otherBuffer",
                      "type": "Buffer",
                      "desc": "A `Buffer` or [`Uint8Array`] with which to compare `buf`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "otherBuffer"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if both <code>buf</code> and <code>otherBuffer</code> have exactly the same bytes,\n<code>false</code> otherwise.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from(&#39;ABC&#39;);\nconst buf2 = Buffer.from(&#39;414243&#39;, &#39;hex&#39;);\nconst buf3 = Buffer.from(&#39;ABCD&#39;);\n\nconsole.log(buf1.equals(buf2));\n// Prints: true\nconsole.log(buf1.equals(buf3));\n// Prints: false\n</code></pre>\n"
            },
            {
              "textRaw": "buf.fill(value[, offset[, end]][, encoding])",
              "type": "method",
              "name": "fill",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18790",
                    "description": "Negative `end` values throw an `ERR_INDEX_OUT_OF_RANGE` error."
                  },
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18129",
                    "description": "Attempting to fill a non-zero length buffer with a zero length buffer triggers a thrown exception."
                  },
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/17427",
                    "description": "Specifying an invalid string for `value` triggers a thrown exception."
                  },
                  {
                    "version": "v5.7.0",
                    "pr-url": "https://github.com/nodejs/node/pull/4935",
                    "description": "The `encoding` parameter is supported now."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} A reference to `buf`. ",
                    "name": "return",
                    "type": "Buffer",
                    "desc": "A reference to `buf`."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {string|Buffer|integer} The value with which to fill `buf`. ",
                      "name": "value",
                      "type": "string|Buffer|integer",
                      "desc": "The value with which to fill `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to fill `buf`. **Default:** `0`. ",
                      "name": "offset",
                      "type": "integer",
                      "default": "`0`",
                      "desc": "Number of bytes to skip before starting to fill `buf`.",
                      "optional": true
                    },
                    {
                      "textRaw": "`end` {integer} Where to stop filling `buf` (not inclusive). **Default:** [`buf.length`]. ",
                      "name": "end",
                      "type": "integer",
                      "default": "[`buf.length`]",
                      "desc": "Where to stop filling `buf` (not inclusive).",
                      "optional": true
                    },
                    {
                      "textRaw": "`encoding` {string} The encoding for `value` if `value` is a string. **Default:** `'utf8'`. ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`",
                      "desc": "The encoding for `value` if `value` is a string.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset",
                      "optional": true
                    },
                    {
                      "name": "end",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Fills <code>buf</code> with the specified <code>value</code>. If the <code>offset</code> and <code>end</code> are not given,\nthe entire <code>buf</code> will be filled:</p>\n<pre><code class=\"lang-js\">// Fill a `Buffer` with the ASCII character &#39;h&#39;.\n\nconst b = Buffer.allocUnsafe(50).fill(&#39;h&#39;);\n\nconsole.log(b.toString());\n// Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\n</code></pre>\n<p><code>value</code> is coerced to a <code>uint32</code> value if it is not a string or integer.</p>\n<p>If the final write of a <code>fill()</code> operation falls on a multi-byte character,\nthen only the bytes of that character that fit into <code>buf</code> are written:</p>\n<pre><code class=\"lang-js\">// Fill a `Buffer` with a two-byte character.\n\nconsole.log(Buffer.allocUnsafe(3).fill(&#39;\\u0222&#39;));\n// Prints: &lt;Buffer c8 a2 c8&gt;\n</code></pre>\n<p>If <code>value</code> contains invalid characters, it is truncated; if no valid\nfill data remains, an exception is thrown:</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(5);\n\nconsole.log(buf.fill(&#39;a&#39;));\n// Prints: &lt;Buffer 61 61 61 61 61&gt;\nconsole.log(buf.fill(&#39;aazz&#39;, &#39;hex&#39;));\n// Prints: &lt;Buffer aa aa aa aa aa&gt;\nconsole.log(buf.fill(&#39;zz&#39;, &#39;hex&#39;));\n// Throws an exception.\n</code></pre>\n"
            },
            {
              "textRaw": "buf.includes(value[, byteOffset][, encoding])",
              "type": "method",
              "name": "includes",
              "meta": {
                "added": [
                  "v5.3.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} `true` if `value` was found in `buf`, `false` otherwise. ",
                    "name": "return",
                    "type": "boolean",
                    "desc": "`true` if `value` was found in `buf`, `false` otherwise."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {string|Buffer|integer} What to search for. ",
                      "name": "value",
                      "type": "string|Buffer|integer",
                      "desc": "What to search for."
                    },
                    {
                      "textRaw": "`byteOffset` {integer} Where to begin searching in `buf`. **Default:** `0`. ",
                      "name": "byteOffset",
                      "type": "integer",
                      "default": "`0`",
                      "desc": "Where to begin searching in `buf`.",
                      "optional": true
                    },
                    {
                      "textRaw": "`encoding` {string} If `value` is a string, this is its encoding. **Default:** `'utf8'`. ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`",
                      "desc": "If `value` is a string, this is its encoding.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "byteOffset",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Equivalent to <a href=\"#buffer_buf_indexof_value_byteoffset_encoding\"><code>buf.indexOf() !== -1</code></a>.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;this is a buffer&#39;);\n\nconsole.log(buf.includes(&#39;this&#39;));\n// Prints: true\nconsole.log(buf.includes(&#39;is&#39;));\n// Prints: true\nconsole.log(buf.includes(Buffer.from(&#39;a buffer&#39;)));\n// Prints: true\nconsole.log(buf.includes(97));\n// Prints: true (97 is the decimal ASCII value for &#39;a&#39;)\nconsole.log(buf.includes(Buffer.from(&#39;a buffer example&#39;)));\n// Prints: false\nconsole.log(buf.includes(Buffer.from(&#39;a buffer example&#39;).slice(0, 8)));\n// Prints: true\nconsole.log(buf.includes(&#39;this&#39;, 4));\n// Prints: false\n</code></pre>\n"
            },
            {
              "textRaw": "buf.indexOf(value[, byteOffset][, encoding])",
              "type": "method",
              "name": "indexOf",
              "meta": {
                "added": [
                  "v1.5.0"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/10236",
                    "description": "The `value` can now be a `Uint8Array`."
                  },
                  {
                    "version": "v5.7.0, v4.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/4803",
                    "description": "When `encoding` is being passed, the `byteOffset` parameter is no longer required."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} The index of the first occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "The index of the first occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {string|Buffer|Uint8Array|integer} What to search for. ",
                      "name": "value",
                      "type": "string|Buffer|Uint8Array|integer",
                      "desc": "What to search for."
                    },
                    {
                      "textRaw": "`byteOffset` {integer} Where to begin searching in `buf`. **Default:** `0`. ",
                      "name": "byteOffset",
                      "type": "integer",
                      "default": "`0`",
                      "desc": "Where to begin searching in `buf`.",
                      "optional": true
                    },
                    {
                      "textRaw": "`encoding` {string} If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`. **Default:** `'utf8'`. ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`",
                      "desc": "If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "byteOffset",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>If <code>value</code> is:</p>\n<ul>\n<li>a string, <code>value</code> is interpreted according to the character encoding in\n<code>encoding</code>.</li>\n<li>a <code>Buffer</code> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>, <code>value</code> will be used in its entirety.\nTo compare a partial <code>Buffer</code>, use <a href=\"#buffer_buf_slice_start_end\"><code>buf.slice()</code></a>.</li>\n<li>a number, <code>value</code> will be interpreted as an unsigned 8-bit integer\nvalue between <code>0</code> and <code>255</code>.</li>\n</ul>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;this is a buffer&#39;);\n\nconsole.log(buf.indexOf(&#39;this&#39;));\n// Prints: 0\nconsole.log(buf.indexOf(&#39;is&#39;));\n// Prints: 2\nconsole.log(buf.indexOf(Buffer.from(&#39;a buffer&#39;)));\n// Prints: 8\nconsole.log(buf.indexOf(97));\n// Prints: 8 (97 is the decimal ASCII value for &#39;a&#39;)\nconsole.log(buf.indexOf(Buffer.from(&#39;a buffer example&#39;)));\n// Prints: -1\nconsole.log(buf.indexOf(Buffer.from(&#39;a buffer example&#39;).slice(0, 8)));\n// Prints: 8\n\nconst utf16Buffer = Buffer.from(&#39;\\u039a\\u0391\\u03a3\\u03a3\\u0395&#39;, &#39;utf16le&#39;);\n\nconsole.log(utf16Buffer.indexOf(&#39;\\u03a3&#39;, 0, &#39;utf16le&#39;));\n// Prints: 4\nconsole.log(utf16Buffer.indexOf(&#39;\\u03a3&#39;, -4, &#39;utf16le&#39;));\n// Prints: 6\n</code></pre>\n<p>If <code>value</code> is not a string, number, or <code>Buffer</code>, this method will throw a\n<code>TypeError</code>. If <code>value</code> is a number, it will be coerced to a valid byte value,\nan integer between 0 and 255.</p>\n<p>If <code>byteOffset</code> is not a number, it will be coerced to a number. If the result\nof coercion is <code>NaN</code> or <code>0</code>, then the entire buffer will be searched. This\nbehavior matches <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\"><code>String#indexOf()</code></a>.</p>\n<pre><code class=\"lang-js\">const b = Buffer.from(&#39;abcdef&#39;);\n\n// Passing a value that&#39;s a number, but not a valid byte\n// Prints: 2, equivalent to searching for 99 or &#39;c&#39;\nconsole.log(b.indexOf(99.9));\nconsole.log(b.indexOf(256 + 99));\n\n// Passing a byteOffset that coerces to NaN or 0\n// Prints: 1, searching the whole buffer\nconsole.log(b.indexOf(&#39;b&#39;, undefined));\nconsole.log(b.indexOf(&#39;b&#39;, {}));\nconsole.log(b.indexOf(&#39;b&#39;, null));\nconsole.log(b.indexOf(&#39;b&#39;, []));\n</code></pre>\n<p>If <code>value</code> is an empty string or empty <code>Buffer</code> and <code>byteOffset</code> is less\nthan <code>buf.length</code>, <code>byteOffset</code> will be returned. If <code>value</code> is empty and\n<code>byteOffset</code> is at least <code>buf.length</code>, <code>buf.length</code> will be returned.</p>\n"
            },
            {
              "textRaw": "buf.keys()",
              "type": "method",
              "name": "keys",
              "meta": {
                "added": [
                  "v1.1.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Iterator} ",
                    "name": "return",
                    "type": "Iterator"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Creates and returns an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterator</a> of <code>buf</code> keys (indices).</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;buffer&#39;);\n\nfor (const key of buf.keys()) {\n  console.log(key);\n}\n// Prints:\n//   0\n//   1\n//   2\n//   3\n//   4\n//   5\n</code></pre>\n"
            },
            {
              "textRaw": "buf.lastIndexOf(value[, byteOffset][, encoding])",
              "type": "method",
              "name": "lastIndexOf",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/10236",
                    "description": "The `value` can now be a `Uint8Array`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} The index of the last occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "The index of the last occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {string|Buffer|Uint8Array|integer} What to search for. ",
                      "name": "value",
                      "type": "string|Buffer|Uint8Array|integer",
                      "desc": "What to search for."
                    },
                    {
                      "textRaw": "`byteOffset` {integer} Where to begin searching in `buf`. **Default:** [`buf.length`]` - 1`. ",
                      "name": "byteOffset",
                      "type": "integer",
                      "default": "[`buf.length`]` - 1`",
                      "desc": "Where to begin searching in `buf`.",
                      "optional": true
                    },
                    {
                      "textRaw": "`encoding` {string} If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`. **Default:** `'utf8'`. ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`",
                      "desc": "If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "byteOffset",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Identical to <a href=\"#buffer_buf_indexof_value_byteoffset_encoding\"><code>buf.indexOf()</code></a>, except the last occurrence of <code>value</code> is found\nrather than the first occurrence.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;this buffer is a buffer&#39;);\n\nconsole.log(buf.lastIndexOf(&#39;this&#39;));\n// Prints: 0\nconsole.log(buf.lastIndexOf(&#39;buffer&#39;));\n// Prints: 17\nconsole.log(buf.lastIndexOf(Buffer.from(&#39;buffer&#39;)));\n// Prints: 17\nconsole.log(buf.lastIndexOf(97));\n// Prints: 15 (97 is the decimal ASCII value for &#39;a&#39;)\nconsole.log(buf.lastIndexOf(Buffer.from(&#39;yolo&#39;)));\n// Prints: -1\nconsole.log(buf.lastIndexOf(&#39;buffer&#39;, 5));\n// Prints: 5\nconsole.log(buf.lastIndexOf(&#39;buffer&#39;, 4));\n// Prints: -1\n\nconst utf16Buffer = Buffer.from(&#39;\\u039a\\u0391\\u03a3\\u03a3\\u0395&#39;, &#39;utf16le&#39;);\n\nconsole.log(utf16Buffer.lastIndexOf(&#39;\\u03a3&#39;, undefined, &#39;utf16le&#39;));\n// Prints: 6\nconsole.log(utf16Buffer.lastIndexOf(&#39;\\u03a3&#39;, -5, &#39;utf16le&#39;));\n// Prints: 4\n</code></pre>\n<p>If <code>value</code> is not a string, number, or <code>Buffer</code>, this method will throw a\n<code>TypeError</code>. If <code>value</code> is a number, it will be coerced to a valid byte value,\nan integer between 0 and 255.</p>\n<p>If <code>byteOffset</code> is not a number, it will be coerced to a number. Any arguments\nthat coerce to <code>NaN</code>, like <code>{}</code> or <code>undefined</code>, will search the whole buffer.\nThis behavior matches <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\"><code>String#lastIndexOf()</code></a>.</p>\n<pre><code class=\"lang-js\">const b = Buffer.from(&#39;abcdef&#39;);\n\n// Passing a value that&#39;s a number, but not a valid byte\n// Prints: 2, equivalent to searching for 99 or &#39;c&#39;\nconsole.log(b.lastIndexOf(99.9));\nconsole.log(b.lastIndexOf(256 + 99));\n\n// Passing a byteOffset that coerces to NaN\n// Prints: 1, searching the whole buffer\nconsole.log(b.lastIndexOf(&#39;b&#39;, undefined));\nconsole.log(b.lastIndexOf(&#39;b&#39;, {}));\n\n// Passing a byteOffset that coerces to 0\n// Prints: -1, equivalent to passing 0\nconsole.log(b.lastIndexOf(&#39;b&#39;, null));\nconsole.log(b.lastIndexOf(&#39;b&#39;, []));\n</code></pre>\n<p>If <code>value</code> is an empty string or empty <code>Buffer</code>, <code>byteOffset</code> will be returned.</p>\n"
            },
            {
              "textRaw": "buf.readDoubleBE(offset)",
              "type": "method",
              "name": "readDoubleBE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {number} ",
                    "name": "return",
                    "type": "number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads a 64-bit double from <code>buf</code> at the specified <code>offset</code> with specified\nendian format (<code>readDoubleBE()</code> returns big endian, <code>readDoubleLE()</code> returns\nlittle endian).</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\nconsole.log(buf.readDoubleBE(0));\n// Prints: 8.20788039913184e-304\nconsole.log(buf.readDoubleLE(0));\n// Prints: 5.447603722011605e-270\nconsole.log(buf.readDoubleLE(1));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readDoubleLE(offset)",
              "type": "method",
              "name": "readDoubleLE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {number} ",
                    "name": "return",
                    "type": "number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads a 64-bit double from <code>buf</code> at the specified <code>offset</code> with specified\nendian format (<code>readDoubleBE()</code> returns big endian, <code>readDoubleLE()</code> returns\nlittle endian).</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n\nconsole.log(buf.readDoubleBE(0));\n// Prints: 8.20788039913184e-304\nconsole.log(buf.readDoubleLE(0));\n// Prints: 5.447603722011605e-270\nconsole.log(buf.readDoubleLE(1));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readFloatBE(offset)",
              "type": "method",
              "name": "readFloatBE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {number} ",
                    "name": "return",
                    "type": "number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads a 32-bit float from <code>buf</code> at the specified <code>offset</code> with specified\nendian format (<code>readFloatBE()</code> returns big endian, <code>readFloatLE()</code> returns\nlittle endian).</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([1, 2, 3, 4]);\n\nconsole.log(buf.readFloatBE(0));\n// Prints: 2.387939260590663e-38\nconsole.log(buf.readFloatLE(0));\n// Prints: 1.539989614439558e-36\nconsole.log(buf.readFloatLE(1));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readFloatLE(offset)",
              "type": "method",
              "name": "readFloatLE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {number} ",
                    "name": "return",
                    "type": "number"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads a 32-bit float from <code>buf</code> at the specified <code>offset</code> with specified\nendian format (<code>readFloatBE()</code> returns big endian, <code>readFloatLE()</code> returns\nlittle endian).</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([1, 2, 3, 4]);\n\nconsole.log(buf.readFloatBE(0));\n// Prints: 2.387939260590663e-38\nconsole.log(buf.readFloatLE(0));\n// Prints: 1.539989614439558e-36\nconsole.log(buf.readFloatLE(1));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readInt8(offset)",
              "type": "method",
              "name": "readInt8",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads a signed 8-bit integer from <code>buf</code> at the specified <code>offset</code>.</p>\n<p>Integers read from a <code>Buffer</code> are interpreted as two&#39;s complement signed values.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([-1, 5]);\n\nconsole.log(buf.readInt8(0));\n// Prints: -1\nconsole.log(buf.readInt8(1));\n// Prints: 5\nconsole.log(buf.readInt8(2));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readInt16BE(offset)",
              "type": "method",
              "name": "readInt16BE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads a signed 16-bit integer from <code>buf</code> at the specified <code>offset</code> with\nthe specified endian format (<code>readInt16BE()</code> returns big endian,\n<code>readInt16LE()</code> returns little endian).</p>\n<p>Integers read from a <code>Buffer</code> are interpreted as two&#39;s complement signed values.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0, 5]);\n\nconsole.log(buf.readInt16BE(0));\n// Prints: 5\nconsole.log(buf.readInt16LE(0));\n// Prints: 1280\nconsole.log(buf.readInt16LE(1));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readInt16LE(offset)",
              "type": "method",
              "name": "readInt16LE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads a signed 16-bit integer from <code>buf</code> at the specified <code>offset</code> with\nthe specified endian format (<code>readInt16BE()</code> returns big endian,\n<code>readInt16LE()</code> returns little endian).</p>\n<p>Integers read from a <code>Buffer</code> are interpreted as two&#39;s complement signed values.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0, 5]);\n\nconsole.log(buf.readInt16BE(0));\n// Prints: 5\nconsole.log(buf.readInt16LE(0));\n// Prints: 1280\nconsole.log(buf.readInt16LE(1));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readInt32BE(offset)",
              "type": "method",
              "name": "readInt32BE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads a signed 32-bit integer from <code>buf</code> at the specified <code>offset</code> with\nthe specified endian format (<code>readInt32BE()</code> returns big endian,\n<code>readInt32LE()</code> returns little endian).</p>\n<p>Integers read from a <code>Buffer</code> are interpreted as two&#39;s complement signed values.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0, 0, 0, 5]);\n\nconsole.log(buf.readInt32BE(0));\n// Prints: 5\nconsole.log(buf.readInt32LE(0));\n// Prints: 83886080\nconsole.log(buf.readInt32LE(1));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readInt32LE(offset)",
              "type": "method",
              "name": "readInt32LE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads a signed 32-bit integer from <code>buf</code> at the specified <code>offset</code> with\nthe specified endian format (<code>readInt32BE()</code> returns big endian,\n<code>readInt32LE()</code> returns little endian).</p>\n<p>Integers read from a <code>Buffer</code> are interpreted as two&#39;s complement signed values.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0, 0, 0, 5]);\n\nconsole.log(buf.readInt32BE(0));\n// Prints: 5\nconsole.log(buf.readInt32LE(0));\n// Prints: 83886080\nconsole.log(buf.readInt32LE(1));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readIntBE(offset, byteLength)",
              "type": "method",
              "name": "readIntBE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset and `byteLength` to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`."
                    },
                    {
                      "textRaw": "`byteLength` {integer} Number of bytes to read. Must satisfy `0 < byteLength <= 6`. ",
                      "name": "byteLength",
                      "type": "integer",
                      "desc": "Number of bytes to read. Must satisfy `0 < byteLength <= 6`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "byteLength"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "byteLength"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>\nand interprets the result as a two&#39;s complement signed value. Supports up to 48\nbits of accuracy.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\nconsole.log(buf.readIntLE(0, 6).toString(16));\n// Prints: -546f87a9cbee\nconsole.log(buf.readIntBE(0, 6).toString(16));\n// Prints: 1234567890ab\nconsole.log(buf.readIntBE(1, 6).toString(16));\n// Throws ERR_INDEX_OUT_OF_RANGE\nconsole.log(buf.readIntBE(1, 0).toString(16));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readIntLE(offset, byteLength)",
              "type": "method",
              "name": "readIntLE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset and `byteLength` to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`."
                    },
                    {
                      "textRaw": "`byteLength` {integer} Number of bytes to read. Must satisfy `0 < byteLength <= 6`. ",
                      "name": "byteLength",
                      "type": "integer",
                      "desc": "Number of bytes to read. Must satisfy `0 < byteLength <= 6`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "byteLength"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>\nand interprets the result as a two&#39;s complement signed value. Supports up to 48\nbits of accuracy.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\nconsole.log(buf.readIntLE(0, 6).toString(16));\n// Prints: -546f87a9cbee\nconsole.log(buf.readIntBE(0, 6).toString(16));\n// Prints: 1234567890ab\nconsole.log(buf.readIntBE(1, 6).toString(16));\n// Throws ERR_INDEX_OUT_OF_RANGE\nconsole.log(buf.readIntBE(1, 0).toString(16));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readUInt8(offset)",
              "type": "method",
              "name": "readUInt8",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads an unsigned 8-bit integer from <code>buf</code> at the specified <code>offset</code>.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([1, -2]);\n\nconsole.log(buf.readUInt8(0));\n// Prints: 1\nconsole.log(buf.readUInt8(1));\n// Prints: 254\nconsole.log(buf.readUInt8(2));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readUInt16BE(offset)",
              "type": "method",
              "name": "readUInt16BE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads an unsigned 16-bit integer from <code>buf</code> at the specified <code>offset</code> with\nspecified endian format (<code>readUInt16BE()</code> returns big endian, <code>readUInt16LE()</code>\nreturns little endian).</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x12, 0x34, 0x56]);\n\nconsole.log(buf.readUInt16BE(0).toString(16));\n// Prints: 1234\nconsole.log(buf.readUInt16LE(0).toString(16));\n// Prints: 3412\nconsole.log(buf.readUInt16BE(1).toString(16));\n// Prints: 3456\nconsole.log(buf.readUInt16LE(1).toString(16));\n// Prints: 5634\nconsole.log(buf.readUInt16LE(2).toString(16));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readUInt16LE(offset)",
              "type": "method",
              "name": "readUInt16LE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads an unsigned 16-bit integer from <code>buf</code> at the specified <code>offset</code> with\nspecified endian format (<code>readUInt16BE()</code> returns big endian, <code>readUInt16LE()</code>\nreturns little endian).</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x12, 0x34, 0x56]);\n\nconsole.log(buf.readUInt16BE(0).toString(16));\n// Prints: 1234\nconsole.log(buf.readUInt16LE(0).toString(16));\n// Prints: 3412\nconsole.log(buf.readUInt16BE(1).toString(16));\n// Prints: 3456\nconsole.log(buf.readUInt16LE(1).toString(16));\n// Prints: 5634\nconsole.log(buf.readUInt16LE(2).toString(16));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readUInt32BE(offset)",
              "type": "method",
              "name": "readUInt32BE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads an unsigned 32-bit integer from <code>buf</code> at the specified <code>offset</code> with\nspecified endian format (<code>readUInt32BE()</code> returns big endian,\n<code>readUInt32LE()</code> returns little endian).</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\nconsole.log(buf.readUInt32BE(0).toString(16));\n// Prints: 12345678\nconsole.log(buf.readUInt32LE(0).toString(16));\n// Prints: 78563412\nconsole.log(buf.readUInt32LE(1).toString(16));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readUInt32LE(offset)",
              "type": "method",
              "name": "readUInt32LE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads an unsigned 32-bit integer from <code>buf</code> at the specified <code>offset</code> with\nspecified endian format (<code>readUInt32BE()</code> returns big endian,\n<code>readUInt32LE()</code> returns little endian).</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n\nconsole.log(buf.readUInt32BE(0).toString(16));\n// Prints: 12345678\nconsole.log(buf.readUInt32LE(0).toString(16));\n// Prints: 78563412\nconsole.log(buf.readUInt32LE(1).toString(16));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readUIntBE(offset, byteLength)",
              "type": "method",
              "name": "readUIntBE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset and `byteLength` to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`."
                    },
                    {
                      "textRaw": "`byteLength` {integer} Number of bytes to read. Must satisfy `0 < byteLength <= 6`. ",
                      "name": "byteLength",
                      "type": "integer",
                      "desc": "Number of bytes to read. Must satisfy `0 < byteLength <= 6`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "byteLength"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "byteLength"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>\nand interprets the result as an unsigned integer. Supports up to 48\nbits of accuracy.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\nconsole.log(buf.readUIntBE(0, 6).toString(16));\n// Prints: 1234567890ab\nconsole.log(buf.readUIntLE(0, 6).toString(16));\n// Prints: ab9078563412\nconsole.log(buf.readUIntBE(1, 6).toString(16));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.readUIntLE(offset, byteLength)",
              "type": "method",
              "name": "readUIntLE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset and `byteLength` to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`."
                    },
                    {
                      "textRaw": "`byteLength` {integer} Number of bytes to read. Must satisfy `0 < byteLength <= 6`. ",
                      "name": "byteLength",
                      "type": "integer",
                      "desc": "Number of bytes to read. Must satisfy `0 < byteLength <= 6`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "offset"
                    },
                    {
                      "name": "byteLength"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads <code>byteLength</code> number of bytes from <code>buf</code> at the specified <code>offset</code>\nand interprets the result as an unsigned integer. Supports up to 48\nbits of accuracy.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n\nconsole.log(buf.readUIntBE(0, 6).toString(16));\n// Prints: 1234567890ab\nconsole.log(buf.readUIntLE(0, 6).toString(16));\n// Prints: ab9078563412\nconsole.log(buf.readUIntBE(1, 6).toString(16));\n// Throws ERR_OUT_OF_RANGE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.slice([start[, end]])",
              "type": "method",
              "name": "slice",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": [
                  {
                    "version": "v7.1.0, v6.9.2",
                    "pr-url": "https://github.com/nodejs/node/pull/9341",
                    "description": "Coercing the offsets to integers now handles values outside the 32-bit integer range properly."
                  },
                  {
                    "version": "v7.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/9101",
                    "description": "All offsets are now coerced to integers before doing any calculations with them."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} ",
                    "name": "return",
                    "type": "Buffer"
                  },
                  "params": [
                    {
                      "textRaw": "`start` {integer} Where the new `Buffer` will start. **Default:** `0`. ",
                      "name": "start",
                      "type": "integer",
                      "default": "`0`",
                      "desc": "Where the new `Buffer` will start.",
                      "optional": true
                    },
                    {
                      "textRaw": "`end` {integer} Where the new `Buffer` will end (not inclusive). **Default:** [`buf.length`]. ",
                      "name": "end",
                      "type": "integer",
                      "default": "[`buf.length`]",
                      "desc": "Where the new `Buffer` will end (not inclusive).",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "start",
                      "optional": true
                    },
                    {
                      "name": "end",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns a new <code>Buffer</code> that references the same memory as the original, but\noffset and cropped by the <code>start</code> and <code>end</code> indices.</p>\n<p>Specifying <code>end</code> greater than <a href=\"#buffer_buf_length\"><code>buf.length</code></a> will return the same result as\nthat of <code>end</code> equal to <a href=\"#buffer_buf_length\"><code>buf.length</code></a>.</p>\n<p>Modifying the new <code>Buffer</code> slice will modify the memory in the original <code>Buffer</code>\nbecause the allocated memory of the two objects overlap.</p>\n<pre><code class=\"lang-js\">// Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte\n// from the original `Buffer`.\n\nconst buf1 = Buffer.allocUnsafe(26);\n\nfor (let i = 0; i &lt; 26; i++) {\n  // 97 is the decimal ASCII value for &#39;a&#39;\n  buf1[i] = i + 97;\n}\n\nconst buf2 = buf1.slice(0, 3);\n\nconsole.log(buf2.toString(&#39;ascii&#39;, 0, buf2.length));\n// Prints: abc\n\nbuf1[0] = 33;\n\nconsole.log(buf2.toString(&#39;ascii&#39;, 0, buf2.length));\n// Prints: !bc\n</code></pre>\n<p>Specifying negative indexes causes the slice to be generated relative to the\nend of <code>buf</code> rather than the beginning.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;buffer&#39;);\n\nconsole.log(buf.slice(-6, -1).toString());\n// Prints: buffe\n// (Equivalent to buf.slice(0, 5))\n\nconsole.log(buf.slice(-6, -2).toString());\n// Prints: buff\n// (Equivalent to buf.slice(0, 4))\n\nconsole.log(buf.slice(-5, -2).toString());\n// Prints: uff\n// (Equivalent to buf.slice(1, 4))\n</code></pre>\n"
            },
            {
              "textRaw": "buf.swap16()",
              "type": "method",
              "name": "swap16",
              "meta": {
                "added": [
                  "v5.10.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} A reference to `buf`. ",
                    "name": "return",
                    "type": "Buffer",
                    "desc": "A reference to `buf`."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Interprets <code>buf</code> as an array of unsigned 16-bit integers and swaps the\nbyte order <em>in-place</em>. Throws <a href=\"errors.html#ERR_INVALID_BUFFER_SIZE\"><code>ERR_INVALID_BUFFER_SIZE</code></a> if <a href=\"#buffer_buf_length\"><code>buf.length</code></a> is\nnot a multiple of 2.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\nconsole.log(buf1);\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\n\nbuf1.swap16();\n\nconsole.log(buf1);\n// Prints: &lt;Buffer 02 01 04 03 06 05 08 07&gt;\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\nbuf2.swap16();\n// Throws ERR_INVALID_BUFFER_SIZE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.swap32()",
              "type": "method",
              "name": "swap32",
              "meta": {
                "added": [
                  "v5.10.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} A reference to `buf`. ",
                    "name": "return",
                    "type": "Buffer",
                    "desc": "A reference to `buf`."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Interprets <code>buf</code> as an array of unsigned 32-bit integers and swaps the\nbyte order <em>in-place</em>. Throws <a href=\"errors.html#ERR_INVALID_BUFFER_SIZE\"><code>ERR_INVALID_BUFFER_SIZE</code></a> if <a href=\"#buffer_buf_length\"><code>buf.length</code></a> is\nnot a multiple of 4.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\nconsole.log(buf1);\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\n\nbuf1.swap32();\n\nconsole.log(buf1);\n// Prints: &lt;Buffer 04 03 02 01 08 07 06 05&gt;\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\nbuf2.swap32();\n// Throws ERR_INVALID_BUFFER_SIZE\n</code></pre>\n"
            },
            {
              "textRaw": "buf.swap64()",
              "type": "method",
              "name": "swap64",
              "meta": {
                "added": [
                  "v6.3.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} A reference to `buf`. ",
                    "name": "return",
                    "type": "Buffer",
                    "desc": "A reference to `buf`."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Interprets <code>buf</code> as an array of 64-bit numbers and swaps byte order <em>in-place</em>.\nThrows <a href=\"errors.html#ERR_INVALID_BUFFER_SIZE\"><code>ERR_INVALID_BUFFER_SIZE</code></a> if <a href=\"#buffer_buf_length\"><code>buf.length</code></a> is not a multiple of 8.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n\nconsole.log(buf1);\n// Prints: &lt;Buffer 01 02 03 04 05 06 07 08&gt;\n\nbuf1.swap64();\n\nconsole.log(buf1);\n// Prints: &lt;Buffer 08 07 06 05 04 03 02 01&gt;\n\nconst buf2 = Buffer.from([0x1, 0x2, 0x3]);\n\nbuf2.swap64();\n// Throws ERR_INVALID_BUFFER_SIZE\n</code></pre>\n<p>Note that JavaScript cannot encode 64-bit integers. This method is intended\nfor working with 64-bit floats.</p>\n"
            },
            {
              "textRaw": "buf.toJSON()",
              "type": "method",
              "name": "toJSON",
              "meta": {
                "added": [
                  "v0.9.2"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "name": "return",
                    "type": "Object"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns a JSON representation of <code>buf</code>. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a> implicitly calls\nthis function when stringifying a <code>Buffer</code> instance.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\nconst json = JSON.stringify(buf);\n\nconsole.log(json);\n// Prints: {&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[1,2,3,4,5]}\n\nconst copy = JSON.parse(json, (key, value) =&gt; {\n  return value &amp;&amp; value.type === &#39;Buffer&#39; ?\n    Buffer.from(value.data) :\n    value;\n});\n\nconsole.log(copy);\n// Prints: &lt;Buffer 01 02 03 04 05&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.toString([encoding[, start[, end]]])",
              "type": "method",
              "name": "toString",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string} ",
                    "name": "return",
                    "type": "string"
                  },
                  "params": [
                    {
                      "textRaw": "`encoding` {string} The character encoding to use. **Default:** `'utf8'`. ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`",
                      "desc": "The character encoding to use.",
                      "optional": true
                    },
                    {
                      "textRaw": "`start` {integer} The byte offset to start decoding at. **Default:** `0`. ",
                      "name": "start",
                      "type": "integer",
                      "default": "`0`",
                      "desc": "The byte offset to start decoding at.",
                      "optional": true
                    },
                    {
                      "textRaw": "`end` {integer} The byte offset to stop decoding at (not inclusive). **Default:** [`buf.length`]. ",
                      "name": "end",
                      "type": "integer",
                      "default": "[`buf.length`]",
                      "desc": "The byte offset to stop decoding at (not inclusive).",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    },
                    {
                      "name": "start",
                      "optional": true
                    },
                    {
                      "name": "end",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Decodes <code>buf</code> to a string according to the specified character encoding in\n<code>encoding</code>. <code>start</code> and <code>end</code> may be passed to decode only a subset of <code>buf</code>.</p>\n<p>The maximum length of a string instance (in UTF-16 code units) is available\nas <a href=\"#buffer_buffer_constants_max_string_length\"><code>buffer.constants.MAX_STRING_LENGTH</code></a>.</p>\n<pre><code class=\"lang-js\">const buf1 = Buffer.allocUnsafe(26);\n\nfor (let i = 0; i &lt; 26; i++) {\n  // 97 is the decimal ASCII value for &#39;a&#39;\n  buf1[i] = i + 97;\n}\n\nconsole.log(buf1.toString(&#39;ascii&#39;));\n// Prints: abcdefghijklmnopqrstuvwxyz\nconsole.log(buf1.toString(&#39;ascii&#39;, 0, 5));\n// Prints: abcde\n\nconst buf2 = Buffer.from(&#39;tést&#39;);\n\nconsole.log(buf2.toString(&#39;hex&#39;));\n// Prints: 74c3a97374\nconsole.log(buf2.toString(&#39;utf8&#39;, 0, 3));\n// Prints: té\nconsole.log(buf2.toString(undefined, 0, 3));\n// Prints: té\n</code></pre>\n"
            },
            {
              "textRaw": "buf.values()",
              "type": "method",
              "name": "values",
              "meta": {
                "added": [
                  "v1.1.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Iterator} ",
                    "name": "return",
                    "type": "Iterator"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Creates and returns an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterator</a> for <code>buf</code> values (bytes). This function is\ncalled automatically when a <code>Buffer</code> is used in a <code>for..of</code> statement.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.from(&#39;buffer&#39;);\n\nfor (const value of buf.values()) {\n  console.log(value);\n}\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\n\nfor (const value of buf) {\n  console.log(value);\n}\n// Prints:\n//   98\n//   117\n//   102\n//   102\n//   101\n//   114\n</code></pre>\n"
            },
            {
              "textRaw": "buf.write(string[, offset[, length]][, encoding])",
              "type": "method",
              "name": "write",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} Number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "Number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`string` {string} String to write to `buf`. ",
                      "name": "string",
                      "type": "string",
                      "desc": "String to write to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write `string`. **Default:** `0`. ",
                      "name": "offset",
                      "type": "integer",
                      "default": "`0`",
                      "desc": "Number of bytes to skip before starting to write `string`.",
                      "optional": true
                    },
                    {
                      "textRaw": "`length` {integer} Number of bytes to write. **Default:** `buf.length - offset`. ",
                      "name": "length",
                      "type": "integer",
                      "default": "`buf.length - offset`",
                      "desc": "Number of bytes to write.",
                      "optional": true
                    },
                    {
                      "textRaw": "`encoding` {string} The character encoding of `string`. **Default:** `'utf8'`. ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`",
                      "desc": "The character encoding of `string`.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "string"
                    },
                    {
                      "name": "offset",
                      "optional": true
                    },
                    {
                      "name": "length",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>string</code> to <code>buf</code> at <code>offset</code> according to the character encoding in\n<code>encoding</code>. The <code>length</code> parameter is the number of bytes to write. If <code>buf</code> did\nnot contain enough space to fit the entire string, only part of <code>string</code> will be\nwritten. However, partially encoded characters will not be written.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.alloc(256);\n\nconst len = buf.write(&#39;\\u00bd + \\u00bc = \\u00be&#39;, 0);\n\nconsole.log(`${len} bytes: ${buf.toString(&#39;utf8&#39;, 0, len)}`);\n// Prints: 12 bytes: ½ + ¼ = ¾\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeDoubleBE(value, offset)",
              "type": "method",
              "name": "writeDoubleBE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {number} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "number",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeDoubleBE()</code> writes big endian, <code>writeDoubleLE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid 64-bit double. Behavior is undefined when\n<code>value</code> is anything other than a 64-bit double.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeDoubleLE(value, offset)",
              "type": "method",
              "name": "writeDoubleLE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {number} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "number",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeDoubleBE()</code> writes big endian, <code>writeDoubleLE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid 64-bit double. Behavior is undefined when\n<code>value</code> is anything other than a 64-bit double.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeDoubleBE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 43 eb d5 b7 dd f9 5f d7&gt;\n\nbuf.writeDoubleLE(0xdeadbeefcafebabe, 0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer d7 5f f9 dd b7 d5 eb 43&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeFloatBE(value, offset)",
              "type": "method",
              "name": "writeFloatBE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {number} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "number",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeFloatBE()</code> writes big endian, <code>writeFloatLE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid 32-bit float. Behavior is undefined when\n<code>value</code> is anything other than a 32-bit float.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatBE(0xcafebabe, 0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 4f 4a fe bb&gt;\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer bb fe 4a 4f&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeFloatLE(value, offset)",
              "type": "method",
              "name": "writeFloatLE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {number} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "number",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeFloatBE()</code> writes big endian, <code>writeFloatLE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid 32-bit float. Behavior is undefined when\n<code>value</code> is anything other than a 32-bit float.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeFloatBE(0xcafebabe, 0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 4f 4a fe bb&gt;\n\nbuf.writeFloatLE(0xcafebabe, 0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer bb fe 4a 4f&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeInt8(value, offset)",
              "type": "method",
              "name": "writeInt8",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code>. <code>value</code> <em>should</em> be a valid\nsigned 8-bit integer. Behavior is undefined when <code>value</code> is anything other than\na signed 8-bit integer.</p>\n<p><code>value</code> is interpreted and written as a two&#39;s complement signed integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(2);\n\nbuf.writeInt8(2, 0);\nbuf.writeInt8(-2, 1);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 02 fe&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeInt16BE(value, offset)",
              "type": "method",
              "name": "writeInt16BE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeInt16BE()</code> writes big endian, <code>writeInt16LE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid signed 16-bit integer. Behavior is\nundefined when <code>value</code> is anything other than a signed 16-bit integer.</p>\n<p><code>value</code> is interpreted and written as a two&#39;s complement signed integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt16BE(0x0102, 0);\nbuf.writeInt16LE(0x0304, 2);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 01 02 04 03&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeInt16LE(value, offset)",
              "type": "method",
              "name": "writeInt16LE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeInt16BE()</code> writes big endian, <code>writeInt16LE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid signed 16-bit integer. Behavior is\nundefined when <code>value</code> is anything other than a signed 16-bit integer.</p>\n<p><code>value</code> is interpreted and written as a two&#39;s complement signed integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeInt16BE(0x0102, 0);\nbuf.writeInt16LE(0x0304, 2);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 01 02 04 03&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeInt32BE(value, offset)",
              "type": "method",
              "name": "writeInt32BE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeInt32BE()</code> writes big endian, <code>writeInt32LE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid signed 32-bit integer. Behavior is\nundefined when <code>value</code> is anything other than a signed 32-bit integer.</p>\n<p><code>value</code> is interpreted and written as a two&#39;s complement signed integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeInt32BE(0x01020304, 0);\nbuf.writeInt32LE(0x05060708, 4);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 01 02 03 04 08 07 06 05&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeInt32LE(value, offset)",
              "type": "method",
              "name": "writeInt32LE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeInt32BE()</code> writes big endian, <code>writeInt32LE()</code> writes little\nendian). <code>value</code> <em>should</em> be a valid signed 32-bit integer. Behavior is\nundefined when <code>value</code> is anything other than a signed 32-bit integer.</p>\n<p><code>value</code> is interpreted and written as a two&#39;s complement signed integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(8);\n\nbuf.writeInt32BE(0x01020304, 0);\nbuf.writeInt32LE(0x05060708, 4);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 01 02 03 04 08 07 06 05&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeIntBE(value, offset, byteLength)",
              "type": "method",
              "name": "writeIntBE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset and `byteLength` to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`."
                    },
                    {
                      "textRaw": "`byteLength` {integer} Number of bytes to write. Must satisfy `0 < byteLength <= 6`. ",
                      "name": "byteLength",
                      "type": "integer",
                      "desc": "Number of bytes to write. Must satisfy `0 < byteLength <= 6`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "byteLength"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "byteLength"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>.\nSupports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is\nanything other than a signed integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeIntBE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\n\nbuf.writeIntLE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeIntLE(value, offset, byteLength)",
              "type": "method",
              "name": "writeIntLE",
              "meta": {
                "added": [
                  "v0.11.15"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset and `byteLength` to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`."
                    },
                    {
                      "textRaw": "`byteLength` {integer} Number of bytes to write. Must satisfy `0 < byteLength <= 6`. ",
                      "name": "byteLength",
                      "type": "integer",
                      "desc": "Number of bytes to write. Must satisfy `0 < byteLength <= 6`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "byteLength"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>.\nSupports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is\nanything other than a signed integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeIntBE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\n\nbuf.writeIntLE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeUInt8(value, offset)",
              "type": "method",
              "name": "writeUInt8",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code>. <code>value</code> <em>should</em> be a\nvalid unsigned 8-bit integer. Behavior is undefined when <code>value</code> is anything\nother than an unsigned 8-bit integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt8(0x3, 0);\nbuf.writeUInt8(0x4, 1);\nbuf.writeUInt8(0x23, 2);\nbuf.writeUInt8(0x42, 3);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 03 04 23 42&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeUInt16BE(value, offset)",
              "type": "method",
              "name": "writeUInt16BE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt16BE()</code> writes big endian, <code>writeUInt16LE()</code> writes little\nendian). <code>value</code> should be a valid unsigned 16-bit integer. Behavior is\nundefined when <code>value</code> is anything other than an unsigned 16-bit integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\nconsole.log(buf);\n// Prints: &lt;Buffer de ad be ef&gt;\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\nconsole.log(buf);\n// Prints: &lt;Buffer ad de ef be&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeUInt16LE(value, offset)",
              "type": "method",
              "name": "writeUInt16LE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt16BE()</code> writes big endian, <code>writeUInt16LE()</code> writes little\nendian). <code>value</code> should be a valid unsigned 16-bit integer. Behavior is\nundefined when <code>value</code> is anything other than an unsigned 16-bit integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt16BE(0xdead, 0);\nbuf.writeUInt16BE(0xbeef, 2);\n\nconsole.log(buf);\n// Prints: &lt;Buffer de ad be ef&gt;\n\nbuf.writeUInt16LE(0xdead, 0);\nbuf.writeUInt16LE(0xbeef, 2);\n\nconsole.log(buf);\n// Prints: &lt;Buffer ad de ef be&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeUInt32BE(value, offset)",
              "type": "method",
              "name": "writeUInt32BE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt32BE()</code> writes big endian, <code>writeUInt32LE()</code> writes little\nendian). <code>value</code> should be a valid unsigned 32-bit integer. Behavior is\nundefined when <code>value</code> is anything other than an unsigned 32-bit integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32BE(0xfeedface, 0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer fe ed fa ce&gt;\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer ce fa ed fe&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeUInt32LE(value, offset)",
              "type": "method",
              "name": "writeUInt32LE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>value</code> to <code>buf</code> at the specified <code>offset</code> with specified endian\nformat (<code>writeUInt32BE()</code> writes big endian, <code>writeUInt32LE()</code> writes little\nendian). <code>value</code> should be a valid unsigned 32-bit integer. Behavior is\nundefined when <code>value</code> is anything other than an unsigned 32-bit integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(4);\n\nbuf.writeUInt32BE(0xfeedface, 0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer fe ed fa ce&gt;\n\nbuf.writeUInt32LE(0xfeedface, 0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer ce fa ed fe&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeUIntBE(value, offset, byteLength)",
              "type": "method",
              "name": "writeUIntBE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset and `byteLength` to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`."
                    },
                    {
                      "textRaw": "`byteLength` {integer} Number of bytes to write. Must satisfy `0 < byteLength <= 6`. ",
                      "name": "byteLength",
                      "type": "integer",
                      "desc": "Number of bytes to write. Must satisfy `0 < byteLength <= 6`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "byteLength"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "byteLength"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>.\nSupports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is\nanything other than an unsigned integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "buf.writeUIntLE(value, offset, byteLength)",
              "type": "method",
              "name": "writeUIntLE",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18395",
                    "description": "Removed `noAssert` and no implicit coercion of the offset and `byteLength` to `uint32` anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} `offset` plus the number of bytes written. ",
                    "name": "return",
                    "type": "integer",
                    "desc": "`offset` plus the number of bytes written."
                  },
                  "params": [
                    {
                      "textRaw": "`value` {integer} Number to be written to `buf`. ",
                      "name": "value",
                      "type": "integer",
                      "desc": "Number to be written to `buf`."
                    },
                    {
                      "textRaw": "`offset` {integer} Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`."
                    },
                    {
                      "textRaw": "`byteLength` {integer} Number of bytes to write. Must satisfy `0 < byteLength <= 6`. ",
                      "name": "byteLength",
                      "type": "integer",
                      "desc": "Number of bytes to write. Must satisfy `0 < byteLength <= 6`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "byteLength"
                    }
                  ]
                }
              ],
              "desc": "<p>Writes <code>byteLength</code> bytes of <code>value</code> to <code>buf</code> at the specified <code>offset</code>.\nSupports up to 48 bits of accuracy. Behavior is undefined when <code>value</code> is\nanything other than an unsigned integer.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.allocUnsafe(6);\n\nbuf.writeUIntBE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 12 34 56 78 90 ab&gt;\n\nbuf.writeUIntLE(0x1234567890ab, 0, 6);\n\nconsole.log(buf);\n// Prints: &lt;Buffer ab 90 78 56 34 12&gt;\n</code></pre>\n"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`array` {integer[]} An array of bytes to copy from. ",
                  "name": "array",
                  "type": "integer[]",
                  "desc": "An array of bytes to copy from."
                }
              ],
              "desc": "<p>Allocates a new <code>Buffer</code> using an <code>array</code> of octets.</p>\n<pre><code class=\"lang-js\">// Creates a new Buffer containing the UTF-8 bytes of the string &#39;buffer&#39;\nconst buf = new Buffer([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "name": "array"
                }
              ],
              "desc": "<p>Allocates a new <code>Buffer</code> using an <code>array</code> of octets.</p>\n<pre><code class=\"lang-js\">// Creates a new Buffer containing the UTF-8 bytes of the string &#39;buffer&#39;\nconst buf = new Buffer([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "textRaw": "`arrayBuffer` {ArrayBuffer|SharedArrayBuffer} An [`ArrayBuffer`], [`SharedArrayBuffer`] or the `.buffer` property of a [`TypedArray`]. ",
                  "name": "arrayBuffer",
                  "type": "ArrayBuffer|SharedArrayBuffer",
                  "desc": "An [`ArrayBuffer`], [`SharedArrayBuffer`] or the `.buffer` property of a [`TypedArray`]."
                },
                {
                  "textRaw": "`byteOffset` {integer} Index of first byte to expose. **Default:** `0`. ",
                  "name": "byteOffset",
                  "type": "integer",
                  "default": "`0`",
                  "desc": "Index of first byte to expose.",
                  "optional": true
                },
                {
                  "textRaw": "`length` {integer} Number of bytes to expose. **Default:** `arrayBuffer.length - byteOffset`. ",
                  "name": "length",
                  "type": "integer",
                  "default": "`arrayBuffer.length - byteOffset`",
                  "desc": "Number of bytes to expose.",
                  "optional": true
                }
              ],
              "desc": "<p>Stability: 0 - Deprecated: Use\n<a href=\"#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\"><code>Buffer.from(arrayBuffer[, byteOffset[, length]])</code></a>\ninstead.</p>\n<p>This creates a view of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> without\ncopying the underlying memory. For example, when passed a reference to the\n<code>.buffer</code> property of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance, the newly created <code>Buffer</code> will\nshare the same allocated memory as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>.</p>\n<p>The optional <code>byteOffset</code> and <code>length</code> arguments specify a memory range within\nthe <code>arrayBuffer</code> that will be shared by the <code>Buffer</code>.</p>\n<pre><code class=\"lang-js\">const arr = new Uint16Array(2);\n\narr[0] = 5000;\narr[1] = 4000;\n\n// Shares memory with `arr`\nconst buf = new Buffer(arr.buffer);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 88 13 a0 0f&gt;\n\n// Changing the original Uint16Array changes the Buffer also\narr[1] = 6000;\n\nconsole.log(buf);\n// Prints: &lt;Buffer 88 13 70 17&gt;\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "name": "arrayBuffer"
                },
                {
                  "name": "byteOffset",
                  "optional": true
                },
                {
                  "name": "length",
                  "optional": true
                }
              ],
              "desc": "<p>Stability: 0 - Deprecated: Use\n<a href=\"#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\"><code>Buffer.from(arrayBuffer[, byteOffset[, length]])</code></a>\ninstead.</p>\n<p>This creates a view of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> without\ncopying the underlying memory. For example, when passed a reference to the\n<code>.buffer</code> property of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance, the newly created <code>Buffer</code> will\nshare the same allocated memory as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>.</p>\n<p>The optional <code>byteOffset</code> and <code>length</code> arguments specify a memory range within\nthe <code>arrayBuffer</code> that will be shared by the <code>Buffer</code>.</p>\n<pre><code class=\"lang-js\">const arr = new Uint16Array(2);\n\narr[0] = 5000;\narr[1] = 4000;\n\n// Shares memory with `arr`\nconst buf = new Buffer(arr.buffer);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 88 13 a0 0f&gt;\n\n// Changing the original Uint16Array changes the Buffer also\narr[1] = 6000;\n\nconsole.log(buf);\n// Prints: &lt;Buffer 88 13 70 17&gt;\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|Uint8Array} An existing `Buffer` or [`Uint8Array`] from which to copy data. ",
                  "name": "buffer",
                  "type": "Buffer|Uint8Array",
                  "desc": "An existing `Buffer` or [`Uint8Array`] from which to copy data."
                }
              ],
              "desc": "<p>Copies the passed <code>buffer</code> data onto a new <code>Buffer</code> instance.</p>\n<pre><code class=\"lang-js\">const buf1 = new Buffer(&#39;buffer&#39;);\nconst buf2 = new Buffer(buf1);\n\nbuf1[0] = 0x61;\n\nconsole.log(buf1.toString());\n// Prints: auffer\nconsole.log(buf2.toString());\n// Prints: buffer\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "name": "buffer"
                }
              ],
              "desc": "<p>Copies the passed <code>buffer</code> data onto a new <code>Buffer</code> instance.</p>\n<pre><code class=\"lang-js\">const buf1 = new Buffer(&#39;buffer&#39;);\nconst buf2 = new Buffer(buf1);\n\nbuf1[0] = 0x61;\n\nconsole.log(buf1.toString());\n// Prints: auffer\nconsole.log(buf2.toString());\n// Prints: buffer\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "textRaw": "`size` {integer} The desired length of the new `Buffer`. ",
                  "name": "size",
                  "type": "integer",
                  "desc": "The desired length of the new `Buffer`."
                }
              ],
              "desc": "<p>Stability: 0 - Deprecated: Use <a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc()</code></a> instead (also see\n<a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a>).</p>\n<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>size</code> is larger than\n<a href=\"#buffer_buffer_constants_max_length\"><code>buffer.constants.MAX_LENGTH</code></a> or smaller than 0, <a href=\"errors.html#ERR_INVALID_OPT_VALUE\"><code>ERR_INVALID_OPT_VALUE</code></a> is\nthrown. A zero-length <code>Buffer</code> is created if <code>size</code> is 0.</p>\n<p>Prior to Node.js 8.0.0, the underlying memory for <code>Buffer</code> instances\ncreated in this way is <em>not initialized</em>. The contents of a newly created\n<code>Buffer</code> are unknown and <em>may contain sensitive data</em>. Use\n<a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc(size)</code></a> instead to initialize a <code>Buffer</code>\nwith zeroes.</p>\n<pre><code class=\"lang-js\">const buf = new Buffer(10);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "name": "size"
                }
              ],
              "desc": "<p>Stability: 0 - Deprecated: Use <a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc()</code></a> instead (also see\n<a href=\"#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a>).</p>\n<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>size</code> is larger than\n<a href=\"#buffer_buffer_constants_max_length\"><code>buffer.constants.MAX_LENGTH</code></a> or smaller than 0, <a href=\"errors.html#ERR_INVALID_OPT_VALUE\"><code>ERR_INVALID_OPT_VALUE</code></a> is\nthrown. A zero-length <code>Buffer</code> is created if <code>size</code> is 0.</p>\n<p>Prior to Node.js 8.0.0, the underlying memory for <code>Buffer</code> instances\ncreated in this way is <em>not initialized</em>. The contents of a newly created\n<code>Buffer</code> are unknown and <em>may contain sensitive data</em>. Use\n<a href=\"#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc(size)</code></a> instead to initialize a <code>Buffer</code>\nwith zeroes.</p>\n<pre><code class=\"lang-js\">const buf = new Buffer(10);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "textRaw": "`string` {string} String to encode. ",
                  "name": "string",
                  "type": "string",
                  "desc": "String to encode."
                },
                {
                  "textRaw": "`encoding` {string} The encoding of `string`. **Default:** `'utf8'`. ",
                  "name": "encoding",
                  "type": "string",
                  "default": "`'utf8'`",
                  "desc": "The encoding of `string`.",
                  "optional": true
                }
              ],
              "desc": "<p>Stability: 0 - Deprecated:\nUse <a href=\"#buffer_class_method_buffer_from_string_encoding\"><code>Buffer.from(string[, encoding])</code></a> instead.</p>\n<p>Creates a new <code>Buffer</code> containing <code>string</code>. The <code>encoding</code> parameter identifies\nthe character encoding of <code>string</code>.</p>\n<pre><code class=\"lang-js\">const buf1 = new Buffer(&#39;this is a tést&#39;);\nconst buf2 = new Buffer(&#39;7468697320697320612074c3a97374&#39;, &#39;hex&#39;);\n\nconsole.log(buf1.toString());\n// Prints: this is a tést\nconsole.log(buf2.toString());\n// Prints: this is a tést\nconsole.log(buf1.toString(&#39;ascii&#39;));\n// Prints: this is a tC)st\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "name": "string"
                },
                {
                  "name": "encoding",
                  "optional": true
                }
              ],
              "desc": "<p>Stability: 0 - Deprecated:\nUse <a href=\"#buffer_class_method_buffer_from_string_encoding\"><code>Buffer.from(string[, encoding])</code></a> instead.</p>\n<p>Creates a new <code>Buffer</code> containing <code>string</code>. The <code>encoding</code> parameter identifies\nthe character encoding of <code>string</code>.</p>\n<pre><code class=\"lang-js\">const buf1 = new Buffer(&#39;this is a tést&#39;);\nconst buf2 = new Buffer(&#39;7468697320697320612074c3a97374&#39;, &#39;hex&#39;);\n\nconsole.log(buf1.toString());\n// Prints: this is a tést\nconsole.log(buf2.toString());\n// Prints: this is a tést\nconsole.log(buf1.toString(&#39;ascii&#39;));\n// Prints: this is a tC)st\n</code></pre>\n"
            }
          ]
        },
        {
          "textRaw": "Class: SlowBuffer",
          "type": "class",
          "name": "SlowBuffer",
          "meta": {
            "deprecated": [
              "v6.0.0"
            ],
            "changes": []
          },
          "stability": 0,
          "stabilityText": "Deprecated: Use [`Buffer.allocUnsafeSlow()`] instead.",
          "desc": "<p>Returns an un-pooled <code>Buffer</code>.</p>\n<p>In order to avoid the garbage collection overhead of creating many individually\nallocated <code>Buffer</code> instances, by default allocations under 4KB are sliced from a\nsingle larger allocated object.</p>\n<p>In the case where a developer may need to retain a small chunk of memory from a\npool for an indeterminate amount of time, it may be appropriate to create an\nun-pooled <code>Buffer</code> instance using <code>SlowBuffer</code> then copy out the relevant bits.</p>\n<pre><code class=\"lang-js\">// Need to keep around a few small chunks of memory\nconst store = [];\n\nsocket.on(&#39;readable&#39;, () =&gt; {\n  const data = socket.read();\n\n  // Allocate for retained data\n  const sb = SlowBuffer(10);\n\n  // Copy the data into the new allocation\n  data.copy(sb, 0, 0, 10);\n\n  store.push(sb);\n});\n</code></pre>\n<p>Use of <code>SlowBuffer</code> should be used only as a last resort <em>after</em> a developer\nhas observed undue memory retention in their applications.</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`size` {integer} The desired length of the new `SlowBuffer`. ",
                  "name": "size",
                  "type": "integer",
                  "desc": "The desired length of the new `SlowBuffer`."
                }
              ],
              "desc": "<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>size</code> is larger than\n<a href=\"#buffer_buffer_constants_max_length\"><code>buffer.constants.MAX_LENGTH</code></a> or smaller than 0, <a href=\"errors.html#ERR_INVALID_OPT_VALUE\"><code>ERR_INVALID_OPT_VALUE</code></a> is\nthrown. A zero-length <code>Buffer</code> is created if <code>size</code> is 0.</p>\n<p>The underlying memory for <code>SlowBuffer</code> instances is <em>not initialized</em>. The\ncontents of a newly created <code>SlowBuffer</code> are unknown and may contain sensitive\ndata. Use <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> to initialize a <code>SlowBuffer</code> with\nzeroes.</p>\n<pre><code class=\"lang-js\">const { SlowBuffer } = require(&#39;buffer&#39;);\n\nconst buf = new SlowBuffer(5);\n\nconsole.log(buf);\n// Prints: (contents may vary): &lt;Buffer 78 e0 82 02 01&gt;\n\nbuf.fill(0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 00 00 00 00 00&gt;\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "name": "size"
                }
              ],
              "desc": "<p>Allocates a new <code>Buffer</code> of <code>size</code> bytes. If <code>size</code> is larger than\n<a href=\"#buffer_buffer_constants_max_length\"><code>buffer.constants.MAX_LENGTH</code></a> or smaller than 0, <a href=\"errors.html#ERR_INVALID_OPT_VALUE\"><code>ERR_INVALID_OPT_VALUE</code></a> is\nthrown. A zero-length <code>Buffer</code> is created if <code>size</code> is 0.</p>\n<p>The underlying memory for <code>SlowBuffer</code> instances is <em>not initialized</em>. The\ncontents of a newly created <code>SlowBuffer</code> are unknown and may contain sensitive\ndata. Use <a href=\"#buffer_buf_fill_value_offset_end_encoding\"><code>buf.fill(0)</code></a> to initialize a <code>SlowBuffer</code> with\nzeroes.</p>\n<pre><code class=\"lang-js\">const { SlowBuffer } = require(&#39;buffer&#39;);\n\nconst buf = new SlowBuffer(5);\n\nconsole.log(buf);\n// Prints: (contents may vary): &lt;Buffer 78 e0 82 02 01&gt;\n\nbuf.fill(0);\n\nconsole.log(buf);\n// Prints: &lt;Buffer 00 00 00 00 00&gt;\n</code></pre>\n"
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "`INSPECT_MAX_BYTES` {integer} **Default:** `50` ",
          "type": "integer",
          "name": "INSPECT_MAX_BYTES",
          "meta": {
            "added": [
              "v0.5.4"
            ],
            "changes": []
          },
          "default": "`50`",
          "desc": "<p>Returns the maximum number of bytes that will be returned when\n<code>buf.inspect()</code> is called. This can be overridden by user modules. See\n<a href=\"#util_util_inspect_object_options\"><code>util.inspect()</code></a> for more details on <code>buf.inspect()</code> behavior.</p>\n<p>Note that this is a property on the <code>buffer</code> module returned by\n<code>require(&#39;buffer&#39;)</code>, not on the <code>Buffer</code> global or a <code>Buffer</code> instance.</p>\n"
        },
        {
          "textRaw": "`kMaxLength` {integer} The largest size allowed for a single `Buffer` instance. ",
          "type": "integer",
          "name": "kMaxLength",
          "meta": {
            "added": [
              "v3.0.0"
            ],
            "changes": []
          },
          "desc": "<p>An alias for <a href=\"#buffer_buffer_constants_max_length\"><code>buffer.constants.MAX_LENGTH</code></a>.</p>\n<p>Note that this is a property on the <code>buffer</code> module returned by\n<code>require(&#39;buffer&#39;)</code>, not on the <code>Buffer</code> global or a <code>Buffer</code> instance.</p>\n",
          "shortDesc": "The largest size allowed for a single `Buffer` instance."
        }
      ],
      "methods": [
        {
          "textRaw": "buffer.transcode(source, fromEnc, toEnc)",
          "type": "method",
          "name": "transcode",
          "meta": {
            "added": [
              "v7.1.0"
            ],
            "changes": [
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/10236",
                "description": "The `source` parameter can now be a `Uint8Array`."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`source` {Buffer|Uint8Array} A `Buffer` or `Uint8Array` instance. ",
                  "name": "source",
                  "type": "Buffer|Uint8Array",
                  "desc": "A `Buffer` or `Uint8Array` instance."
                },
                {
                  "textRaw": "`fromEnc` {string} The current encoding. ",
                  "name": "fromEnc",
                  "type": "string",
                  "desc": "The current encoding."
                },
                {
                  "textRaw": "`toEnc` {string} To target encoding. ",
                  "name": "toEnc",
                  "type": "string",
                  "desc": "To target encoding."
                }
              ]
            },
            {
              "params": [
                {
                  "name": "source"
                },
                {
                  "name": "fromEnc"
                },
                {
                  "name": "toEnc"
                }
              ]
            }
          ],
          "desc": "<p>Re-encodes the given <code>Buffer</code> or <code>Uint8Array</code> instance from one character\nencoding to another. Returns a new <code>Buffer</code> instance.</p>\n<p>Throws if the <code>fromEnc</code> or <code>toEnc</code> specify invalid character encodings or if\nconversion from <code>fromEnc</code> to <code>toEnc</code> is not permitted.</p>\n<p>The transcoding process will use substitution characters if a given byte\nsequence cannot be adequately represented in the target encoding. For instance:</p>\n<pre><code class=\"lang-js\">const buffer = require(&#39;buffer&#39;);\n\nconst newBuf = buffer.transcode(Buffer.from(&#39;€&#39;), &#39;utf8&#39;, &#39;ascii&#39;);\nconsole.log(newBuf.toString(&#39;ascii&#39;));\n// Prints: &#39;?&#39;\n</code></pre>\n<p>Because the Euro (<code>€</code>) sign is not representable in US-ASCII, it is replaced\nwith <code>?</code> in the transcoded <code>Buffer</code>.</p>\n<p>Note that this is a property on the <code>buffer</code> module returned by\n<code>require(&#39;buffer&#39;)</code>, not on the <code>Buffer</code> global or a <code>Buffer</code> instance.</p>\n"
        }
      ],
      "type": "module",
      "displayName": "Buffer"
    },
    {
      "textRaw": "Child Process",
      "name": "child_process",
      "introduced_in": "v0.10.0",
      "desc": "<!--lint disable maximum-line-length-->\n<blockquote>\n<p>Stability: 2 - Stable</p>\n</blockquote>\n<p>The <code>child_process</code> module provides the ability to spawn child processes in\na manner that is similar, but not identical, to popen(3). This capability\nis primarily provided by the <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> function:</p>\n<pre><code class=\"lang-js\">const { spawn } = require(&#39;child_process&#39;);\nconst ls = spawn(&#39;ls&#39;, [&#39;-lh&#39;, &#39;/usr&#39;]);\n\nls.stdout.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stderr: ${data}`);\n});\n\nls.on(&#39;close&#39;, (code) =&gt; {\n  console.log(`child process exited with code ${code}`);\n});\n</code></pre>\n<p>By default, pipes for <code>stdin</code>, <code>stdout</code>, and <code>stderr</code> are established between\nthe parent Node.js process and the spawned child. These pipes have\nlimited (and platform-specific) capacity. If the child process writes to\nstdout in excess of that limit without the output being captured, the child\nprocess will block waiting for the pipe buffer to accept more data. This is\nidentical to the behavior of pipes in the shell. Use the <code>{ stdio: &#39;ignore&#39; }</code>\noption if the output will not be consumed.</p>\n<p>The <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> method spawns the child process asynchronously,\nwithout blocking the Node.js event loop. The <a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a>\nfunction provides equivalent functionality in a synchronous manner that blocks\nthe event loop until the spawned process either exits or is terminated.</p>\n<p>For convenience, the <code>child_process</code> module provides a handful of synchronous\nand asynchronous alternatives to <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> and\n<a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a>. <em>Note that each of these alternatives are\nimplemented on top of <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> or <a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a>.</em></p>\n<ul>\n<li><a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>: spawns a shell and runs a command within that shell,\npassing the <code>stdout</code> and <code>stderr</code> to a callback function when complete.</li>\n<li><a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a>: similar to <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> except that\nit spawns the command directly without first spawning a shell by default.</li>\n<li><a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>: spawns a new Node.js process and invokes a\nspecified module with an IPC communication channel established that allows\nsending messages between parent and child.</li>\n<li><a href=\"#child_process_child_process_execsync_command_options\"><code>child_process.execSync()</code></a>: a synchronous version of\n<a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> that <em>will</em> block the Node.js event loop.</li>\n<li><a href=\"#child_process_child_process_execfilesync_file_args_options\"><code>child_process.execFileSync()</code></a>: a synchronous version of\n<a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> that <em>will</em> block the Node.js event loop.</li>\n</ul>\n<p>For certain use cases, such as automating shell scripts, the\n<a href=\"#child_process_synchronous_process_creation\">synchronous counterparts</a> may be more convenient. In many cases, however,\nthe synchronous methods can have significant impact on performance due to\nstalling the event loop while spawned processes complete.</p>\n",
      "modules": [
        {
          "textRaw": "Asynchronous Process Creation",
          "name": "asynchronous_process_creation",
          "desc": "<p>The <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a>, <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>, <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>,\nand <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> methods all follow the idiomatic asynchronous\nprogramming pattern typical of other Node.js APIs.</p>\n<p>Each of the methods returns a <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> instance. These objects\nimplement the Node.js <a href=\"events.html\"><code>EventEmitter</code></a> API, allowing the parent process to\nregister listener functions that are called when certain events occur during\nthe life cycle of the child process.</p>\n<p>The <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> and <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> methods additionally\nallow for an optional <code>callback</code> function to be specified that is invoked\nwhen the child process terminates.</p>\n",
          "modules": [
            {
              "textRaw": "Spawning `.bat` and `.cmd` files on Windows",
              "name": "spawning_`.bat`_and_`.cmd`_files_on_windows",
              "desc": "<p>The importance of the distinction between <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> and\n<a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> can vary based on platform. On Unix-type operating\nsystems (Unix, Linux, macOS) <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> can be more efficient\nbecause it does not spawn a shell by default. On Windows, however, <code>.bat</code> and <code>.cmd</code>\nfiles are not executable on their own without a terminal, and therefore cannot\nbe launched using <a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a>. When running on Windows, <code>.bat</code>\nand <code>.cmd</code> files can be invoked using <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> with the <code>shell</code>\noption set, with <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>, or by spawning <code>cmd.exe</code> and passing\nthe <code>.bat</code> or <code>.cmd</code> file as an argument (which is what the <code>shell</code> option and\n<a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> do). In any case, if the script filename contains\nspaces it needs to be quoted.</p>\n<pre><code class=\"lang-js\">// On Windows Only ...\nconst { spawn } = require(&#39;child_process&#39;);\nconst bat = spawn(&#39;cmd.exe&#39;, [&#39;/c&#39;, &#39;my.bat&#39;]);\n\nbat.stdout.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data.toString());\n});\n\nbat.stderr.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data.toString());\n});\n\nbat.on(&#39;exit&#39;, (code) =&gt; {\n  console.log(`Child exited with code ${code}`);\n});\n</code></pre>\n<pre><code class=\"lang-js\">// OR...\nconst { exec } = require(&#39;child_process&#39;);\nexec(&#39;my.bat&#39;, (err, stdout, stderr) =&gt; {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(stdout);\n});\n\n// Script with spaces in the filename:\nconst bat = spawn(&#39;&quot;my script.cmd&quot;&#39;, [&#39;a&#39;, &#39;b&#39;], { shell: true });\n// or:\nexec(&#39;&quot;my script.cmd&quot; a b&#39;, (err, stdout, stderr) =&gt; {\n  // ...\n});\n</code></pre>\n",
              "type": "module",
              "displayName": "Spawning `.bat` and `.cmd` files on Windows"
            }
          ],
          "methods": [
            {
              "textRaw": "child_process.exec(command[, options][, callback])",
              "type": "method",
              "name": "exec",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": [
                  {
                    "version": "v8.8.0",
                    "pr-url": "https://github.com/nodejs/node/pull/15380",
                    "description": "The `windowsHide` option is supported now."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {ChildProcess} ",
                    "name": "return",
                    "type": "ChildProcess"
                  },
                  "params": [
                    {
                      "textRaw": "`command` {string} The command to run, with space-separated arguments. ",
                      "name": "command",
                      "type": "string",
                      "desc": "The command to run, with space-separated arguments."
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`cwd` {string} Current working directory of the child process. **Default:** `null`. ",
                          "name": "cwd",
                          "type": "string",
                          "default": "`null`",
                          "desc": "Current working directory of the child process."
                        },
                        {
                          "textRaw": "`env` {Object} Environment key-value pairs. **Default:** `null`. ",
                          "name": "env",
                          "type": "Object",
                          "default": "`null`",
                          "desc": "Environment key-value pairs."
                        },
                        {
                          "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                          "name": "encoding",
                          "type": "string",
                          "default": "`'utf8'`"
                        },
                        {
                          "textRaw": "`shell` {string} Shell to execute the command with. See [Shell Requirements][] and [Default Windows Shell][]. **Default:** `'/bin/sh'` on UNIX, `process.env.ComSpec` on Windows. ",
                          "name": "shell",
                          "type": "string",
                          "default": "`'/bin/sh'` on UNIX, `process.env.ComSpec` on Windows",
                          "desc": "Shell to execute the command with. See [Shell Requirements][] and [Default Windows Shell][]."
                        },
                        {
                          "textRaw": "`timeout` {number} **Default:** `0` ",
                          "name": "timeout",
                          "type": "number",
                          "default": "`0`"
                        },
                        {
                          "textRaw": "`maxBuffer` {number} Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated. See caveat at [`maxBuffer` and Unicode][]. **Default:** `200 * 1024`. ",
                          "name": "maxBuffer",
                          "type": "number",
                          "default": "`200 * 1024`",
                          "desc": "Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated. See caveat at [`maxBuffer` and Unicode][]."
                        },
                        {
                          "textRaw": "`killSignal` {string|integer} **Default:** `'SIGTERM'` ",
                          "name": "killSignal",
                          "type": "string|integer",
                          "default": "`'SIGTERM'`"
                        },
                        {
                          "textRaw": "`uid` {number} Sets the user identity of the process (see setuid(2)). ",
                          "name": "uid",
                          "type": "number",
                          "desc": "Sets the user identity of the process (see setuid(2))."
                        },
                        {
                          "textRaw": "`gid` {number} Sets the group identity of the process (see setgid(2)). ",
                          "name": "gid",
                          "type": "number",
                          "desc": "Sets the group identity of the process (see setgid(2))."
                        },
                        {
                          "textRaw": "`windowsHide` {boolean} Hide the subprocess console window that would normally be created on Windows systems. **Default:** `false`. ",
                          "name": "windowsHide",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "Hide the subprocess console window that would normally be created on Windows systems."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} called with the output when process terminates. ",
                      "options": [
                        {
                          "textRaw": "`error` {Error} ",
                          "name": "error",
                          "type": "Error"
                        },
                        {
                          "textRaw": "`stdout` {string|Buffer} ",
                          "name": "stdout",
                          "type": "string|Buffer"
                        },
                        {
                          "textRaw": "`stderr` {string|Buffer} ",
                          "name": "stderr",
                          "type": "string|Buffer"
                        }
                      ],
                      "name": "callback",
                      "type": "Function",
                      "desc": "called with the output when process terminates.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "command"
                    },
                    {
                      "name": "options",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Spawns a shell then executes the <code>command</code> within that shell, buffering any\ngenerated output. The <code>command</code> string passed to the exec function is processed\ndirectly by the shell and special characters (vary based on\n<a href=\"https://en.wikipedia.org/wiki/List_of_command-line_interpreters\">shell</a>)\nneed to be dealt with accordingly:</p>\n<pre><code class=\"lang-js\">exec(&#39;&quot;/path/to/test file/test.sh&quot; arg1 arg2&#39;);\n// Double quotes are used so that the space in the path is not interpreted as\n// multiple arguments\n\nexec(&#39;echo &quot;The \\\\$HOME variable is $HOME&quot;&#39;);\n// The $HOME variable is escaped in the first instance, but not in the second\n</code></pre>\n<p><strong>Never pass unsanitized user input to this function. Any input containing shell\nmetacharacters may be used to trigger arbitrary command execution.</strong></p>\n<pre><code class=\"lang-js\">const { exec } = require(&#39;child_process&#39;);\nexec(&#39;cat *.js bad_file | wc -l&#39;, (error, stdout, stderr) =&gt; {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});\n</code></pre>\n<p>If a <code>callback</code> function is provided, it is called with the arguments\n<code>(error, stdout, stderr)</code>. On success, <code>error</code> will be <code>null</code>. On error,\n<code>error</code> will be an instance of <a href=\"errors.html#errors_class_error\"><code>Error</code></a>. The <code>error.code</code> property will be\nthe exit code of the child process while <code>error.signal</code> will be set to the\nsignal that terminated the process. Any exit code other than <code>0</code> is considered\nto be an error.</p>\n<p>The <code>stdout</code> and <code>stderr</code> arguments passed to the callback will contain the\nstdout and stderr output of the child process. By default, Node.js will decode\nthe output as UTF-8 and pass strings to the callback. The <code>encoding</code> option\ncan be used to specify the character encoding used to decode the stdout and\nstderr output. If <code>encoding</code> is <code>&#39;buffer&#39;</code>, or an unrecognized character\nencoding, <code>Buffer</code> objects will be passed to the callback instead.</p>\n<p>If <code>timeout</code> is greater than <code>0</code>, the parent will send the signal\nidentified by the <code>killSignal</code> property (the default is <code>&#39;SIGTERM&#39;</code>) if the\nchild runs longer than <code>timeout</code> milliseconds.</p>\n<p>Unlike the exec(3) POSIX system call, <code>child_process.exec()</code> does not replace\nthe existing process and uses a shell to execute the command.</p>\n<p>If this method is invoked as its <a href=\"#util_util_promisify_original\"><code>util.promisify()</code></a>ed version, it returns\na <code>Promise</code> for an <code>Object</code> with <code>stdout</code> and <code>stderr</code> properties. In case of an\nerror (including any error resulting in an exit code other than 0), a rejected\npromise is returned, with the same <code>error</code> object given in the callback, but\nwith an additional two properties <code>stdout</code> and <code>stderr</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst exec = util.promisify(require(&#39;child_process&#39;).exec);\n\nasync function lsExample() {\n  const { stdout, stderr } = await exec(&#39;ls&#39;);\n  console.log(&#39;stdout:&#39;, stdout);\n  console.log(&#39;stderr:&#39;, stderr);\n}\nlsExample();\n</code></pre>\n"
            },
            {
              "textRaw": "child_process.execFile(file[, args][, options][, callback])",
              "type": "method",
              "name": "execFile",
              "meta": {
                "added": [
                  "v0.1.91"
                ],
                "changes": [
                  {
                    "version": "v8.8.0",
                    "pr-url": "https://github.com/nodejs/node/pull/15380",
                    "description": "The `windowsHide` option is supported now."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {ChildProcess} ",
                    "name": "return",
                    "type": "ChildProcess"
                  },
                  "params": [
                    {
                      "textRaw": "`file` {string} The name or path of the executable file to run. ",
                      "name": "file",
                      "type": "string",
                      "desc": "The name or path of the executable file to run."
                    },
                    {
                      "textRaw": "`args` {string[]} List of string arguments. ",
                      "name": "args",
                      "type": "string[]",
                      "desc": "List of string arguments.",
                      "optional": true
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`cwd` {string} Current working directory of the child process. ",
                          "name": "cwd",
                          "type": "string",
                          "desc": "Current working directory of the child process."
                        },
                        {
                          "textRaw": "`env` {Object} Environment key-value pairs. ",
                          "name": "env",
                          "type": "Object",
                          "desc": "Environment key-value pairs."
                        },
                        {
                          "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                          "name": "encoding",
                          "type": "string",
                          "default": "`'utf8'`"
                        },
                        {
                          "textRaw": "`timeout` {number} **Default:** `0` ",
                          "name": "timeout",
                          "type": "number",
                          "default": "`0`"
                        },
                        {
                          "textRaw": "`maxBuffer` {number} Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated. See caveat at [`maxBuffer` and Unicode][]. **Default:** `200 * 1024`. ",
                          "name": "maxBuffer",
                          "type": "number",
                          "default": "`200 * 1024`",
                          "desc": "Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated. See caveat at [`maxBuffer` and Unicode][]."
                        },
                        {
                          "textRaw": "`killSignal` {string|integer} **Default:** `'SIGTERM'` ",
                          "name": "killSignal",
                          "type": "string|integer",
                          "default": "`'SIGTERM'`"
                        },
                        {
                          "textRaw": "`uid` {number} Sets the user identity of the process (see setuid(2)). ",
                          "name": "uid",
                          "type": "number",
                          "desc": "Sets the user identity of the process (see setuid(2))."
                        },
                        {
                          "textRaw": "`gid` {number} Sets the group identity of the process (see setgid(2)). ",
                          "name": "gid",
                          "type": "number",
                          "desc": "Sets the group identity of the process (see setgid(2))."
                        },
                        {
                          "textRaw": "`windowsHide` {boolean} Hide the subprocess console window that would normally be created on Windows systems. **Default:** `false`. ",
                          "name": "windowsHide",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "Hide the subprocess console window that would normally be created on Windows systems."
                        },
                        {
                          "textRaw": "`windowsVerbatimArguments` {boolean} No quoting or escaping of arguments is done on Windows. Ignored on Unix. **Default:** `false`. ",
                          "name": "windowsVerbatimArguments",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "No quoting or escaping of arguments is done on Windows. Ignored on Unix."
                        },
                        {
                          "textRaw": "`shell` {boolean|string} If `true`, runs `command` inside of a shell. Uses `'/bin/sh'` on UNIX, and `process.env.ComSpec` on Windows. A different shell can be specified as a string. See [Shell Requirements][] and [Default Windows Shell][]. **Default:** `false` (no shell). ",
                          "name": "shell",
                          "type": "boolean|string",
                          "default": "`false` (no shell)",
                          "desc": "If `true`, runs `command` inside of a shell. Uses `'/bin/sh'` on UNIX, and `process.env.ComSpec` on Windows. A different shell can be specified as a string. See [Shell Requirements][] and [Default Windows Shell][]."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} Called with the output when process terminates. ",
                      "options": [
                        {
                          "textRaw": "`error` {Error} ",
                          "name": "error",
                          "type": "Error"
                        },
                        {
                          "textRaw": "`stdout` {string|Buffer} ",
                          "name": "stdout",
                          "type": "string|Buffer"
                        },
                        {
                          "textRaw": "`stderr` {string|Buffer} ",
                          "name": "stderr",
                          "type": "string|Buffer"
                        }
                      ],
                      "name": "callback",
                      "type": "Function",
                      "desc": "Called with the output when process terminates.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "file"
                    },
                    {
                      "name": "args",
                      "optional": true
                    },
                    {
                      "name": "options",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>child_process.execFile()</code> function is similar to <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>\nexcept that it does not spawn a shell by default. Rather, the specified executable <code>file</code>\nis spawned directly as a new process making it slightly more efficient than\n<a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>.</p>\n<p>The same options as <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> are supported. Since a shell is not\nspawned, behaviors such as I/O redirection and file globbing are not supported.</p>\n<pre><code class=\"lang-js\">const { execFile } = require(&#39;child_process&#39;);\nconst child = execFile(&#39;node&#39;, [&#39;--version&#39;], (error, stdout, stderr) =&gt; {\n  if (error) {\n    throw error;\n  }\n  console.log(stdout);\n});\n</code></pre>\n<p>The <code>stdout</code> and <code>stderr</code> arguments passed to the callback will contain the\nstdout and stderr output of the child process. By default, Node.js will decode\nthe output as UTF-8 and pass strings to the callback. The <code>encoding</code> option\ncan be used to specify the character encoding used to decode the stdout and\nstderr output. If <code>encoding</code> is <code>&#39;buffer&#39;</code>, or an unrecognized character\nencoding, <code>Buffer</code> objects will be passed to the callback instead.</p>\n<p>If this method is invoked as its <a href=\"#util_util_promisify_original\"><code>util.promisify()</code></a>ed version, it returns\na <code>Promise</code> for an <code>Object</code> with <code>stdout</code> and <code>stderr</code> properties. In case of an\nerror (including any error resulting in an exit code other than 0), a rejected\npromise is returned, with the same <code>error</code> object given in the\ncallback, but with an additional two properties <code>stdout</code> and <code>stderr</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst execFile = util.promisify(require(&#39;child_process&#39;).execFile);\nasync function getVersion() {\n  const { stdout } = await execFile(&#39;node&#39;, [&#39;--version&#39;]);\n  console.log(stdout);\n}\ngetVersion();\n</code></pre>\n<p><strong>If the <code>shell</code> option is enabled, do not pass unsanitized user input to this\nfunction. Any input containing shell metacharacters may be used to trigger\narbitrary command execution.</strong></p>\n"
            },
            {
              "textRaw": "child_process.fork(modulePath[, args][, options])",
              "type": "method",
              "name": "fork",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/10866",
                    "description": "The `stdio` option can now be a string."
                  },
                  {
                    "version": "v6.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/7811",
                    "description": "The `stdio` option is supported now."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {ChildProcess} ",
                    "name": "return",
                    "type": "ChildProcess"
                  },
                  "params": [
                    {
                      "textRaw": "`modulePath` {string} The module to run in the child. ",
                      "name": "modulePath",
                      "type": "string",
                      "desc": "The module to run in the child."
                    },
                    {
                      "textRaw": "`args` {string[]} List of string arguments. ",
                      "name": "args",
                      "type": "string[]",
                      "desc": "List of string arguments.",
                      "optional": true
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`cwd` {string} Current working directory of the child process. ",
                          "name": "cwd",
                          "type": "string",
                          "desc": "Current working directory of the child process."
                        },
                        {
                          "textRaw": "`env` {Object} Environment key-value pairs. ",
                          "name": "env",
                          "type": "Object",
                          "desc": "Environment key-value pairs."
                        },
                        {
                          "textRaw": "`execPath` {string} Executable used to create the child process. ",
                          "name": "execPath",
                          "type": "string",
                          "desc": "Executable used to create the child process."
                        },
                        {
                          "textRaw": "`execArgv` {string[]} List of string arguments passed to the executable. **Default:** `process.execArgv`. ",
                          "name": "execArgv",
                          "type": "string[]",
                          "default": "`process.execArgv`",
                          "desc": "List of string arguments passed to the executable."
                        },
                        {
                          "textRaw": "`silent` {boolean} If `true`, stdin, stdout, and stderr of the child will be piped to the parent, otherwise they will be inherited from the parent, see the `'pipe'` and `'inherit'` options for [`child_process.spawn()`][]'s [`stdio`][] for more details. **Default:** `false`. ",
                          "name": "silent",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "If `true`, stdin, stdout, and stderr of the child will be piped to the parent, otherwise they will be inherited from the parent, see the `'pipe'` and `'inherit'` options for [`child_process.spawn()`][]'s [`stdio`][] for more details."
                        },
                        {
                          "textRaw": "`stdio` {Array|string} See [`child_process.spawn()`][]'s [`stdio`][]. When this option is provided, it overrides `silent`. If the array variant is used, it must contain exactly one item with value `'ipc'` or an error will be thrown. For instance `[0, 1, 2, 'ipc']`. ",
                          "name": "stdio",
                          "type": "Array|string",
                          "desc": "See [`child_process.spawn()`][]'s [`stdio`][]. When this option is provided, it overrides `silent`. If the array variant is used, it must contain exactly one item with value `'ipc'` or an error will be thrown. For instance `[0, 1, 2, 'ipc']`."
                        },
                        {
                          "textRaw": "`windowsVerbatimArguments` {boolean} No quoting or escaping of arguments is done on Windows. Ignored on Unix. **Default:** `false`. ",
                          "name": "windowsVerbatimArguments",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "No quoting or escaping of arguments is done on Windows. Ignored on Unix."
                        },
                        {
                          "textRaw": "`uid` {number} Sets the user identity of the process (see setuid(2)). ",
                          "name": "uid",
                          "type": "number",
                          "desc": "Sets the user identity of the process (see setuid(2))."
                        },
                        {
                          "textRaw": "`gid` {number} Sets the group identity of the process (see setgid(2)). ",
                          "name": "gid",
                          "type": "number",
                          "desc": "Sets the group identity of the process (see setgid(2))."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "modulePath"
                    },
                    {
                      "name": "args",
                      "optional": true
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>child_process.fork()</code> method is a special case of\n<a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> used specifically to spawn new Node.js processes.\nLike <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a>, a <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> object is returned. The returned\n<a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> will have an additional communication channel built-in that\nallows messages to be passed back and forth between the parent and child. See\n<a href=\"child_process.html#child_process_subprocess_send_message_sendhandle_options_callback\"><code>subprocess.send()</code></a> for details.</p>\n<p>It is important to keep in mind that spawned Node.js child processes are\nindependent of the parent with exception of the IPC communication channel\nthat is established between the two. Each process has its own memory, with\ntheir own V8 instances. Because of the additional resource allocations\nrequired, spawning a large number of child Node.js processes is not\nrecommended.</p>\n<p>By default, <code>child_process.fork()</code> will spawn new Node.js instances using the\n<a href=\"#process_process_execpath\"><code>process.execPath</code></a> of the parent process. The <code>execPath</code> property in the\n<code>options</code> object allows for an alternative execution path to be used.</p>\n<p>Node.js processes launched with a custom <code>execPath</code> will communicate with the\nparent process using the file descriptor (fd) identified using the\nenvironment variable <code>NODE_CHANNEL_FD</code> on the child process.</p>\n<p>Unlike the fork(2) POSIX system call, <code>child_process.fork()</code> does not clone the\ncurrent process.</p>\n<p>The <code>shell</code> option available in <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> is not supported by\n<code>child_process.fork()</code> and will be ignored if set.</p>\n"
            },
            {
              "textRaw": "child_process.spawn(command[, args][, options])",
              "type": "method",
              "name": "spawn",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": [
                  {
                    "version": "v8.8.0",
                    "pr-url": "https://github.com/nodejs/node/pull/15380",
                    "description": "The `windowsHide` option is supported now."
                  },
                  {
                    "version": "v6.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/7696",
                    "description": "The `argv0` option is supported now."
                  },
                  {
                    "version": "v5.7.0",
                    "pr-url": "https://github.com/nodejs/node/pull/4598",
                    "description": "The `shell` option is supported now."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {ChildProcess} ",
                    "name": "return",
                    "type": "ChildProcess"
                  },
                  "params": [
                    {
                      "textRaw": "`command` {string} The command to run. ",
                      "name": "command",
                      "type": "string",
                      "desc": "The command to run."
                    },
                    {
                      "textRaw": "`args` {string[]} List of string arguments. ",
                      "name": "args",
                      "type": "string[]",
                      "desc": "List of string arguments.",
                      "optional": true
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`cwd` {string} Current working directory of the child process. ",
                          "name": "cwd",
                          "type": "string",
                          "desc": "Current working directory of the child process."
                        },
                        {
                          "textRaw": "`env` {Object} Environment key-value pairs. ",
                          "name": "env",
                          "type": "Object",
                          "desc": "Environment key-value pairs."
                        },
                        {
                          "textRaw": "`argv0` {string} Explicitly set the value of `argv[0]` sent to the child process. This will be set to `command` if not specified. ",
                          "name": "argv0",
                          "type": "string",
                          "desc": "Explicitly set the value of `argv[0]` sent to the child process. This will be set to `command` if not specified."
                        },
                        {
                          "textRaw": "`stdio` {Array|string} Child's stdio configuration (see [`options.stdio`][`stdio`]). ",
                          "name": "stdio",
                          "type": "Array|string",
                          "desc": "Child's stdio configuration (see [`options.stdio`][`stdio`])."
                        },
                        {
                          "textRaw": "`detached` {boolean} Prepare child to run independently of its parent process. Specific behavior depends on the platform, see [`options.detached`][]). ",
                          "name": "detached",
                          "type": "boolean",
                          "desc": "Prepare child to run independently of its parent process. Specific behavior depends on the platform, see [`options.detached`][])."
                        },
                        {
                          "textRaw": "`uid` {number} Sets the user identity of the process (see setuid(2)). ",
                          "name": "uid",
                          "type": "number",
                          "desc": "Sets the user identity of the process (see setuid(2))."
                        },
                        {
                          "textRaw": "`gid` {number} Sets the group identity of the process (see setgid(2)). ",
                          "name": "gid",
                          "type": "number",
                          "desc": "Sets the group identity of the process (see setgid(2))."
                        },
                        {
                          "textRaw": "`shell` {boolean|string} If `true`, runs `command` inside of a shell. Uses `'/bin/sh'` on UNIX, and `process.env.ComSpec` on Windows. A different shell can be specified as a string. See [Shell Requirements][] and [Default Windows Shell][]. **Default:** `false` (no shell). ",
                          "name": "shell",
                          "type": "boolean|string",
                          "default": "`false` (no shell)",
                          "desc": "If `true`, runs `command` inside of a shell. Uses `'/bin/sh'` on UNIX, and `process.env.ComSpec` on Windows. A different shell can be specified as a string. See [Shell Requirements][] and [Default Windows Shell][]."
                        },
                        {
                          "textRaw": "`windowsVerbatimArguments` {boolean} No quoting or escaping of arguments is done on Windows. Ignored on Unix. This is set to `true` automatically when `shell` is specified. **Default:** `false`. ",
                          "name": "windowsVerbatimArguments",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "No quoting or escaping of arguments is done on Windows. Ignored on Unix. This is set to `true` automatically when `shell` is specified."
                        },
                        {
                          "textRaw": "`windowsHide` {boolean} Hide the subprocess console window that would normally be created on Windows systems. **Default:** `false`. ",
                          "name": "windowsHide",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "Hide the subprocess console window that would normally be created on Windows systems."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "command"
                    },
                    {
                      "name": "args",
                      "optional": true
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>child_process.spawn()</code> method spawns a new process using the given\n<code>command</code>, with command line arguments in <code>args</code>. If omitted, <code>args</code> defaults\nto an empty array.</p>\n<p><strong>If the <code>shell</code> option is enabled, do not pass unsanitized user input to this\nfunction. Any input containing shell metacharacters may be used to trigger\narbitrary command execution.</strong></p>\n<p>A third argument may be used to specify additional options, with these defaults:</p>\n<pre><code class=\"lang-js\">const defaults = {\n  cwd: undefined,\n  env: process.env\n};\n</code></pre>\n<p>Use <code>cwd</code> to specify the working directory from which the process is spawned.\nIf not given, the default is to inherit the current working directory.</p>\n<p>Use <code>env</code> to specify environment variables that will be visible to the new\nprocess, the default is <a href=\"process.html#process_process_env\"><code>process.env</code></a>.</p>\n<p><code>undefined</code> values in <code>env</code> will be ignored.</p>\n<p>Example of running <code>ls -lh /usr</code>, capturing <code>stdout</code>, <code>stderr</code>, and the\nexit code:</p>\n<pre><code class=\"lang-js\">const { spawn } = require(&#39;child_process&#39;);\nconst ls = spawn(&#39;ls&#39;, [&#39;-lh&#39;, &#39;/usr&#39;]);\n\nls.stdout.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`stderr: ${data}`);\n});\n\nls.on(&#39;close&#39;, (code) =&gt; {\n  console.log(`child process exited with code ${code}`);\n});\n</code></pre>\n<p>Example: A very elaborate way to run <code>ps ax | grep ssh</code></p>\n<pre><code class=\"lang-js\">const { spawn } = require(&#39;child_process&#39;);\nconst ps = spawn(&#39;ps&#39;, [&#39;ax&#39;]);\nconst grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\n\nps.stdout.on(&#39;data&#39;, (data) =&gt; {\n  grep.stdin.write(data);\n});\n\nps.stderr.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`ps stderr: ${data}`);\n});\n\nps.on(&#39;close&#39;, (code) =&gt; {\n  if (code !== 0) {\n    console.log(`ps process exited with code ${code}`);\n  }\n  grep.stdin.end();\n});\n\ngrep.stdout.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data.toString());\n});\n\ngrep.stderr.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`grep stderr: ${data}`);\n});\n\ngrep.on(&#39;close&#39;, (code) =&gt; {\n  if (code !== 0) {\n    console.log(`grep process exited with code ${code}`);\n  }\n});\n</code></pre>\n<p>Example of checking for failed <code>spawn</code>:</p>\n<pre><code class=\"lang-js\">const { spawn } = require(&#39;child_process&#39;);\nconst subprocess = spawn(&#39;bad_command&#39;);\n\nsubprocess.on(&#39;error&#39;, (err) =&gt; {\n  console.log(&#39;Failed to start subprocess.&#39;);\n});\n</code></pre>\n<p>Certain platforms (macOS, Linux) will use the value of <code>argv[0]</code> for the process\ntitle while others (Windows, SunOS) will use <code>command</code>.</p>\n<p>Node.js currently overwrites <code>argv[0]</code> with <code>process.execPath</code> on startup, so\n<code>process.argv[0]</code> in a Node.js child process will not match the <code>argv0</code>\nparameter passed to <code>spawn</code> from the parent, retrieve it with the\n<code>process.argv0</code> property instead.</p>\n",
              "properties": [
                {
                  "textRaw": "options.detached",
                  "name": "detached",
                  "meta": {
                    "added": [
                      "v0.7.10"
                    ],
                    "changes": []
                  },
                  "desc": "<p>On Windows, setting <code>options.detached</code> to <code>true</code> makes it possible for the\nchild process to continue running after the parent exits. The child will have\nits own console window. <em>Once enabled for a child process, it cannot be\ndisabled</em>.</p>\n<p>On non-Windows platforms, if <code>options.detached</code> is set to <code>true</code>, the child\nprocess will be made the leader of a new process group and session. Note that\nchild processes may continue running after the parent exits regardless of\nwhether they are detached or not. See setsid(2) for more information.</p>\n<p>By default, the parent will wait for the detached child to exit. To prevent\nthe parent from waiting for a given <code>subprocess</code>, use the <code>subprocess.unref()</code>\nmethod. Doing so will cause the parent&#39;s event loop to not include the child in\nits reference count, allowing the parent to exit independently of the child,\nunless there is an established IPC channel between the child and parent.</p>\n<p>When using the <code>detached</code> option to start a long-running process, the process\nwill not stay running in the background after the parent exits unless it is\nprovided with a <code>stdio</code> configuration that is not connected to the parent.\nIf the parent&#39;s <code>stdio</code> is inherited, the child will remain attached to the\ncontrolling terminal.</p>\n<p>Example of a long-running process, by detaching and also ignoring its parent\n<code>stdio</code> file descriptors, in order to ignore the parent&#39;s termination:</p>\n<pre><code class=\"lang-js\">const { spawn } = require(&#39;child_process&#39;);\n\nconst subprocess = spawn(process.argv[0], [&#39;child_program.js&#39;], {\n  detached: true,\n  stdio: &#39;ignore&#39;\n});\n\nsubprocess.unref();\n</code></pre>\n<p>Alternatively one can redirect the child process&#39; output into files:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst { spawn } = require(&#39;child_process&#39;);\nconst out = fs.openSync(&#39;./out.log&#39;, &#39;a&#39;);\nconst err = fs.openSync(&#39;./out.log&#39;, &#39;a&#39;);\n\nconst subprocess = spawn(&#39;prg&#39;, [], {\n  detached: true,\n  stdio: [ &#39;ignore&#39;, out, err ]\n});\n\nsubprocess.unref();\n</code></pre>\n"
                },
                {
                  "textRaw": "options.stdio",
                  "name": "stdio",
                  "meta": {
                    "added": [
                      "v0.7.10"
                    ],
                    "changes": [
                      {
                        "version": "v3.3.1",
                        "pr-url": "https://github.com/nodejs/node/pull/2727",
                        "description": "The value `0` is now accepted as a file descriptor."
                      }
                    ]
                  },
                  "desc": "<p>The <code>options.stdio</code> option is used to configure the pipes that are established\nbetween the parent and child process. By default, the child&#39;s stdin, stdout,\nand stderr are redirected to corresponding <a href=\"#child_process_subprocess_stdin\"><code>subprocess.stdin</code></a>,\n<a href=\"#child_process_subprocess_stdout\"><code>subprocess.stdout</code></a>, and <a href=\"#child_process_subprocess_stderr\"><code>subprocess.stderr</code></a> streams on the\n<a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> object. This is equivalent to setting the <code>options.stdio</code>\nequal to <code>[&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;]</code>.</p>\n<p>For convenience, <code>options.stdio</code> may be one of the following strings:</p>\n<ul>\n<li><code>&#39;pipe&#39;</code> - equivalent to <code>[&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;]</code> (the default)</li>\n<li><code>&#39;ignore&#39;</code> - equivalent to <code>[&#39;ignore&#39;, &#39;ignore&#39;, &#39;ignore&#39;]</code></li>\n<li><code>&#39;inherit&#39;</code> - equivalent to <code>[process.stdin, process.stdout, process.stderr]</code>\n or <code>[0,1,2]</code></li>\n</ul>\n<p>Otherwise, the value of <code>options.stdio</code> is an array where each index corresponds\nto an fd in the child. The fds 0, 1, and 2 correspond to stdin, stdout,\nand stderr, respectively. Additional fds can be specified to create additional\npipes between the parent and child. The value is one of the following:</p>\n<ol>\n<li><code>&#39;pipe&#39;</code> - Create a pipe between the child process and the parent process.\nThe parent end of the pipe is exposed to the parent as a property on the\n<code>child_process</code> object as <a href=\"#child_process_options_stdio\"><code>subprocess.stdio[fd]</code></a>. Pipes created\nfor fds 0 - 2 are also available as <a href=\"#child_process_subprocess_stdin\"><code>subprocess.stdin</code></a>,\n<a href=\"#child_process_subprocess_stdout\"><code>subprocess.stdout</code></a> and <a href=\"#child_process_subprocess_stderr\"><code>subprocess.stderr</code></a>, respectively.</li>\n<li><p><code>&#39;ipc&#39;</code> - Create an IPC channel for passing messages/file descriptors\nbetween parent and child. A <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> may have at most <em>one</em> IPC stdio\nfile descriptor. Setting this option enables the <a href=\"child_process.html#child_process_subprocess_send_message_sendhandle_options_callback\"><code>subprocess.send()</code></a>\nmethod. If the child is a Node.js process, the presence of an IPC channel\nwill enable <a href=\"process.html#process_process_send_message_sendhandle_options_callback\"><code>process.send()</code></a> and <a href=\"process.html#process_process_disconnect\"><code>process.disconnect()</code></a> methods,\nas well as <a href=\"process.html#process_event_disconnect\"><code>&#39;disconnect&#39;</code></a> and <a href=\"child_process.html#child_process_event_message\"><code>&#39;message&#39;</code></a> events within the child.</p>\n<p>Accessing the IPC channel fd in any way other than <a href=\"process.html#process_process_send_message_sendhandle_options_callback\"><code>process.send()</code></a>\nor using the IPC channel with a child process that is not a Node.js instance\nis not supported.</p>\n</li>\n<li><code>&#39;ignore&#39;</code> - Instructs Node.js to ignore the fd in the child. While Node.js\nwill always open fds 0 - 2 for the processes it spawns, setting the fd to\n<code>&#39;ignore&#39;</code> will cause Node.js to open <code>/dev/null</code> and attach it to the\nchild&#39;s fd.</li>\n<li>{Stream} object - Share a readable or writable stream that refers to a tty,\nfile, socket, or a pipe with the child process. The stream&#39;s underlying\nfile descriptor is duplicated in the child process to the fd that\ncorresponds to the index in the <code>stdio</code> array. Note that the stream must\nhave an underlying descriptor (file streams do not until the <code>&#39;open&#39;</code>\nevent has occurred).</li>\n<li>Positive integer - The integer value is interpreted as a file descriptor\nthat is currently open in the parent process. It is shared with the child\nprocess, similar to how {Stream} objects can be shared.</li>\n<li><code>null</code>, <code>undefined</code> - Use default value. For stdio fds 0, 1, and 2 (in other\nwords, stdin, stdout, and stderr) a pipe is created. For fd 3 and up, the\ndefault is <code>&#39;ignore&#39;</code>.</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const { spawn } = require(&#39;child_process&#39;);\n\n// Child will use parent&#39;s stdios\nspawn(&#39;prg&#39;, [], { stdio: &#39;inherit&#39; });\n\n// Spawn child sharing only stderr\nspawn(&#39;prg&#39;, [], { stdio: [&#39;pipe&#39;, &#39;pipe&#39;, process.stderr] });\n\n// Open an extra fd=4, to interact with programs presenting a\n// startd-style interface.\nspawn(&#39;prg&#39;, [], { stdio: [&#39;pipe&#39;, null, null, null, &#39;pipe&#39;] });\n</code></pre>\n<p><em>It is worth noting that when an IPC channel is established between the\nparent and child processes, and the child is a Node.js process, the child\nis launched with the IPC channel unreferenced (using <code>unref()</code>) until the\nchild registers an event handler for the <a href=\"process.html#process_event_disconnect\"><code>&#39;disconnect&#39;</code></a> event\nor the <a href=\"child_process.html#child_process_event_message\"><code>&#39;message&#39;</code></a> event. This allows the child to exit\nnormally without the process being held open by the open IPC channel.</em></p>\n<p>See also: <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> and <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>.</p>\n"
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "Asynchronous Process Creation"
        },
        {
          "textRaw": "Synchronous Process Creation",
          "name": "synchronous_process_creation",
          "desc": "<p>The <a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a>, <a href=\"#child_process_child_process_execsync_command_options\"><code>child_process.execSync()</code></a>, and\n<a href=\"#child_process_child_process_execfilesync_file_args_options\"><code>child_process.execFileSync()</code></a> methods are <strong>synchronous</strong> and <strong>WILL</strong> block\nthe Node.js event loop, pausing execution of any additional code until the\nspawned process exits.</p>\n<p>Blocking calls like these are mostly useful for simplifying general-purpose\nscripting tasks and for simplifying the loading/processing of application\nconfiguration at startup.</p>\n",
          "methods": [
            {
              "textRaw": "child_process.execFileSync(file[, args][, options])",
              "type": "method",
              "name": "execFileSync",
              "meta": {
                "added": [
                  "v0.11.12"
                ],
                "changes": [
                  {
                    "version": "v8.8.0",
                    "pr-url": "https://github.com/nodejs/node/pull/15380",
                    "description": "The `windowsHide` option is supported now."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/10653",
                    "description": "The `input` option can now be a `Uint8Array`."
                  },
                  {
                    "version": "v6.2.1, v4.5.0",
                    "pr-url": "https://github.com/nodejs/node/pull/6939",
                    "description": "The `encoding` option can now explicitly be set to `buffer`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer|string} The stdout from the command. ",
                    "name": "return",
                    "type": "Buffer|string",
                    "desc": "The stdout from the command."
                  },
                  "params": [
                    {
                      "textRaw": "`file` {string} The name or path of the executable file to run. ",
                      "name": "file",
                      "type": "string",
                      "desc": "The name or path of the executable file to run."
                    },
                    {
                      "textRaw": "`args` {string[]} List of string arguments. ",
                      "name": "args",
                      "type": "string[]",
                      "desc": "List of string arguments.",
                      "optional": true
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`cwd` {string} Current working directory of the child process. ",
                          "name": "cwd",
                          "type": "string",
                          "desc": "Current working directory of the child process."
                        },
                        {
                          "textRaw": "`input` {string|Buffer|Uint8Array} The value which will be passed as stdin to the spawned process. Supplying this value will override `stdio[0]`. ",
                          "name": "input",
                          "type": "string|Buffer|Uint8Array",
                          "desc": "The value which will be passed as stdin to the spawned process. Supplying this value will override `stdio[0]`."
                        },
                        {
                          "textRaw": "`stdio` {string|Array} Child's stdio configuration. `stderr` by default will be output to the parent process' stderr unless `stdio` is specified. **Default:** `'pipe'`. ",
                          "name": "stdio",
                          "type": "string|Array",
                          "default": "`'pipe'`",
                          "desc": "Child's stdio configuration. `stderr` by default will be output to the parent process' stderr unless `stdio` is specified."
                        },
                        {
                          "textRaw": "`env` {Object} Environment key-value pairs. ",
                          "name": "env",
                          "type": "Object",
                          "desc": "Environment key-value pairs."
                        },
                        {
                          "textRaw": "`uid` {number} Sets the user identity of the process (see setuid(2)). ",
                          "name": "uid",
                          "type": "number",
                          "desc": "Sets the user identity of the process (see setuid(2))."
                        },
                        {
                          "textRaw": "`gid` {number} Sets the group identity of the process (see setgid(2)). ",
                          "name": "gid",
                          "type": "number",
                          "desc": "Sets the group identity of the process (see setgid(2))."
                        },
                        {
                          "textRaw": "`timeout` {number} In milliseconds the maximum amount of time the process is allowed to run. **Default:** `undefined`. ",
                          "name": "timeout",
                          "type": "number",
                          "default": "`undefined`",
                          "desc": "In milliseconds the maximum amount of time the process is allowed to run."
                        },
                        {
                          "textRaw": "`killSignal` {string|integer} The signal value to be used when the spawned process will be killed. **Default:** `'SIGTERM'`. ",
                          "name": "killSignal",
                          "type": "string|integer",
                          "default": "`'SIGTERM'`",
                          "desc": "The signal value to be used when the spawned process will be killed."
                        },
                        {
                          "textRaw": "`maxBuffer` {number} Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated. See caveat at [`maxBuffer` and Unicode][]. **Default:** `200 * 1024`. ",
                          "name": "maxBuffer",
                          "type": "number",
                          "default": "`200 * 1024`",
                          "desc": "Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated. See caveat at [`maxBuffer` and Unicode][]."
                        },
                        {
                          "textRaw": "`encoding` {string} The encoding used for all stdio inputs and outputs. **Default:** `'buffer'`. ",
                          "name": "encoding",
                          "type": "string",
                          "default": "`'buffer'`",
                          "desc": "The encoding used for all stdio inputs and outputs."
                        },
                        {
                          "textRaw": "`windowsHide` {boolean} Hide the subprocess console window that would normally be created on Windows systems. **Default:** `false`. ",
                          "name": "windowsHide",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "Hide the subprocess console window that would normally be created on Windows systems."
                        },
                        {
                          "textRaw": "`shell` {boolean|string} If `true`, runs `command` inside of a shell. Uses `'/bin/sh'` on UNIX, and `process.env.ComSpec` on Windows. A different shell can be specified as a string. See [Shell Requirements][] and [Default Windows Shell][]. **Default:** `false` (no shell). ",
                          "name": "shell",
                          "type": "boolean|string",
                          "default": "`false` (no shell)",
                          "desc": "If `true`, runs `command` inside of a shell. Uses `'/bin/sh'` on UNIX, and `process.env.ComSpec` on Windows. A different shell can be specified as a string. See [Shell Requirements][] and [Default Windows Shell][]."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "file"
                    },
                    {
                      "name": "args",
                      "optional": true
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>child_process.execFileSync()</code> method is generally identical to\n<a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a> with the exception that the method will not return\nuntil the child process has fully closed. When a timeout has been encountered\nand <code>killSignal</code> is sent, the method won&#39;t return until the process has\ncompletely exited.</p>\n<p>If the child process intercepts and handles the <code>SIGTERM</code> signal and\ndoes not exit, the parent process will still wait until the child process has\nexited.</p>\n<p>If the process times out or has a non-zero exit code, this method <strong><em>will</em></strong>\nthrow an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> that will include the full result of the underlying\n<a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a>.</p>\n<p><strong>If the <code>shell</code> option is enabled, do not pass unsanitized user input to this\nfunction. Any input containing shell metacharacters may be used to trigger\narbitrary command execution.</strong></p>\n"
            },
            {
              "textRaw": "child_process.execSync(command[, options])",
              "type": "method",
              "name": "execSync",
              "meta": {
                "added": [
                  "v0.11.12"
                ],
                "changes": [
                  {
                    "version": "v8.8.0",
                    "pr-url": "https://github.com/nodejs/node/pull/15380",
                    "description": "The `windowsHide` option is supported now."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/10653",
                    "description": "The `input` option can now be a `Uint8Array`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer|string} The stdout from the command. ",
                    "name": "return",
                    "type": "Buffer|string",
                    "desc": "The stdout from the command."
                  },
                  "params": [
                    {
                      "textRaw": "`command` {string} The command to run. ",
                      "name": "command",
                      "type": "string",
                      "desc": "The command to run."
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`cwd` {string} Current working directory of the child process. ",
                          "name": "cwd",
                          "type": "string",
                          "desc": "Current working directory of the child process."
                        },
                        {
                          "textRaw": "`input` {string|Buffer|Uint8Array} The value which will be passed as stdin to the spawned process. Supplying this value will override `stdio[0]`. ",
                          "name": "input",
                          "type": "string|Buffer|Uint8Array",
                          "desc": "The value which will be passed as stdin to the spawned process. Supplying this value will override `stdio[0]`."
                        },
                        {
                          "textRaw": "`stdio` {string|Array} Child's stdio configuration. `stderr` by default will be output to the parent process' stderr unless `stdio` is specified. **Default:** `'pipe'`. ",
                          "name": "stdio",
                          "type": "string|Array",
                          "default": "`'pipe'`",
                          "desc": "Child's stdio configuration. `stderr` by default will be output to the parent process' stderr unless `stdio` is specified."
                        },
                        {
                          "textRaw": "`env` {Object} Environment key-value pairs. ",
                          "name": "env",
                          "type": "Object",
                          "desc": "Environment key-value pairs."
                        },
                        {
                          "textRaw": "`shell` {string} Shell to execute the command with. See [Shell Requirements][] and [Default Windows Shell][]. **Default:** `'/bin/sh'` on UNIX, `process.env.ComSpec` on Windows. ",
                          "name": "shell",
                          "type": "string",
                          "default": "`'/bin/sh'` on UNIX, `process.env.ComSpec` on Windows",
                          "desc": "Shell to execute the command with. See [Shell Requirements][] and [Default Windows Shell][]."
                        },
                        {
                          "textRaw": "`uid` {number} Sets the user identity of the process. (See setuid(2)). ",
                          "name": "uid",
                          "type": "number",
                          "desc": "Sets the user identity of the process. (See setuid(2))."
                        },
                        {
                          "textRaw": "`gid` {number} Sets the group identity of the process. (See setgid(2)). ",
                          "name": "gid",
                          "type": "number",
                          "desc": "Sets the group identity of the process. (See setgid(2))."
                        },
                        {
                          "textRaw": "`timeout` {number} In milliseconds the maximum amount of time the process is allowed to run. **Default:** `undefined`. ",
                          "name": "timeout",
                          "type": "number",
                          "default": "`undefined`",
                          "desc": "In milliseconds the maximum amount of time the process is allowed to run."
                        },
                        {
                          "textRaw": "`killSignal` {string|integer} The signal value to be used when the spawned process will be killed. **Default:** `'SIGTERM'`. ",
                          "name": "killSignal",
                          "type": "string|integer",
                          "default": "`'SIGTERM'`",
                          "desc": "The signal value to be used when the spawned process will be killed."
                        },
                        {
                          "textRaw": "`maxBuffer` {number} Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated. See caveat at [`maxBuffer` and Unicode][]. **Default:** `200 * 1024`. ",
                          "name": "maxBuffer",
                          "type": "number",
                          "default": "`200 * 1024`",
                          "desc": "Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated. See caveat at [`maxBuffer` and Unicode][]."
                        },
                        {
                          "textRaw": "`encoding` {string} The encoding used for all stdio inputs and outputs. **Default:** `'buffer'`. ",
                          "name": "encoding",
                          "type": "string",
                          "default": "`'buffer'`",
                          "desc": "The encoding used for all stdio inputs and outputs."
                        },
                        {
                          "textRaw": "`windowsHide` {boolean} Hide the subprocess console window that would normally be created on Windows systems. **Default:** `false`. ",
                          "name": "windowsHide",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "Hide the subprocess console window that would normally be created on Windows systems."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "command"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>child_process.execSync()</code> method is generally identical to\n<a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a> with the exception that the method will not return until\nthe child process has fully closed. When a timeout has been encountered and\n<code>killSignal</code> is sent, the method won&#39;t return until the process has completely\nexited. <em>Note that if the child process intercepts and handles the <code>SIGTERM</code>\nsignal and doesn&#39;t exit, the parent process will wait until the child\nprocess has exited.</em></p>\n<p>If the process times out or has a non-zero exit code, this method <strong><em>will</em></strong>\nthrow. The <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object will contain the entire result from\n<a href=\"#child_process_child_process_spawnsync_command_args_options\"><code>child_process.spawnSync()</code></a>.</p>\n<p><strong>Never pass unsanitized user input to this function. Any input containing shell\nmetacharacters may be used to trigger arbitrary command execution.</strong></p>\n"
            },
            {
              "textRaw": "child_process.spawnSync(command[, args][, options])",
              "type": "method",
              "name": "spawnSync",
              "meta": {
                "added": [
                  "v0.11.12"
                ],
                "changes": [
                  {
                    "version": "v8.8.0",
                    "pr-url": "https://github.com/nodejs/node/pull/15380",
                    "description": "The `windowsHide` option is supported now."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/10653",
                    "description": "The `input` option can now be a `Uint8Array`."
                  },
                  {
                    "version": "v6.2.1, v4.5.0",
                    "pr-url": "https://github.com/nodejs/node/pull/6939",
                    "description": "The `encoding` option can now explicitly be set to `buffer`."
                  },
                  {
                    "version": "v5.7.0",
                    "pr-url": "https://github.com/nodejs/node/pull/4598",
                    "description": "The `shell` option is supported now."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "options": [
                      {
                        "textRaw": "`pid` {number} Pid of the child process. ",
                        "name": "pid",
                        "type": "number",
                        "desc": "Pid of the child process."
                      },
                      {
                        "textRaw": "`output` {Array} Array of results from stdio output. ",
                        "name": "output",
                        "type": "Array",
                        "desc": "Array of results from stdio output."
                      },
                      {
                        "textRaw": "`stdout` {Buffer|string} The contents of `output[1]`. ",
                        "name": "stdout",
                        "type": "Buffer|string",
                        "desc": "The contents of `output[1]`."
                      },
                      {
                        "textRaw": "`stderr` {Buffer|string} The contents of `output[2]`. ",
                        "name": "stderr",
                        "type": "Buffer|string",
                        "desc": "The contents of `output[2]`."
                      },
                      {
                        "textRaw": "`status` {number} The exit code of the child process. ",
                        "name": "status",
                        "type": "number",
                        "desc": "The exit code of the child process."
                      },
                      {
                        "textRaw": "`signal` {string} The signal used to kill the child process. ",
                        "name": "signal",
                        "type": "string",
                        "desc": "The signal used to kill the child process."
                      },
                      {
                        "textRaw": "`error` {Error} The error object if the child process failed or timed out. ",
                        "name": "error",
                        "type": "Error",
                        "desc": "The error object if the child process failed or timed out."
                      }
                    ],
                    "name": "return",
                    "type": "Object"
                  },
                  "params": [
                    {
                      "textRaw": "`command` {string} The command to run. ",
                      "name": "command",
                      "type": "string",
                      "desc": "The command to run."
                    },
                    {
                      "textRaw": "`args` {string[]} List of string arguments. ",
                      "name": "args",
                      "type": "string[]",
                      "desc": "List of string arguments.",
                      "optional": true
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`cwd` {string} Current working directory of the child process. ",
                          "name": "cwd",
                          "type": "string",
                          "desc": "Current working directory of the child process."
                        },
                        {
                          "textRaw": "`input` {string|Buffer|Uint8Array} The value which will be passed as stdin to the spawned process. Supplying this value will override `stdio[0]`. ",
                          "name": "input",
                          "type": "string|Buffer|Uint8Array",
                          "desc": "The value which will be passed as stdin to the spawned process. Supplying this value will override `stdio[0]`."
                        },
                        {
                          "textRaw": "`stdio` {string|Array} Child's stdio configuration. ",
                          "name": "stdio",
                          "type": "string|Array",
                          "desc": "Child's stdio configuration."
                        },
                        {
                          "textRaw": "`env` {Object} Environment key-value pairs. ",
                          "name": "env",
                          "type": "Object",
                          "desc": "Environment key-value pairs."
                        },
                        {
                          "textRaw": "`uid` {number} Sets the user identity of the process (see setuid(2)). ",
                          "name": "uid",
                          "type": "number",
                          "desc": "Sets the user identity of the process (see setuid(2))."
                        },
                        {
                          "textRaw": "`gid` {number} Sets the group identity of the process (see setgid(2)). ",
                          "name": "gid",
                          "type": "number",
                          "desc": "Sets the group identity of the process (see setgid(2))."
                        },
                        {
                          "textRaw": "`timeout` {number} In milliseconds the maximum amount of time the process is allowed to run. **Default:** `undefined`. ",
                          "name": "timeout",
                          "type": "number",
                          "default": "`undefined`",
                          "desc": "In milliseconds the maximum amount of time the process is allowed to run."
                        },
                        {
                          "textRaw": "`killSignal` {string|integer} The signal value to be used when the spawned process will be killed. **Default:** `'SIGTERM'`. ",
                          "name": "killSignal",
                          "type": "string|integer",
                          "default": "`'SIGTERM'`",
                          "desc": "The signal value to be used when the spawned process will be killed."
                        },
                        {
                          "textRaw": "`maxBuffer` {number} Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated. See caveat at [`maxBuffer` and Unicode][]. **Default:** `200 * 1024`. ",
                          "name": "maxBuffer",
                          "type": "number",
                          "default": "`200 * 1024`",
                          "desc": "Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated. See caveat at [`maxBuffer` and Unicode][]."
                        },
                        {
                          "textRaw": "`encoding` {string} The encoding used for all stdio inputs and outputs. **Default:** `'buffer'`. ",
                          "name": "encoding",
                          "type": "string",
                          "default": "`'buffer'`",
                          "desc": "The encoding used for all stdio inputs and outputs."
                        },
                        {
                          "textRaw": "`shell` {boolean|string} If `true`, runs `command` inside of a shell. Uses `'/bin/sh'` on UNIX, and `process.env.ComSpec` on Windows. A different shell can be specified as a string. See [Shell Requirements][] and [Default Windows Shell][]. **Default:** `false` (no shell). ",
                          "name": "shell",
                          "type": "boolean|string",
                          "default": "`false` (no shell)",
                          "desc": "If `true`, runs `command` inside of a shell. Uses `'/bin/sh'` on UNIX, and `process.env.ComSpec` on Windows. A different shell can be specified as a string. See [Shell Requirements][] and [Default Windows Shell][]."
                        },
                        {
                          "textRaw": "`windowsVerbatimArguments` {boolean} No quoting or escaping of arguments is done on Windows. Ignored on Unix. This is set to `true` automatically when `shell` is specified. **Default:** `false`. ",
                          "name": "windowsVerbatimArguments",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "No quoting or escaping of arguments is done on Windows. Ignored on Unix. This is set to `true` automatically when `shell` is specified."
                        },
                        {
                          "textRaw": "`windowsHide` {boolean} Hide the subprocess console window that would normally be created on Windows systems. **Default:** `false`. ",
                          "name": "windowsHide",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "Hide the subprocess console window that would normally be created on Windows systems."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "command"
                    },
                    {
                      "name": "args",
                      "optional": true
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>child_process.spawnSync()</code> method is generally identical to\n<a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> with the exception that the function will not return\nuntil the child process has fully closed. When a timeout has been encountered\nand <code>killSignal</code> is sent, the method won&#39;t return until the process has\ncompletely exited. Note that if the process intercepts and handles the\n<code>SIGTERM</code> signal and doesn&#39;t exit, the parent process will wait until the child\nprocess has exited.</p>\n<p><strong>If the <code>shell</code> option is enabled, do not pass unsanitized user input to this\nfunction. Any input containing shell metacharacters may be used to trigger\narbitrary command execution.</strong></p>\n"
            }
          ],
          "type": "module",
          "displayName": "Synchronous Process Creation"
        },
        {
          "textRaw": "`maxBuffer` and Unicode",
          "name": "`maxbuffer`_and_unicode",
          "desc": "<p>The <code>maxBuffer</code> option specifies the largest number of bytes allowed on <code>stdout</code>\nor <code>stderr</code>. If this value is exceeded, then the child process is terminated.\nThis impacts output that includes multibyte character encodings such as UTF-8 or\nUTF-16. For instance, <code>console.log(&#39;中文测试&#39;)</code> will send 13 UTF-8 encoded bytes\nto <code>stdout</code> although there are only 4 characters.</p>\n",
          "type": "module",
          "displayName": "`maxBuffer` and Unicode"
        },
        {
          "textRaw": "Shell Requirements",
          "name": "shell_requirements",
          "desc": "<p>The shell should understand the <code>-c</code> switch on UNIX or <code>/d /s /c</code> on Windows.\nOn Windows, command line parsing should be compatible with <code>&#39;cmd.exe&#39;</code>.</p>\n",
          "type": "module",
          "displayName": "Shell Requirements"
        },
        {
          "textRaw": "Default Windows Shell",
          "name": "default_windows_shell",
          "desc": "<p>Although Microsoft specifies <code>%COMSPEC%</code> must contain the path to\n<code>&#39;cmd.exe&#39;</code> in the root environment, child processes are not always subject to\nthe same requirement. Thus, in <code>child_process</code> functions where a shell can be\nspawned, <code>&#39;cmd.exe&#39;</code> is used as a fallback if <code>process.env.ComSpec</code> is\nunavailable.</p>\n<!-- [end-include:child_process.md] -->\n<!-- [start-include:cluster.md] -->\n",
          "type": "module",
          "displayName": "Default Windows Shell"
        }
      ],
      "classes": [
        {
          "textRaw": "Class: ChildProcess",
          "type": "class",
          "name": "ChildProcess",
          "meta": {
            "added": [
              "v2.2.0"
            ],
            "changes": []
          },
          "desc": "<p>Instances of the <code>ChildProcess</code> class are <a href=\"events.html\"><code>EventEmitters</code></a> that represent\nspawned child processes.</p>\n<p>Instances of <code>ChildProcess</code> are not intended to be created directly. Rather,\nuse the <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a>, <a href=\"#child_process_child_process_exec_command_options_callback\"><code>child_process.exec()</code></a>,\n<a href=\"#child_process_child_process_execfile_file_args_options_callback\"><code>child_process.execFile()</code></a>, or <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a> methods to create\ninstances of <code>ChildProcess</code>.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "meta": {
                "added": [
                  "v0.7.7"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>The <code>&#39;close&#39;</code> event is emitted when the stdio streams of a child process have\nbeen closed. This is distinct from the <a href=\"#process_event_exit\"><code>&#39;exit&#39;</code></a> event, since multiple\nprocesses might share the same stdio streams.</p>\n"
            },
            {
              "textRaw": "Event: 'disconnect'",
              "type": "event",
              "name": "disconnect",
              "meta": {
                "added": [
                  "v0.7.2"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;disconnect&#39;</code> event is emitted after calling the\n<a href=\"#child_process_subprocess_disconnect\"><code>subprocess.disconnect()</code></a> method in parent process or\n<a href=\"process.html#process_process_disconnect\"><code>process.disconnect()</code></a> in child process. After disconnecting it is no longer\npossible to send or receive messages, and the <a href=\"#child_process_subprocess_connected\"><code>subprocess.connected</code></a>\nproperty is <code>false</code>.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "params": [],
              "desc": "<p>The <code>&#39;error&#39;</code> event is emitted whenever:</p>\n<ol>\n<li>The process could not be spawned, or</li>\n<li>The process could not be killed, or</li>\n<li>Sending a message to the child process failed.</li>\n</ol>\n<p>The <code>&#39;exit&#39;</code> event may or may not fire after an error has occurred. When\nlistening to both the <code>&#39;exit&#39;</code> and <code>&#39;error&#39;</code> events, it is important to guard\nagainst accidentally invoking handler functions multiple times.</p>\n<p>See also <a href=\"child_process.html#child_process_subprocess_kill_signal\"><code>subprocess.kill()</code></a> and <a href=\"child_process.html#child_process_subprocess_send_message_sendhandle_options_callback\"><code>subprocess.send()</code></a>.</p>\n"
            },
            {
              "textRaw": "Event: 'exit'",
              "type": "event",
              "name": "exit",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>The <code>&#39;exit&#39;</code> event is emitted after the child process ends. If the process\nexited, <code>code</code> is the final exit code of the process, otherwise <code>null</code>. If the\nprocess terminated due to receipt of a signal, <code>signal</code> is the string name of\nthe signal, otherwise <code>null</code>. One of the two will always be non-null.</p>\n<p>Note that when the <code>&#39;exit&#39;</code> event is triggered, child process stdio streams\nmight still be open.</p>\n<p>Also, note that Node.js establishes signal handlers for <code>SIGINT</code> and\n<code>SIGTERM</code> and Node.js processes will not terminate immediately due to receipt\nof those signals. Rather, Node.js will perform a sequence of cleanup actions\nand then will re-raise the handled signal.</p>\n<p>See waitpid(2).</p>\n"
            },
            {
              "textRaw": "Event: 'message'",
              "type": "event",
              "name": "message",
              "meta": {
                "added": [
                  "v0.5.9"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>The <code>&#39;message&#39;</code> event is triggered when a child process uses <a href=\"process.html#process_process_send_message_sendhandle_options_callback\"><code>process.send()</code></a>\nto send messages.</p>\n<p>The message goes through serialization and parsing. The resulting\nmessage might not be the same as what is originally sent.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`channel` {Object} A pipe representing the IPC channel to the child process. ",
              "type": "Object",
              "name": "channel",
              "meta": {
                "added": [
                  "v7.1.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>subprocess.channel</code> property is a reference to the child&#39;s IPC channel. If\nno IPC channel currently exists, this property is <code>undefined</code>.</p>\n",
              "shortDesc": "A pipe representing the IPC channel to the child process."
            },
            {
              "textRaw": "`connected` {boolean} Set to `false` after `subprocess.disconnect()` is called. ",
              "type": "boolean",
              "name": "connected",
              "meta": {
                "added": [
                  "v0.7.2"
                ],
                "changes": []
              },
              "desc": "<p>The <code>subprocess.connected</code> property indicates whether it is still possible to\nsend and receive messages from a child process. When <code>subprocess.connected</code> is\n<code>false</code>, it is no longer possible to send or receive messages.</p>\n",
              "shortDesc": "Set to `false` after `subprocess.disconnect()` is called."
            },
            {
              "textRaw": "`killed` {boolean} Set to `true` after `subprocess.kill()` is used to successfully send a signal to the child process. ",
              "type": "boolean",
              "name": "killed",
              "meta": {
                "added": [
                  "v0.5.10"
                ],
                "changes": []
              },
              "desc": "<p>The <code>subprocess.killed</code> property indicates whether the child process\nsuccessfully received a signal from <code>subprocess.kill()</code>. The <code>killed</code> property\ndoes not indicate that the child process has been terminated.</p>\n",
              "shortDesc": "Set to `true` after `subprocess.kill()` is used to successfully send a signal to the child process."
            },
            {
              "textRaw": "`pid` {integer} ",
              "type": "integer",
              "name": "pid",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "desc": "<p>Returns the process identifier (PID) of the child process.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const { spawn } = require(&#39;child_process&#39;);\nconst grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\n\nconsole.log(`Spawned child pid: ${grep.pid}`);\ngrep.stdin.end();\n</code></pre>\n"
            },
            {
              "textRaw": "`stderr` {stream.Readable} ",
              "type": "stream.Readable",
              "name": "stderr",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "desc": "<p>A <code>Readable Stream</code> that represents the child process&#39;s <code>stderr</code>.</p>\n<p>If the child was spawned with <code>stdio[2]</code> set to anything other than <code>&#39;pipe&#39;</code>,\nthen this will be <code>null</code>.</p>\n<p><code>subprocess.stderr</code> is an alias for <code>subprocess.stdio[2]</code>. Both properties will\nrefer to the same value.</p>\n"
            },
            {
              "textRaw": "`stdin` {stream.Writable} ",
              "type": "stream.Writable",
              "name": "stdin",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "desc": "<p>A <code>Writable Stream</code> that represents the child process&#39;s <code>stdin</code>.</p>\n<p><em>Note that if a child process waits to read all of its input, the child will not\ncontinue until this stream has been closed via <code>end()</code>.</em></p>\n<p>If the child was spawned with <code>stdio[0]</code> set to anything other than <code>&#39;pipe&#39;</code>,\nthen this will be <code>null</code>.</p>\n<p><code>subprocess.stdin</code> is an alias for <code>subprocess.stdio[0]</code>. Both properties will\nrefer to the same value.</p>\n"
            },
            {
              "textRaw": "`stdio` {Array} ",
              "type": "Array",
              "name": "stdio",
              "meta": {
                "added": [
                  "v0.7.10"
                ],
                "changes": []
              },
              "desc": "<p>A sparse array of pipes to the child process, corresponding with positions in\nthe <a href=\"#child_process_options_stdio\"><code>stdio</code></a> option passed to <a href=\"#child_process_child_process_spawn_command_args_options\"><code>child_process.spawn()</code></a> that have been set\nto the value <code>&#39;pipe&#39;</code>. Note that <code>subprocess.stdio[0]</code>, <code>subprocess.stdio[1]</code>,\nand <code>subprocess.stdio[2]</code> are also available as <code>subprocess.stdin</code>,\n<code>subprocess.stdout</code>, and <code>subprocess.stderr</code>, respectively.</p>\n<p>In the following example, only the child&#39;s fd <code>1</code> (stdout) is configured as a\npipe, so only the parent&#39;s <code>subprocess.stdio[1]</code> is a stream, all other values\nin the array are <code>null</code>.</p>\n<pre><code class=\"lang-js\">const assert = require(&#39;assert&#39;);\nconst fs = require(&#39;fs&#39;);\nconst child_process = require(&#39;child_process&#39;);\n\nconst subprocess = child_process.spawn(&#39;ls&#39;, {\n  stdio: [\n    0, // Use parent&#39;s stdin for child\n    &#39;pipe&#39;, // Pipe child&#39;s stdout to parent\n    fs.openSync(&#39;err.out&#39;, &#39;w&#39;) // Direct child&#39;s stderr to a file\n  ]\n});\n\nassert.strictEqual(subprocess.stdio[0], null);\nassert.strictEqual(subprocess.stdio[0], subprocess.stdin);\n\nassert(subprocess.stdout);\nassert.strictEqual(subprocess.stdio[1], subprocess.stdout);\n\nassert.strictEqual(subprocess.stdio[2], null);\nassert.strictEqual(subprocess.stdio[2], subprocess.stderr);\n</code></pre>\n"
            },
            {
              "textRaw": "`stdout` {stream.Readable} ",
              "type": "stream.Readable",
              "name": "stdout",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "desc": "<p>A <code>Readable Stream</code> that represents the child process&#39;s <code>stdout</code>.</p>\n<p>If the child was spawned with <code>stdio[1]</code> set to anything other than <code>&#39;pipe&#39;</code>,\nthen this will be <code>null</code>.</p>\n<p><code>subprocess.stdout</code> is an alias for <code>subprocess.stdio[1]</code>. Both properties will\nrefer to the same value.</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "subprocess.disconnect()",
              "type": "method",
              "name": "disconnect",
              "meta": {
                "added": [
                  "v0.7.2"
                ],
                "changes": []
              },
              "desc": "<p>Closes the IPC channel between parent and child, allowing the child to exit\ngracefully once there are no other connections keeping it alive. After calling\nthis method the <code>subprocess.connected</code> and <code>process.connected</code> properties in\nboth the parent and child (respectively) will be set to <code>false</code>, and it will be\nno longer possible to pass messages between the processes.</p>\n<p>The <code>&#39;disconnect&#39;</code> event will be emitted when there are no messages in the\nprocess of being received. This will most often be triggered immediately after\ncalling <code>subprocess.disconnect()</code>.</p>\n<p>Note that when the child process is a Node.js instance (e.g. spawned using\n<a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>), the <code>process.disconnect()</code> method can be invoked\nwithin the child process to close the IPC channel as well.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "subprocess.kill([signal])",
              "type": "method",
              "name": "kill",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`signal` {string} ",
                      "name": "signal",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "signal",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>subprocess.kill()</code> method sends a signal to the child process. If no\nargument is given, the process will be sent the <code>&#39;SIGTERM&#39;</code> signal. See\nsignal(7) for a list of available signals.</p>\n<pre><code class=\"lang-js\">const { spawn } = require(&#39;child_process&#39;);\nconst grep = spawn(&#39;grep&#39;, [&#39;ssh&#39;]);\n\ngrep.on(&#39;close&#39;, (code, signal) =&gt; {\n  console.log(\n    `child process terminated due to receipt of signal ${signal}`);\n});\n\n// Send SIGHUP to process\ngrep.kill(&#39;SIGHUP&#39;);\n</code></pre>\n<p>The <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> object may emit an <a href=\"#net_event_error_1\"><code>&#39;error&#39;</code></a> event if the signal cannot be\ndelivered. Sending a signal to a child process that has already exited is not\nan error but may have unforeseen consequences. Specifically, if the process\nidentifier (PID) has been reassigned to another process, the signal will be\ndelivered to that process instead which can have unexpected results.</p>\n<p>Note that while the function is called <code>kill</code>, the signal delivered to the\nchild process may not actually terminate the process.</p>\n<p>See kill(2) for reference.</p>\n<p>Also note: on Linux, child processes of child processes will not be terminated\nwhen attempting to kill their parent. This is likely to happen when running a\nnew process in a shell or with use of the <code>shell</code> option of <code>ChildProcess</code>, such\nas in this example:</p>\n<pre><code class=\"lang-js\">&#39;use strict&#39;;\nconst { spawn } = require(&#39;child_process&#39;);\n\nconst subprocess = spawn(\n  &#39;sh&#39;,\n  [\n    &#39;-c&#39;,\n    `node -e &quot;setInterval(() =&gt; {\n      console.log(process.pid, &#39;is alive&#39;)\n    }, 500);&quot;`\n  ], {\n    stdio: [&#39;inherit&#39;, &#39;inherit&#39;, &#39;inherit&#39;]\n  }\n);\n\nsetTimeout(() =&gt; {\n  subprocess.kill(); // does not terminate the node process in the shell\n}, 2000);\n</code></pre>\n"
            },
            {
              "textRaw": "subprocess.send(message[, sendHandle[, options]][, callback])",
              "type": "method",
              "name": "send",
              "meta": {
                "added": [
                  "v0.5.9"
                ],
                "changes": [
                  {
                    "version": "v5.8.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5283",
                    "description": "The `options` parameter, and the `keepOpen` option in particular, is supported now."
                  },
                  {
                    "version": "v5.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/3516",
                    "description": "This method returns a boolean for flow control now."
                  },
                  {
                    "version": "v4.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/2620",
                    "description": "The `callback` parameter is supported now."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`message` {Object} ",
                      "name": "message",
                      "type": "Object"
                    },
                    {
                      "textRaw": "`sendHandle` {Handle} ",
                      "name": "sendHandle",
                      "type": "Handle",
                      "optional": true
                    },
                    {
                      "textRaw": "`options` {Object} The `options` argument, if present, is an object used to parameterize the sending of certain types of handles. `options` supports the following properties: ",
                      "options": [
                        {
                          "textRaw": "`keepOpen` {boolean} A value that can be used when passing instances of `net.Socket`. When `true`, the socket is kept open in the sending process. **Default:** `false`. ",
                          "name": "keepOpen",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "A value that can be used when passing instances of `net.Socket`. When `true`, the socket is kept open in the sending process."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "desc": "The `options` argument, if present, is an object used to parameterize the sending of certain types of handles. `options` supports the following properties:",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "message"
                    },
                    {
                      "name": "sendHandle",
                      "optional": true
                    },
                    {
                      "name": "options",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>When an IPC channel has been established between the parent and child (\ni.e. when using <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>), the <code>subprocess.send()</code> method can\nbe used to send messages to the child process. When the child process is a\nNode.js instance, these messages can be received via the <a href=\"child_process.html#child_process_event_message\"><code>&#39;message&#39;</code></a> event.</p>\n<p>The message goes through serialization and parsing. The resulting\nmessage might not be the same as what is originally sent.</p>\n<p>For example, in the parent script:</p>\n<pre><code class=\"lang-js\">const cp = require(&#39;child_process&#39;);\nconst n = cp.fork(`${__dirname}/sub.js`);\n\nn.on(&#39;message&#39;, (m) =&gt; {\n  console.log(&#39;PARENT got message:&#39;, m);\n});\n\n// Causes the child to print: CHILD got message: { hello: &#39;world&#39; }\nn.send({ hello: &#39;world&#39; });\n</code></pre>\n<p>And then the child script, <code>&#39;sub.js&#39;</code> might look like this:</p>\n<pre><code class=\"lang-js\">process.on(&#39;message&#39;, (m) =&gt; {\n  console.log(&#39;CHILD got message:&#39;, m);\n});\n\n// Causes the parent to print: PARENT got message: { foo: &#39;bar&#39;, baz: null }\nprocess.send({ foo: &#39;bar&#39;, baz: NaN });\n</code></pre>\n<p>Child Node.js processes will have a <a href=\"process.html#process_process_send_message_sendhandle_options_callback\"><code>process.send()</code></a> method of their own that\nallows the child to send messages back to the parent.</p>\n<p>There is a special case when sending a <code>{cmd: &#39;NODE_foo&#39;}</code> message. Messages\ncontaining a <code>NODE_</code> prefix in the <code>cmd</code> property are reserved for use within\nNode.js core and will not be emitted in the child&#39;s <a href=\"child_process.html#child_process_event_message\"><code>&#39;message&#39;</code></a>\nevent. Rather, such messages are emitted using the\n<code>&#39;internalMessage&#39;</code> event and are consumed internally by Node.js.\nApplications should avoid using such messages or listening for\n<code>&#39;internalMessage&#39;</code> events as it is subject to change without notice.</p>\n<p>The optional <code>sendHandle</code> argument that may be passed to <code>subprocess.send()</code> is\nfor passing a TCP server or socket object to the child process. The child will\nreceive the object as the second argument passed to the callback function\nregistered on the <a href=\"child_process.html#child_process_event_message\"><code>&#39;message&#39;</code></a> event. Any data that is received\nand buffered in the socket will not be sent to the child.</p>\n<p>The optional <code>callback</code> is a function that is invoked after the message is\nsent but before the child may have received it. The function is called with a\nsingle argument: <code>null</code> on success, or an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object on failure.</p>\n<p>If no <code>callback</code> function is provided and the message cannot be sent, an\n<code>&#39;error&#39;</code> event will be emitted by the <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> object. This can happen,\nfor instance, when the child process has already exited.</p>\n<p><code>subprocess.send()</code> will return <code>false</code> if the channel has closed or when the\nbacklog of unsent messages exceeds a threshold that makes it unwise to send\nmore. Otherwise, the method returns <code>true</code>. The <code>callback</code> function can be\nused to implement flow control.</p>\n<h4>Example: sending a server object</h4>\n<p>The <code>sendHandle</code> argument can be used, for instance, to pass the handle of\na TCP server object to the child process as illustrated in the example below:</p>\n<pre><code class=\"lang-js\">const subprocess = require(&#39;child_process&#39;).fork(&#39;subprocess.js&#39;);\n\n// Open up the server object and send the handle.\nconst server = require(&#39;net&#39;).createServer();\nserver.on(&#39;connection&#39;, (socket) =&gt; {\n  socket.end(&#39;handled by parent&#39;);\n});\nserver.listen(1337, () =&gt; {\n  subprocess.send(&#39;server&#39;, server);\n});\n</code></pre>\n<p>The child would then receive the server object as:</p>\n<pre><code class=\"lang-js\">process.on(&#39;message&#39;, (m, server) =&gt; {\n  if (m === &#39;server&#39;) {\n    server.on(&#39;connection&#39;, (socket) =&gt; {\n      socket.end(&#39;handled by child&#39;);\n    });\n  }\n});\n</code></pre>\n<p>Once the server is now shared between the parent and child, some connections\ncan be handled by the parent and some by the child.</p>\n<p>While the example above uses a server created using the <code>net</code> module, <code>dgram</code>\nmodule servers use exactly the same workflow with the exceptions of listening on\na <code>&#39;message&#39;</code> event instead of <code>&#39;connection&#39;</code> and using <code>server.bind()</code> instead of\n<code>server.listen()</code>. This is, however, currently only supported on UNIX platforms.</p>\n<h4>Example: sending a socket object</h4>\n<p>Similarly, the <code>sendHandler</code> argument can be used to pass the handle of a\nsocket to the child process. The example below spawns two children that each\nhandle connections with &quot;normal&quot; or &quot;special&quot; priority:</p>\n<pre><code class=\"lang-js\">const { fork } = require(&#39;child_process&#39;);\nconst normal = fork(&#39;subprocess.js&#39;, [&#39;normal&#39;]);\nconst special = fork(&#39;subprocess.js&#39;, [&#39;special&#39;]);\n\n// Open up the server and send sockets to child. Use pauseOnConnect to prevent\n// the sockets from being read before they are sent to the child process.\nconst server = require(&#39;net&#39;).createServer({ pauseOnConnect: true });\nserver.on(&#39;connection&#39;, (socket) =&gt; {\n\n  // If this is special priority\n  if (socket.remoteAddress === &#39;74.125.127.100&#39;) {\n    special.send(&#39;socket&#39;, socket);\n    return;\n  }\n  // This is normal priority\n  normal.send(&#39;socket&#39;, socket);\n});\nserver.listen(1337);\n</code></pre>\n<p>The <code>subprocess.js</code> would receive the socket handle as the second argument\npassed to the event callback function:</p>\n<pre><code class=\"lang-js\">process.on(&#39;message&#39;, (m, socket) =&gt; {\n  if (m === &#39;socket&#39;) {\n    if (socket) {\n      // Check that the client socket exists.\n      // It is possible for the socket to be closed between the time it is\n      // sent and the time it is received in the child process.\n      socket.end(`Request handled with ${process.argv[2]} priority`);\n    }\n  }\n});\n</code></pre>\n<p>Once a socket has been passed to a child, the parent is no longer capable of\ntracking when the socket is destroyed. To indicate this, the <code>.connections</code>\nproperty becomes <code>null</code>. It is recommended not to use <code>.maxConnections</code> when\nthis occurs.</p>\n<p>It is also recommended that any <code>&#39;message&#39;</code> handlers in the child process\nverify that <code>socket</code> exists, as the connection may have been closed during the\ntime it takes to send the connection to the child.</p>\n"
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Child Process"
    },
    {
      "textRaw": "Cluster",
      "name": "cluster",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>A single instance of Node.js runs in a single thread. To take advantage of\nmulti-core systems, the user will sometimes want to launch a cluster of Node.js\nprocesses to handle the load.</p>\n<p>The cluster module allows easy creation of child processes that all share\nserver ports.</p>\n<pre><code class=\"lang-js\">const cluster = require(&#39;cluster&#39;);\nconst http = require(&#39;http&#39;);\nconst numCPUs = require(&#39;os&#39;).cpus().length;\n\nif (cluster.isMaster) {\n  console.log(`Master ${process.pid} is running`);\n\n  // Fork workers.\n  for (let i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer((req, res) =&gt; {\n    res.writeHead(200);\n    res.end(&#39;hello world\\n&#39;);\n  }).listen(8000);\n\n  console.log(`Worker ${process.pid} started`);\n}\n</code></pre>\n<p>Running Node.js will now share port 8000 between the workers:</p>\n<pre><code class=\"lang-txt\">$ node server.js\nMaster 3596 is running\nWorker 4324 started\nWorker 4520 started\nWorker 6056 started\nWorker 5644 started\n</code></pre>\n<p>Please note that on Windows, it is not yet possible to set up a named pipe\nserver in a worker.</p>\n",
      "miscs": [
        {
          "textRaw": "How It Works",
          "name": "How It Works",
          "type": "misc",
          "desc": "<p>The worker processes are spawned using the <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a> method,\nso that they can communicate with the parent via IPC and pass server\nhandles back and forth.</p>\n<p>The cluster module supports two methods of distributing incoming\nconnections.</p>\n<p>The first one (and the default one on all platforms except Windows),\nis the round-robin approach, where the master process listens on a\nport, accepts new connections and distributes them across the workers\nin a round-robin fashion, with some built-in smarts to avoid\noverloading a worker process.</p>\n<p>The second approach is where the master process creates the listen\nsocket and sends it to interested workers. The workers then accept\nincoming connections directly.</p>\n<p>The second approach should, in theory, give the best performance.\nIn practice however, distribution tends to be very unbalanced due\nto operating system scheduler vagaries. Loads have been observed\nwhere over 70% of all connections ended up in just two processes,\nout of a total of eight.</p>\n<p>Because <code>server.listen()</code> hands off most of the work to the master\nprocess, there are three cases where the behavior between a normal\nNode.js process and a cluster worker differs:</p>\n<ol>\n<li><code>server.listen({fd: 7})</code> Because the message is passed to the master,\nfile descriptor 7 <strong>in the parent</strong> will be listened on, and the\nhandle passed to the worker, rather than listening to the worker&#39;s\nidea of what the number 7 file descriptor references.</li>\n<li><code>server.listen(handle)</code> Listening on handles explicitly will cause\nthe worker to use the supplied handle, rather than talk to the master\nprocess.</li>\n<li><code>server.listen(0)</code> Normally, this will cause servers to listen on a\nrandom port.  However, in a cluster, each worker will receive the\nsame &quot;random&quot; port each time they do <code>listen(0)</code>. In essence, the\nport is random the first time, but predictable thereafter. To listen\non a unique port, generate a port number based on the cluster worker ID.</li>\n</ol>\n<p>Node.js does not provide routing logic. It is, therefore important to design an\napplication such that it does not rely too heavily on in-memory data objects for\nthings like sessions and login.</p>\n<p>Because workers are all separate processes, they can be killed or\nre-spawned depending on a program&#39;s needs, without affecting other\nworkers. As long as there are some workers still alive, the server will\ncontinue to accept connections. If no workers are alive, existing connections\nwill be dropped and new connections will be refused. Node.js does not\nautomatically manage the number of workers, however. It is the application&#39;s\nresponsibility to manage the worker pool based on its own needs.</p>\n<p>Although a primary use case for the <code>cluster</code> module is networking, it can\nalso be used for other use cases requiring worker processes.</p>\n"
        }
      ],
      "classes": [
        {
          "textRaw": "Class: Worker",
          "type": "class",
          "name": "Worker",
          "meta": {
            "added": [
              "v0.7.0"
            ],
            "changes": []
          },
          "desc": "<p>A <code>Worker</code> object contains all public information and method about a worker.\nIn the master it can be obtained using <code>cluster.workers</code>. In a worker\nit can be obtained using <code>cluster.worker</code>.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'disconnect'",
              "type": "event",
              "name": "disconnect",
              "meta": {
                "added": [
                  "v0.7.7"
                ],
                "changes": []
              },
              "desc": "<p>Similar to the <code>cluster.on(&#39;disconnect&#39;)</code> event, but specific to this worker.</p>\n<pre><code class=\"lang-js\">cluster.fork().on(&#39;disconnect&#39;, () =&gt; {\n  // Worker has disconnected\n});\n</code></pre>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "meta": {
                "added": [
                  "v0.7.3"
                ],
                "changes": []
              },
              "desc": "<p>This event is the same as the one provided by <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>.</p>\n<p>Within a worker, <code>process.on(&#39;error&#39;)</code> may also be used.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'exit'",
              "type": "event",
              "name": "exit",
              "meta": {
                "added": [
                  "v0.11.2"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Similar to the <code>cluster.on(&#39;exit&#39;)</code> event, but specific to this worker.</p>\n<pre><code class=\"lang-js\">const worker = cluster.fork();\nworker.on(&#39;exit&#39;, (code, signal) =&gt; {\n  if (signal) {\n    console.log(`worker was killed by signal: ${signal}`);\n  } else if (code !== 0) {\n    console.log(`worker exited with error code: ${code}`);\n  } else {\n    console.log(&#39;worker success!&#39;);\n  }\n});\n</code></pre>\n"
            },
            {
              "textRaw": "Event: 'listening'",
              "type": "event",
              "name": "listening",
              "meta": {
                "added": [
                  "v0.7.0"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Similar to the <code>cluster.on(&#39;listening&#39;)</code> event, but specific to this worker.</p>\n<pre><code class=\"lang-js\">cluster.fork().on(&#39;listening&#39;, (address) =&gt; {\n  // Worker is listening\n});\n</code></pre>\n<p>It is not emitted in the worker.</p>\n"
            },
            {
              "textRaw": "Event: 'message'",
              "type": "event",
              "name": "message",
              "meta": {
                "added": [
                  "v0.7.0"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Similar to the <code>&#39;message&#39;</code> event of <code>cluster</code>, but specific to this worker.</p>\n<p>Within a worker, <code>process.on(&#39;message&#39;)</code> may also be used.</p>\n<p>See <a href=\"process.html#process_event_message\"><code>process</code> event: <code>&#39;message&#39;</code></a>.</p>\n<p>As an example, here is a cluster that keeps count of the number of requests\nin the master process using the message system:</p>\n<pre><code class=\"lang-js\">const cluster = require(&#39;cluster&#39;);\nconst http = require(&#39;http&#39;);\n\nif (cluster.isMaster) {\n\n  // Keep track of http requests\n  let numReqs = 0;\n  setInterval(() =&gt; {\n    console.log(`numReqs = ${numReqs}`);\n  }, 1000);\n\n  // Count requests\n  function messageHandler(msg) {\n    if (msg.cmd &amp;&amp; msg.cmd === &#39;notifyRequest&#39;) {\n      numReqs += 1;\n    }\n  }\n\n  // Start workers and listen for messages containing notifyRequest\n  const numCPUs = require(&#39;os&#39;).cpus().length;\n  for (let i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  for (const id in cluster.workers) {\n    cluster.workers[id].on(&#39;message&#39;, messageHandler);\n  }\n\n} else {\n\n  // Worker processes have a http server.\n  http.Server((req, res) =&gt; {\n    res.writeHead(200);\n    res.end(&#39;hello world\\n&#39;);\n\n    // notify master about the request\n    process.send({ cmd: &#39;notifyRequest&#39; });\n  }).listen(8000);\n}\n</code></pre>\n"
            },
            {
              "textRaw": "Event: 'online'",
              "type": "event",
              "name": "online",
              "meta": {
                "added": [
                  "v0.7.0"
                ],
                "changes": []
              },
              "desc": "<p>Similar to the <code>cluster.on(&#39;online&#39;)</code> event, but specific to this worker.</p>\n<pre><code class=\"lang-js\">cluster.fork().on(&#39;online&#39;, () =&gt; {\n  // Worker is online\n});\n</code></pre>\n<p>It is not emitted in the worker.</p>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "worker.disconnect()",
              "type": "method",
              "name": "disconnect",
              "meta": {
                "added": [
                  "v0.7.7"
                ],
                "changes": [
                  {
                    "version": "v7.3.0",
                    "pr-url": "https://github.com/nodejs/node/pull/10019",
                    "description": "This method now returns a reference to `worker`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {cluster.Worker} A reference to `worker`. ",
                    "name": "return",
                    "type": "cluster.Worker",
                    "desc": "A reference to `worker`."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>In a worker, this function will close all servers, wait for the <code>&#39;close&#39;</code> event\non those servers, and then disconnect the IPC channel.</p>\n<p>In the master, an internal message is sent to the worker causing it to call\n<code>.disconnect()</code> on itself.</p>\n<p>Causes <code>.exitedAfterDisconnect</code> to be set.</p>\n<p>Note that after a server is closed, it will no longer accept new connections,\nbut connections may be accepted by any other listening worker. Existing\nconnections will be allowed to close as usual. When no more connections exist,\nsee <a href=\"#net_server_close_callback\"><code>server.close()</code></a>, the IPC channel to the worker will close allowing it\nto die gracefully.</p>\n<p>The above applies <em>only</em> to server connections, client connections are not\nautomatically closed by workers, and disconnect does not wait for them to close\nbefore exiting.</p>\n<p>Note that in a worker, <code>process.disconnect</code> exists, but it is not this function,\nit is <a href=\"child_process.html#child_process_subprocess_disconnect\"><code>disconnect</code></a>.</p>\n<p>Because long living server connections may block workers from disconnecting, it\nmay be useful to send a message, so application specific actions may be taken to\nclose them. It also may be useful to implement a timeout, killing a worker if\nthe <code>&#39;disconnect&#39;</code> event has not been emitted after some time.</p>\n<pre><code class=\"lang-js\">if (cluster.isMaster) {\n  const worker = cluster.fork();\n  let timeout;\n\n  worker.on(&#39;listening&#39;, (address) =&gt; {\n    worker.send(&#39;shutdown&#39;);\n    worker.disconnect();\n    timeout = setTimeout(() =&gt; {\n      worker.kill();\n    }, 2000);\n  });\n\n  worker.on(&#39;disconnect&#39;, () =&gt; {\n    clearTimeout(timeout);\n  });\n\n} else if (cluster.isWorker) {\n  const net = require(&#39;net&#39;);\n  const server = net.createServer((socket) =&gt; {\n    // connections never end\n  });\n\n  server.listen(8000);\n\n  process.on(&#39;message&#39;, (msg) =&gt; {\n    if (msg === &#39;shutdown&#39;) {\n      // initiate graceful close of any connections to server\n    }\n  });\n}\n</code></pre>\n"
            },
            {
              "textRaw": "worker.isConnected()",
              "type": "method",
              "name": "isConnected",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": []
              },
              "desc": "<p>This function returns <code>true</code> if the worker is connected to its master via its\nIPC channel, <code>false</code> otherwise. A worker is connected to its master after it\nhas been created. It is disconnected after the <code>&#39;disconnect&#39;</code> event is emitted.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "worker.isDead()",
              "type": "method",
              "name": "isDead",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": []
              },
              "desc": "<p>This function returns <code>true</code> if the worker&#39;s process has terminated (either\nbecause of exiting or being signaled). Otherwise, it returns <code>false</code>.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "worker.kill([signal='SIGTERM'])",
              "type": "method",
              "name": "kill",
              "meta": {
                "added": [
                  "v0.9.12"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`signal` {string} Name of the kill signal to send to the worker process. ",
                      "name": "signal",
                      "type": "string",
                      "desc": "Name of the kill signal to send to the worker process.",
                      "optional": true,
                      "default": "'SIGTERM'"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "signal",
                      "optional": true,
                      "default": "'SIGTERM'"
                    }
                  ]
                }
              ],
              "desc": "<p>This function will kill the worker. In the master, it does this by disconnecting\nthe <code>worker.process</code>, and once disconnected, killing with <code>signal</code>. In the\nworker, it does it by disconnecting the channel, and then exiting with code <code>0</code>.</p>\n<p>Causes <code>.exitedAfterDisconnect</code> to be set.</p>\n<p>This method is aliased as <code>worker.destroy()</code> for backwards compatibility.</p>\n<p>Note that in a worker, <code>process.kill()</code> exists, but it is not this function,\nit is <a href=\"process.html#process_process_kill_pid_signal\"><code>kill</code></a>.</p>\n"
            },
            {
              "textRaw": "worker.send(message[, sendHandle][, callback])",
              "type": "method",
              "name": "send",
              "meta": {
                "added": [
                  "v0.7.0"
                ],
                "changes": [
                  {
                    "version": "v4.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/2620",
                    "description": "The `callback` parameter is supported now."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`message` {Object} ",
                      "name": "message",
                      "type": "Object"
                    },
                    {
                      "textRaw": "`sendHandle` {Handle} ",
                      "name": "sendHandle",
                      "type": "Handle",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "message"
                    },
                    {
                      "name": "sendHandle",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Send a message to a worker or master, optionally with a handle.</p>\n<p>In the master this sends a message to a specific worker. It is identical to\n<a href=\"child_process.html#child_process_subprocess_send_message_sendhandle_options_callback\"><code>ChildProcess.send()</code></a>.</p>\n<p>In a worker this sends a message to the master. It is identical to\n<code>process.send()</code>.</p>\n<p>This example will echo back all messages from the master:</p>\n<pre><code class=\"lang-js\">if (cluster.isMaster) {\n  const worker = cluster.fork();\n  worker.send(&#39;hi there&#39;);\n\n} else if (cluster.isWorker) {\n  process.on(&#39;message&#39;, (msg) =&gt; {\n    process.send(msg);\n  });\n}\n</code></pre>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`exitedAfterDisconnect` {boolean} ",
              "type": "boolean",
              "name": "exitedAfterDisconnect",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Set by calling <code>.kill()</code> or <code>.disconnect()</code>. Until then, it is <code>undefined</code>.</p>\n<p>The boolean <a href=\"cluster.html#cluster_worker_exitedafterdisconnect\"><code>worker.exitedAfterDisconnect</code></a> allows distinguishing between\nvoluntary and accidental exit, the master may choose not to respawn a worker\nbased on this value.</p>\n<pre><code class=\"lang-js\">cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  if (worker.exitedAfterDisconnect === true) {\n    console.log(&#39;Oh, it was just voluntary – no need to worry&#39;);\n  }\n});\n\n// kill worker\nworker.kill();\n</code></pre>\n"
            },
            {
              "textRaw": "`id` {number} ",
              "type": "number",
              "name": "id",
              "meta": {
                "added": [
                  "v0.8.0"
                ],
                "changes": []
              },
              "desc": "<p>Each new worker is given its own unique id, this id is stored in the\n<code>id</code>.</p>\n<p>While a worker is alive, this is the key that indexes it in\n<code>cluster.workers</code>.</p>\n"
            },
            {
              "textRaw": "`process` {ChildProcess} ",
              "type": "ChildProcess",
              "name": "process",
              "meta": {
                "added": [
                  "v0.7.0"
                ],
                "changes": []
              },
              "desc": "<p>All workers are created using <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>, the returned object\nfrom this function is stored as <code>.process</code>. In a worker, the global <code>process</code>\nis stored.</p>\n<p>See: <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\">Child Process module</a>.</p>\n<p>Note that workers will call <code>process.exit(0)</code> if the <code>&#39;disconnect&#39;</code> event occurs\non <code>process</code> and <code>.exitedAfterDisconnect</code> is not <code>true</code>. This protects against\naccidental disconnection.</p>\n"
            }
          ]
        }
      ],
      "events": [
        {
          "textRaw": "Event: 'disconnect'",
          "type": "event",
          "name": "disconnect",
          "meta": {
            "added": [
              "v0.7.9"
            ],
            "changes": []
          },
          "params": [],
          "desc": "<p>Emitted after the worker IPC channel has disconnected. This can occur when a\nworker exits gracefully, is killed, or is disconnected manually (such as with\n<code>worker.disconnect()</code>).</p>\n<p>There may be a delay between the <code>&#39;disconnect&#39;</code> and <code>&#39;exit&#39;</code> events. These\nevents can be used to detect if the process is stuck in a cleanup or if there\nare long-living connections.</p>\n<pre><code class=\"lang-js\">cluster.on(&#39;disconnect&#39;, (worker) =&gt; {\n  console.log(`The worker #${worker.id} has disconnected`);\n});\n</code></pre>\n"
        },
        {
          "textRaw": "Event: 'exit'",
          "type": "event",
          "name": "exit",
          "meta": {
            "added": [
              "v0.7.9"
            ],
            "changes": []
          },
          "params": [],
          "desc": "<p>When any of the workers die the cluster module will emit the <code>&#39;exit&#39;</code> event.</p>\n<p>This can be used to restart the worker by calling <code>.fork()</code> again.</p>\n<pre><code class=\"lang-js\">cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  console.log(&#39;worker %d died (%s). restarting...&#39;,\n              worker.process.pid, signal || code);\n  cluster.fork();\n});\n</code></pre>\n<p>See <a href=\"child_process.html#child_process_event_exit\"><code>child_process</code> event: <code>&#39;exit&#39;</code></a>.</p>\n"
        },
        {
          "textRaw": "Event: 'fork'",
          "type": "event",
          "name": "fork",
          "meta": {
            "added": [
              "v0.7.0"
            ],
            "changes": []
          },
          "params": [],
          "desc": "<p>When a new worker is forked the cluster module will emit a <code>&#39;fork&#39;</code> event.\nThis can be used to log worker activity, and create a custom timeout.</p>\n<pre><code class=\"lang-js\">const timeouts = [];\nfunction errorMsg() {\n  console.error(&#39;Something must be wrong with the connection ...&#39;);\n}\n\ncluster.on(&#39;fork&#39;, (worker) =&gt; {\n  timeouts[worker.id] = setTimeout(errorMsg, 2000);\n});\ncluster.on(&#39;listening&#39;, (worker, address) =&gt; {\n  clearTimeout(timeouts[worker.id]);\n});\ncluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {\n  clearTimeout(timeouts[worker.id]);\n  errorMsg();\n});\n</code></pre>\n"
        },
        {
          "textRaw": "Event: 'listening'",
          "type": "event",
          "name": "listening",
          "meta": {
            "added": [
              "v0.7.0"
            ],
            "changes": []
          },
          "params": [],
          "desc": "<p>After calling <code>listen()</code> from a worker, when the <code>&#39;listening&#39;</code> event is emitted\non the server a <code>&#39;listening&#39;</code> event will also be emitted on <code>cluster</code> in the\nmaster.</p>\n<p>The event handler is executed with two arguments, the <code>worker</code> contains the\nworker object and the <code>address</code> object contains the following connection\nproperties: <code>address</code>, <code>port</code> and <code>addressType</code>. This is very useful if the\nworker is listening on more than one address.</p>\n<pre><code class=\"lang-js\">cluster.on(&#39;listening&#39;, (worker, address) =&gt; {\n  console.log(\n    `A worker is now connected to ${address.address}:${address.port}`);\n});\n</code></pre>\n<p>The <code>addressType</code> is one of:</p>\n<ul>\n<li><code>4</code> (TCPv4)</li>\n<li><code>6</code> (TCPv6)</li>\n<li><code>-1</code> (unix domain socket)</li>\n<li><code>&#39;udp4&#39;</code> or <code>&#39;udp6&#39;</code> (UDP v4 or v6)</li>\n</ul>\n"
        },
        {
          "textRaw": "Event: 'message'",
          "type": "event",
          "name": "message",
          "meta": {
            "added": [
              "v2.5.0"
            ],
            "changes": [
              {
                "version": "v6.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/5361",
                "description": "The `worker` parameter is passed now; see below for details."
              }
            ]
          },
          "params": [],
          "desc": "<p>Emitted when the cluster master receives a message from any worker.</p>\n<p>See <a href=\"child_process.html#child_process_event_message\"><code>child_process</code> event: <code>&#39;message&#39;</code></a>.</p>\n<p>Before Node.js v6.0, this event emitted only the message and the handle,\nbut not the worker object, contrary to what the documentation stated.</p>\n<p>If support for older versions is required but a worker object is not\nrequired, it is possible to work around the discrepancy by checking the\nnumber of arguments:</p>\n<pre><code class=\"lang-js\">cluster.on(&#39;message&#39;, (worker, message, handle) =&gt; {\n  if (arguments.length === 2) {\n    handle = message;\n    message = worker;\n    worker = undefined;\n  }\n  // ...\n});\n</code></pre>\n"
        },
        {
          "textRaw": "Event: 'online'",
          "type": "event",
          "name": "online",
          "meta": {
            "added": [
              "v0.7.0"
            ],
            "changes": []
          },
          "params": [],
          "desc": "<p>After forking a new worker, the worker should respond with an online message.\nWhen the master receives an online message it will emit this event.\nThe difference between <code>&#39;fork&#39;</code> and <code>&#39;online&#39;</code> is that fork is emitted when the\nmaster forks a worker, and <code>&#39;online&#39;</code> is emitted when the worker is running.</p>\n<pre><code class=\"lang-js\">cluster.on(&#39;online&#39;, (worker) =&gt; {\n  console.log(&#39;Yay, the worker responded after it was forked&#39;);\n});\n</code></pre>\n"
        },
        {
          "textRaw": "Event: 'setup'",
          "type": "event",
          "name": "setup",
          "meta": {
            "added": [
              "v0.7.1"
            ],
            "changes": []
          },
          "params": [],
          "desc": "<p>Emitted every time <code>.setupMaster()</code> is called.</p>\n<p>The <code>settings</code> object is the <code>cluster.settings</code> object at the time\n<code>.setupMaster()</code> was called and is advisory only, since multiple calls to\n<code>.setupMaster()</code> can be made in a single tick.</p>\n<p>If accuracy is important, use <code>cluster.settings</code>.</p>\n"
        }
      ],
      "methods": [
        {
          "textRaw": "cluster.disconnect([callback])",
          "type": "method",
          "name": "disconnect",
          "meta": {
            "added": [
              "v0.7.7"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`callback` {Function} Called when all workers are disconnected and handles are closed. ",
                  "name": "callback",
                  "type": "Function",
                  "desc": "Called when all workers are disconnected and handles are closed.",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Calls <code>.disconnect()</code> on each worker in <code>cluster.workers</code>.</p>\n<p>When they are disconnected all internal handles will be closed, allowing the\nmaster process to die gracefully if no other event is waiting.</p>\n<p>The method takes an optional callback argument which will be called when\nfinished.</p>\n<p>This can only be called from the master process.</p>\n"
        },
        {
          "textRaw": "cluster.fork([env])",
          "type": "method",
          "name": "fork",
          "meta": {
            "added": [
              "v0.6.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {cluster.Worker} ",
                "name": "return",
                "type": "cluster.Worker"
              },
              "params": [
                {
                  "textRaw": "`env` {Object} Key/value pairs to add to worker process environment. ",
                  "name": "env",
                  "type": "Object",
                  "desc": "Key/value pairs to add to worker process environment.",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "env",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Spawn a new worker process.</p>\n<p>This can only be called from the master process.</p>\n"
        },
        {
          "textRaw": "cluster.setupMaster([settings])",
          "type": "method",
          "name": "setupMaster",
          "meta": {
            "added": [
              "v0.7.1"
            ],
            "changes": [
              {
                "version": "v6.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/7838",
                "description": "The `stdio` option is supported now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`settings` {Object} See [`cluster.settings`][]. ",
                  "name": "settings",
                  "type": "Object",
                  "desc": "See [`cluster.settings`][].",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "settings",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p><code>setupMaster</code> is used to change the default &#39;fork&#39; behavior. Once called,\nthe settings will be present in <code>cluster.settings</code>.</p>\n<p>Note that:</p>\n<ul>\n<li>Any settings changes only affect future calls to <code>.fork()</code> and have no\neffect on workers that are already running.</li>\n<li>The <em>only</em> attribute of a worker that cannot be set via <code>.setupMaster()</code> is\nthe <code>env</code> passed to <code>.fork()</code>.</li>\n<li>The defaults above apply to the first call only, the defaults for later\ncalls is the current value at the time of <code>cluster.setupMaster()</code> is called.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const cluster = require(&#39;cluster&#39;);\ncluster.setupMaster({\n  exec: &#39;worker.js&#39;,\n  args: [&#39;--use&#39;, &#39;https&#39;],\n  silent: true\n});\ncluster.fork(); // https worker\ncluster.setupMaster({\n  exec: &#39;worker.js&#39;,\n  args: [&#39;--use&#39;, &#39;http&#39;]\n});\ncluster.fork(); // http worker\n</code></pre>\n<p>This can only be called from the master process.</p>\n"
        }
      ],
      "properties": [
        {
          "textRaw": "`isMaster` {boolean} ",
          "type": "boolean",
          "name": "isMaster",
          "meta": {
            "added": [
              "v0.8.1"
            ],
            "changes": []
          },
          "desc": "<p>True if the process is a master. This is determined\nby the <code>process.env.NODE_UNIQUE_ID</code>. If <code>process.env.NODE_UNIQUE_ID</code> is\nundefined, then <code>isMaster</code> is <code>true</code>.</p>\n"
        },
        {
          "textRaw": "`isWorker` {boolean} ",
          "type": "boolean",
          "name": "isWorker",
          "meta": {
            "added": [
              "v0.6.0"
            ],
            "changes": []
          },
          "desc": "<p>True if the process is not a master (it is the negation of <code>cluster.isMaster</code>).</p>\n"
        },
        {
          "textRaw": "cluster.schedulingPolicy",
          "name": "schedulingPolicy",
          "meta": {
            "added": [
              "v0.11.2"
            ],
            "changes": []
          },
          "desc": "<p>The scheduling policy, either <code>cluster.SCHED_RR</code> for round-robin or\n<code>cluster.SCHED_NONE</code> to leave it to the operating system. This is a\nglobal setting and effectively frozen once either the first worker is spawned,\nor <code>cluster.setupMaster()</code> is called, whichever comes first.</p>\n<p><code>SCHED_RR</code> is the default on all operating systems except Windows.\nWindows will change to <code>SCHED_RR</code> once libuv is able to effectively\ndistribute IOCP handles without incurring a large performance hit.</p>\n<p><code>cluster.schedulingPolicy</code> can also be set through the\n<code>NODE_CLUSTER_SCHED_POLICY</code> environment variable. Valid\nvalues are <code>&#39;rr&#39;</code> and <code>&#39;none&#39;</code>.</p>\n"
        },
        {
          "textRaw": "`settings` {Object} ",
          "type": "Object",
          "name": "settings",
          "meta": {
            "added": [
              "v0.7.1"
            ],
            "changes": [
              {
                "version": "v9.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/18399",
                "description": "The `cwd` option is supported now."
              },
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/17412",
                "description": "The `windowsHide` option is supported now."
              },
              {
                "version": "v8.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/14140",
                "description": "The `inspectPort` option is supported now."
              },
              {
                "version": "v6.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/7838",
                "description": "The `stdio` option is supported now."
              }
            ]
          },
          "options": [
            {
              "textRaw": "`execArgv` {string[]} List of string arguments passed to the Node.js executable. **Default:** `process.execArgv`. ",
              "name": "execArgv",
              "type": "string[]",
              "default": "`process.execArgv`",
              "desc": "List of string arguments passed to the Node.js executable."
            },
            {
              "textRaw": "`exec` {string} File path to worker file. **Default:** `process.argv[1]`. ",
              "name": "exec",
              "type": "string",
              "default": "`process.argv[1]`",
              "desc": "File path to worker file."
            },
            {
              "textRaw": "`args` {string[]} String arguments passed to worker. **Default:** `process.argv.slice(2)`. ",
              "name": "args",
              "type": "string[]",
              "default": "`process.argv.slice(2)`",
              "desc": "String arguments passed to worker."
            },
            {
              "textRaw": "`cwd` {string} Current working directory of the worker process. **Default:** `undefined` (inherits from parent process). ",
              "name": "cwd",
              "type": "string",
              "default": "`undefined` (inherits from parent process)",
              "desc": "Current working directory of the worker process."
            },
            {
              "textRaw": "`silent` {boolean} Whether or not to send output to parent's stdio. **Default:** `false`. ",
              "name": "silent",
              "type": "boolean",
              "default": "`false`",
              "desc": "Whether or not to send output to parent's stdio."
            },
            {
              "textRaw": "`stdio` {Array} Configures the stdio of forked processes. Because the cluster module relies on IPC to function, this configuration must contain an `'ipc'` entry. When this option is provided, it overrides `silent`. ",
              "name": "stdio",
              "type": "Array",
              "desc": "Configures the stdio of forked processes. Because the cluster module relies on IPC to function, this configuration must contain an `'ipc'` entry. When this option is provided, it overrides `silent`."
            },
            {
              "textRaw": "`uid` {number} Sets the user identity of the process. (See setuid(2).) ",
              "name": "uid",
              "type": "number",
              "desc": "Sets the user identity of the process. (See setuid(2).)"
            },
            {
              "textRaw": "`gid` {number} Sets the group identity of the process. (See setgid(2).) ",
              "name": "gid",
              "type": "number",
              "desc": "Sets the group identity of the process. (See setgid(2).)"
            },
            {
              "textRaw": "`inspectPort` {number|Function} Sets inspector port of worker. This can be a number, or a function that takes no arguments and returns a number. By default each worker gets its own port, incremented from the master's `process.debugPort`. ",
              "name": "inspectPort",
              "type": "number|Function",
              "desc": "Sets inspector port of worker. This can be a number, or a function that takes no arguments and returns a number. By default each worker gets its own port, incremented from the master's `process.debugPort`."
            },
            {
              "textRaw": "`windowsHide` {boolean} Hide the forked processes console window that would normally be created on Windows systems. **Default:** `false`. ",
              "name": "windowsHide",
              "type": "boolean",
              "default": "`false`",
              "desc": "Hide the forked processes console window that would normally be created on Windows systems."
            }
          ],
          "desc": "<p>After calling <code>.setupMaster()</code> (or <code>.fork()</code>) this settings object will contain\nthe settings, including the default values.</p>\n<p>This object is not intended to be changed or set manually.</p>\n"
        },
        {
          "textRaw": "`worker` {Object} ",
          "type": "Object",
          "name": "worker",
          "meta": {
            "added": [
              "v0.7.0"
            ],
            "changes": []
          },
          "desc": "<p>A reference to the current worker object. Not available in the master process.</p>\n<pre><code class=\"lang-js\">const cluster = require(&#39;cluster&#39;);\n\nif (cluster.isMaster) {\n  console.log(&#39;I am master&#39;);\n  cluster.fork();\n  cluster.fork();\n} else if (cluster.isWorker) {\n  console.log(`I am worker #${cluster.worker.id}`);\n}\n</code></pre>\n"
        },
        {
          "textRaw": "`workers` {Object} ",
          "type": "Object",
          "name": "workers",
          "meta": {
            "added": [
              "v0.7.0"
            ],
            "changes": []
          },
          "desc": "<p>A hash that stores the active worker objects, keyed by <code>id</code> field. Makes it\neasy to loop through all the workers. It is only available in the master\nprocess.</p>\n<p>A worker is removed from <code>cluster.workers</code> after the worker has disconnected\n<em>and</em> exited. The order between these two events cannot be determined in\nadvance. However, it is guaranteed that the removal from the <code>cluster.workers</code>\nlist happens before last <code>&#39;disconnect&#39;</code> or <code>&#39;exit&#39;</code> event is emitted.</p>\n<pre><code class=\"lang-js\">// Go through all workers\nfunction eachWorker(callback) {\n  for (const id in cluster.workers) {\n    callback(cluster.workers[id]);\n  }\n}\neachWorker((worker) =&gt; {\n  worker.send(&#39;big announcement to all workers&#39;);\n});\n</code></pre>\n<p>Using the worker&#39;s unique id is the easiest way to locate the worker.</p>\n<pre><code class=\"lang-js\">socket.on(&#39;data&#39;, (id) =&gt; {\n  const worker = cluster.workers[id];\n});\n</code></pre>\n<!-- [end-include:cluster.md] -->\n<!-- [start-include:cli.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "Cluster"
    },
    {
      "textRaw": "Console",
      "name": "console",
      "introduced_in": "v0.10.13",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>console</code> module provides a simple debugging console that is similar to the\nJavaScript console mechanism provided by web browsers.</p>\n<p>The module exports two specific components:</p>\n<ul>\n<li>A <code>Console</code> class with methods such as <code>console.log()</code>, <code>console.error()</code> and\n<code>console.warn()</code> that can be used to write to any Node.js stream.</li>\n<li>A global <code>console</code> instance configured to write to <a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> and\n<a href=\"process.html#process_process_stderr\"><code>process.stderr</code></a>. The global <code>console</code> can be used without calling\n<code>require(&#39;console&#39;)</code>.</li>\n</ul>\n<p><strong><em>Warning</em></strong>: The global console object&#39;s methods are neither consistently\nsynchronous like the browser APIs they resemble, nor are they consistently\nasynchronous like all other Node.js streams. See the <a href=\"process.html#process_a_note_on_process_i_o\">note on process I/O</a> for\nmore information.</p>\n<p>Example using the global <code>console</code>:</p>\n<pre><code class=\"lang-js\">console.log(&#39;hello world&#39;);\n// Prints: hello world, to stdout\nconsole.log(&#39;hello %s&#39;, &#39;world&#39;);\n// Prints: hello world, to stdout\nconsole.error(new Error(&#39;Whoops, something bad happened&#39;));\n// Prints: [Error: Whoops, something bad happened], to stderr\n\nconst name = &#39;Will Robinson&#39;;\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderr\n</code></pre>\n<p>Example using the <code>Console</code> class:</p>\n<pre><code class=\"lang-js\">const out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log(&#39;hello world&#39;);\n// Prints: hello world, to out\nmyConsole.log(&#39;hello %s&#39;, &#39;world&#39;);\n// Prints: hello world, to out\nmyConsole.error(new Error(&#39;Whoops, something bad happened&#39;));\n// Prints: [Error: Whoops, something bad happened], to err\n\nconst name = &#39;Will Robinson&#39;;\nmyConsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to err\n</code></pre>\n",
      "classes": [
        {
          "textRaw": "Class: Console",
          "type": "class",
          "name": "Console",
          "meta": {
            "changes": [
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/9744",
                "description": "Errors that occur while writing to the underlying streams will now be ignored by default."
              }
            ]
          },
          "desc": "<p>The <code>Console</code> class can be used to create a simple logger with configurable\noutput streams and can be accessed using either <code>require(&#39;console&#39;).Console</code>\nor <code>console.Console</code> (or their destructured counterparts):</p>\n<pre><code class=\"lang-js\">const { Console } = require(&#39;console&#39;);\n</code></pre>\n<pre><code class=\"lang-js\">const { Console } = console;\n</code></pre>\n",
          "methods": [
            {
              "textRaw": "console.assert(value[, ...message])",
              "type": "method",
              "name": "assert",
              "meta": {
                "added": [
                  "v0.1.101"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/17706",
                    "description": "The implementation is now spec compliant and does not throw anymore."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`value` {any} The value tested for being truthy. ",
                      "name": "value",
                      "type": "any",
                      "desc": "The value tested for being truthy."
                    },
                    {
                      "textRaw": "`...message` {any} All arguments besides `value` are used as error message. ",
                      "name": "...message",
                      "type": "any",
                      "desc": "All arguments besides `value` are used as error message.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    },
                    {
                      "name": "...message",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>A simple assertion test that verifies whether <code>value</code> is truthy. If it is not,\n<code>Assertion failed</code> is logged. If provided, the error <code>message</code> is formatted\nusing <a href=\"#util_util_format_format_args\"><code>util.format()</code></a> by passing along all message arguments. The output is\nused as the error message.</p>\n<pre><code class=\"lang-js\">console.assert(true, &#39;does nothing&#39;);\n// OK\nconsole.assert(false, &#39;Whoops %s work&#39;, &#39;didn\\&#39;t&#39;);\n// Assertion failed: Whoops didn&#39;t work\n</code></pre>\n<p>Calling <code>console.assert()</code> with a falsy assertion will only cause the <code>message</code>\nto be printed to the console without interrupting execution of subsequent code.</p>\n"
            },
            {
              "textRaw": "console.clear()",
              "type": "method",
              "name": "clear",
              "meta": {
                "added": [
                  "v8.3.0"
                ],
                "changes": []
              },
              "desc": "<p>When <code>stdout</code> is a TTY, calling <code>console.clear()</code> will attempt to clear the\nTTY. When <code>stdout</code> is not a TTY, this method does nothing.</p>\n<p>The specific operation of <code>console.clear()</code> can vary across operating systems\nand terminal types. For most Linux operating systems, <code>console.clear()</code>\noperates similarly to the <code>clear</code> shell command. On Windows, <code>console.clear()</code>\nwill clear only the output in the current terminal viewport for the Node.js\nbinary.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "console.count([label='default'])",
              "type": "method",
              "name": "count",
              "meta": {
                "added": [
                  "v8.3.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`label` {string} The display label for the counter. **Default:** `'default'`. ",
                      "name": "label",
                      "type": "string",
                      "default": "'default'",
                      "desc": "The display label for the counter.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "label",
                      "optional": true,
                      "default": "'default'"
                    }
                  ]
                }
              ],
              "desc": "<p>Maintains an internal counter specific to <code>label</code> and outputs to <code>stdout</code> the\nnumber of times <code>console.count()</code> has been called with the given <code>label</code>.</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">&gt; console.count()\ndefault: 1\nundefined\n&gt; console.count(&#39;default&#39;)\ndefault: 2\nundefined\n&gt; console.count(&#39;abc&#39;)\nabc: 1\nundefined\n&gt; console.count(&#39;xyz&#39;)\nxyz: 1\nundefined\n&gt; console.count(&#39;abc&#39;)\nabc: 2\nundefined\n&gt; console.count()\ndefault: 3\nundefined\n&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "console.countReset([label='default'])",
              "type": "method",
              "name": "countReset",
              "meta": {
                "added": [
                  "v8.3.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`label` {string} The display label for the counter. **Default:** `'default'`. ",
                      "name": "label",
                      "type": "string",
                      "default": "'default'",
                      "desc": "The display label for the counter.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "label",
                      "optional": true,
                      "default": "'default'"
                    }
                  ]
                }
              ],
              "desc": "<p>Resets the internal counter specific to <code>label</code>.</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">&gt; console.count(&#39;abc&#39;);\nabc: 1\nundefined\n&gt; console.countReset(&#39;abc&#39;);\nundefined\n&gt; console.count(&#39;abc&#39;);\nabc: 1\nundefined\n&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "console.debug(data[, ...args])",
              "type": "method",
              "name": "debug",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": [
                  {
                    "version": "v9.3.0",
                    "pr-url": "https://github.com/nodejs/node/pull/17033",
                    "description": "`console.debug` is now an alias for `console.log`."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`data` {any} ",
                      "name": "data",
                      "type": "any"
                    },
                    {
                      "textRaw": "`...args` {any} ",
                      "name": "...args",
                      "type": "any",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>console.debug()</code> function is an alias for <a href=\"console.html#console_console_log_data_args\"><code>console.log()</code></a>.</p>\n"
            },
            {
              "textRaw": "console.dir(obj[, options])",
              "type": "method",
              "name": "dir",
              "meta": {
                "added": [
                  "v0.1.101"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`obj` {any} ",
                      "name": "obj",
                      "type": "any"
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`showHidden` {boolean} If `true` then the object's non-enumerable and symbol properties will be shown too. **Default:** `false`. ",
                          "name": "showHidden",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "If `true` then the object's non-enumerable and symbol properties will be shown too."
                        },
                        {
                          "textRaw": "`depth` {number} Tells [`util.inspect()`][] how many times to recurse while formatting the object. This is useful for inspecting large complicated objects. To make it recurse indefinitely, pass `null`. **Default:** `2`. ",
                          "name": "depth",
                          "type": "number",
                          "default": "`2`",
                          "desc": "Tells [`util.inspect()`][] how many times to recurse while formatting the object. This is useful for inspecting large complicated objects. To make it recurse indefinitely, pass `null`."
                        },
                        {
                          "textRaw": "`colors` {boolean} If `true`, then the output will be styled with ANSI color  codes. Colors are customizable;  see [customizing `util.inspect()` colors][]. **Default:** `false`. ",
                          "name": "colors",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "If `true`, then the output will be styled with ANSI color  codes. Colors are customizable;  see [customizing `util.inspect()` colors][]."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "obj"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Uses <a href=\"#util_util_inspect_object_options\"><code>util.inspect()</code></a> on <code>obj</code> and prints the resulting string to <code>stdout</code>.\nThis function bypasses any custom <code>inspect()</code> function defined on <code>obj</code>.</p>\n"
            },
            {
              "textRaw": "console.dirxml(...data)",
              "type": "method",
              "name": "dirxml",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": [
                  {
                    "version": "v9.3.0",
                    "pr-url": "https://github.com/nodejs/node/pull/17152",
                    "description": "`console.dirxml` now calls `console.log` for its arguments."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`...data` {any} ",
                      "name": "...data",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "...data"
                    }
                  ]
                }
              ],
              "desc": "<p>This method calls <code>console.log()</code> passing it the arguments received.\nPlease note that this method does not produce any XML formatting.</p>\n"
            },
            {
              "textRaw": "console.error([data][, ...args])",
              "type": "method",
              "name": "error",
              "meta": {
                "added": [
                  "v0.1.100"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`data` {any} ",
                      "name": "data",
                      "type": "any",
                      "optional": true
                    },
                    {
                      "textRaw": "`...args` {any} ",
                      "name": "...args",
                      "type": "any",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Prints to <code>stderr</code> with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to printf(3) (the arguments are all passed to\n<a href=\"#util_util_format_format_args\"><code>util.format()</code></a>).</p>\n<pre><code class=\"lang-js\">const code = 5;\nconsole.error(&#39;error #%d&#39;, code);\n// Prints: error #5, to stderr\nconsole.error(&#39;error&#39;, code);\n// Prints: error 5, to stderr\n</code></pre>\n<p>If formatting elements (e.g. <code>%d</code>) are not found in the first string then\n<a href=\"#util_util_inspect_object_options\"><code>util.inspect()</code></a> is called on each argument and the resulting string\nvalues are concatenated. See <a href=\"#util_util_format_format_args\"><code>util.format()</code></a> for more information.</p>\n"
            },
            {
              "textRaw": "console.group([...label])",
              "type": "method",
              "name": "group",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`...label` {any} ",
                      "name": "...label",
                      "type": "any",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "...label",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Increases indentation of subsequent lines by two spaces.</p>\n<p>If one or more <code>label</code>s are provided, those are printed first without the\nadditional indentation.</p>\n"
            },
            {
              "textRaw": "console.groupCollapsed()",
              "type": "method",
              "name": "groupCollapsed",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>An alias for <a href=\"#console_console_group_label\"><code>console.group()</code></a>.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "console.groupEnd()",
              "type": "method",
              "name": "groupEnd",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>Decreases indentation of subsequent lines by two spaces.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "console.info([data][, ...args])",
              "type": "method",
              "name": "info",
              "meta": {
                "added": [
                  "v0.1.100"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`data` {any} ",
                      "name": "data",
                      "type": "any",
                      "optional": true
                    },
                    {
                      "textRaw": "`...args` {any} ",
                      "name": "...args",
                      "type": "any",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>console.info()</code> function is an alias for <a href=\"console.html#console_console_log_data_args\"><code>console.log()</code></a>.</p>\n"
            },
            {
              "textRaw": "console.log([data][, ...args])",
              "type": "method",
              "name": "log",
              "meta": {
                "added": [
                  "v0.1.100"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`data` {any} ",
                      "name": "data",
                      "type": "any",
                      "optional": true
                    },
                    {
                      "textRaw": "`...args` {any} ",
                      "name": "...args",
                      "type": "any",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Prints to <code>stdout</code> with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to printf(3) (the arguments are all passed to\n<a href=\"#util_util_format_format_args\"><code>util.format()</code></a>).</p>\n<pre><code class=\"lang-js\">const count = 5;\nconsole.log(&#39;count: %d&#39;, count);\n// Prints: count: 5, to stdout\nconsole.log(&#39;count:&#39;, count);\n// Prints: count: 5, to stdout\n</code></pre>\n<p>See <a href=\"#util_util_format_format_args\"><code>util.format()</code></a> for more information.</p>\n"
            },
            {
              "textRaw": "console.table(tabularData[, properties])",
              "type": "method",
              "name": "table",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`tabularData` {any} ",
                      "name": "tabularData",
                      "type": "any"
                    },
                    {
                      "textRaw": "`properties` {string[]} Alternate properties for constructing the table. ",
                      "name": "properties",
                      "type": "string[]",
                      "desc": "Alternate properties for constructing the table.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "tabularData"
                    },
                    {
                      "name": "properties",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Try to construct a table with the columns of the properties of <code>tabularData</code>\n(or use <code>properties</code>) and rows of <code>tabularData</code> and log it. Falls back to just\nlogging the argument if it can’t be parsed as tabular.</p>\n<pre><code class=\"lang-js\">// These can&#39;t be parsed as tabular data\nconsole.table(Symbol());\n// Symbol()\n\nconsole.table(undefined);\n// undefined\n\nconsole.table([{ a: 1, b: &#39;Y&#39; }, { a: &#39;Z&#39;, b: 2 }]);\n// ┌─────────┬─────┬─────┐\n// │ (index) │  a  │  b  │\n// ├─────────┼─────┼─────┤\n// │    0    │  1  │ &#39;Y&#39; │\n// │    1    │ &#39;Z&#39; │  2  │\n// └─────────┴─────┴─────┘\n\nconsole.table([{ a: 1, b: &#39;Y&#39; }, { a: &#39;Z&#39;, b: 2 }], [&#39;a&#39;]);\n// ┌─────────┬─────┐\n// │ (index) │  a  │\n// ├─────────┼─────┤\n// │    0    │  1  │\n// │    1    │ &#39;Z&#39; │\n// └─────────┴─────┘\n</code></pre>\n"
            },
            {
              "textRaw": "console.time(label)",
              "type": "method",
              "name": "time",
              "meta": {
                "added": [
                  "v0.1.104"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`label` {string} **Default:** `'default'` ",
                      "name": "label",
                      "type": "string",
                      "default": "`'default'`"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "label"
                    }
                  ]
                }
              ],
              "desc": "<p>Starts a timer that can be used to compute the duration of an operation. Timers\nare identified by a unique <code>label</code>. Use the same <code>label</code> when calling\n<a href=\"#console_console_timeend_label\"><code>console.timeEnd()</code></a> to stop the timer and output the elapsed time in\nmilliseconds to <code>stdout</code>. Timer durations are accurate to the sub-millisecond.</p>\n"
            },
            {
              "textRaw": "console.timeEnd(label)",
              "type": "method",
              "name": "timeEnd",
              "meta": {
                "added": [
                  "v0.1.104"
                ],
                "changes": [
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5901",
                    "description": "This method no longer supports multiple calls that don’t map to individual `console.time()` calls; see below for details."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`label` {string} **Default:** `'default'` ",
                      "name": "label",
                      "type": "string",
                      "default": "`'default'`"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "label"
                    }
                  ]
                }
              ],
              "desc": "<p>Stops a timer that was previously started by calling <a href=\"#console_console_time_label\"><code>console.time()</code></a> and\nprints the result to <code>stdout</code>:</p>\n<pre><code class=\"lang-js\">console.time(&#39;100-elements&#39;);\nfor (let i = 0; i &lt; 100; i++) {}\nconsole.timeEnd(&#39;100-elements&#39;);\n// prints 100-elements: 225.438ms\n</code></pre>\n"
            },
            {
              "textRaw": "console.trace([message][, ...args])",
              "type": "method",
              "name": "trace",
              "meta": {
                "added": [
                  "v0.1.104"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`message` {any} ",
                      "name": "message",
                      "type": "any",
                      "optional": true
                    },
                    {
                      "textRaw": "`...args` {any} ",
                      "name": "...args",
                      "type": "any",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "message",
                      "optional": true
                    },
                    {
                      "name": "...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Prints to <code>stderr</code> the string <code>&#39;Trace: &#39;</code>, followed by the <a href=\"#util_util_format_format_args\"><code>util.format()</code></a>\nformatted message and stack trace to the current position in the code.</p>\n<pre><code class=\"lang-js\">console.trace(&#39;Show me&#39;);\n// Prints: (stack trace will vary based on where trace is called)\n//  Trace: Show me\n//    at repl:2:9\n//    at REPLServer.defaultEval (repl.js:248:27)\n//    at bound (domain.js:287:14)\n//    at REPLServer.runBound [as eval] (domain.js:300:12)\n//    at REPLServer.&lt;anonymous&gt; (repl.js:412:12)\n//    at emitOne (events.js:82:20)\n//    at REPLServer.emit (events.js:169:7)\n//    at REPLServer.Interface._onLine (readline.js:210:10)\n//    at REPLServer.Interface._line (readline.js:549:8)\n//    at REPLServer.Interface._ttyWrite (readline.js:826:14)\n</code></pre>\n"
            },
            {
              "textRaw": "console.warn([data][, ...args])",
              "type": "method",
              "name": "warn",
              "meta": {
                "added": [
                  "v0.1.100"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`data` {any} ",
                      "name": "data",
                      "type": "any",
                      "optional": true
                    },
                    {
                      "textRaw": "`...args` {any} ",
                      "name": "...args",
                      "type": "any",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>console.warn()</code> function is an alias for <a href=\"console.html#console_console_error_data_args\"><code>console.error()</code></a>.</p>\n"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`stdout` {stream.Writable} ",
                      "name": "stdout",
                      "type": "stream.Writable"
                    },
                    {
                      "textRaw": "`stderr` {stream.Writable} ",
                      "name": "stderr",
                      "type": "stream.Writable"
                    },
                    {
                      "textRaw": "`ignoreErrors` {boolean} Ignore errors when writing to the underlying ",
                      "name": "ignoreErrors",
                      "type": "boolean",
                      "desc": "Ignore errors when writing to the underlying"
                    },
                    {
                      "textRaw": "`colorMode` {boolean|string} Set color support for this `Console` instance. Setting to `true` enables coloring while inspecting values, setting to `'auto'` will make color support depend on the value of the `isTTY` property and the value returned by `getColorDepth()` on the respective stream. **Default:** `'auto'`. ",
                      "name": "colorMode",
                      "type": "boolean|string",
                      "default": "`'auto'`",
                      "desc": "Set color support for this `Console` instance. Setting to `true` enables coloring while inspecting values, setting to `'auto'` will make color support depend on the value of the `isTTY` property and the value returned by `getColorDepth()` on the respective stream."
                    }
                  ],
                  "name": "options",
                  "type": "Object"
                }
              ],
              "desc": "<p>Creates a new <code>Console</code> with one or two writable stream instances. <code>stdout</code> is a\nwritable stream to print log or info output. <code>stderr</code> is used for warning or\nerror output. If <code>stderr</code> is not provided, <code>stdout</code> is used for <code>stderr</code>.</p>\n<pre><code class=\"lang-js\">const output = fs.createWriteStream(&#39;./stdout.log&#39;);\nconst errorOutput = fs.createWriteStream(&#39;./stderr.log&#39;);\n// custom simple logger\nconst logger = new Console({ stdout: output, stderr: errorOutput });\n// use it like console\nconst count = 5;\nlogger.log(&#39;count: %d&#39;, count);\n// in stdout.log: count 5\n</code></pre>\n<p>The global <code>console</code> is a special <code>Console</code> whose output is sent to\n<a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> and <a href=\"process.html#process_process_stderr\"><code>process.stderr</code></a>. It is equivalent to calling:</p>\n<pre><code class=\"lang-js\">new Console({ stdout: process.stdout, stderr: process.stderr });\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "name": "options"
                }
              ],
              "desc": "<p>Creates a new <code>Console</code> with one or two writable stream instances. <code>stdout</code> is a\nwritable stream to print log or info output. <code>stderr</code> is used for warning or\nerror output. If <code>stderr</code> is not provided, <code>stdout</code> is used for <code>stderr</code>.</p>\n<pre><code class=\"lang-js\">const output = fs.createWriteStream(&#39;./stdout.log&#39;);\nconst errorOutput = fs.createWriteStream(&#39;./stderr.log&#39;);\n// custom simple logger\nconst logger = new Console({ stdout: output, stderr: errorOutput });\n// use it like console\nconst count = 5;\nlogger.log(&#39;count: %d&#39;, count);\n// in stdout.log: count 5\n</code></pre>\n<p>The global <code>console</code> is a special <code>Console</code> whose output is sent to\n<a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> and <a href=\"process.html#process_process_stderr\"><code>process.stderr</code></a>. It is equivalent to calling:</p>\n<pre><code class=\"lang-js\">new Console({ stdout: process.stdout, stderr: process.stderr });\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "name": "stdout"
                },
                {
                  "name": "stderr",
                  "optional": true
                },
                {
                  "name": "ignoreErrors",
                  "optional": true
                }
              ],
              "desc": "<p>Creates a new <code>Console</code> with one or two writable stream instances. <code>stdout</code> is a\nwritable stream to print log or info output. <code>stderr</code> is used for warning or\nerror output. If <code>stderr</code> is not provided, <code>stdout</code> is used for <code>stderr</code>.</p>\n<pre><code class=\"lang-js\">const output = fs.createWriteStream(&#39;./stdout.log&#39;);\nconst errorOutput = fs.createWriteStream(&#39;./stderr.log&#39;);\n// custom simple logger\nconst logger = new Console({ stdout: output, stderr: errorOutput });\n// use it like console\nconst count = 5;\nlogger.log(&#39;count: %d&#39;, count);\n// in stdout.log: count 5\n</code></pre>\n<p>The global <code>console</code> is a special <code>Console</code> whose output is sent to\n<a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> and <a href=\"process.html#process_process_stderr\"><code>process.stderr</code></a>. It is equivalent to calling:</p>\n<pre><code class=\"lang-js\">new Console({ stdout: process.stdout, stderr: process.stderr });\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`stdout` {stream.Writable} ",
                      "name": "stdout",
                      "type": "stream.Writable"
                    },
                    {
                      "textRaw": "`stderr` {stream.Writable} ",
                      "name": "stderr",
                      "type": "stream.Writable"
                    },
                    {
                      "textRaw": "`ignoreErrors` {boolean} Ignore errors when writing to the underlying ",
                      "name": "ignoreErrors",
                      "type": "boolean",
                      "desc": "Ignore errors when writing to the underlying"
                    },
                    {
                      "textRaw": "`colorMode` {boolean|string} Set color support for this `Console` instance. Setting to `true` enables coloring while inspecting values, setting to `'auto'` will make color support depend on the value of the `isTTY` property and the value returned by `getColorDepth()` on the respective stream. **Default:** `'auto'`. ",
                      "name": "colorMode",
                      "type": "boolean|string",
                      "default": "`'auto'`",
                      "desc": "Set color support for this `Console` instance. Setting to `true` enables coloring while inspecting values, setting to `'auto'` will make color support depend on the value of the `isTTY` property and the value returned by `getColorDepth()` on the respective stream."
                    }
                  ],
                  "name": "options",
                  "type": "Object"
                }
              ],
              "desc": "<p>Creates a new <code>Console</code> with one or two writable stream instances. <code>stdout</code> is a\nwritable stream to print log or info output. <code>stderr</code> is used for warning or\nerror output. If <code>stderr</code> is not provided, <code>stdout</code> is used for <code>stderr</code>.</p>\n<pre><code class=\"lang-js\">const output = fs.createWriteStream(&#39;./stdout.log&#39;);\nconst errorOutput = fs.createWriteStream(&#39;./stderr.log&#39;);\n// custom simple logger\nconst logger = new Console({ stdout: output, stderr: errorOutput });\n// use it like console\nconst count = 5;\nlogger.log(&#39;count: %d&#39;, count);\n// in stdout.log: count 5\n</code></pre>\n<p>The global <code>console</code> is a special <code>Console</code> whose output is sent to\n<a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> and <a href=\"process.html#process_process_stderr\"><code>process.stderr</code></a>. It is equivalent to calling:</p>\n<pre><code class=\"lang-js\">new Console({ stdout: process.stdout, stderr: process.stderr });\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "name": "options"
                }
              ],
              "desc": "<p>Creates a new <code>Console</code> with one or two writable stream instances. <code>stdout</code> is a\nwritable stream to print log or info output. <code>stderr</code> is used for warning or\nerror output. If <code>stderr</code> is not provided, <code>stdout</code> is used for <code>stderr</code>.</p>\n<pre><code class=\"lang-js\">const output = fs.createWriteStream(&#39;./stdout.log&#39;);\nconst errorOutput = fs.createWriteStream(&#39;./stderr.log&#39;);\n// custom simple logger\nconst logger = new Console({ stdout: output, stderr: errorOutput });\n// use it like console\nconst count = 5;\nlogger.log(&#39;count: %d&#39;, count);\n// in stdout.log: count 5\n</code></pre>\n<p>The global <code>console</code> is a special <code>Console</code> whose output is sent to\n<a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> and <a href=\"process.html#process_process_stderr\"><code>process.stderr</code></a>. It is equivalent to calling:</p>\n<pre><code class=\"lang-js\">new Console({ stdout: process.stdout, stderr: process.stderr });\n</code></pre>\n"
            }
          ]
        }
      ],
      "modules": [
        {
          "textRaw": "Inspector only methods",
          "name": "inspector_only_methods",
          "desc": "<p>The following methods are exposed by the V8 engine in the general API but do\nnot display anything unless used in conjunction with the <a href=\"debugger.html\">inspector</a>\n(<code>--inspect</code> flag).</p>\n",
          "methods": [
            {
              "textRaw": "console.markTimeline(label)",
              "type": "method",
              "name": "markTimeline",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`label` {string} **Default:** `'default'` ",
                      "name": "label",
                      "type": "string",
                      "default": "`'default'`"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "label"
                    }
                  ]
                }
              ],
              "desc": "<p>This method does not display anything unless used in the inspector. The\n<code>console.markTimeline()</code> method is the deprecated form of\n<a href=\"#console_console_timestamp_label\"><code>console.timeStamp()</code></a>.</p>\n"
            },
            {
              "textRaw": "console.profile([label])",
              "type": "method",
              "name": "profile",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`label` {string} ",
                      "name": "label",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "label",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>This method does not display anything unless used in the inspector. The\n<code>console.profile()</code> method starts a JavaScript CPU profile with an optional\nlabel until <a href=\"#console_console_profileend\"><code>console.profileEnd()</code></a> is called. The profile is then added to\nthe <strong>Profile</strong> panel of the inspector.</p>\n<pre><code class=\"lang-js\">console.profile(&#39;MyLabel&#39;);\n// Some code\nconsole.profileEnd();\n// Adds the profile &#39;MyLabel&#39; to the Profiles panel of the inspector.\n</code></pre>\n"
            },
            {
              "textRaw": "console.profileEnd()",
              "type": "method",
              "name": "profileEnd",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>This method does not display anything unless used in the inspector. Stops the\ncurrent JavaScript CPU profiling session if one has been started and prints\nthe report to the <strong>Profiles</strong> panel of the inspector. See\n<a href=\"#console_console_profile_label\"><code>console.profile()</code></a> for an example.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "console.timeStamp([label])",
              "type": "method",
              "name": "timeStamp",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`label` {string} ",
                      "name": "label",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "label",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>This method does not display anything unless used in the inspector. The\n<code>console.timeStamp()</code> method adds an event with the label <code>&#39;label&#39;</code> to the\n<strong>Timeline</strong> panel of the inspector.</p>\n"
            },
            {
              "textRaw": "console.timeline([label])",
              "type": "method",
              "name": "timeline",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`label` {string} **Default:** `'default'` ",
                      "name": "label",
                      "type": "string",
                      "default": "`'default'`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "label",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>This method does not display anything unless used in the inspector. The\n<code>console.timeline()</code> method is the deprecated form of <a href=\"#console_console_time_label\"><code>console.time()</code></a>.</p>\n"
            },
            {
              "textRaw": "console.timelineEnd([label])",
              "type": "method",
              "name": "timelineEnd",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`label` {string} **Default:** `'default'` ",
                      "name": "label",
                      "type": "string",
                      "default": "`'default'`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "label",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>This method does not display anything unless used in the inspector. The\n<code>console.timelineEnd()</code> method is the deprecated form of\n<a href=\"#console_console_timeend_label\"><code>console.timeEnd()</code></a>.</p>\n<!-- [end-include:console.md] -->\n<!-- [start-include:crypto.md] -->\n"
            }
          ],
          "type": "module",
          "displayName": "Inspector only methods"
        }
      ],
      "type": "module",
      "displayName": "Console"
    },
    {
      "textRaw": "Crypto",
      "name": "crypto",
      "introduced_in": "v0.3.6",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>crypto</code> module provides cryptographic functionality that includes a set of\nwrappers for OpenSSL&#39;s hash, HMAC, cipher, decipher, sign, and verify functions.</p>\n<p>Use <code>require(&#39;crypto&#39;)</code> to access this module.</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\n\nconst secret = &#39;abcdefg&#39;;\nconst hash = crypto.createHmac(&#39;sha256&#39;, secret)\n                   .update(&#39;I love cupcakes&#39;)\n                   .digest(&#39;hex&#39;);\nconsole.log(hash);\n// Prints:\n//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\n</code></pre>\n",
      "modules": [
        {
          "textRaw": "Determining if crypto support is unavailable",
          "name": "determining_if_crypto_support_is_unavailable",
          "desc": "<p>It is possible for Node.js to be built without including support for the\n<code>crypto</code> module. In such cases, calling <code>require(&#39;crypto&#39;)</code> will result in an\nerror being thrown.</p>\n<pre><code class=\"lang-js\">let crypto;\ntry {\n  crypto = require(&#39;crypto&#39;);\n} catch (err) {\n  console.log(&#39;crypto support is disabled!&#39;);\n}\n</code></pre>\n",
          "type": "module",
          "displayName": "Determining if crypto support is unavailable"
        },
        {
          "textRaw": "`crypto` module methods and properties",
          "name": "`crypto`_module_methods_and_properties",
          "properties": [
            {
              "textRaw": "`constants` Returns: {Object} An object containing commonly used constants for crypto and security related operations. The specific constants currently defined are described in [Crypto Constants][]. ",
              "name": "constants",
              "meta": {
                "added": [
                  "v6.3.0"
                ],
                "changes": []
              },
              "desc": "Returns: {Object} An object containing commonly used constants for crypto and security related operations. The specific constants currently defined are described in [Crypto Constants][]."
            },
            {
              "textRaw": "crypto.DEFAULT_ENCODING",
              "name": "DEFAULT_ENCODING",
              "meta": {
                "added": [
                  "v0.9.3"
                ],
                "deprecated": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>The default encoding to use for functions that can take either strings\nor <a href=\"buffer.html#buffer_class_buffer\">buffers</a>. The default value is <code>&#39;buffer&#39;</code>, which makes methods\ndefault to <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> objects.</p>\n<p>The <code>crypto.DEFAULT_ENCODING</code> mechanism is provided for backwards compatibility\nwith legacy programs that expect <code>&#39;latin1&#39;</code> to be the default encoding.</p>\n<p>New applications should expect the default to be <code>&#39;buffer&#39;</code>.</p>\n<p>This property is deprecated.</p>\n"
            },
            {
              "textRaw": "crypto.fips",
              "name": "fips",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "deprecated": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Property for checking and controlling whether a FIPS compliant crypto provider\nis currently in use. Setting to true requires a FIPS build of Node.js.</p>\n<p>This property is deprecated. Please use <code>crypto.setFips()</code> and\n<code>crypto.getFips()</code> instead.</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "crypto.createCipher(algorithm, password[, options])",
              "type": "method",
              "name": "createCipher",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "deprecated": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`crypto.createCipheriv()`][] instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Cipher} ",
                    "name": "return",
                    "type": "Cipher"
                  },
                  "params": [
                    {
                      "textRaw": "`algorithm` {string} ",
                      "name": "algorithm",
                      "type": "string"
                    },
                    {
                      "textRaw": "`password` {string | Buffer | TypedArray | DataView} ",
                      "name": "password",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`options` {Object} [`stream.transform` options][] ",
                      "name": "options",
                      "type": "Object",
                      "desc": "[`stream.transform` options][]",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "algorithm"
                    },
                    {
                      "name": "password"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates and returns a <code>Cipher</code> object that uses the given <code>algorithm</code> and\n<code>password</code>.</p>\n<p>The <code>options</code> argument controls stream behavior and is optional except when a\ncipher in CCM mode is used (e.g. <code>&#39;aes-128-ccm&#39;</code>). In that case, the\n<code>authTagLength</code> option is required and specifies the length of the\nauthentication tag in bytes, see <a href=\"#crypto_ccm_mode\">CCM mode</a>.</p>\n<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>&#39;aes192&#39;</code>, etc. On\nrecent OpenSSL releases, <code>openssl list -cipher-algorithms</code>\n(<code>openssl list-cipher-algorithms</code> for older versions of OpenSSL) will\ndisplay the available cipher algorithms.</p>\n<p>The <code>password</code> is used to derive the cipher key and initialization vector (IV).\nThe value must be either a <code>&#39;latin1&#39;</code> encoded string, a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, a\n<code>TypedArray</code>, or a <code>DataView</code>.</p>\n<p>The implementation of <code>crypto.createCipher()</code> derives keys using the OpenSSL\nfunction <a href=\"https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html\"><code>EVP_BytesToKey</code></a> with the digest algorithm set to MD5, one\niteration, and no salt. The lack of salt allows dictionary attacks as the same\npassword always creates the same key. The low iteration count and\nnon-cryptographically secure hash algorithm allow passwords to be tested very\nrapidly.</p>\n<p>In line with OpenSSL&#39;s recommendation to use PBKDF2 instead of\n<a href=\"https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html\"><code>EVP_BytesToKey</code></a> it is recommended that developers derive a key and IV on\ntheir own using <a href=\"crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\"><code>crypto.pbkdf2()</code></a> and to use <a href=\"crypto.html#crypto_crypto_createcipheriv_algorithm_key_iv_options\"><code>crypto.createCipheriv()</code></a>\nto create the <code>Cipher</code> object. Users should not use ciphers with counter mode\n(e.g. CTR, GCM, or CCM) in <code>crypto.createCipher()</code>. A warning is emitted when\nthey are used in order to avoid the risk of IV reuse that causes\nvulnerabilities. For the case when IV is reused in GCM, see <a href=\"https://github.com/nonce-disrespect/nonce-disrespect\">Nonce-Disrespecting\nAdversaries</a> for details.</p>\n"
            },
            {
              "textRaw": "crypto.createCipheriv(algorithm, key, iv[, options])",
              "type": "method",
              "name": "createCipheriv",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "changes": [
                  {
                    "version": "v9.9.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18644",
                    "description": "The `iv` parameter may now be `null` for ciphers which do not need an initialization vector."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Cipher} ",
                    "name": "return",
                    "type": "Cipher"
                  },
                  "params": [
                    {
                      "textRaw": "`algorithm` {string} ",
                      "name": "algorithm",
                      "type": "string"
                    },
                    {
                      "textRaw": "`key` {string | Buffer | TypedArray | DataView} ",
                      "name": "key",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`iv` {string | Buffer | TypedArray | DataView} ",
                      "name": "iv",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`options` {Object} [`stream.transform` options][] ",
                      "name": "options",
                      "type": "Object",
                      "desc": "[`stream.transform` options][]",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "algorithm"
                    },
                    {
                      "name": "key"
                    },
                    {
                      "name": "iv"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates and returns a <code>Cipher</code> object, with the given <code>algorithm</code>, <code>key</code> and\ninitialization vector (<code>iv</code>).</p>\n<p>The <code>options</code> argument controls stream behavior and is optional except when a\ncipher in CCM mode is used (e.g. <code>&#39;aes-128-ccm&#39;</code>). In that case, the\n<code>authTagLength</code> option is required and specifies the length of the\nauthentication tag in bytes, see <a href=\"#crypto_ccm_mode\">CCM mode</a>.</p>\n<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>&#39;aes192&#39;</code>, etc. On\nrecent OpenSSL releases, <code>openssl list -cipher-algorithms</code>\n(<code>openssl list-cipher-algorithms</code> for older versions of OpenSSL) will\ndisplay the available cipher algorithms.</p>\n<p>The <code>key</code> is the raw key used by the <code>algorithm</code> and <code>iv</code> is an\n<a href=\"https://en.wikipedia.org/wiki/Initialization_vector\">initialization vector</a>. Both arguments must be <code>&#39;utf8&#39;</code> encoded strings,\n<a href=\"buffer.html#buffer_class_buffer\">Buffers</a>, <code>TypedArray</code>, or <code>DataView</code>s. If the cipher does not need\nan initialization vector, <code>iv</code> may be <code>null</code>.</p>\n<p>Initialization vectors should be unpredictable and unique; ideally, they will be\ncryptographically random. They do not have to be secret: IVs are typically just\nadded to ciphertext messages unencrypted. It may sound contradictory that\nsomething has to be unpredictable and unique, but does not have to be secret;\nit is important to remember that an attacker must not be able to predict ahead\nof time what a given IV will be.</p>\n"
            },
            {
              "textRaw": "crypto.createCredentials(details)",
              "type": "method",
              "name": "createCredentials",
              "meta": {
                "added": [
                  "v0.1.92"
                ],
                "deprecated": [
                  "v0.11.13"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`tls.createSecureContext()`][] instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {tls.SecureContext} ",
                    "name": "return",
                    "type": "tls.SecureContext"
                  },
                  "params": [
                    {
                      "textRaw": "`details` {Object} Identical to [`tls.createSecureContext()`][]. ",
                      "name": "details",
                      "type": "Object",
                      "desc": "Identical to [`tls.createSecureContext()`][]."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "details"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>crypto.createCredentials()</code> method is a deprecated function for creating\nand returning a <code>tls.SecureContext</code>. It should not be used. Replace it with\n<a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> which has the exact same arguments and return\nvalue.</p>\n<p>Returns a <code>tls.SecureContext</code>, as-if <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> had been\ncalled.</p>\n"
            },
            {
              "textRaw": "crypto.createDecipher(algorithm, password[, options])",
              "type": "method",
              "name": "createDecipher",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "deprecated": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`crypto.createDecipheriv()`][] instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Decipher} ",
                    "name": "return",
                    "type": "Decipher"
                  },
                  "params": [
                    {
                      "textRaw": "`algorithm` {string} ",
                      "name": "algorithm",
                      "type": "string"
                    },
                    {
                      "textRaw": "`password` {string | Buffer | TypedArray | DataView} ",
                      "name": "password",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`options` {Object} [`stream.transform` options][] ",
                      "name": "options",
                      "type": "Object",
                      "desc": "[`stream.transform` options][]",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "algorithm"
                    },
                    {
                      "name": "password"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates and returns a <code>Decipher</code> object that uses the given <code>algorithm</code> and\n<code>password</code> (key).</p>\n<p>The <code>options</code> argument controls stream behavior and is optional except when a\ncipher in CCM mode is used (e.g. <code>&#39;aes-128-ccm&#39;</code>). In that case, the\n<code>authTagLength</code> option is required and specifies the length of the\nauthentication tag in bytes, see <a href=\"#crypto_ccm_mode\">CCM mode</a>.</p>\n<p>The implementation of <code>crypto.createDecipher()</code> derives keys using the OpenSSL\nfunction <a href=\"https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html\"><code>EVP_BytesToKey</code></a> with the digest algorithm set to MD5, one\niteration, and no salt. The lack of salt allows dictionary attacks as the same\npassword always creates the same key. The low iteration count and\nnon-cryptographically secure hash algorithm allow passwords to be tested very\nrapidly.</p>\n<p>In line with OpenSSL&#39;s recommendation to use PBKDF2 instead of\n<a href=\"https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html\"><code>EVP_BytesToKey</code></a> it is recommended that developers derive a key and IV on\ntheir own using <a href=\"crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback\"><code>crypto.pbkdf2()</code></a> and to use <a href=\"crypto.html#crypto_crypto_createdecipheriv_algorithm_key_iv_options\"><code>crypto.createDecipheriv()</code></a>\nto create the <code>Decipher</code> object.</p>\n"
            },
            {
              "textRaw": "crypto.createDecipheriv(algorithm, key, iv[, options])",
              "type": "method",
              "name": "createDecipheriv",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "changes": [
                  {
                    "version": "v9.9.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18644",
                    "description": "The `iv` parameter may now be `null` for ciphers which do not need an initialization vector."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Decipher} ",
                    "name": "return",
                    "type": "Decipher"
                  },
                  "params": [
                    {
                      "textRaw": "`algorithm` {string} ",
                      "name": "algorithm",
                      "type": "string"
                    },
                    {
                      "textRaw": "`key` {string | Buffer | TypedArray | DataView} ",
                      "name": "key",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`iv` {string | Buffer | TypedArray | DataView} ",
                      "name": "iv",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`options` {Object} [`stream.transform` options][] ",
                      "name": "options",
                      "type": "Object",
                      "desc": "[`stream.transform` options][]",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "algorithm"
                    },
                    {
                      "name": "key"
                    },
                    {
                      "name": "iv"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates and returns a <code>Decipher</code> object that uses the given <code>algorithm</code>, <code>key</code>\nand initialization vector (<code>iv</code>).</p>\n<p>The <code>options</code> argument controls stream behavior and is optional except when a\ncipher in CCM mode is used (e.g. <code>&#39;aes-128-ccm&#39;</code>). In that case, the\n<code>authTagLength</code> option is required and specifies the length of the\nauthentication tag in bytes, see <a href=\"#crypto_ccm_mode\">CCM mode</a>.</p>\n<p>The <code>algorithm</code> is dependent on OpenSSL, examples are <code>&#39;aes192&#39;</code>, etc. On\nrecent OpenSSL releases, <code>openssl list -cipher-algorithms</code>\n(<code>openssl list-cipher-algorithms</code> for older versions of OpenSSL) will\ndisplay the available cipher algorithms.</p>\n<p>The <code>key</code> is the raw key used by the <code>algorithm</code> and <code>iv</code> is an\n<a href=\"https://en.wikipedia.org/wiki/Initialization_vector\">initialization vector</a>. Both arguments must be <code>&#39;utf8&#39;</code> encoded strings,\n<a href=\"buffer.html#buffer_class_buffer\">Buffers</a>, <code>TypedArray</code>, or <code>DataView</code>s. If the cipher does not need\nan initialization vector, <code>iv</code> may be <code>null</code>.</p>\n<p>Initialization vectors should be unpredictable and unique; ideally, they will be\ncryptographically random. They do not have to be secret: IVs are typically just\nadded to ciphertext messages unencrypted. It may sound contradictory that\nsomething has to be unpredictable and unique, but does not have to be secret;\nit is important to remember that an attacker must not be able to predict ahead\nof time what a given IV will be.</p>\n"
            },
            {
              "textRaw": "crypto.createDiffieHellman(prime[, primeEncoding][, generator][, generatorEncoding])",
              "type": "method",
              "name": "createDiffieHellman",
              "meta": {
                "added": [
                  "v0.11.12"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `prime` argument can be any `TypedArray` or `DataView` now."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/11983",
                    "description": "The `prime` argument can be a `Uint8Array` now."
                  },
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5522",
                    "description": "The default for the encoding parameters changed from `binary` to `utf8`."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`prime` {string | Buffer | TypedArray | DataView} ",
                      "name": "prime",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`primeEncoding` {string} ",
                      "name": "primeEncoding",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`generator` {number | string | Buffer | TypedArray | DataView} **Default:** `2` ",
                      "name": "generator",
                      "type": "number | string | Buffer | TypedArray | DataView",
                      "default": "`2`",
                      "optional": true
                    },
                    {
                      "textRaw": "`generatorEncoding` {string} ",
                      "name": "generatorEncoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "prime"
                    },
                    {
                      "name": "primeEncoding",
                      "optional": true
                    },
                    {
                      "name": "generator",
                      "optional": true
                    },
                    {
                      "name": "generatorEncoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a <code>DiffieHellman</code> key exchange object using the supplied <code>prime</code> and an\noptional specific <code>generator</code>.</p>\n<p>The <code>generator</code> argument can be a number, string, or <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>. If\n<code>generator</code> is not specified, the value <code>2</code> is used.</p>\n<p>The <code>primeEncoding</code> and <code>generatorEncoding</code> arguments can be <code>&#39;latin1&#39;</code>,\n<code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>.</p>\n<p>If <code>primeEncoding</code> is specified, <code>prime</code> is expected to be a string; otherwise\na <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, <code>TypedArray</code>, or <code>DataView</code> is expected.</p>\n<p>If <code>generatorEncoding</code> is specified, <code>generator</code> is expected to be a string;\notherwise a number, <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, <code>TypedArray</code>, or <code>DataView</code> is expected.</p>\n"
            },
            {
              "textRaw": "crypto.createDiffieHellman(primeLength[, generator])",
              "type": "method",
              "name": "createDiffieHellman",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`primeLength` {number} ",
                      "name": "primeLength",
                      "type": "number"
                    },
                    {
                      "textRaw": "`generator` {number | string | Buffer | TypedArray | DataView} **Default:** `2` ",
                      "name": "generator",
                      "type": "number | string | Buffer | TypedArray | DataView",
                      "default": "`2`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "primeLength"
                    },
                    {
                      "name": "generator",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a <code>DiffieHellman</code> key exchange object and generates a prime of\n<code>primeLength</code> bits using an optional specific numeric <code>generator</code>.\nIf <code>generator</code> is not specified, the value <code>2</code> is used.</p>\n"
            },
            {
              "textRaw": "crypto.createECDH(curveName)",
              "type": "method",
              "name": "createECDH",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`curveName` {string} ",
                      "name": "curveName",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "curveName"
                    }
                  ]
                }
              ],
              "desc": "<p>Creates an Elliptic Curve Diffie-Hellman (<code>ECDH</code>) key exchange object using a\npredefined curve specified by the <code>curveName</code> string. Use\n<a href=\"crypto.html#crypto_crypto_getcurves\"><code>crypto.getCurves()</code></a> to obtain a list of available curve names. On recent\nOpenSSL releases, <code>openssl ecparam -list_curves</code> will also display the name\nand description of each available elliptic curve.</p>\n"
            },
            {
              "textRaw": "crypto.createHash(algorithm[, options])",
              "type": "method",
              "name": "createHash",
              "meta": {
                "added": [
                  "v0.1.92"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Hash} ",
                    "name": "return",
                    "type": "Hash"
                  },
                  "params": [
                    {
                      "textRaw": "`algorithm` {string} ",
                      "name": "algorithm",
                      "type": "string"
                    },
                    {
                      "textRaw": "`options` {Object} [`stream.transform` options][] ",
                      "name": "options",
                      "type": "Object",
                      "desc": "[`stream.transform` options][]",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "algorithm"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates and returns a <code>Hash</code> object that can be used to generate hash digests\nusing the given <code>algorithm</code>. Optional <code>options</code> argument controls stream\nbehavior.</p>\n<p>The <code>algorithm</code> is dependent on the available algorithms supported by the\nversion of OpenSSL on the platform. Examples are <code>&#39;sha256&#39;</code>, <code>&#39;sha512&#39;</code>, etc.\nOn recent releases of OpenSSL, <code>openssl list -digest-algorithms</code>\n(<code>openssl list-message-digest-algorithms</code> for older versions of OpenSSL) will\ndisplay the available digest algorithms.</p>\n<p>Example: generating the sha256 sum of a file</p>\n<pre><code class=\"lang-js\">const filename = process.argv[2];\nconst crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nconst input = fs.createReadStream(filename);\ninput.on(&#39;readable&#39;, () =&gt; {\n  const data = input.read();\n  if (data)\n    hash.update(data);\n  else {\n    console.log(`${hash.digest(&#39;hex&#39;)} ${filename}`);\n  }\n});\n</code></pre>\n"
            },
            {
              "textRaw": "crypto.createHmac(algorithm, key[, options])",
              "type": "method",
              "name": "createHmac",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Hmac} ",
                    "name": "return",
                    "type": "Hmac"
                  },
                  "params": [
                    {
                      "textRaw": "`algorithm` {string} ",
                      "name": "algorithm",
                      "type": "string"
                    },
                    {
                      "textRaw": "`key` {string | Buffer | TypedArray | DataView} ",
                      "name": "key",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`options` {Object} [`stream.transform` options][] ",
                      "name": "options",
                      "type": "Object",
                      "desc": "[`stream.transform` options][]",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "algorithm"
                    },
                    {
                      "name": "key"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates and returns an <code>Hmac</code> object that uses the given <code>algorithm</code> and <code>key</code>.\nOptional <code>options</code> argument controls stream behavior.</p>\n<p>The <code>algorithm</code> is dependent on the available algorithms supported by the\nversion of OpenSSL on the platform. Examples are <code>&#39;sha256&#39;</code>, <code>&#39;sha512&#39;</code>, etc.\nOn recent releases of OpenSSL, <code>openssl list -digest-algorithms</code>\n(<code>openssl list-message-digest-algorithms</code> for older versions of OpenSSL) will\ndisplay the available digest algorithms.</p>\n<p>The <code>key</code> is the HMAC key used to generate the cryptographic HMAC hash.</p>\n<p>Example: generating the sha256 HMAC of a file</p>\n<pre><code class=\"lang-js\">const filename = process.argv[2];\nconst crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nconst input = fs.createReadStream(filename);\ninput.on(&#39;readable&#39;, () =&gt; {\n  const data = input.read();\n  if (data)\n    hmac.update(data);\n  else {\n    console.log(`${hmac.digest(&#39;hex&#39;)} ${filename}`);\n  }\n});\n</code></pre>\n"
            },
            {
              "textRaw": "crypto.createSign(algorithm[, options])",
              "type": "method",
              "name": "createSign",
              "meta": {
                "added": [
                  "v0.1.92"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Sign} ",
                    "name": "return",
                    "type": "Sign"
                  },
                  "params": [
                    {
                      "textRaw": "`algorithm` {string} ",
                      "name": "algorithm",
                      "type": "string"
                    },
                    {
                      "textRaw": "`options` {Object} [`stream.Writable` options][] ",
                      "name": "options",
                      "type": "Object",
                      "desc": "[`stream.Writable` options][]",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "algorithm"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates and returns a <code>Sign</code> object that uses the given <code>algorithm</code>.\nUse <a href=\"#crypto_crypto_gethashes\"><code>crypto.getHashes()</code></a> to obtain an array of names of the available\nsigning algorithms. Optional <code>options</code> argument controls the\n<code>stream.Writable</code> behavior.</p>\n"
            },
            {
              "textRaw": "crypto.createVerify(algorithm[, options])",
              "type": "method",
              "name": "createVerify",
              "meta": {
                "added": [
                  "v0.1.92"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Verify} ",
                    "name": "return",
                    "type": "Verify"
                  },
                  "params": [
                    {
                      "textRaw": "`algorithm` {string} ",
                      "name": "algorithm",
                      "type": "string"
                    },
                    {
                      "textRaw": "`options` {Object} [`stream.Writable` options][] ",
                      "name": "options",
                      "type": "Object",
                      "desc": "[`stream.Writable` options][]",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "algorithm"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates and returns a <code>Verify</code> object that uses the given algorithm.\nUse <a href=\"#crypto_crypto_gethashes\"><code>crypto.getHashes()</code></a> to obtain an array of names of the available\nsigning algorithms. Optional <code>options</code> argument controls the\n<code>stream.Writable</code> behavior.</p>\n"
            },
            {
              "textRaw": "crypto.getCiphers()",
              "type": "method",
              "name": "getCiphers",
              "meta": {
                "added": [
                  "v0.9.3"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string[]} An array with the names of the supported cipher algorithms. ",
                    "name": "return",
                    "type": "string[]",
                    "desc": "An array with the names of the supported cipher algorithms."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Example:</p>\n<pre><code class=\"lang-js\">const ciphers = crypto.getCiphers();\nconsole.log(ciphers); // [&#39;aes-128-cbc&#39;, &#39;aes-128-ccm&#39;, ...]\n</code></pre>\n"
            },
            {
              "textRaw": "crypto.getCurves()",
              "type": "method",
              "name": "getCurves",
              "meta": {
                "added": [
                  "v2.3.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string[]} An array with the names of the supported elliptic curves. ",
                    "name": "return",
                    "type": "string[]",
                    "desc": "An array with the names of the supported elliptic curves."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Example:</p>\n<pre><code class=\"lang-js\">const curves = crypto.getCurves();\nconsole.log(curves); // [&#39;Oakley-EC2N-3&#39;, &#39;Oakley-EC2N-4&#39;, ...]\n</code></pre>\n"
            },
            {
              "textRaw": "crypto.getDiffieHellman(groupName)",
              "type": "method",
              "name": "getDiffieHellman",
              "meta": {
                "added": [
                  "v0.7.5"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "name": "return",
                    "type": "Object"
                  },
                  "params": [
                    {
                      "textRaw": "`groupName` {string} ",
                      "name": "groupName",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "groupName"
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a predefined <code>DiffieHellman</code> key exchange object. The\nsupported groups are: <code>&#39;modp1&#39;</code>, <code>&#39;modp2&#39;</code>, <code>&#39;modp5&#39;</code> (defined in\n<a href=\"https://www.rfc-editor.org/rfc/rfc2412.txt\">RFC 2412</a>, but see <a href=\"#fs_caveats\">Caveats</a>) and <code>&#39;modp14&#39;</code>, <code>&#39;modp15&#39;</code>,\n<code>&#39;modp16&#39;</code>, <code>&#39;modp17&#39;</code>, <code>&#39;modp18&#39;</code> (defined in <a href=\"https://www.rfc-editor.org/rfc/rfc3526.txt\">RFC 3526</a>). The\nreturned object mimics the interface of objects created by\n<a href=\"#crypto_crypto_creatediffiehellman_prime_primeencoding_generator_generatorencoding\"><code>crypto.createDiffieHellman()</code></a>, but will not allow changing\nthe keys (with <a href=\"#crypto_diffiehellman_setpublickey_publickey_encoding\"><code>diffieHellman.setPublicKey()</code></a> for example). The\nadvantage of using this method is that the parties do not have to\ngenerate nor exchange a group modulus beforehand, saving both processor\nand communication time.</p>\n<p>Example (obtaining a shared secret):</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst alice = crypto.getDiffieHellman(&#39;modp14&#39;);\nconst bob = crypto.getDiffieHellman(&#39;modp14&#39;);\n\nalice.generateKeys();\nbob.generateKeys();\n\nconst aliceSecret = alice.computeSecret(bob.getPublicKey(), null, &#39;hex&#39;);\nconst bobSecret = bob.computeSecret(alice.getPublicKey(), null, &#39;hex&#39;);\n\n/* aliceSecret and bobSecret should be the same */\nconsole.log(aliceSecret === bobSecret);\n</code></pre>\n"
            },
            {
              "textRaw": "crypto.getFips()",
              "type": "method",
              "name": "getFips",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} `true` if and only if a FIPS compliant crypto provider is currently in use. ",
                    "name": "return",
                    "type": "boolean",
                    "desc": "`true` if and only if a FIPS compliant crypto provider is currently in use."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Example:</p>\n<pre><code class=\"lang-js\">const hashes = crypto.getHashes();\nconsole.log(hashes); // [&#39;DSA&#39;, &#39;DSA-SHA&#39;, &#39;DSA-SHA1&#39;, ...]\n</code></pre>\n"
            },
            {
              "textRaw": "crypto.getHashes()",
              "type": "method",
              "name": "getHashes",
              "meta": {
                "added": [
                  "v0.9.3"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string[]} An array of the names of the supported hash algorithms, such as `'RSA-SHA256'`. ",
                    "name": "return",
                    "type": "string[]",
                    "desc": "An array of the names of the supported hash algorithms, such as `'RSA-SHA256'`."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Example:</p>\n<pre><code class=\"lang-js\">const hashes = crypto.getHashes();\nconsole.log(hashes); // [&#39;DSA&#39;, &#39;DSA-SHA&#39;, &#39;DSA-SHA1&#39;, ...]\n</code></pre>\n"
            },
            {
              "textRaw": "crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)",
              "type": "method",
              "name": "pbkdf2",
              "meta": {
                "added": [
                  "v0.5.5"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/11305",
                    "description": "The `digest` parameter is always required now."
                  },
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/4047",
                    "description": "Calling this function without passing the `digest` parameter is deprecated now and will emit a warning."
                  },
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5522",
                    "description": "The default encoding for `password` if it is a string changed from `binary` to `utf8`."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`password` {string|Buffer|TypedArray} ",
                      "name": "password",
                      "type": "string|Buffer|TypedArray"
                    },
                    {
                      "textRaw": "`salt` {string|Buffer|TypedArray} ",
                      "name": "salt",
                      "type": "string|Buffer|TypedArray"
                    },
                    {
                      "textRaw": "`iterations` {number} ",
                      "name": "iterations",
                      "type": "number"
                    },
                    {
                      "textRaw": "`keylen` {number} ",
                      "name": "keylen",
                      "type": "number"
                    },
                    {
                      "textRaw": "`digest` {string} ",
                      "name": "digest",
                      "type": "string"
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "options": [
                        {
                          "textRaw": "`err` {Error} ",
                          "name": "err",
                          "type": "Error"
                        },
                        {
                          "textRaw": "`derivedKey` {Buffer} ",
                          "name": "derivedKey",
                          "type": "Buffer"
                        }
                      ],
                      "name": "callback",
                      "type": "Function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "password"
                    },
                    {
                      "name": "salt"
                    },
                    {
                      "name": "iterations"
                    },
                    {
                      "name": "keylen"
                    },
                    {
                      "name": "digest"
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>Provides an asynchronous Password-Based Key Derivation Function 2 (PBKDF2)\nimplementation. A selected HMAC digest algorithm specified by <code>digest</code> is\napplied to derive a key of the requested byte length (<code>keylen</code>) from the\n<code>password</code>, <code>salt</code> and <code>iterations</code>.</p>\n<p>The supplied <code>callback</code> function is called with two arguments: <code>err</code> and\n<code>derivedKey</code>. If an error occurs while deriving the key, <code>err</code> will be set;\notherwise <code>err</code> will be <code>null</code>. By default, the successfully generated\n<code>derivedKey</code> will be passed to the callback as a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>. An error will be\nthrown if any of the input arguments specify invalid values or types.</p>\n<p>The <code>iterations</code> argument must be a number set as high as possible. The\nhigher the number of iterations, the more secure the derived key will be,\nbut will take a longer amount of time to complete.</p>\n<p>The <code>salt</code> should also be as unique as possible. It is recommended that the\nsalts are random and their lengths are at least 16 bytes. See\n<a href=\"http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf\">NIST SP 800-132</a> for details.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\ncrypto.pbkdf2(&#39;secret&#39;, &#39;salt&#39;, 100000, 64, &#39;sha512&#39;, (err, derivedKey) =&gt; {\n  if (err) throw err;\n  console.log(derivedKey.toString(&#39;hex&#39;));  // &#39;3745e48...08d59ae&#39;\n});\n</code></pre>\n<p>The <code>crypto.DEFAULT_ENCODING</code> property can be used to change the way the\n<code>derivedKey</code> is passed to the callback. This property, however, has been\ndeprecated and use should be avoided.</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\ncrypto.DEFAULT_ENCODING = &#39;hex&#39;;\ncrypto.pbkdf2(&#39;secret&#39;, &#39;salt&#39;, 100000, 512, &#39;sha512&#39;, (err, derivedKey) =&gt; {\n  if (err) throw err;\n  console.log(derivedKey);  // &#39;3745e48...aa39b34&#39;\n});\n</code></pre>\n<p>An array of supported digest functions can be retrieved using\n<a href=\"#crypto_crypto_gethashes\"><code>crypto.getHashes()</code></a>.</p>\n<p>Note that this API uses libuv&#39;s threadpool, which can have surprising and\nnegative performance implications for some applications, see the\n<a href=\"cli.html#cli_uv_threadpool_size_size\"><code>UV_THREADPOOL_SIZE</code></a> documentation for more information.</p>\n"
            },
            {
              "textRaw": "crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)",
              "type": "method",
              "name": "pbkdf2Sync",
              "meta": {
                "added": [
                  "v0.9.3"
                ],
                "changes": [
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/4047",
                    "description": "Calling this function without passing the `digest` parameter is deprecated now and will emit a warning."
                  },
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5522",
                    "description": "The default encoding for `password` if it is a string changed from `binary` to `utf8`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} ",
                    "name": "return",
                    "type": "Buffer"
                  },
                  "params": [
                    {
                      "textRaw": "`password` {string|Buffer|TypedArray} ",
                      "name": "password",
                      "type": "string|Buffer|TypedArray"
                    },
                    {
                      "textRaw": "`salt` {string|Buffer|TypedArray} ",
                      "name": "salt",
                      "type": "string|Buffer|TypedArray"
                    },
                    {
                      "textRaw": "`iterations` {number} ",
                      "name": "iterations",
                      "type": "number"
                    },
                    {
                      "textRaw": "`keylen` {number} ",
                      "name": "keylen",
                      "type": "number"
                    },
                    {
                      "textRaw": "`digest` {string} ",
                      "name": "digest",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "password"
                    },
                    {
                      "name": "salt"
                    },
                    {
                      "name": "iterations"
                    },
                    {
                      "name": "keylen"
                    },
                    {
                      "name": "digest"
                    }
                  ]
                }
              ],
              "desc": "<p>Provides a synchronous Password-Based Key Derivation Function 2 (PBKDF2)\nimplementation. A selected HMAC digest algorithm specified by <code>digest</code> is\napplied to derive a key of the requested byte length (<code>keylen</code>) from the\n<code>password</code>, <code>salt</code> and <code>iterations</code>.</p>\n<p>If an error occurs an <code>Error</code> will be thrown, otherwise the derived key will be\nreturned as a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>.</p>\n<p>The <code>iterations</code> argument must be a number set as high as possible. The\nhigher the number of iterations, the more secure the derived key will be,\nbut will take a longer amount of time to complete.</p>\n<p>The <code>salt</code> should also be as unique as possible. It is recommended that the\nsalts are random and their lengths are at least 16 bytes. See\n<a href=\"http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf\">NIST SP 800-132</a> for details.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst key = crypto.pbkdf2Sync(&#39;secret&#39;, &#39;salt&#39;, 100000, 64, &#39;sha512&#39;);\nconsole.log(key.toString(&#39;hex&#39;));  // &#39;3745e48...08d59ae&#39;\n</code></pre>\n<p>The <code>crypto.DEFAULT_ENCODING</code> property may be used to change the way the\n<code>derivedKey</code> is returned. This property, however, has been deprecated and use\nshould be avoided.</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\ncrypto.DEFAULT_ENCODING = &#39;hex&#39;;\nconst key = crypto.pbkdf2Sync(&#39;secret&#39;, &#39;salt&#39;, 100000, 512, &#39;sha512&#39;);\nconsole.log(key);  // &#39;3745e48...aa39b34&#39;\n</code></pre>\n<p>An array of supported digest functions can be retrieved using\n<a href=\"#crypto_crypto_gethashes\"><code>crypto.getHashes()</code></a>.</p>\n"
            },
            {
              "textRaw": "crypto.privateDecrypt(privateKey, buffer)",
              "type": "method",
              "name": "privateDecrypt",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} A new `Buffer` with the decrypted content. ",
                    "name": "return",
                    "type": "Buffer",
                    "desc": "A new `Buffer` with the decrypted content."
                  },
                  "params": [
                    {
                      "textRaw": "`privateKey` {Object | string} ",
                      "options": [
                        {
                          "textRaw": "`key` {string} A PEM encoded private key. ",
                          "name": "key",
                          "type": "string",
                          "desc": "A PEM encoded private key."
                        },
                        {
                          "textRaw": "`passphrase` {string} An optional passphrase for the private key. ",
                          "name": "passphrase",
                          "type": "string",
                          "desc": "An optional passphrase for the private key."
                        },
                        {
                          "textRaw": "`padding` {crypto.constants} An optional padding value defined in `crypto.constants`, which may be: `crypto.constants.RSA_NO_PADDING`, `RSA_PKCS1_PADDING`, or `crypto.constants.RSA_PKCS1_OAEP_PADDING`. ",
                          "name": "padding",
                          "type": "crypto.constants",
                          "desc": "An optional padding value defined in `crypto.constants`, which may be: `crypto.constants.RSA_NO_PADDING`, `RSA_PKCS1_PADDING`, or `crypto.constants.RSA_PKCS1_OAEP_PADDING`."
                        }
                      ],
                      "name": "privateKey",
                      "type": "Object | string"
                    },
                    {
                      "textRaw": "`buffer` {Buffer | TypedArray | DataView} ",
                      "name": "buffer",
                      "type": "Buffer | TypedArray | DataView"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "privateKey"
                    },
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ],
              "desc": "<p>Decrypts <code>buffer</code> with <code>privateKey</code>.</p>\n<p><code>privateKey</code> can be an object or a string. If <code>privateKey</code> is a string, it is\ntreated as the key with no passphrase and will use <code>RSA_PKCS1_OAEP_PADDING</code>.</p>\n"
            },
            {
              "textRaw": "crypto.privateEncrypt(privateKey, buffer)",
              "type": "method",
              "name": "privateEncrypt",
              "meta": {
                "added": [
                  "v1.1.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} A new `Buffer` with the encrypted content. ",
                    "name": "return",
                    "type": "Buffer",
                    "desc": "A new `Buffer` with the encrypted content."
                  },
                  "params": [
                    {
                      "textRaw": "`privateKey` {Object | string} ",
                      "options": [
                        {
                          "textRaw": "`key` {string} A PEM encoded private key. ",
                          "name": "key",
                          "type": "string",
                          "desc": "A PEM encoded private key."
                        },
                        {
                          "textRaw": "`passphrase` {string} An optional passphrase for the private key. ",
                          "name": "passphrase",
                          "type": "string",
                          "desc": "An optional passphrase for the private key."
                        },
                        {
                          "textRaw": "`padding` {crypto.constants} An optional padding value defined in `crypto.constants`, which may be: `crypto.constants.RSA_NO_PADDING` or `RSA_PKCS1_PADDING`. ",
                          "name": "padding",
                          "type": "crypto.constants",
                          "desc": "An optional padding value defined in `crypto.constants`, which may be: `crypto.constants.RSA_NO_PADDING` or `RSA_PKCS1_PADDING`."
                        }
                      ],
                      "name": "privateKey",
                      "type": "Object | string"
                    },
                    {
                      "textRaw": "`buffer` {Buffer | TypedArray | DataView} ",
                      "name": "buffer",
                      "type": "Buffer | TypedArray | DataView"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "privateKey"
                    },
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ],
              "desc": "<p>Encrypts <code>buffer</code> with <code>privateKey</code>.</p>\n<p><code>privateKey</code> can be an object or a string. If <code>privateKey</code> is a string, it is\ntreated as the key with no passphrase and will use <code>RSA_PKCS1_PADDING</code>.</p>\n"
            },
            {
              "textRaw": "crypto.publicDecrypt(key, buffer)",
              "type": "method",
              "name": "publicDecrypt",
              "meta": {
                "added": [
                  "v1.1.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} A new `Buffer` with the decrypted content. ",
                    "name": "return",
                    "type": "Buffer",
                    "desc": "A new `Buffer` with the decrypted content."
                  },
                  "params": [
                    {
                      "textRaw": "`key` {Object | string} ",
                      "options": [
                        {
                          "textRaw": "`key` {string} A PEM encoded public or private key. ",
                          "name": "key",
                          "type": "string",
                          "desc": "A PEM encoded public or private key."
                        },
                        {
                          "textRaw": "`passphrase` {string} An optional passphrase for the private key. ",
                          "name": "passphrase",
                          "type": "string",
                          "desc": "An optional passphrase for the private key."
                        },
                        {
                          "textRaw": "`padding` {crypto.constants} An optional padding value defined in `crypto.constants`, which may be: `crypto.constants.RSA_NO_PADDING` or `RSA_PKCS1_PADDING`. ",
                          "name": "padding",
                          "type": "crypto.constants",
                          "desc": "An optional padding value defined in `crypto.constants`, which may be: `crypto.constants.RSA_NO_PADDING` or `RSA_PKCS1_PADDING`."
                        }
                      ],
                      "name": "key",
                      "type": "Object | string"
                    },
                    {
                      "textRaw": "`buffer` {Buffer | TypedArray | DataView} ",
                      "name": "buffer",
                      "type": "Buffer | TypedArray | DataView"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "key"
                    },
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ],
              "desc": "<p>Decrypts <code>buffer</code> with <code>key</code>.</p>\n<p><code>key</code> can be an object or a string. If <code>key</code> is a string, it is treated as\nthe key with no passphrase and will use <code>RSA_PKCS1_PADDING</code>.</p>\n<p>Because RSA public keys can be derived from private keys, a private key may\nbe passed instead of a public key.</p>\n"
            },
            {
              "textRaw": "crypto.publicEncrypt(key, buffer)",
              "type": "method",
              "name": "publicEncrypt",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} A new `Buffer` with the encrypted content. ",
                    "name": "return",
                    "type": "Buffer",
                    "desc": "A new `Buffer` with the encrypted content."
                  },
                  "params": [
                    {
                      "textRaw": "`key` {Object | string} ",
                      "options": [
                        {
                          "textRaw": "`key` {string} A PEM encoded public or private key. ",
                          "name": "key",
                          "type": "string",
                          "desc": "A PEM encoded public or private key."
                        },
                        {
                          "textRaw": "`passphrase` {string} An optional passphrase for the private key. ",
                          "name": "passphrase",
                          "type": "string",
                          "desc": "An optional passphrase for the private key."
                        },
                        {
                          "textRaw": "`padding` {crypto.constants} An optional padding value defined in `crypto.constants`, which may be: `crypto.constants.RSA_NO_PADDING`, `RSA_PKCS1_PADDING`, or `crypto.constants.RSA_PKCS1_OAEP_PADDING`. ",
                          "name": "padding",
                          "type": "crypto.constants",
                          "desc": "An optional padding value defined in `crypto.constants`, which may be: `crypto.constants.RSA_NO_PADDING`, `RSA_PKCS1_PADDING`, or `crypto.constants.RSA_PKCS1_OAEP_PADDING`."
                        }
                      ],
                      "name": "key",
                      "type": "Object | string"
                    },
                    {
                      "textRaw": "`buffer` {Buffer | TypedArray | DataView} ",
                      "name": "buffer",
                      "type": "Buffer | TypedArray | DataView"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "key"
                    },
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ],
              "desc": "<p>Encrypts the content of <code>buffer</code> with <code>key</code> and returns a new\n<a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> with encrypted content.</p>\n<p><code>key</code> can be an object or a string. If <code>key</code> is a string, it is treated as\nthe key with no passphrase and will use <code>RSA_PKCS1_OAEP_PADDING</code>.</p>\n<p>Because RSA public keys can be derived from private keys, a private key may\nbe passed instead of a public key.</p>\n"
            },
            {
              "textRaw": "crypto.randomBytes(size[, callback])",
              "type": "method",
              "name": "randomBytes",
              "meta": {
                "added": [
                  "v0.5.8"
                ],
                "changes": [
                  {
                    "version": "v9.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16454",
                    "description": "Passing `null` as the `callback` argument now throws `ERR_INVALID_CALLBACK`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} if the `callback` function is not provided. ",
                    "name": "return",
                    "type": "Buffer",
                    "desc": "if the `callback` function is not provided."
                  },
                  "params": [
                    {
                      "textRaw": "`size` {number} ",
                      "name": "size",
                      "type": "number"
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "options": [
                        {
                          "textRaw": "`err` {Error} ",
                          "name": "err",
                          "type": "Error"
                        },
                        {
                          "textRaw": "`buf` {Buffer} ",
                          "name": "buf",
                          "type": "Buffer"
                        }
                      ],
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "size"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Generates cryptographically strong pseudo-random data. The <code>size</code> argument\nis a number indicating the number of bytes to generate.</p>\n<p>If a <code>callback</code> function is provided, the bytes are generated asynchronously\nand the <code>callback</code> function is invoked with two arguments: <code>err</code> and <code>buf</code>.\nIf an error occurs, <code>err</code> will be an <code>Error</code> object; otherwise it is <code>null</code>. The\n<code>buf</code> argument is a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> containing the generated bytes.</p>\n<pre><code class=\"lang-js\">// Asynchronous\nconst crypto = require(&#39;crypto&#39;);\ncrypto.randomBytes(256, (err, buf) =&gt; {\n  if (err) throw err;\n  console.log(`${buf.length} bytes of random data: ${buf.toString(&#39;hex&#39;)}`);\n});\n</code></pre>\n<p>If the <code>callback</code> function is not provided, the random bytes are generated\nsynchronously and returned as a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>. An error will be thrown if\nthere is a problem generating the bytes.</p>\n<pre><code class=\"lang-js\">// Synchronous\nconst buf = crypto.randomBytes(256);\nconsole.log(\n  `${buf.length} bytes of random data: ${buf.toString(&#39;hex&#39;)}`);\n</code></pre>\n<p>The <code>crypto.randomBytes()</code> method will not complete until there is\nsufficient entropy available.\nThis should normally never take longer than a few milliseconds. The only time\nwhen generating the random bytes may conceivably block for a longer period of\ntime is right after boot, when the whole system is still low on entropy.</p>\n<p>Note that this API uses libuv&#39;s threadpool, which can have surprising and\nnegative performance implications for some applications, see the\n<a href=\"cli.html#cli_uv_threadpool_size_size\"><code>UV_THREADPOOL_SIZE</code></a> documentation for more information.</p>\n<p>The asynchronous version of <code>crypto.randomBytes()</code> is carried out in a single\nthreadpool request. To minimize threadpool task length variation, partition\nlarge <code>randomBytes</code> requests when doing so as part of fulfilling a client\nrequest.</p>\n"
            },
            {
              "textRaw": "crypto.randomFillSync(buffer[, offset][, size])",
              "type": "method",
              "name": "randomFillSync",
              "meta": {
                "added": [
                  "v7.10.0"
                ],
                "changes": [
                  {
                    "version": "v9.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/15231",
                    "description": "The `buffer` argument may be any `TypedArray` or `DataView`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} ",
                    "name": "return",
                    "type": "Buffer"
                  },
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView} Must be supplied. ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView",
                      "desc": "Must be supplied."
                    },
                    {
                      "textRaw": "`offset` {number} **Default:** `0` ",
                      "name": "offset",
                      "type": "number",
                      "default": "`0`",
                      "optional": true
                    },
                    {
                      "textRaw": "`size` {number} **Default:** `buffer.length - offset` ",
                      "name": "size",
                      "type": "number",
                      "default": "`buffer.length - offset`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "offset",
                      "optional": true
                    },
                    {
                      "name": "size",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Synchronous version of <a href=\"#crypto_crypto_randomfill_buffer_offset_size_callback\"><code>crypto.randomFill()</code></a>.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.alloc(10);\nconsole.log(crypto.randomFillSync(buf).toString(&#39;hex&#39;));\n\ncrypto.randomFillSync(buf, 5);\nconsole.log(buf.toString(&#39;hex&#39;));\n\n// The above is equivalent to the following:\ncrypto.randomFillSync(buf, 5, 5);\nconsole.log(buf.toString(&#39;hex&#39;));\n</code></pre>\n<p>Any <code>TypedArray</code> or <code>DataView</code> instance may be passed as <code>buffer</code>.</p>\n<pre><code class=\"lang-js\">const a = new Uint32Array(10);\nconsole.log(crypto.randomFillSync(a).toString(&#39;hex&#39;));\n\nconst b = new Float64Array(10);\nconsole.log(crypto.randomFillSync(a).toString(&#39;hex&#39;));\n\nconst c = new DataView(new ArrayBuffer(10));\nconsole.log(crypto.randomFillSync(a).toString(&#39;hex&#39;));\n</code></pre>\n"
            },
            {
              "textRaw": "crypto.randomFill(buffer[, offset][, size], callback)",
              "type": "method",
              "name": "randomFill",
              "meta": {
                "added": [
                  "v7.10.0"
                ],
                "changes": [
                  {
                    "version": "v9.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/15231",
                    "description": "The `buffer` argument may be any `TypedArray` or `DataView`."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView} Must be supplied. ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView",
                      "desc": "Must be supplied."
                    },
                    {
                      "textRaw": "`offset` {number} **Default:** `0` ",
                      "name": "offset",
                      "type": "number",
                      "default": "`0`",
                      "optional": true
                    },
                    {
                      "textRaw": "`size` {number} **Default:** `buffer.length - offset` ",
                      "name": "size",
                      "type": "number",
                      "default": "`buffer.length - offset`",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} `function(err, buf) {}`. ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "`function(err, buf) {}`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "offset",
                      "optional": true
                    },
                    {
                      "name": "size",
                      "optional": true
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>This function is similar to <a href=\"#crypto_crypto_randombytes_size_callback\"><code>crypto.randomBytes()</code></a> but requires the first\nargument to be a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> that will be filled. It also\nrequires that a callback is passed in.</p>\n<p>If the <code>callback</code> function is not provided, an error will be thrown.</p>\n<pre><code class=\"lang-js\">const buf = Buffer.alloc(10);\ncrypto.randomFill(buf, (err, buf) =&gt; {\n  if (err) throw err;\n  console.log(buf.toString(&#39;hex&#39;));\n});\n\ncrypto.randomFill(buf, 5, (err, buf) =&gt; {\n  if (err) throw err;\n  console.log(buf.toString(&#39;hex&#39;));\n});\n\n// The above is equivalent to the following:\ncrypto.randomFill(buf, 5, 5, (err, buf) =&gt; {\n  if (err) throw err;\n  console.log(buf.toString(&#39;hex&#39;));\n});\n</code></pre>\n<p>Any <code>TypedArray</code> or <code>DataView</code> instance may be passed as <code>buffer</code>.</p>\n<pre><code class=\"lang-js\">const a = new Uint32Array(10);\ncrypto.randomFill(a, (err, buf) =&gt; {\n  if (err) throw err;\n  console.log(buf.toString(&#39;hex&#39;));\n});\n\nconst b = new Float64Array(10);\ncrypto.randomFill(b, (err, buf) =&gt; {\n  if (err) throw err;\n  console.log(buf.toString(&#39;hex&#39;));\n});\n\nconst c = new DataView(new ArrayBuffer(10));\ncrypto.randomFill(c, (err, buf) =&gt; {\n  if (err) throw err;\n  console.log(buf.toString(&#39;hex&#39;));\n});\n</code></pre>\n<p>Note that this API uses libuv&#39;s threadpool, which can have surprising and\nnegative performance implications for some applications, see the\n<a href=\"cli.html#cli_uv_threadpool_size_size\"><code>UV_THREADPOOL_SIZE</code></a> documentation for more information.</p>\n<p>The asynchronous version of <code>crypto.randomFill()</code> is carried out in a single\nthreadpool request. To minimize threadpool task length variation, partition\nlarge <code>randomFill</code> requests when doing so as part of fulfilling a client\nrequest.</p>\n"
            },
            {
              "textRaw": "crypto.setEngine(engine[, flags])",
              "type": "method",
              "name": "setEngine",
              "meta": {
                "added": [
                  "v0.11.11"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`engine` {string} ",
                      "name": "engine",
                      "type": "string"
                    },
                    {
                      "textRaw": "`flags` {crypto.constants} **Default:** `crypto.constants.ENGINE_METHOD_ALL` ",
                      "name": "flags",
                      "type": "crypto.constants",
                      "default": "`crypto.constants.ENGINE_METHOD_ALL`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "engine"
                    },
                    {
                      "name": "flags",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Load and set the <code>engine</code> for some or all OpenSSL functions (selected by flags).</p>\n<p><code>engine</code> could be either an id or a path to the engine&#39;s shared library.</p>\n<p>The optional <code>flags</code> argument uses <code>ENGINE_METHOD_ALL</code> by default. The <code>flags</code>\nis a bit field taking one of or a mix of the following flags (defined in\n<code>crypto.constants</code>):</p>\n<ul>\n<li><code>crypto.constants.ENGINE_METHOD_RSA</code></li>\n<li><code>crypto.constants.ENGINE_METHOD_DSA</code></li>\n<li><code>crypto.constants.ENGINE_METHOD_DH</code></li>\n<li><code>crypto.constants.ENGINE_METHOD_RAND</code></li>\n<li><code>crypto.constants.ENGINE_METHOD_EC</code></li>\n<li><code>crypto.constants.ENGINE_METHOD_CIPHERS</code></li>\n<li><code>crypto.constants.ENGINE_METHOD_DIGESTS</code></li>\n<li><code>crypto.constants.ENGINE_METHOD_PKEY_METHS</code></li>\n<li><code>crypto.constants.ENGINE_METHOD_PKEY_ASN1_METHS</code></li>\n<li><code>crypto.constants.ENGINE_METHOD_ALL</code></li>\n<li><code>crypto.constants.ENGINE_METHOD_NONE</code></li>\n</ul>\n<p>The flags below are deprecated in OpenSSL-1.1.0.</p>\n<ul>\n<li><code>crypto.constants.ENGINE_METHOD_ECDH</code></li>\n<li><code>crypto.constants.ENGINE_METHOD_ECDSA</code></li>\n<li><code>crypto.constants.ENGINE_METHOD_STORE</code></li>\n</ul>\n"
            },
            {
              "textRaw": "crypto.setFips(bool)",
              "type": "method",
              "name": "setFips",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`bool` {boolean} `true` to enable FIPS mode. ",
                      "name": "bool",
                      "type": "boolean",
                      "desc": "`true` to enable FIPS mode."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "bool"
                    }
                  ]
                }
              ],
              "desc": "<p>Enables the FIPS compliant crypto provider in a FIPS-enabled Node.js build.\nThrows an error if FIPS mode is not available.</p>\n"
            },
            {
              "textRaw": "crypto.timingSafeEqual(a, b)",
              "type": "method",
              "name": "timingSafeEqual",
              "meta": {
                "added": [
                  "v6.6.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`a` {Buffer | TypedArray | DataView} ",
                      "name": "a",
                      "type": "Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`b` {Buffer | TypedArray | DataView} ",
                      "name": "b",
                      "type": "Buffer | TypedArray | DataView"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "a"
                    },
                    {
                      "name": "b"
                    }
                  ]
                }
              ],
              "desc": "<p>This function is based on a constant-time algorithm.\nReturns true if <code>a</code> is equal to <code>b</code>, without leaking timing information that\nwould allow an attacker to guess one of the values. This is suitable for\ncomparing HMAC digests or secret values like authentication cookies or\n<a href=\"https://www.w3.org/TR/capability-urls/\">capability urls</a>.</p>\n<p><code>a</code> and <code>b</code> must both be <code>Buffer</code>s, <code>TypedArray</code>s, or <code>DataView</code>s, and they\nmust have the same length.</p>\n<p>Use of <code>crypto.timingSafeEqual</code> does not guarantee that the <em>surrounding</em> code\nis timing-safe. Care should be taken to ensure that the surrounding code does\nnot introduce timing vulnerabilities.</p>\n"
            }
          ],
          "type": "module",
          "displayName": "`crypto` module methods and properties"
        },
        {
          "textRaw": "Notes",
          "name": "notes",
          "modules": [
            {
              "textRaw": "Legacy Streams API (pre Node.js v0.10)",
              "name": "legacy_streams_api_(pre_node.js_v0.10)",
              "desc": "<p>The Crypto module was added to Node.js before there was the concept of a\nunified Stream API, and before there were <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> objects for handling\nbinary data. As such, the many of the <code>crypto</code> defined classes have methods not\ntypically found on other Node.js classes that implement the <a href=\"stream.html#stream_stream\">streams</a>\nAPI (e.g. <code>update()</code>, <code>final()</code>, or <code>digest()</code>). Also, many methods accepted\nand returned <code>&#39;latin1&#39;</code> encoded strings by default rather than <code>Buffer</code>s. This\ndefault was changed after Node.js v0.8 to use <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> objects by default\ninstead.</p>\n",
              "type": "module",
              "displayName": "Legacy Streams API (pre Node.js v0.10)"
            },
            {
              "textRaw": "Recent ECDH Changes",
              "name": "recent_ecdh_changes",
              "desc": "<p>Usage of <code>ECDH</code> with non-dynamically generated key pairs has been simplified.\nNow, <a href=\"#crypto_ecdh_setprivatekey_privatekey_encoding\"><code>ecdh.setPrivateKey()</code></a> can be called with a preselected private key\nand the associated public point (key) will be computed and stored in the object.\nThis allows code to only store and provide the private part of the EC key pair.\n<a href=\"#crypto_ecdh_setprivatekey_privatekey_encoding\"><code>ecdh.setPrivateKey()</code></a> now also validates that the private key is valid for\nthe selected curve.</p>\n<p>The <a href=\"crypto.html#crypto_ecdh_setpublickey_publickey_encoding\"><code>ecdh.setPublicKey()</code></a> method is now deprecated as its inclusion in the\nAPI is not useful. Either a previously stored private key should be set, which\nautomatically generates the associated public key, or <a href=\"#crypto_ecdh_generatekeys_encoding_format\"><code>ecdh.generateKeys()</code></a>\nshould be called. The main drawback of using <a href=\"crypto.html#crypto_ecdh_setpublickey_publickey_encoding\"><code>ecdh.setPublicKey()</code></a> is that\nit can be used to put the ECDH key pair into an inconsistent state.</p>\n",
              "type": "module",
              "displayName": "Recent ECDH Changes"
            },
            {
              "textRaw": "Support for weak or compromised algorithms",
              "name": "support_for_weak_or_compromised_algorithms",
              "desc": "<p>The <code>crypto</code> module still supports some algorithms which are already\ncompromised and are not currently recommended for use. The API also allows\nthe use of ciphers and hashes with a small key size that are considered to be\ntoo weak for safe use.</p>\n<p>Users should take full responsibility for selecting the crypto\nalgorithm and key size according to their security requirements.</p>\n<p>Based on the recommendations of <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST SP 800-131A</a>:</p>\n<ul>\n<li>MD5 and SHA-1 are no longer acceptable where collision resistance is\nrequired such as digital signatures.</li>\n<li>The key used with RSA, DSA, and DH algorithms is recommended to have\nat least 2048 bits and that of the curve of ECDSA and ECDH at least\n224 bits, to be safe to use for several years.</li>\n<li>The DH groups of <code>modp1</code>, <code>modp2</code> and <code>modp5</code> have a key size\nsmaller than 2048 bits and are not recommended.</li>\n</ul>\n<p>See the reference for other recommendations and details.</p>\n",
              "type": "module",
              "displayName": "Support for weak or compromised algorithms"
            },
            {
              "textRaw": "CCM mode",
              "name": "ccm_mode",
              "desc": "<p>CCM is one of the two supported <a href=\"https://en.wikipedia.org/wiki/Authenticated_encryption\">AEAD algorithms</a>. Applications which use this\nmode must adhere to certain restrictions when using the cipher API:</p>\n<ul>\n<li>The authentication tag length must be specified during cipher creation by\nsetting the <code>authTagLength</code> option and must be one of 4, 6, 8, 10, 12, 14 or\n16 bytes.</li>\n<li>The length of the initialization vector (nonce) <code>N</code> must be between 7 and 13\nbytes (<code>7 ≤ N ≤ 13</code>).</li>\n<li>The length of the plaintext is limited to <code>2 ** (8 * (15 - N))</code> bytes.</li>\n<li>When decrypting, the authentication tag must be set via <code>setAuthTag()</code> before\nspecifying additional authenticated data and / or calling <code>update()</code>.\nOtherwise, decryption will fail and <code>final()</code> will throw an error in\ncompliance with section 2.6 of <a href=\"https://www.rfc-editor.org/rfc/rfc3610.txt\">RFC 3610</a>.</li>\n<li>Using stream methods such as <code>write(data)</code>, <code>end(data)</code> or <code>pipe()</code> in CCM\nmode might fail as CCM cannot handle more than one chunk of data per instance.</li>\n<li>When passing additional authenticated data (AAD), the length of the actual\nmessage in bytes must be passed to <code>setAAD()</code> via the <code>plaintextLength</code>\noption. This is not necessary if no AAD is used.</li>\n<li>As CCM processes the whole message at once, <code>update()</code> can only be called\nonce.</li>\n<li>Even though calling <code>update()</code> is sufficient to encrypt / decrypt the message,\napplications <em>must</em> call <code>final()</code> to compute and / or verify the\nauthentication tag.</li>\n</ul>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\n\nconst key = &#39;keykeykeykeykeykeykeykey&#39;;\nconst nonce = crypto.randomBytes(12);\n\nconst aad = Buffer.from(&#39;0123456789&#39;, &#39;hex&#39;);\n\nconst cipher = crypto.createCipheriv(&#39;aes-192-ccm&#39;, key, nonce, {\n  authTagLength: 16\n});\nconst plaintext = &#39;Hello world&#39;;\ncipher.setAAD(aad, {\n  plaintextLength: Buffer.byteLength(plaintext)\n});\nconst ciphertext = cipher.update(plaintext, &#39;utf8&#39;);\ncipher.final();\nconst tag = cipher.getAuthTag();\n\n// Now transmit { ciphertext, nonce, tag }.\n\nconst decipher = crypto.createDecipheriv(&#39;aes-192-ccm&#39;, key, nonce, {\n  authTagLength: 16\n});\ndecipher.setAuthTag(tag);\ndecipher.setAAD(aad, {\n  plaintextLength: ciphertext.length\n});\nconst receivedPlaintext = decipher.update(ciphertext, null, &#39;utf8&#39;);\n\ntry {\n  decipher.final();\n} catch (err) {\n  console.error(&#39;Authentication failed!&#39;);\n}\n\nconsole.log(receivedPlaintext);\n</code></pre>\n",
              "type": "module",
              "displayName": "CCM mode"
            }
          ],
          "type": "module",
          "displayName": "Notes"
        },
        {
          "textRaw": "Crypto Constants",
          "name": "crypto_constants",
          "desc": "<p>The following constants exported by <code>crypto.constants</code> apply to various uses of\nthe <code>crypto</code>, <code>tls</code>, and <code>https</code> modules and are generally specific to OpenSSL.</p>\n",
          "modules": [
            {
              "textRaw": "OpenSSL Options",
              "name": "openssl_options",
              "desc": "<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_ALL</code></td>\n    <td>Applies multiple bug workarounds within OpenSSL. See\n    <a href=\"https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html\">https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html</a> for\n    detail.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</code></td>\n    <td>Allows legacy insecure renegotiation between OpenSSL and unpatched\n    clients or servers. See\n    <a href=\"https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html\">https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html</a>.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_CIPHER_SERVER_PREFERENCE</code></td>\n    <td>Attempts to use the server&#39;s preferences instead of the client&#39;s when\n    selecting a cipher. Behavior depends on protocol version. See\n    <a href=\"https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html\">https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html</a>.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_CISCO_ANYCONNECT</code></td>\n    <td>Instructs OpenSSL to use Cisco&#39;s &quot;speshul&quot; version of DTLS_BAD_VER.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_COOKIE_EXCHANGE</code></td>\n    <td>Instructs OpenSSL to turn on cookie exchange.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_CRYPTOPRO_TLSEXT_BUG</code></td>\n    <td>Instructs OpenSSL to add server-hello extension from an early version\n    of the cryptopro draft.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS</code></td>\n    <td>Instructs OpenSSL to disable a SSL 3.0/TLS 1.0 vulnerability\n    workaround added in OpenSSL 0.9.6d.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_EPHEMERAL_RSA</code></td>\n    <td>Instructs OpenSSL to always use the tmp_rsa key when performing RSA\n    operations.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_LEGACY_SERVER_CONNECT</code></td>\n    <td>Allows initial connection to servers that do not support RI.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_MICROSOFT_SESS_ID_BUG</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_MSIE_SSLV2_RSA_PADDING</code></td>\n    <td>Instructs OpenSSL to disable the workaround for a man-in-the-middle\n    protocol-version vulnerability in the SSL 2.0 server implementation.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_NETSCAPE_CA_DN_BUG</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_NETSCAPE_CHALLENGE_BUG</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_NO_COMPRESSION</code></td>\n    <td>Instructs OpenSSL to disable support for SSL/TLS compression.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_NO_QUERY_MTU</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION</code></td>\n    <td>Instructs OpenSSL to always start a new session when performing\n    renegotiation.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_NO_SSLv2</code></td>\n    <td>Instructs OpenSSL to turn off SSL v2</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_NO_SSLv3</code></td>\n    <td>Instructs OpenSSL to turn off SSL v3</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_NO_TICKET</code></td>\n    <td>Instructs OpenSSL to disable use of RFC4507bis tickets.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_NO_TLSv1</code></td>\n    <td>Instructs OpenSSL to turn off TLS v1</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_NO_TLSv1_1</code></td>\n    <td>Instructs OpenSSL to turn off TLS v1.1</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_NO_TLSv1_2</code></td>\n    <td>Instructs OpenSSL to turn off TLS v1.2</td>\n  </tr>\n    <td><code>SSL_OP_PKCS1_CHECK_1</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_PKCS1_CHECK_2</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_SINGLE_DH_USE</code></td>\n    <td>Instructs OpenSSL to always create a new key when using\n    temporary/ephemeral DH parameters.</td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_SINGLE_ECDH_USE</code></td>\n    <td>Instructs OpenSSL to always create a new key when using\n    temporary/ephemeral ECDH parameters.</td>\n  </tr>\n    <td><code>SSL_OP_SSLEAY_080_CLIENT_DH_BUG</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_TLS_BLOCK_PADDING_BUG</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_TLS_D5_BUG</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>SSL_OP_TLS_ROLLBACK_BUG</code></td>\n    <td>Instructs OpenSSL to disable version rollback attack detection.</td>\n  </tr>\n</table>\n\n",
              "type": "module",
              "displayName": "OpenSSL Options"
            },
            {
              "textRaw": "OpenSSL Engine Constants",
              "name": "openssl_engine_constants",
              "desc": "<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>ENGINE_METHOD_RSA</code></td>\n    <td>Limit engine usage to RSA</td>\n  </tr>\n  <tr>\n    <td><code>ENGINE_METHOD_DSA</code></td>\n    <td>Limit engine usage to DSA</td>\n  </tr>\n  <tr>\n    <td><code>ENGINE_METHOD_DH</code></td>\n    <td>Limit engine usage to DH</td>\n  </tr>\n  <tr>\n    <td><code>ENGINE_METHOD_RAND</code></td>\n    <td>Limit engine usage to RAND</td>\n  </tr>\n  <tr>\n    <td><code>ENGINE_METHOD_EC</code></td>\n    <td>Limit engine usage to EC</td>\n  </tr>\n  <tr>\n    <td><code>ENGINE_METHOD_CIPHERS</code></td>\n    <td>Limit engine usage to CIPHERS</td>\n  </tr>\n  <tr>\n    <td><code>ENGINE_METHOD_DIGESTS</code></td>\n    <td>Limit engine usage to DIGESTS</td>\n  </tr>\n  <tr>\n    <td><code>ENGINE_METHOD_PKEY_METHS</code></td>\n    <td>Limit engine usage to PKEY_METHDS</td>\n  </tr>\n  <tr>\n    <td><code>ENGINE_METHOD_PKEY_ASN1_METHS</code></td>\n    <td>Limit engine usage to PKEY_ASN1_METHS</td>\n  </tr>\n  <tr>\n    <td><code>ENGINE_METHOD_ALL</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>ENGINE_METHOD_NONE</code></td>\n    <td></td>\n  </tr>\n</table>\n\n",
              "type": "module",
              "displayName": "OpenSSL Engine Constants"
            },
            {
              "textRaw": "Other OpenSSL Constants",
              "name": "other_openssl_constants",
              "desc": "<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>DH_CHECK_P_NOT_SAFE_PRIME</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>DH_CHECK_P_NOT_PRIME</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>DH_UNABLE_TO_CHECK_GENERATOR</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>DH_NOT_SUITABLE_GENERATOR</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>ALPN_ENABLED</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>RSA_PKCS1_PADDING</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>RSA_SSLV23_PADDING</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>RSA_NO_PADDING</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>RSA_PKCS1_OAEP_PADDING</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>RSA_X931_PADDING</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>RSA_PKCS1_PSS_PADDING</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>RSA_PSS_SALTLEN_DIGEST</code></td>\n    <td>Sets the salt length for <code>RSA_PKCS1_PSS_PADDING</code> to the digest size\n        when signing or verifying.</td>\n  </tr>\n  <tr>\n    <td><code>RSA_PSS_SALTLEN_MAX_SIGN</code></td>\n    <td>Sets the salt length for <code>RSA_PKCS1_PSS_PADDING</code> to the maximum\n        permissible value when signing data.</td>\n  </tr>\n  <tr>\n    <td><code>RSA_PSS_SALTLEN_AUTO</code></td>\n    <td>Causes the salt length for <code>RSA_PKCS1_PSS_PADDING</code> to be determined\n        automatically when verifying a signature.</td>\n  </tr>\n  <tr>\n    <td><code>POINT_CONVERSION_COMPRESSED</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>POINT_CONVERSION_UNCOMPRESSED</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><code>POINT_CONVERSION_HYBRID</code></td>\n    <td></td>\n  </tr>\n</table>\n\n",
              "type": "module",
              "displayName": "Other OpenSSL Constants"
            },
            {
              "textRaw": "Node.js Crypto Constants",
              "name": "node.js_crypto_constants",
              "desc": "<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>defaultCoreCipherList</code></td>\n    <td>Specifies the built-in default cipher list used by Node.js.</td>\n  </tr>\n  <tr>\n    <td><code>defaultCipherList</code></td>\n    <td>Specifies the active default cipher list used by the current Node.js\n    process.</td>\n  </tr>\n</table>\n\n<!-- [end-include:crypto.md] -->\n<!-- [start-include:debugger.md] -->\n",
              "type": "module",
              "displayName": "Node.js Crypto Constants"
            }
          ],
          "type": "module",
          "displayName": "Crypto Constants"
        }
      ],
      "classes": [
        {
          "textRaw": "Class: Certificate",
          "type": "class",
          "name": "Certificate",
          "meta": {
            "added": [
              "v0.11.8"
            ],
            "changes": []
          },
          "desc": "<p>SPKAC is a Certificate Signing Request mechanism originally implemented by\nNetscape and was specified formally as part of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen\">HTML5&#39;s <code>keygen</code> element</a>.</p>\n<p>Note that <code>&lt;keygen&gt;</code> is deprecated since <a href=\"https://www.w3.org/TR/html52/changes.html#features-removed\">HTML 5.2</a> and new projects\nshould not use this element anymore.</p>\n<p>The <code>crypto</code> module provides the <code>Certificate</code> class for working with SPKAC\ndata. The most common usage is handling output generated by the HTML5\n<code>&lt;keygen&gt;</code> element. Node.js uses <a href=\"https://www.openssl.org/docs/man1.1.0/apps/openssl-spkac.html\">OpenSSL&#39;s SPKAC implementation</a> internally.</p>\n",
          "methods": [
            {
              "textRaw": "Certificate.exportChallenge(spkac)",
              "type": "method",
              "name": "exportChallenge",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} The challenge component of the `spkac` data structure, which includes a public key and a challenge. ",
                    "name": "return",
                    "type": "Buffer",
                    "desc": "The challenge component of the `spkac` data structure, which includes a public key and a challenge."
                  },
                  "params": [
                    {
                      "textRaw": "`spkac` {string | Buffer | TypedArray | DataView} ",
                      "name": "spkac",
                      "type": "string | Buffer | TypedArray | DataView"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "spkac"
                    }
                  ]
                }
              ],
              "desc": "<pre><code class=\"lang-js\">const { Certificate } = require(&#39;crypto&#39;);\nconst spkac = getSpkacSomehow();\nconst challenge = Certificate.exportChallenge(spkac);\nconsole.log(challenge.toString(&#39;utf8&#39;));\n// Prints: the challenge as a UTF8 string\n</code></pre>\n"
            },
            {
              "textRaw": "Certificate.exportPublicKey(spkac[, encoding])",
              "type": "method",
              "name": "exportPublicKey",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} The public key component of the `spkac` data structure, which includes a public key and a challenge. ",
                    "name": "return",
                    "type": "Buffer",
                    "desc": "The public key component of the `spkac` data structure, which includes a public key and a challenge."
                  },
                  "params": [
                    {
                      "textRaw": "`spkac` {string | Buffer | TypedArray | DataView} ",
                      "name": "spkac",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "spkac"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<pre><code class=\"lang-js\">const { Certificate } = require(&#39;crypto&#39;);\nconst spkac = getSpkacSomehow();\nconst publicKey = Certificate.exportPublicKey(spkac);\nconsole.log(publicKey);\n// Prints: the public key as &lt;Buffer ...&gt;\n</code></pre>\n"
            },
            {
              "textRaw": "Certificate.verifySpkac(spkac)",
              "type": "method",
              "name": "verifySpkac",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} `true` if the given `spkac` data structure is valid, `false` otherwise. ",
                    "name": "return",
                    "type": "boolean",
                    "desc": "`true` if the given `spkac` data structure is valid, `false` otherwise."
                  },
                  "params": [
                    {
                      "textRaw": "`spkac` {Buffer | TypedArray | DataView} ",
                      "name": "spkac",
                      "type": "Buffer | TypedArray | DataView"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "spkac"
                    }
                  ]
                }
              ],
              "desc": "<pre><code class=\"lang-js\">const { Certificate } = require(&#39;crypto&#39;);\nconst spkac = getSpkacSomehow();\nconsole.log(Certificate.verifySpkac(Buffer.from(spkac)));\n// Prints: true or false\n</code></pre>\n"
            }
          ],
          "modules": [
            {
              "textRaw": "Legacy API",
              "name": "legacy_api",
              "desc": "<p>As a still supported legacy interface, it is possible (but not recommended) to\ncreate new instances of the <code>crypto.Certificate</code> class as illustrated in the\nexamples below.</p>\n",
              "ctors": [
                {
                  "textRaw": "new crypto.Certificate()",
                  "type": "ctor",
                  "name": "crypto.Certificate",
                  "desc": "<p>Instances of the <code>Certificate</code> class can be created using the <code>new</code> keyword\nor by calling <code>crypto.Certificate()</code> as a function:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\n\nconst cert1 = new crypto.Certificate();\nconst cert2 = crypto.Certificate();\n</code></pre>\n",
                  "signatures": [
                    {
                      "params": []
                    }
                  ]
                }
              ],
              "methods": [
                {
                  "textRaw": "certificate.exportChallenge(spkac)",
                  "type": "method",
                  "name": "exportChallenge",
                  "meta": {
                    "added": [
                      "v0.11.8"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Buffer} The challenge component of the `spkac` data structure, which includes a public key and a challenge. ",
                        "name": "return",
                        "type": "Buffer",
                        "desc": "The challenge component of the `spkac` data structure, which includes a public key and a challenge."
                      },
                      "params": [
                        {
                          "textRaw": "`spkac` {string | Buffer | TypedArray | DataView} ",
                          "name": "spkac",
                          "type": "string | Buffer | TypedArray | DataView"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "spkac"
                        }
                      ]
                    }
                  ],
                  "desc": "<pre><code class=\"lang-js\">const cert = require(&#39;crypto&#39;).Certificate();\nconst spkac = getSpkacSomehow();\nconst challenge = cert.exportChallenge(spkac);\nconsole.log(challenge.toString(&#39;utf8&#39;));\n// Prints: the challenge as a UTF8 string\n</code></pre>\n"
                },
                {
                  "textRaw": "certificate.exportPublicKey(spkac)",
                  "type": "method",
                  "name": "exportPublicKey",
                  "meta": {
                    "added": [
                      "v0.11.8"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Buffer} The public key component of the `spkac` data structure, which includes a public key and a challenge. ",
                        "name": "return",
                        "type": "Buffer",
                        "desc": "The public key component of the `spkac` data structure, which includes a public key and a challenge."
                      },
                      "params": [
                        {
                          "textRaw": "`spkac` {string | Buffer | TypedArray | DataView} ",
                          "name": "spkac",
                          "type": "string | Buffer | TypedArray | DataView"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "spkac"
                        }
                      ]
                    }
                  ],
                  "desc": "<pre><code class=\"lang-js\">const cert = require(&#39;crypto&#39;).Certificate();\nconst spkac = getSpkacSomehow();\nconst publicKey = cert.exportPublicKey(spkac);\nconsole.log(publicKey);\n// Prints: the public key as &lt;Buffer ...&gt;\n</code></pre>\n"
                },
                {
                  "textRaw": "certificate.verifySpkac(spkac)",
                  "type": "method",
                  "name": "verifySpkac",
                  "meta": {
                    "added": [
                      "v0.11.8"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {boolean} `true` if the given `spkac` data structure is valid, `false` otherwise. ",
                        "name": "return",
                        "type": "boolean",
                        "desc": "`true` if the given `spkac` data structure is valid, `false` otherwise."
                      },
                      "params": [
                        {
                          "textRaw": "`spkac` {Buffer | TypedArray | DataView} ",
                          "name": "spkac",
                          "type": "Buffer | TypedArray | DataView"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "spkac"
                        }
                      ]
                    }
                  ],
                  "desc": "<pre><code class=\"lang-js\">const cert = require(&#39;crypto&#39;).Certificate();\nconst spkac = getSpkacSomehow();\nconsole.log(cert.verifySpkac(Buffer.from(spkac)));\n// Prints: true or false\n</code></pre>\n"
                }
              ],
              "type": "module",
              "displayName": "Legacy API"
            }
          ]
        },
        {
          "textRaw": "Class: Cipher",
          "type": "class",
          "name": "Cipher",
          "meta": {
            "added": [
              "v0.1.94"
            ],
            "changes": []
          },
          "desc": "<p>Instances of the <code>Cipher</code> class are used to encrypt data. The class can be\nused in one of two ways:</p>\n<ul>\n<li>As a <a href=\"stream.html#stream_stream\">stream</a> that is both readable and writable, where plain unencrypted\ndata is written to produce encrypted data on the readable side, or</li>\n<li>Using the <a href=\"#crypto_cipher_update_data_inputencoding_outputencoding\"><code>cipher.update()</code></a> and <a href=\"#crypto_cipher_final_outputencoding\"><code>cipher.final()</code></a> methods to produce\nthe encrypted data.</li>\n</ul>\n<p>The <a href=\"crypto.html#crypto_crypto_createcipher_algorithm_password_options\"><code>crypto.createCipher()</code></a> or <a href=\"crypto.html#crypto_crypto_createcipheriv_algorithm_key_iv_options\"><code>crypto.createCipheriv()</code></a> methods are\nused to create <code>Cipher</code> instances. <code>Cipher</code> objects are not to be created\ndirectly using the <code>new</code> keyword.</p>\n<p>Example: Using <code>Cipher</code> objects as streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nlet encrypted = &#39;&#39;;\ncipher.on(&#39;readable&#39;, () =&gt; {\n  const data = cipher.read();\n  if (data)\n    encrypted += data.toString(&#39;hex&#39;);\n});\ncipher.on(&#39;end&#39;, () =&gt; {\n  console.log(encrypted);\n  // Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n});\n\ncipher.write(&#39;some clear text data&#39;);\ncipher.end();\n</code></pre>\n<p>Example: Using <code>Cipher</code> and piped streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\nconst output = fs.createWriteStream(&#39;test.enc&#39;);\n\ninput.pipe(cipher).pipe(output);\n</code></pre>\n<p>Example: Using the <a href=\"#crypto_cipher_update_data_inputencoding_outputencoding\"><code>cipher.update()</code></a> and <a href=\"#crypto_cipher_final_outputencoding\"><code>cipher.final()</code></a> methods:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nlet encrypted = cipher.update(&#39;some clear text data&#39;, &#39;utf8&#39;, &#39;hex&#39;);\nencrypted += cipher.final(&#39;hex&#39;);\nconsole.log(encrypted);\n// Prints: ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504\n</code></pre>\n",
          "methods": [
            {
              "textRaw": "cipher.final([outputEncoding])",
              "type": "method",
              "name": "final",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} Any remaining enciphered contents. If `outputEncoding` is one of `'latin1'`, `'base64'` or `'hex'`, a string is returned. If an `outputEncoding` is not provided, a [`Buffer`][] is returned. ",
                    "name": "return",
                    "type": "Buffer | string",
                    "desc": "Any remaining enciphered contents. If `outputEncoding` is one of `'latin1'`, `'base64'` or `'hex'`, a string is returned. If an `outputEncoding` is not provided, a [`Buffer`][] is returned."
                  },
                  "params": [
                    {
                      "textRaw": "`outputEncoding` {string} ",
                      "name": "outputEncoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "outputEncoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Once the <code>cipher.final()</code> method has been called, the <code>Cipher</code> object can no\nlonger be used to encrypt data. Attempts to call <code>cipher.final()</code> more than\nonce will result in an error being thrown.</p>\n"
            },
            {
              "textRaw": "cipher.setAAD(buffer[, options])",
              "type": "method",
              "name": "setAAD",
              "meta": {
                "added": [
                  "v1.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Cipher} for method chaining. ",
                    "name": "return",
                    "type": "Cipher",
                    "desc": "for method chaining."
                  },
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer} ",
                      "name": "buffer",
                      "type": "Buffer"
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>When using an authenticated encryption mode (only <code>GCM</code> and <code>CCM</code> are currently\nsupported), the <code>cipher.setAAD()</code> method sets the value used for the\n<em>additional authenticated data</em> (AAD) input parameter.</p>\n<p>The <code>options</code> argument is optional for <code>GCM</code>. When using <code>CCM</code>, the\n<code>plaintextLength</code> option must be specified and its value must match the length\nof the plaintext in bytes. See <a href=\"#crypto_ccm_mode\">CCM mode</a>.</p>\n<p>The <code>cipher.setAAD()</code> method must be called before <a href=\"#crypto_cipher_update_data_inputencoding_outputencoding\"><code>cipher.update()</code></a>.</p>\n"
            },
            {
              "textRaw": "cipher.getAuthTag()",
              "type": "method",
              "name": "getAuthTag",
              "meta": {
                "added": [
                  "v1.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} When using an authenticated encryption mode (only `GCM` and `CCM` are currently supported), the `cipher.getAuthTag()` method returns a [`Buffer`][] containing the _authentication tag_ that has been computed from the given data. ",
                    "name": "return",
                    "type": "Buffer",
                    "desc": "When using an authenticated encryption mode (only `GCM` and `CCM` are currently supported), the `cipher.getAuthTag()` method returns a [`Buffer`][] containing the _authentication tag_ that has been computed from the given data."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>The <code>cipher.getAuthTag()</code> method should only be called after encryption has\nbeen completed using the <a href=\"#crypto_cipher_final_outputencoding\"><code>cipher.final()</code></a> method.</p>\n"
            },
            {
              "textRaw": "cipher.setAutoPadding([autoPadding])",
              "type": "method",
              "name": "setAutoPadding",
              "meta": {
                "added": [
                  "v0.7.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Cipher} for method chaining. ",
                    "name": "return",
                    "type": "Cipher",
                    "desc": "for method chaining."
                  },
                  "params": [
                    {
                      "textRaw": "`autoPadding` {boolean} **Default:** `true` ",
                      "name": "autoPadding",
                      "type": "boolean",
                      "default": "`true`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "autoPadding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>When using block encryption algorithms, the <code>Cipher</code> class will automatically\nadd padding to the input data to the appropriate block size. To disable the\ndefault padding call <code>cipher.setAutoPadding(false)</code>.</p>\n<p>When <code>autoPadding</code> is <code>false</code>, the length of the entire input data must be a\nmultiple of the cipher&#39;s block size or <a href=\"#crypto_cipher_final_outputencoding\"><code>cipher.final()</code></a> will throw an error.\nDisabling automatic padding is useful for non-standard padding, for instance\nusing <code>0x0</code> instead of PKCS padding.</p>\n<p>The <code>cipher.setAutoPadding()</code> method must be called before\n<a href=\"#crypto_cipher_final_outputencoding\"><code>cipher.final()</code></a>.</p>\n"
            },
            {
              "textRaw": "cipher.update(data[, inputEncoding][, outputEncoding])",
              "type": "method",
              "name": "update",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "changes": [
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5522",
                    "description": "The default `inputEncoding` changed from `binary` to `utf8`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`data` {string | Buffer | TypedArray | DataView} ",
                      "name": "data",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`inputEncoding` {string} ",
                      "name": "inputEncoding",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`outputEncoding` {string} ",
                      "name": "outputEncoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "inputEncoding",
                      "optional": true
                    },
                    {
                      "name": "outputEncoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Updates the cipher with <code>data</code>. If the <code>inputEncoding</code> argument is given,\nits value must be one of <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code>, or <code>&#39;latin1&#39;</code> and the <code>data</code>\nargument is a string using the specified encoding. If the <code>inputEncoding</code>\nargument is not given, <code>data</code> must be a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, <code>TypedArray</code>, or\n<code>DataView</code>. If <code>data</code> is a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, <code>TypedArray</code>, or <code>DataView</code>, then\n<code>inputEncoding</code> is ignored.</p>\n<p>The <code>outputEncoding</code> specifies the output format of the enciphered\ndata, and can be <code>&#39;latin1&#39;</code>, <code>&#39;base64&#39;</code> or <code>&#39;hex&#39;</code>. If the <code>outputEncoding</code>\nis specified, a string using the specified encoding is returned. If no\n<code>outputEncoding</code> is provided, a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is returned.</p>\n<p>The <code>cipher.update()</code> method can be called multiple times with new data until\n<a href=\"#crypto_cipher_final_outputencoding\"><code>cipher.final()</code></a> is called. Calling <code>cipher.update()</code> after\n<a href=\"#crypto_cipher_final_outputencoding\"><code>cipher.final()</code></a> will result in an error being thrown.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: Decipher",
          "type": "class",
          "name": "Decipher",
          "meta": {
            "added": [
              "v0.1.94"
            ],
            "changes": []
          },
          "desc": "<p>Instances of the <code>Decipher</code> class are used to decrypt data. The class can be\nused in one of two ways:</p>\n<ul>\n<li>As a <a href=\"stream.html#stream_stream\">stream</a> that is both readable and writable, where plain encrypted\ndata is written to produce unencrypted data on the readable side, or</li>\n<li>Using the <a href=\"#crypto_decipher_update_data_inputencoding_outputencoding\"><code>decipher.update()</code></a> and <a href=\"crypto.html#crypto_decipher_final_outputencoding\"><code>decipher.final()</code></a> methods to\nproduce the unencrypted data.</li>\n</ul>\n<p>The <a href=\"crypto.html#crypto_crypto_createdecipher_algorithm_password_options\"><code>crypto.createDecipher()</code></a> or <a href=\"crypto.html#crypto_crypto_createdecipheriv_algorithm_key_iv_options\"><code>crypto.createDecipheriv()</code></a> methods are\nused to create <code>Decipher</code> instances. <code>Decipher</code> objects are not to be created\ndirectly using the <code>new</code> keyword.</p>\n<p>Example: Using <code>Decipher</code> objects as streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nlet decrypted = &#39;&#39;;\ndecipher.on(&#39;readable&#39;, () =&gt; {\n  const data = decipher.read();\n  if (data)\n    decrypted += data.toString(&#39;utf8&#39;);\n});\ndecipher.on(&#39;end&#39;, () =&gt; {\n  console.log(decrypted);\n  // Prints: some clear text data\n});\n\nconst encrypted =\n    &#39;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&#39;;\ndecipher.write(encrypted, &#39;hex&#39;);\ndecipher.end();\n</code></pre>\n<p>Example: Using <code>Decipher</code> and piped streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nconst input = fs.createReadStream(&#39;test.enc&#39;);\nconst output = fs.createWriteStream(&#39;test.js&#39;);\n\ninput.pipe(decipher).pipe(output);\n</code></pre>\n<p>Example: Using the <a href=\"#crypto_decipher_update_data_inputencoding_outputencoding\"><code>decipher.update()</code></a> and <a href=\"crypto.html#crypto_decipher_final_outputencoding\"><code>decipher.final()</code></a> methods:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);\n\nconst encrypted =\n    &#39;ca981be48e90867604588e75d04feabb63cc007a8f8ad89b10616ed84d815504&#39;;\nlet decrypted = decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);\ndecrypted += decipher.final(&#39;utf8&#39;);\nconsole.log(decrypted);\n// Prints: some clear text data\n</code></pre>\n",
          "methods": [
            {
              "textRaw": "decipher.final([outputEncoding])",
              "type": "method",
              "name": "final",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} Any remaining deciphered contents. If `outputEncoding` is one of `'latin1'`, `'ascii'` or `'utf8'`, a string is returned. If an `outputEncoding` is not provided, a [`Buffer`][] is returned. ",
                    "name": "return",
                    "type": "Buffer | string",
                    "desc": "Any remaining deciphered contents. If `outputEncoding` is one of `'latin1'`, `'ascii'` or `'utf8'`, a string is returned. If an `outputEncoding` is not provided, a [`Buffer`][] is returned."
                  },
                  "params": [
                    {
                      "textRaw": "`outputEncoding` {string} ",
                      "name": "outputEncoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "outputEncoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Once the <code>decipher.final()</code> method has been called, the <code>Decipher</code> object can\nno longer be used to decrypt data. Attempts to call <code>decipher.final()</code> more\nthan once will result in an error being thrown.</p>\n"
            },
            {
              "textRaw": "decipher.setAAD(buffer)",
              "type": "method",
              "name": "setAAD",
              "meta": {
                "added": [
                  "v1.0.0"
                ],
                "changes": [
                  {
                    "version": "v7.2.0",
                    "pr-url": "https://github.com/nodejs/node/pull/9398",
                    "description": "This method now returns a reference to `decipher`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Cipher} for method chaining. ",
                    "name": "return",
                    "type": "Cipher",
                    "desc": "for method chaining."
                  },
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer | TypedArray | DataView} ",
                      "name": "buffer",
                      "type": "Buffer | TypedArray | DataView"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ],
              "desc": "<p>When using an authenticated encryption mode (only <code>GCM</code> and <code>CCM</code> are currently\nsupported), the <code>decipher.setAAD()</code> method sets the value used for the\n<em>additional authenticated data</em> (AAD) input parameter.</p>\n<p>The <code>decipher.setAAD()</code> method must be called before <a href=\"#crypto_decipher_update_data_inputencoding_outputencoding\"><code>decipher.update()</code></a>.</p>\n"
            },
            {
              "textRaw": "decipher.setAuthTag(buffer)",
              "type": "method",
              "name": "setAuthTag",
              "meta": {
                "added": [
                  "v1.0.0"
                ],
                "changes": [
                  {
                    "version": "v7.2.0",
                    "pr-url": "https://github.com/nodejs/node/pull/9398",
                    "description": "This method now returns a reference to `decipher`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Cipher} for method chaining. ",
                    "name": "return",
                    "type": "Cipher",
                    "desc": "for method chaining."
                  },
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer | TypedArray | DataView} ",
                      "name": "buffer",
                      "type": "Buffer | TypedArray | DataView"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ],
              "desc": "<p>When using an authenticated encryption mode (only <code>GCM</code> and <code>CCM</code> are currently\nsupported), the <code>decipher.setAuthTag()</code> method is used to pass in the\nreceived <em>authentication tag</em>. If no tag is provided, or if the cipher text\nhas been tampered with, <a href=\"crypto.html#crypto_decipher_final_outputencoding\"><code>decipher.final()</code></a> will throw, indicating that the\ncipher text should be discarded due to failed authentication.</p>\n<p>Note that this Node.js version does not verify the length of GCM authentication\ntags. Such a check <em>must</em> be implemented by applications and is crucial to the\nauthenticity of the encrypted data, otherwise, an attacker can use an\narbitrarily short authentication tag to increase the chances of successfully\npassing authentication (up to 0.39%). It is highly recommended to associate one\nof the values 16, 15, 14, 13, 12, 8 or 4 bytes with each key, and to only permit\nauthentication tags of that length, see <a href=\"http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf\">NIST SP 800-38D</a>.</p>\n<p>The <code>decipher.setAuthTag()</code> method must be called before\n<a href=\"crypto.html#crypto_decipher_final_outputencoding\"><code>decipher.final()</code></a>.</p>\n"
            },
            {
              "textRaw": "decipher.setAutoPadding([autoPadding])",
              "type": "method",
              "name": "setAutoPadding",
              "meta": {
                "added": [
                  "v0.7.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Cipher} for method chaining. ",
                    "name": "return",
                    "type": "Cipher",
                    "desc": "for method chaining."
                  },
                  "params": [
                    {
                      "textRaw": "`autoPadding` {boolean} **Default:** `true` ",
                      "name": "autoPadding",
                      "type": "boolean",
                      "default": "`true`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "autoPadding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>When data has been encrypted without standard block padding, calling\n<code>decipher.setAutoPadding(false)</code> will disable automatic padding to prevent\n<a href=\"crypto.html#crypto_decipher_final_outputencoding\"><code>decipher.final()</code></a> from checking for and removing padding.</p>\n<p>Turning auto padding off will only work if the input data&#39;s length is a\nmultiple of the ciphers block size.</p>\n<p>The <code>decipher.setAutoPadding()</code> method must be called before\n<a href=\"crypto.html#crypto_decipher_final_outputencoding\"><code>decipher.final()</code></a>.</p>\n"
            },
            {
              "textRaw": "decipher.update(data[, inputEncoding][, outputEncoding])",
              "type": "method",
              "name": "update",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "changes": [
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5522",
                    "description": "The default `inputEncoding` changed from `binary` to `utf8`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`data` {string | Buffer | TypedArray | DataView} ",
                      "name": "data",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`inputEncoding` {string} ",
                      "name": "inputEncoding",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`outputEncoding` {string} ",
                      "name": "outputEncoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "inputEncoding",
                      "optional": true
                    },
                    {
                      "name": "outputEncoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Updates the decipher with <code>data</code>. If the <code>inputEncoding</code> argument is given,\nits value must be one of <code>&#39;latin1&#39;</code>, <code>&#39;base64&#39;</code>, or <code>&#39;hex&#39;</code> and the <code>data</code>\nargument is a string using the specified encoding. If the <code>inputEncoding</code>\nargument is not given, <code>data</code> must be a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>. If <code>data</code> is a\n<a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> then <code>inputEncoding</code> is ignored.</p>\n<p>The <code>outputEncoding</code> specifies the output format of the enciphered\ndata, and can be <code>&#39;latin1&#39;</code>, <code>&#39;ascii&#39;</code> or <code>&#39;utf8&#39;</code>. If the <code>outputEncoding</code>\nis specified, a string using the specified encoding is returned. If no\n<code>outputEncoding</code> is provided, a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is returned.</p>\n<p>The <code>decipher.update()</code> method can be called multiple times with new data until\n<a href=\"crypto.html#crypto_decipher_final_outputencoding\"><code>decipher.final()</code></a> is called. Calling <code>decipher.update()</code> after\n<a href=\"crypto.html#crypto_decipher_final_outputencoding\"><code>decipher.final()</code></a> will result in an error being thrown.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: DiffieHellman",
          "type": "class",
          "name": "DiffieHellman",
          "meta": {
            "added": [
              "v0.5.0"
            ],
            "changes": []
          },
          "desc": "<p>The <code>DiffieHellman</code> class is a utility for creating Diffie-Hellman key\nexchanges.</p>\n<p>Instances of the <code>DiffieHellman</code> class can be created using the\n<a href=\"#crypto_crypto_creatediffiehellman_prime_primeencoding_generator_generatorencoding\"><code>crypto.createDiffieHellman()</code></a> function.</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst assert = require(&#39;assert&#39;);\n\n// Generate Alice&#39;s keys...\nconst alice = crypto.createDiffieHellman(2048);\nconst aliceKey = alice.generateKeys();\n\n// Generate Bob&#39;s keys...\nconst bob = crypto.createDiffieHellman(alice.getPrime(), alice.getGenerator());\nconst bobKey = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst aliceSecret = alice.computeSecret(bobKey);\nconst bobSecret = bob.computeSecret(aliceKey);\n\n// OK\nassert.strictEqual(aliceSecret.toString(&#39;hex&#39;), bobSecret.toString(&#39;hex&#39;));\n</code></pre>\n",
          "methods": [
            {
              "textRaw": "diffieHellman.computeSecret(otherPublicKey[, inputEncoding][, outputEncoding])",
              "type": "method",
              "name": "computeSecret",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`otherPublicKey` {string | Buffer | TypedArray | DataView} ",
                      "name": "otherPublicKey",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`inputEncoding` {string} ",
                      "name": "inputEncoding",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`outputEncoding` {string} ",
                      "name": "outputEncoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "otherPublicKey"
                    },
                    {
                      "name": "inputEncoding",
                      "optional": true
                    },
                    {
                      "name": "outputEncoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Computes the shared secret using <code>otherPublicKey</code> as the other\nparty&#39;s public key and returns the computed shared secret. The supplied\nkey is interpreted using the specified <code>inputEncoding</code>, and secret is\nencoded using specified <code>outputEncoding</code>. Encodings can be\n<code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If the <code>inputEncoding</code> is not\nprovided, <code>otherPublicKey</code> is expected to be a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>,\n<code>TypedArray</code>, or <code>DataView</code>.</p>\n<p>If <code>outputEncoding</code> is given a string is returned; otherwise, a\n<a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is returned.</p>\n"
            },
            {
              "textRaw": "diffieHellman.generateKeys([encoding])",
              "type": "method",
              "name": "generateKeys",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Generates private and public Diffie-Hellman key values, and returns\nthe public key in the specified <code>encoding</code>. This key should be\ntransferred to the other party. Encoding can be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>,\nor <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a string is returned; otherwise a\n<a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is returned.</p>\n"
            },
            {
              "textRaw": "diffieHellman.getGenerator([encoding])",
              "type": "method",
              "name": "getGenerator",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns the Diffie-Hellman generator in the specified <code>encoding</code>, which can\nbe <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a string is\nreturned; otherwise a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is returned.</p>\n"
            },
            {
              "textRaw": "diffieHellman.getPrime([encoding])",
              "type": "method",
              "name": "getPrime",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns the Diffie-Hellman prime in the specified <code>encoding</code>, which can\nbe <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a string is\nreturned; otherwise a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is returned.</p>\n"
            },
            {
              "textRaw": "diffieHellman.getPrivateKey([encoding])",
              "type": "method",
              "name": "getPrivateKey",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns the Diffie-Hellman private key in the specified <code>encoding</code>,\nwhich can be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a\nstring is returned; otherwise a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is returned.</p>\n"
            },
            {
              "textRaw": "diffieHellman.getPublicKey([encoding])",
              "type": "method",
              "name": "getPublicKey",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns the Diffie-Hellman public key in the specified <code>encoding</code>, which\ncan be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a\nstring is returned; otherwise a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is returned.</p>\n"
            },
            {
              "textRaw": "diffieHellman.setPrivateKey(privateKey[, encoding])",
              "type": "method",
              "name": "setPrivateKey",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`privateKey` {string | Buffer | TypedArray | DataView} ",
                      "name": "privateKey",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "privateKey"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Sets the Diffie-Hellman private key. If the <code>encoding</code> argument is provided\nand is either <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>, <code>privateKey</code> is expected\nto be a string. If no <code>encoding</code> is provided, <code>privateKey</code> is expected\nto be a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, <code>TypedArray</code>, or <code>DataView</code>.</p>\n"
            },
            {
              "textRaw": "diffieHellman.setPublicKey(publicKey[, encoding])",
              "type": "method",
              "name": "setPublicKey",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`publicKey` {string | Buffer | TypedArray | DataView} ",
                      "name": "publicKey",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "publicKey"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Sets the Diffie-Hellman public key. If the <code>encoding</code> argument is provided\nand is either <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>, <code>publicKey</code> is expected\nto be a string. If no <code>encoding</code> is provided, <code>publicKey</code> is expected\nto be a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, <code>TypedArray</code>, or <code>DataView</code>.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "diffieHellman.verifyError",
              "name": "verifyError",
              "meta": {
                "added": [
                  "v0.11.12"
                ],
                "changes": []
              },
              "desc": "<p>A bit field containing any warnings and/or errors resulting from a check\nperformed during initialization of the <code>DiffieHellman</code> object.</p>\n<p>The following values are valid for this property (as defined in <code>constants</code>\nmodule):</p>\n<ul>\n<li><code>DH_CHECK_P_NOT_SAFE_PRIME</code></li>\n<li><code>DH_CHECK_P_NOT_PRIME</code></li>\n<li><code>DH_UNABLE_TO_CHECK_GENERATOR</code></li>\n<li><code>DH_NOT_SUITABLE_GENERATOR</code></li>\n</ul>\n"
            }
          ]
        },
        {
          "textRaw": "Class: ECDH",
          "type": "class",
          "name": "ECDH",
          "meta": {
            "added": [
              "v0.11.14"
            ],
            "changes": []
          },
          "desc": "<p>The <code>ECDH</code> class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH)\nkey exchanges.</p>\n<p>Instances of the <code>ECDH</code> class can be created using the\n<a href=\"#crypto_crypto_createecdh_curvename\"><code>crypto.createECDH()</code></a> function.</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst assert = require(&#39;assert&#39;);\n\n// Generate Alice&#39;s keys...\nconst alice = crypto.createECDH(&#39;secp521r1&#39;);\nconst aliceKey = alice.generateKeys();\n\n// Generate Bob&#39;s keys...\nconst bob = crypto.createECDH(&#39;secp521r1&#39;);\nconst bobKey = bob.generateKeys();\n\n// Exchange and generate the secret...\nconst aliceSecret = alice.computeSecret(bobKey);\nconst bobSecret = bob.computeSecret(aliceKey);\n\nassert.strictEqual(aliceSecret.toString(&#39;hex&#39;), bobSecret.toString(&#39;hex&#39;));\n// OK\n</code></pre>\n",
          "methods": [
            {
              "textRaw": "ECDH.convertKey(key, curve[, inputEncoding[, outputEncoding[, format]]])",
              "type": "method",
              "name": "convertKey",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`key` {string | Buffer | TypedArray | DataView} ",
                      "name": "key",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`curve` {string} ",
                      "name": "curve",
                      "type": "string"
                    },
                    {
                      "textRaw": "`inputEncoding` {string} ",
                      "name": "inputEncoding",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`outputEncoding` {string} ",
                      "name": "outputEncoding",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`format` {string} **Default:** `'uncompressed'` ",
                      "name": "format",
                      "type": "string",
                      "default": "`'uncompressed'`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "key"
                    },
                    {
                      "name": "curve"
                    },
                    {
                      "name": "inputEncoding",
                      "optional": true
                    },
                    {
                      "name": "outputEncoding",
                      "optional": true
                    },
                    {
                      "name": "format",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Converts the EC Diffie-Hellman public key specified by <code>key</code> and <code>curve</code> to the\nformat specified by <code>format</code>. The <code>format</code> argument specifies point encoding\nand can be <code>&#39;compressed&#39;</code>, <code>&#39;uncompressed&#39;</code> or <code>&#39;hybrid&#39;</code>. The supplied key is\ninterpreted using the specified <code>inputEncoding</code>, and the returned key is encoded\nusing the specified <code>outputEncoding</code>. Encodings can be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>,\nor <code>&#39;base64&#39;</code>.</p>\n<p>Use <a href=\"crypto.html#crypto_crypto_getcurves\"><code>crypto.getCurves()</code></a> to obtain a list of available curve names.\nOn recent OpenSSL releases, <code>openssl ecparam -list_curves</code> will also display\nthe name and description of each available elliptic curve.</p>\n<p>If <code>format</code> is not specified the point will be returned in <code>&#39;uncompressed&#39;</code>\nformat.</p>\n<p>If the <code>inputEncoding</code> is not provided, <code>key</code> is expected to be a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>,\n<code>TypedArray</code>, or <code>DataView</code>.</p>\n<p>Example (uncompressing a key):</p>\n<pre><code class=\"lang-js\">const { ECDH } = require(&#39;crypto&#39;);\n\nconst ecdh = ECDH(&#39;secp256k1&#39;);\necdh.generateKeys();\n\nconst compressedKey = ecdh.getPublicKey(&#39;hex&#39;, &#39;compressed&#39;);\n\nconst uncompressedKey = ECDH.convertKey(compressedKey,\n                                        &#39;secp256k1&#39;,\n                                        &#39;hex&#39;,\n                                        &#39;hex&#39;,\n                                        &#39;uncompressed&#39;);\n\n// the converted key and the uncompressed public key should be the same\nconsole.log(uncompressedKey === ecdh.getPublicKey(&#39;hex&#39;));\n</code></pre>\n"
            },
            {
              "textRaw": "ecdh.computeSecret(otherPublicKey[, inputEncoding][, outputEncoding])",
              "type": "method",
              "name": "computeSecret",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": [
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5522",
                    "description": "The default `inputEncoding` changed from `binary` to `utf8`"
                  },
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16849",
                    "description": "Changed error format to better support invalid public key error"
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`otherPublicKey` {string | Buffer | TypedArray | DataView} ",
                      "name": "otherPublicKey",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`inputEncoding` {string} ",
                      "name": "inputEncoding",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`outputEncoding` {string} ",
                      "name": "outputEncoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "otherPublicKey"
                    },
                    {
                      "name": "inputEncoding",
                      "optional": true
                    },
                    {
                      "name": "outputEncoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Computes the shared secret using <code>otherPublicKey</code> as the other\nparty&#39;s public key and returns the computed shared secret. The supplied\nkey is interpreted using specified <code>inputEncoding</code>, and the returned secret\nis encoded using the specified <code>outputEncoding</code>. Encodings can be\n<code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If the <code>inputEncoding</code> is not\nprovided, <code>otherPublicKey</code> is expected to be a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, <code>TypedArray</code>, or\n<code>DataView</code>.</p>\n<p>If <code>outputEncoding</code> is given a string will be returned; otherwise a\n<a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is returned.</p>\n<p><code>ecdh.computeSecret</code> will throw an\n<code>ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY</code> error when <code>otherPublicKey</code>\nlies outside of the elliptic curve. Since <code>otherPublicKey</code> is\nusually supplied from a remote user over an insecure network,\nits recommended for developers to handle this exception accordingly.</p>\n"
            },
            {
              "textRaw": "ecdh.generateKeys([encoding[, format]])",
              "type": "method",
              "name": "generateKeys",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`format` {string} **Default:** `'uncompressed'` ",
                      "name": "format",
                      "type": "string",
                      "default": "`'uncompressed'`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    },
                    {
                      "name": "format",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Generates private and public EC Diffie-Hellman key values, and returns\nthe public key in the specified <code>format</code> and <code>encoding</code>. This key should be\ntransferred to the other party.</p>\n<p>The <code>format</code> argument specifies point encoding and can be <code>&#39;compressed&#39;</code> or\n<code>&#39;uncompressed&#39;</code>. If <code>format</code> is not specified, the point will be returned in\n<code>&#39;uncompressed&#39;</code> format.</p>\n<p>The <code>encoding</code> argument can be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If\n<code>encoding</code> is provided a string is returned; otherwise a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>\nis returned.</p>\n"
            },
            {
              "textRaw": "ecdh.getPrivateKey([encoding])",
              "type": "method",
              "name": "getPrivateKey",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} The EC Diffie-Hellman private key in the specified `encoding`, which can be `'latin1'`, `'hex'`, or `'base64'`. If `encoding` is provided a string is returned; otherwise a [`Buffer`][] is returned. ",
                    "name": "return",
                    "type": "Buffer | string",
                    "desc": "The EC Diffie-Hellman private key in the specified `encoding`, which can be `'latin1'`, `'hex'`, or `'base64'`. If `encoding` is provided a string is returned; otherwise a [`Buffer`][] is returned."
                  },
                  "params": [
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>format</code> argument specifies point encoding and can be <code>&#39;compressed&#39;</code> or\n<code>&#39;uncompressed&#39;</code>. If <code>format</code> is not specified the point will be returned in\n<code>&#39;uncompressed&#39;</code> format.</p>\n<p>The <code>encoding</code> argument can be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If\n<code>encoding</code> is specified, a string is returned; otherwise a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is\nreturned.</p>\n"
            },
            {
              "textRaw": "ecdh.getPublicKey([encoding][, format])",
              "type": "method",
              "name": "getPublicKey",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} The EC Diffie-Hellman public key in the specified `encoding` and `format`. ",
                    "name": "return",
                    "type": "Buffer | string",
                    "desc": "The EC Diffie-Hellman public key in the specified `encoding` and `format`."
                  },
                  "params": [
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`format` {string} **Default:** `'uncompressed'` ",
                      "name": "format",
                      "type": "string",
                      "default": "`'uncompressed'`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    },
                    {
                      "name": "format",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>format</code> argument specifies point encoding and can be <code>&#39;compressed&#39;</code> or\n<code>&#39;uncompressed&#39;</code>. If <code>format</code> is not specified the point will be returned in\n<code>&#39;uncompressed&#39;</code> format.</p>\n<p>The <code>encoding</code> argument can be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code>, or <code>&#39;base64&#39;</code>. If\n<code>encoding</code> is specified, a string is returned; otherwise a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is\nreturned.</p>\n"
            },
            {
              "textRaw": "ecdh.setPrivateKey(privateKey[, encoding])",
              "type": "method",
              "name": "setPrivateKey",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`privateKey` {string | Buffer | TypedArray | DataView} ",
                      "name": "privateKey",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "privateKey"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Sets the EC Diffie-Hellman private key. The <code>encoding</code> can be <code>&#39;latin1&#39;</code>,\n<code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided, <code>privateKey</code> is expected\nto be a string; otherwise <code>privateKey</code> is expected to be a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>,\n<code>TypedArray</code>, or <code>DataView</code>.</p>\n<p>If <code>privateKey</code> is not valid for the curve specified when the <code>ECDH</code> object was\ncreated, an error is thrown. Upon setting the private key, the associated\npublic point (key) is also generated and set in the <code>ECDH</code> object.</p>\n"
            },
            {
              "textRaw": "ecdh.setPublicKey(publicKey[, encoding])",
              "type": "method",
              "name": "setPublicKey",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "deprecated": [
                  "v5.2.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`publicKey` {string | Buffer | TypedArray | DataView} ",
                      "name": "publicKey",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "publicKey"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Sets the EC Diffie-Hellman public key. Key encoding can be <code>&#39;latin1&#39;</code>,\n<code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. If <code>encoding</code> is provided <code>publicKey</code> is expected to\nbe a string; otherwise a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, <code>TypedArray</code>, or <code>DataView</code> is expected.</p>\n<p>Note that there is not normally a reason to call this method because <code>ECDH</code>\nonly requires a private key and the other party&#39;s public key to compute the\nshared secret. Typically either <a href=\"#crypto_ecdh_generatekeys_encoding_format\"><code>ecdh.generateKeys()</code></a> or\n<a href=\"#crypto_ecdh_setprivatekey_privatekey_encoding\"><code>ecdh.setPrivateKey()</code></a> will be called. The <a href=\"#crypto_ecdh_setprivatekey_privatekey_encoding\"><code>ecdh.setPrivateKey()</code></a> method\nattempts to generate the public point/key associated with the private key being\nset.</p>\n<p>Example (obtaining a shared secret):</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst alice = crypto.createECDH(&#39;secp256k1&#39;);\nconst bob = crypto.createECDH(&#39;secp256k1&#39;);\n\n// Note: This is a shortcut way to specify one of Alice&#39;s previous private\n// keys. It would be unwise to use such a predictable private key in a real\n// application.\nalice.setPrivateKey(\n  crypto.createHash(&#39;sha256&#39;).update(&#39;alice&#39;, &#39;utf8&#39;).digest()\n);\n\n// Bob uses a newly generated cryptographically strong\n// pseudorandom key pair\nbob.generateKeys();\n\nconst aliceSecret = alice.computeSecret(bob.getPublicKey(), null, &#39;hex&#39;);\nconst bobSecret = bob.computeSecret(alice.getPublicKey(), null, &#39;hex&#39;);\n\n// aliceSecret and bobSecret should be the same shared secret value\nconsole.log(aliceSecret === bobSecret);\n</code></pre>\n"
            }
          ]
        },
        {
          "textRaw": "Class: Hash",
          "type": "class",
          "name": "Hash",
          "meta": {
            "added": [
              "v0.1.92"
            ],
            "changes": []
          },
          "desc": "<p>The <code>Hash</code> class is a utility for creating hash digests of data. It can be\nused in one of two ways:</p>\n<ul>\n<li>As a <a href=\"stream.html#stream_stream\">stream</a> that is both readable and writable, where data is written\nto produce a computed hash digest on the readable side, or</li>\n<li>Using the <a href=\"crypto.html#crypto_hash_update_data_inputencoding\"><code>hash.update()</code></a> and <a href=\"crypto.html#crypto_hash_digest_encoding\"><code>hash.digest()</code></a> methods to produce the\ncomputed hash.</li>\n</ul>\n<p>The <a href=\"#crypto_crypto_createhash_algorithm_options\"><code>crypto.createHash()</code></a> method is used to create <code>Hash</code> instances. <code>Hash</code>\nobjects are not to be created directly using the <code>new</code> keyword.</p>\n<p>Example: Using <code>Hash</code> objects as streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nhash.on(&#39;readable&#39;, () =&gt; {\n  const data = hash.read();\n  if (data) {\n    console.log(data.toString(&#39;hex&#39;));\n    // Prints:\n    //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n  }\n});\n\nhash.write(&#39;some data to hash&#39;);\nhash.end();\n</code></pre>\n<p>Example: Using <code>Hash</code> and piped streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\ninput.pipe(hash).pipe(process.stdout);\n</code></pre>\n<p>Example: Using the <a href=\"crypto.html#crypto_hash_update_data_inputencoding\"><code>hash.update()</code></a> and <a href=\"crypto.html#crypto_hash_digest_encoding\"><code>hash.digest()</code></a> methods:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst hash = crypto.createHash(&#39;sha256&#39;);\n\nhash.update(&#39;some data to hash&#39;);\nconsole.log(hash.digest(&#39;hex&#39;));\n// Prints:\n//   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n</code></pre>\n",
          "methods": [
            {
              "textRaw": "hash.digest([encoding])",
              "type": "method",
              "name": "digest",
              "meta": {
                "added": [
                  "v0.1.92"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Calculates the digest of all of the data passed to be hashed (using the\n<a href=\"crypto.html#crypto_hash_update_data_inputencoding\"><code>hash.update()</code></a> method). The <code>encoding</code> can be <code>&#39;hex&#39;</code>, <code>&#39;latin1&#39;</code> or\n<code>&#39;base64&#39;</code>. If <code>encoding</code> is provided a string will be returned; otherwise\na <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is returned.</p>\n<p>The <code>Hash</code> object can not be used again after <code>hash.digest()</code> method has been\ncalled. Multiple calls will cause an error to be thrown.</p>\n"
            },
            {
              "textRaw": "hash.update(data[, inputEncoding])",
              "type": "method",
              "name": "update",
              "meta": {
                "added": [
                  "v0.1.92"
                ],
                "changes": [
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5522",
                    "description": "The default `inputEncoding` changed from `binary` to `utf8`."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`data` {string | Buffer | TypedArray | DataView} ",
                      "name": "data",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`inputEncoding` {string} ",
                      "name": "inputEncoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "inputEncoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Updates the hash content with the given <code>data</code>, the encoding of which\nis given in <code>inputEncoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\n<code>&#39;latin1&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, <code>TypedArray</code>, or\n<code>DataView</code>, then <code>inputEncoding</code> is ignored.</p>\n<p>This can be called many times with new data as it is streamed.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: Hmac",
          "type": "class",
          "name": "Hmac",
          "meta": {
            "added": [
              "v0.1.94"
            ],
            "changes": []
          },
          "desc": "<p>The <code>Hmac</code> Class is a utility for creating cryptographic HMAC digests. It can\nbe used in one of two ways:</p>\n<ul>\n<li>As a <a href=\"stream.html#stream_stream\">stream</a> that is both readable and writable, where data is written\nto produce a computed HMAC digest on the readable side, or</li>\n<li>Using the <a href=\"#crypto_hmac_update_data_inputencoding\"><code>hmac.update()</code></a> and <a href=\"#crypto_hmac_digest_encoding\"><code>hmac.digest()</code></a> methods to produce the\ncomputed HMAC digest.</li>\n</ul>\n<p>The <a href=\"#crypto_crypto_createhmac_algorithm_key_options\"><code>crypto.createHmac()</code></a> method is used to create <code>Hmac</code> instances. <code>Hmac</code>\nobjects are not to be created directly using the <code>new</code> keyword.</p>\n<p>Example: Using <code>Hmac</code> objects as streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nhmac.on(&#39;readable&#39;, () =&gt; {\n  const data = hmac.read();\n  if (data) {\n    console.log(data.toString(&#39;hex&#39;));\n    // Prints:\n    //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n  }\n});\n\nhmac.write(&#39;some data to hash&#39;);\nhmac.end();\n</code></pre>\n<p>Example: Using <code>Hmac</code> and piped streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst fs = require(&#39;fs&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nconst input = fs.createReadStream(&#39;test.js&#39;);\ninput.pipe(hmac).pipe(process.stdout);\n</code></pre>\n<p>Example: Using the <a href=\"#crypto_hmac_update_data_inputencoding\"><code>hmac.update()</code></a> and <a href=\"#crypto_hmac_digest_encoding\"><code>hmac.digest()</code></a> methods:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst hmac = crypto.createHmac(&#39;sha256&#39;, &#39;a secret&#39;);\n\nhmac.update(&#39;some data to hash&#39;);\nconsole.log(hmac.digest(&#39;hex&#39;));\n// Prints:\n//   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n</code></pre>\n",
          "methods": [
            {
              "textRaw": "hmac.digest([encoding])",
              "type": "method",
              "name": "digest",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Calculates the HMAC digest of all of the data passed using <a href=\"#crypto_hmac_update_data_inputencoding\"><code>hmac.update()</code></a>.\nThe <code>encoding</code> can be <code>&#39;hex&#39;</code>, <code>&#39;latin1&#39;</code> or <code>&#39;base64&#39;</code>. If <code>encoding</code> is\nprovided a string is returned; otherwise a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is returned;</p>\n<p>The <code>Hmac</code> object can not be used again after <code>hmac.digest()</code> has been\ncalled. Multiple calls to <code>hmac.digest()</code> will result in an error being thrown.</p>\n"
            },
            {
              "textRaw": "hmac.update(data[, inputEncoding])",
              "type": "method",
              "name": "update",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "changes": [
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5522",
                    "description": "The default `inputEncoding` changed from `binary` to `utf8`."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`data` {string | Buffer | TypedArray | DataView} ",
                      "name": "data",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`inputEncoding` {string} ",
                      "name": "inputEncoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "inputEncoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Updates the <code>Hmac</code> content with the given <code>data</code>, the encoding of which\nis given in <code>inputEncoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\n<code>&#39;latin1&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, <code>TypedArray</code>, or\n<code>DataView</code>, then <code>inputEncoding</code> is ignored.</p>\n<p>This can be called many times with new data as it is streamed.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: Sign",
          "type": "class",
          "name": "Sign",
          "meta": {
            "added": [
              "v0.1.92"
            ],
            "changes": []
          },
          "desc": "<p>The <code>Sign</code> Class is a utility for generating signatures. It can be used in one\nof two ways:</p>\n<ul>\n<li>As a writable <a href=\"stream.html#stream_stream\">stream</a>, where data to be signed is written and the\n<a href=\"crypto.html#crypto_sign_sign_privatekey_outputformat\"><code>sign.sign()</code></a> method is used to generate and return the signature, or</li>\n<li>Using the <a href=\"#crypto_sign_update_data_inputencoding\"><code>sign.update()</code></a> and <a href=\"crypto.html#crypto_sign_sign_privatekey_outputformat\"><code>sign.sign()</code></a> methods to produce the\nsignature.</li>\n</ul>\n<p>The <a href=\"#crypto_crypto_createsign_algorithm_options\"><code>crypto.createSign()</code></a> method is used to create <code>Sign</code> instances. The\nargument is the string name of the hash function to use. <code>Sign</code> objects are not\nto be created directly using the <code>new</code> keyword.</p>\n<p>Example: Using <code>Sign</code> objects as streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;SHA256&#39;);\n\nsign.write(&#39;some data to sign&#39;);\nsign.end();\n\nconst privateKey = getPrivateKeySomehow();\nconsole.log(sign.sign(privateKey, &#39;hex&#39;));\n// Prints: the calculated signature using the specified private key and\n// SHA-256. For RSA keys, the algorithm is RSASSA-PKCS1-v1_5 (see padding\n// parameter below for RSASSA-PSS). For EC keys, the algorithm is ECDSA.\n</code></pre>\n<p>Example: Using the <a href=\"#crypto_sign_update_data_inputencoding\"><code>sign.update()</code></a> and <a href=\"crypto.html#crypto_sign_sign_privatekey_outputformat\"><code>sign.sign()</code></a> methods:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;SHA256&#39;);\n\nsign.update(&#39;some data to sign&#39;);\n\nconst privateKey = getPrivateKeySomehow();\nconsole.log(sign.sign(privateKey, &#39;hex&#39;));\n// Prints: the calculated signature\n</code></pre>\n<p>In some cases, a <code>Sign</code> instance can also be created by passing in a signature\nalgorithm name, such as &#39;RSA-SHA256&#39;. This will use the corresponding digest\nalgorithm. This does not work for all signature algorithms, such as\n&#39;ecdsa-with-SHA256&#39;. Use digest names instead.</p>\n<p>Example: signing using legacy signature algorithm name</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst sign = crypto.createSign(&#39;RSA-SHA256&#39;);\n\nsign.update(&#39;some data to sign&#39;);\n\nconst privateKey = getPrivateKeySomehow();\nconsole.log(sign.sign(privateKey, &#39;hex&#39;));\n// Prints: the calculated signature\n</code></pre>\n",
          "methods": [
            {
              "textRaw": "sign.sign(privateKey[, outputFormat])",
              "type": "method",
              "name": "sign",
              "meta": {
                "added": [
                  "v0.1.92"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/11705",
                    "description": "Support for RSASSA-PSS and additional options was added."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer | string} ",
                    "name": "return",
                    "type": "Buffer | string"
                  },
                  "params": [
                    {
                      "textRaw": "`privateKey` {string | Object} ",
                      "options": [
                        {
                          "textRaw": "`key` {string} ",
                          "name": "key",
                          "type": "string"
                        },
                        {
                          "textRaw": "`passphrase` {string} ",
                          "name": "passphrase",
                          "type": "string"
                        }
                      ],
                      "name": "privateKey",
                      "type": "string | Object"
                    },
                    {
                      "textRaw": "`outputFormat` {string} ",
                      "name": "outputFormat",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "privateKey"
                    },
                    {
                      "name": "outputFormat",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Calculates the signature on all the data passed through using either\n<a href=\"#crypto_sign_update_data_inputencoding\"><code>sign.update()</code></a> or <a href=\"stream.html#stream_writable_write_chunk_encoding_callback\"><code>sign.write()</code></a>.</p>\n<p>The <code>privateKey</code> argument can be an object or a string. If <code>privateKey</code> is a\nstring, it is treated as a raw key with no passphrase. If <code>privateKey</code> is an\nobject, it must contain one or more of the following properties:</p>\n<ul>\n<li><code>key</code>: {string} - PEM encoded private key (required)</li>\n<li><code>passphrase</code>: {string} - passphrase for the private key</li>\n<li><p><code>padding</code>: {integer} - Optional padding value for RSA, one of the following:</p>\n<ul>\n<li><code>crypto.constants.RSA_PKCS1_PADDING</code> (default)</li>\n<li><code>crypto.constants.RSA_PKCS1_PSS_PADDING</code></li>\n</ul>\n<p>Note that <code>RSA_PKCS1_PSS_PADDING</code> will use MGF1 with the same hash function\nused to sign the message as specified in section 3.1 of <a href=\"https://www.rfc-editor.org/rfc/rfc4055.txt\">RFC 4055</a>.</p>\n</li>\n<li><code>saltLength</code>: {integer} - salt length for when padding is\n<code>RSA_PKCS1_PSS_PADDING</code>. The special value\n<code>crypto.constants.RSA_PSS_SALTLEN_DIGEST</code> sets the salt length to the digest\nsize, <code>crypto.constants.RSA_PSS_SALTLEN_MAX_SIGN</code> (default) sets it to the\nmaximum permissible value.</li>\n</ul>\n<p>The <code>outputFormat</code> can specify one of <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>. If\n<code>outputFormat</code> is provided a string is returned; otherwise a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> is\nreturned.</p>\n<p>The <code>Sign</code> object can not be again used after <code>sign.sign()</code> method has been\ncalled. Multiple calls to <code>sign.sign()</code> will result in an error being thrown.</p>\n"
            },
            {
              "textRaw": "sign.update(data[, inputEncoding])",
              "type": "method",
              "name": "update",
              "meta": {
                "added": [
                  "v0.1.92"
                ],
                "changes": [
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5522",
                    "description": "The default `inputEncoding` changed from `binary` to `utf8`."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`data` {string | Buffer | TypedArray | DataView} ",
                      "name": "data",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`inputEncoding` {string} ",
                      "name": "inputEncoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "inputEncoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Updates the <code>Sign</code> content with the given <code>data</code>, the encoding of which\nis given in <code>inputEncoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\n<code>&#39;latin1&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, <code>TypedArray</code>, or\n<code>DataView</code>, then <code>inputEncoding</code> is ignored.</p>\n<p>This can be called many times with new data as it is streamed.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: Verify",
          "type": "class",
          "name": "Verify",
          "meta": {
            "added": [
              "v0.1.92"
            ],
            "changes": []
          },
          "desc": "<p>The <code>Verify</code> class is a utility for verifying signatures. It can be used in one\nof two ways:</p>\n<ul>\n<li>As a writable <a href=\"stream.html#stream_stream\">stream</a> where written data is used to validate against the\nsupplied signature, or</li>\n<li>Using the <a href=\"#crypto_verify_update_data_inputencoding\"><code>verify.update()</code></a> and <a href=\"#crypto_verify_verify_object_signature_signatureformat\"><code>verify.verify()</code></a> methods to verify\nthe signature.</li>\n</ul>\n<p>The <a href=\"#crypto_crypto_createverify_algorithm_options\"><code>crypto.createVerify()</code></a> method is used to create <code>Verify</code> instances.\n<code>Verify</code> objects are not to be created directly using the <code>new</code> keyword.</p>\n<p>Example: Using <code>Verify</code> objects as streams:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst verify = crypto.createVerify(&#39;SHA256&#39;);\n\nverify.write(&#39;some data to sign&#39;);\nverify.end();\n\nconst publicKey = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(verify.verify(publicKey, signature));\n// Prints: true or false\n</code></pre>\n<p>Example: Using the <a href=\"#crypto_verify_update_data_inputencoding\"><code>verify.update()</code></a> and <a href=\"#crypto_verify_verify_object_signature_signatureformat\"><code>verify.verify()</code></a> methods:</p>\n<pre><code class=\"lang-js\">const crypto = require(&#39;crypto&#39;);\nconst verify = crypto.createVerify(&#39;SHA256&#39;);\n\nverify.update(&#39;some data to sign&#39;);\n\nconst publicKey = getPublicKeySomehow();\nconst signature = getSignatureToVerify();\nconsole.log(verify.verify(publicKey, signature));\n// Prints: true or false\n</code></pre>\n",
          "methods": [
            {
              "textRaw": "verify.update(data[, inputEncoding])",
              "type": "method",
              "name": "update",
              "meta": {
                "added": [
                  "v0.1.92"
                ],
                "changes": [
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5522",
                    "description": "The default `inputEncoding` changed from `binary` to `utf8`."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`data` {string | Buffer | TypedArray | DataView} ",
                      "name": "data",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`inputEncoding` {string} ",
                      "name": "inputEncoding",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "inputEncoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Updates the <code>Verify</code> content with the given <code>data</code>, the encoding of which\nis given in <code>inputEncoding</code> and can be <code>&#39;utf8&#39;</code>, <code>&#39;ascii&#39;</code> or\n<code>&#39;latin1&#39;</code>. If <code>encoding</code> is not provided, and the <code>data</code> is a string, an\nencoding of <code>&#39;utf8&#39;</code> is enforced. If <code>data</code> is a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, <code>TypedArray</code>, or\n<code>DataView</code>, then <code>inputEncoding</code> is ignored.</p>\n<p>This can be called many times with new data as it is streamed.</p>\n"
            },
            {
              "textRaw": "verify.verify(object, signature[, signatureFormat])",
              "type": "method",
              "name": "verify",
              "meta": {
                "added": [
                  "v0.1.92"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/11705",
                    "description": "Support for RSASSA-PSS and additional options was added."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} `true` or `false` depending on the validity of the signature for the data and public key. ",
                    "name": "return",
                    "type": "boolean",
                    "desc": "`true` or `false` depending on the validity of the signature for the data and public key."
                  },
                  "params": [
                    {
                      "textRaw": "`object` {string | Object} ",
                      "name": "object",
                      "type": "string | Object"
                    },
                    {
                      "textRaw": "`signature` {string | Buffer | TypedArray | DataView} ",
                      "name": "signature",
                      "type": "string | Buffer | TypedArray | DataView"
                    },
                    {
                      "textRaw": "`signatureFormat` {string} ",
                      "name": "signatureFormat",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    },
                    {
                      "name": "signature"
                    },
                    {
                      "name": "signatureFormat",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Verifies the provided data using the given <code>object</code> and <code>signature</code>.\nThe <code>object</code> argument can be either a string containing a PEM encoded object,\nwhich can be an RSA public key, a DSA public key, or an X.509 certificate,\nor an object with one or more of the following properties:</p>\n<ul>\n<li><code>key</code>: {string} - PEM encoded public key (required)</li>\n<li><p><code>padding</code>: {integer} - Optional padding value for RSA, one of the following:</p>\n<ul>\n<li><code>crypto.constants.RSA_PKCS1_PADDING</code> (default)</li>\n<li><code>crypto.constants.RSA_PKCS1_PSS_PADDING</code></li>\n</ul>\n<p>Note that <code>RSA_PKCS1_PSS_PADDING</code> will use MGF1 with the same hash function\nused to verify the message as specified in section 3.1 of <a href=\"https://www.rfc-editor.org/rfc/rfc4055.txt\">RFC 4055</a>.</p>\n</li>\n<li><code>saltLength</code>: {integer} - salt length for when padding is\n<code>RSA_PKCS1_PSS_PADDING</code>. The special value\n<code>crypto.constants.RSA_PSS_SALTLEN_DIGEST</code> sets the salt length to the digest\nsize, <code>crypto.constants.RSA_PSS_SALTLEN_AUTO</code> (default) causes it to be\ndetermined automatically.</li>\n</ul>\n<p>The <code>signature</code> argument is the previously calculated signature for the data, in\nthe <code>signatureFormat</code> which can be <code>&#39;latin1&#39;</code>, <code>&#39;hex&#39;</code> or <code>&#39;base64&#39;</code>.\nIf a <code>signatureFormat</code> is specified, the <code>signature</code> is expected to be a\nstring; otherwise <code>signature</code> is expected to be a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>,\n<code>TypedArray</code>, or <code>DataView</code>.</p>\n<p>The <code>verify</code> object can not be used again after <code>verify.verify()</code> has been\ncalled. Multiple calls to <code>verify.verify()</code> will result in an error being\nthrown.</p>\n"
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Crypto"
    },
    {
      "textRaw": "DNS",
      "name": "dns",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>dns</code> module contains functions belonging to two different categories:</p>\n<p>1) Functions that use the underlying operating system facilities to perform\nname resolution, and that do not necessarily perform any network communication.\nThis category contains only one function: <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>. <strong>Developers\nlooking to perform name resolution in the same way that other applications on\nthe same operating system behave should use <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>.</strong></p>\n<p>For example, looking up <code>iana.org</code>.</p>\n<pre><code class=\"lang-js\">const dns = require(&#39;dns&#39;);\n\ndns.lookup(&#39;iana.org&#39;, (err, address, family) =&gt; {\n  console.log(&#39;address: %j family: IPv%s&#39;, address, family);\n});\n// address: &quot;192.0.43.8&quot; family: IPv4\n</code></pre>\n<p>2) Functions that connect to an actual DNS server to perform name resolution,\nand that <em>always</em> use the network to perform DNS queries. This category\ncontains all functions in the <code>dns</code> module <em>except</em> <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>. These\nfunctions do not use the same set of configuration files used by\n<a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> (e.g. <code>/etc/hosts</code>). These functions should be used by\ndevelopers who do not want to use the underlying operating system&#39;s facilities\nfor name resolution, and instead want to <em>always</em> perform DNS queries.</p>\n<p>Below is an example that resolves <code>&#39;archive.org&#39;</code> then reverse resolves the IP\naddresses that are returned.</p>\n<pre><code class=\"lang-js\">const dns = require(&#39;dns&#39;);\n\ndns.resolve4(&#39;archive.org&#39;, (err, addresses) =&gt; {\n  if (err) throw err;\n\n  console.log(`addresses: ${JSON.stringify(addresses)}`);\n\n  addresses.forEach((a) =&gt; {\n    dns.reverse(a, (err, hostnames) =&gt; {\n      if (err) {\n        throw err;\n      }\n      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\n    });\n  });\n});\n</code></pre>\n<p>There are subtle consequences in choosing one over the other, please consult\nthe <a href=\"#dns_implementation_considerations\">Implementation considerations section</a> for more information.</p>\n",
      "classes": [
        {
          "textRaw": "Class: dns.Resolver",
          "type": "class",
          "name": "dns.Resolver",
          "meta": {
            "added": [
              "v8.3.0"
            ],
            "changes": []
          },
          "desc": "<p>An independent resolver for DNS requests.</p>\n<p>Note that creating a new resolver uses the default server settings. Setting\nthe servers used for a resolver using\n<a href=\"#dns_dns_setservers_servers\"><code>resolver.setServers()</code></a> does not affect\nother resolver:</p>\n<pre><code class=\"lang-js\">const { Resolver } = require(&#39;dns&#39;);\nconst resolver = new Resolver();\nresolver.setServers([&#39;4.4.4.4&#39;]);\n\n// This request will use the server at 4.4.4.4, independent of global settings.\nresolver.resolve4(&#39;example.org&#39;, (err, addresses) =&gt; {\n  // ...\n});\n</code></pre>\n<p>The following methods from the <code>dns</code> module are available:</p>\n<ul>\n<li><a href=\"#dns_dns_getservers\"><code>resolver.getServers()</code></a></li>\n<li><a href=\"#dns_dns_setservers_servers\"><code>resolver.setServers()</code></a></li>\n<li><a href=\"#dns_dns_resolve_hostname_rrtype_callback\"><code>resolver.resolve()</code></a></li>\n<li><a href=\"#dns_dns_resolve4_hostname_options_callback\"><code>resolver.resolve4()</code></a></li>\n<li><a href=\"#dns_dns_resolve6_hostname_options_callback\"><code>resolver.resolve6()</code></a></li>\n<li><a href=\"#dns_dns_resolveany_hostname_callback\"><code>resolver.resolveAny()</code></a></li>\n<li><a href=\"#dns_dns_resolvecname_hostname_callback\"><code>resolver.resolveCname()</code></a></li>\n<li><a href=\"#dns_dns_resolvemx_hostname_callback\"><code>resolver.resolveMx()</code></a></li>\n<li><a href=\"#dns_dns_resolvenaptr_hostname_callback\"><code>resolver.resolveNaptr()</code></a></li>\n<li><a href=\"#dns_dns_resolvens_hostname_callback\"><code>resolver.resolveNs()</code></a></li>\n<li><a href=\"#dns_dns_resolveptr_hostname_callback\"><code>resolver.resolvePtr()</code></a></li>\n<li><a href=\"#dns_dns_resolvesoa_hostname_callback\"><code>resolver.resolveSoa()</code></a></li>\n<li><a href=\"#dns_dns_resolvesrv_hostname_callback\"><code>resolver.resolveSrv()</code></a></li>\n<li><a href=\"#dns_dns_resolvetxt_hostname_callback\"><code>resolver.resolveTxt()</code></a></li>\n<li><a href=\"#dns_dns_reverse_ip_callback\"><code>resolver.reverse()</code></a></li>\n</ul>\n",
          "methods": [
            {
              "textRaw": "resolver.cancel()",
              "type": "method",
              "name": "cancel",
              "meta": {
                "added": [
                  "v8.3.0"
                ],
                "changes": []
              },
              "desc": "<p>Cancel all outstanding DNS queries made by this resolver. The corresponding\ncallbacks will be called with an error with code <code>ECANCELLED</code>.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "methods": [
        {
          "textRaw": "dns.getServers()",
          "type": "method",
          "name": "getServers",
          "meta": {
            "added": [
              "v0.11.3"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string[]} ",
                "name": "return",
                "type": "string[]"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>Returns an array of IP address strings, formatted according to <a href=\"https://tools.ietf.org/html/rfc5952#section-6\">rfc5952</a>,\nthat are currently configured for DNS resolution. A string will include a port\nsection if a custom port is used.</p>\n<!-- eslint-disable semi-->\n<pre><code class=\"lang-js\">[\n  &#39;4.4.4.4&#39;,\n  &#39;2001:4860:4860::8888&#39;,\n  &#39;4.4.4.4:1053&#39;,\n  &#39;[2001:4860:4860::8888]:1053&#39;\n]\n</code></pre>\n"
        },
        {
          "textRaw": "dns.lookup(hostname[, options], callback)",
          "type": "method",
          "name": "lookup",
          "meta": {
            "added": [
              "v0.1.90"
            ],
            "changes": [
              {
                "version": "v1.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/744",
                "description": "The `all` option is supported now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`hostname` {string} ",
                  "name": "hostname",
                  "type": "string"
                },
                {
                  "textRaw": "`options` {integer | Object} ",
                  "options": [
                    {
                      "textRaw": "`family` {integer} The record family. Must be `4` or `6`. IPv4 and IPv6 addresses are both returned by default. ",
                      "name": "family",
                      "type": "integer",
                      "desc": "The record family. Must be `4` or `6`. IPv4 and IPv6 addresses are both returned by default."
                    },
                    {
                      "textRaw": "`hints` {number} One or more [supported `getaddrinfo` flags][]. Multiple flags may be passed by bitwise `OR`ing their values. ",
                      "name": "hints",
                      "type": "number",
                      "desc": "One or more [supported `getaddrinfo` flags][]. Multiple flags may be passed by bitwise `OR`ing their values."
                    },
                    {
                      "textRaw": "`all` {boolean} When `true`, the callback returns all resolved addresses in an array. Otherwise, returns a single address. **Default:** `false`. ",
                      "name": "all",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "When `true`, the callback returns all resolved addresses in an array. Otherwise, returns a single address."
                    },
                    {
                      "textRaw": "`verbatim` {boolean} When `true`, the callback receives IPv4 and IPv6 addresses in the order the DNS resolver returned them. When `false`, IPv4 addresses are placed before IPv6 addresses. **Default:** currently `false` (addresses are reordered) but this is expected to change in the not too distant future. New code should use `{ verbatim: true }`. ",
                      "name": "verbatim",
                      "type": "boolean",
                      "default": "currently `false` (addresses are reordered) but this is expected to change in the not too distant future. New code should use `{ verbatim: true }`",
                      "desc": "When `true`, the callback receives IPv4 and IPv6 addresses in the order the DNS resolver returned them. When `false`, IPv4 addresses are placed before IPv6 addresses."
                    }
                  ],
                  "name": "options",
                  "type": "integer | Object",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`address` {string} A string representation of an IPv4 or IPv6 address. ",
                      "name": "address",
                      "type": "string",
                      "desc": "A string representation of an IPv4 or IPv6 address."
                    },
                    {
                      "textRaw": "`family` {integer} `4` or `6`, denoting the family of `address`. ",
                      "name": "family",
                      "type": "integer",
                      "desc": "`4` or `6`, denoting the family of `address`."
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "hostname"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Resolves a hostname (e.g. <code>&#39;nodejs.org&#39;</code>) into the first found A (IPv4) or\nAAAA (IPv6) record. All <code>option</code> properties are optional. If <code>options</code> is an\ninteger, then it must be <code>4</code> or <code>6</code> – if <code>options</code> is not provided, then IPv4\nand IPv6 addresses are both returned if found.</p>\n<p>With the <code>all</code> option set to <code>true</code>, the arguments for <code>callback</code> change to\n<code>(err, addresses)</code>, with <code>addresses</code> being an array of objects with the\nproperties <code>address</code> and <code>family</code>.</p>\n<p>On error, <code>err</code> is an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object, where <code>err.code</code> is the error code.\nKeep in mind that <code>err.code</code> will be set to <code>&#39;ENOENT&#39;</code> not only when\nthe hostname does not exist but also when the lookup fails in other ways\nsuch as no available file descriptors.</p>\n<p><code>dns.lookup()</code> does not necessarily have anything to do with the DNS protocol.\nThe implementation uses an operating system facility that can associate names\nwith addresses, and vice versa. This implementation can have subtle but\nimportant consequences on the behavior of any Node.js program. Please take some\ntime to consult the <a href=\"#dns_implementation_considerations\">Implementation considerations section</a> before using\n<code>dns.lookup()</code>.</p>\n<p>Example usage:</p>\n<pre><code class=\"lang-js\">const dns = require(&#39;dns&#39;);\nconst options = {\n  family: 6,\n  hints: dns.ADDRCONFIG | dns.V4MAPPED,\n};\ndns.lookup(&#39;example.com&#39;, options, (err, address, family) =&gt;\n  console.log(&#39;address: %j family: IPv%s&#39;, address, family));\n// address: &quot;2606:2800:220:1:248:1893:25c8:1946&quot; family: IPv6\n\n// When options.all is true, the result will be an Array.\noptions.all = true;\ndns.lookup(&#39;example.com&#39;, options, (err, addresses) =&gt;\n  console.log(&#39;addresses: %j&#39;, addresses));\n// addresses: [{&quot;address&quot;:&quot;2606:2800:220:1:248:1893:25c8:1946&quot;,&quot;family&quot;:6}]\n</code></pre>\n<p>If this method is invoked as its <a href=\"#util_util_promisify_original\"><code>util.promisify()</code></a>ed version, and <code>all</code>\nis not set to <code>true</code>, it returns a <code>Promise</code> for an <code>Object</code> with <code>address</code> and\n<code>family</code> properties.</p>\n",
          "modules": [
            {
              "textRaw": "Supported getaddrinfo flags",
              "name": "supported_getaddrinfo_flags",
              "desc": "<p>The following flags can be passed as hints to <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>.</p>\n<ul>\n<li><code>dns.ADDRCONFIG</code>: Returned address types are determined by the types\nof addresses supported by the current system. For example, IPv4 addresses\nare only returned if the current system has at least one IPv4 address\nconfigured. Loopback addresses are not considered.</li>\n<li><code>dns.V4MAPPED</code>: If the IPv6 family was specified, but no IPv6 addresses were\nfound, then return IPv4 mapped IPv6 addresses. Note that it is not supported\non some operating systems (e.g FreeBSD 10.1).</li>\n</ul>\n",
              "type": "module",
              "displayName": "Supported getaddrinfo flags"
            }
          ]
        },
        {
          "textRaw": "dns.lookupService(address, port, callback)",
          "type": "method",
          "name": "lookupService",
          "meta": {
            "added": [
              "v0.11.14"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`address` {string} ",
                  "name": "address",
                  "type": "string"
                },
                {
                  "textRaw": "`port` {number} ",
                  "name": "port",
                  "type": "number"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`hostname` {string} e.g. `example.com` ",
                      "name": "hostname",
                      "type": "string",
                      "desc": "e.g. `example.com`"
                    },
                    {
                      "textRaw": "`service` {string} e.g. `http` ",
                      "name": "service",
                      "type": "string",
                      "desc": "e.g. `http`"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "address"
                },
                {
                  "name": "port"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Resolves the given <code>address</code> and <code>port</code> into a hostname and service using\nthe operating system&#39;s underlying <code>getnameinfo</code> implementation.</p>\n<p>If <code>address</code> is not a valid IP address, a <code>TypeError</code> will be thrown.\nThe <code>port</code> will be coerced to a number. If it is not a legal port, a <code>TypeError</code>\nwill be thrown.</p>\n<p>On an error, <code>err</code> is an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object, where <code>err.code</code> is the error code.</p>\n<pre><code class=\"lang-js\">const dns = require(&#39;dns&#39;);\ndns.lookupService(&#39;127.0.0.1&#39;, 22, (err, hostname, service) =&gt; {\n  console.log(hostname, service);\n  // Prints: localhost ssh\n});\n</code></pre>\n<p>If this method is invoked as its <a href=\"#util_util_promisify_original\"><code>util.promisify()</code></a>ed version, it returns a\n<code>Promise</code> for an <code>Object</code> with <code>hostname</code> and <code>service</code> properties.</p>\n"
        },
        {
          "textRaw": "dns.resolve(hostname[, rrtype], callback)",
          "type": "method",
          "name": "resolve",
          "meta": {
            "added": [
              "v0.1.27"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`hostname` {string} Hostname to resolve. ",
                  "name": "hostname",
                  "type": "string",
                  "desc": "Hostname to resolve."
                },
                {
                  "textRaw": "`rrtype` {string} Resource record type. **Default:** `'A'`. ",
                  "name": "rrtype",
                  "type": "string",
                  "default": "`'A'`",
                  "desc": "Resource record type.",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`records` {string[] | Object[] | Object} ",
                      "name": "records",
                      "type": "string[] | Object[] | Object"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "hostname"
                },
                {
                  "name": "rrtype",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Uses the DNS protocol to resolve a hostname (e.g. <code>&#39;nodejs.org&#39;</code>) into an array\nof the resource records. The <code>callback</code> function has arguments\n<code>(err, records)</code>. When successful, <code>records</code> will be an array of resource\nrecords. The type and structure of individual results varies based on <code>rrtype</code>:</p>\n<table>\n<thead>\n<tr>\n<th><code>rrtype</code></th>\n<th><code>records</code> contains</th>\n<th>Result type</th>\n<th>Shorthand method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#39;A&#39;</code></td>\n<td>IPv4 addresses (default)</td>\n<td>{string}</td>\n<td><a href=\"#dns_dns_resolve4_hostname_options_callback\"><code>dns.resolve4()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;AAAA&#39;</code></td>\n<td>IPv6 addresses</td>\n<td>{string}</td>\n<td><a href=\"#dns_dns_resolve6_hostname_options_callback\"><code>dns.resolve6()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;CNAME&#39;</code></td>\n<td>canonical name records</td>\n<td>{string}</td>\n<td><a href=\"#dns_dns_resolvecname_hostname_callback\"><code>dns.resolveCname()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;MX&#39;</code></td>\n<td>mail exchange records</td>\n<td>{Object}</td>\n<td><a href=\"#dns_dns_resolvemx_hostname_callback\"><code>dns.resolveMx()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;NAPTR&#39;</code></td>\n<td>name authority pointer records</td>\n<td>{Object}</td>\n<td><a href=\"#dns_dns_resolvenaptr_hostname_callback\"><code>dns.resolveNaptr()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;NS&#39;</code></td>\n<td>name server records</td>\n<td>{string}</td>\n<td><a href=\"#dns_dns_resolvens_hostname_callback\"><code>dns.resolveNs()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;PTR&#39;</code></td>\n<td>pointer records</td>\n<td>{string}</td>\n<td><a href=\"#dns_dns_resolveptr_hostname_callback\"><code>dns.resolvePtr()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;SOA&#39;</code></td>\n<td>start of authority records</td>\n<td>{Object}</td>\n<td><a href=\"#dns_dns_resolvesoa_hostname_callback\"><code>dns.resolveSoa()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;SRV&#39;</code></td>\n<td>service records</td>\n<td>{Object}</td>\n<td><a href=\"#dns_dns_resolvesrv_hostname_callback\"><code>dns.resolveSrv()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;TXT&#39;</code></td>\n<td>text records</td>\n<td>{string[]}</td>\n<td><a href=\"#dns_dns_resolvetxt_hostname_callback\"><code>dns.resolveTxt()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;ANY&#39;</code></td>\n<td>any records</td>\n<td>{Object}</td>\n<td><a href=\"#dns_dns_resolveany_hostname_callback\"><code>dns.resolveAny()</code></a></td>\n</tr>\n</tbody>\n</table>\n<p>On error, <code>err</code> is an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object, where <code>err.code</code> is one of the\n<a href=\"#dns_error_codes\">DNS error codes</a>.</p>\n"
        },
        {
          "textRaw": "dns.resolve4(hostname[, options], callback)",
          "type": "method",
          "name": "resolve4",
          "meta": {
            "added": [
              "v0.1.16"
            ],
            "changes": [
              {
                "version": "v7.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/9296",
                "description": "This method now supports passing `options`, specifically `options.ttl`."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`hostname` {string} Hostname to resolve. ",
                  "name": "hostname",
                  "type": "string",
                  "desc": "Hostname to resolve."
                },
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`ttl` {boolean} Retrieve the Time-To-Live value (TTL) of each record. When `true`, the callback receives an array of `{ address: '1.2.3.4', ttl: 60 }` objects rather than an array of strings, with the TTL expressed in seconds. ",
                      "name": "ttl",
                      "type": "boolean",
                      "desc": "Retrieve the Time-To-Live value (TTL) of each record. When `true`, the callback receives an array of `{ address: '1.2.3.4', ttl: 60 }` objects rather than an array of strings, with the TTL expressed in seconds."
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`addresses` {string[] | Object[]} ",
                      "name": "addresses",
                      "type": "string[] | Object[]"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "hostname"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Uses the DNS protocol to resolve a IPv4 addresses (<code>A</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of IPv4 addresses (e.g.\n<code>[&#39;74.125.79.104&#39;, &#39;74.125.79.105&#39;, &#39;74.125.79.106&#39;]</code>).</p>\n"
        },
        {
          "textRaw": "dns.resolve6(hostname[, options], callback)",
          "type": "method",
          "name": "resolve6",
          "meta": {
            "added": [
              "v0.1.16"
            ],
            "changes": [
              {
                "version": "v7.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/9296",
                "description": "This method now supports passing `options`, specifically `options.ttl`."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`hostname` {string} Hostname to resolve. ",
                  "name": "hostname",
                  "type": "string",
                  "desc": "Hostname to resolve."
                },
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`ttl` {boolean} Retrieve the Time-To-Live value (TTL) of each record. When `true`, the callback receives an array of `{ address: '0:1:2:3:4:5:6:7', ttl: 60 }` objects rather than an array of strings, with the TTL expressed in seconds. ",
                      "name": "ttl",
                      "type": "boolean",
                      "desc": "Retrieve the Time-To-Live value (TTL) of each record. When `true`, the callback receives an array of `{ address: '0:1:2:3:4:5:6:7', ttl: 60 }` objects rather than an array of strings, with the TTL expressed in seconds."
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`addresses` {string[] | Object[]} ",
                      "name": "addresses",
                      "type": "string[] | Object[]"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "hostname"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Uses the DNS protocol to resolve a IPv6 addresses (<code>AAAA</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of IPv6 addresses.</p>\n"
        },
        {
          "textRaw": "dns.resolveCname(hostname, callback)",
          "type": "method",
          "name": "resolveCname",
          "meta": {
            "added": [
              "v0.3.2"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`hostname` {string} ",
                  "name": "hostname",
                  "type": "string"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`addresses` {string[]} ",
                      "name": "addresses",
                      "type": "string[]"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "hostname"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Uses the DNS protocol to resolve <code>CNAME</code> records for the <code>hostname</code>. The\n<code>addresses</code> argument passed to the <code>callback</code> function\nwill contain an array of canonical name records available for the <code>hostname</code>\n(e.g. <code>[&#39;bar.example.com&#39;]</code>).</p>\n"
        },
        {
          "textRaw": "dns.resolveMx(hostname, callback)",
          "type": "method",
          "name": "resolveMx",
          "meta": {
            "added": [
              "v0.1.27"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`hostname` {string} ",
                  "name": "hostname",
                  "type": "string"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`addresses` {Object[]} ",
                      "name": "addresses",
                      "type": "Object[]"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "hostname"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Uses the DNS protocol to resolve mail exchange records (<code>MX</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\ncontain an array of objects containing both a <code>priority</code> and <code>exchange</code>\nproperty (e.g. <code>[{priority: 10, exchange: &#39;mx.example.com&#39;}, ...]</code>).</p>\n"
        },
        {
          "textRaw": "dns.resolveNaptr(hostname, callback)",
          "type": "method",
          "name": "resolveNaptr",
          "meta": {
            "added": [
              "v0.9.12"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`hostname` {string} ",
                  "name": "hostname",
                  "type": "string"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`addresses` {Object[]} ",
                      "name": "addresses",
                      "type": "Object[]"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "hostname"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Uses the DNS protocol to resolve regular expression based records (<code>NAPTR</code>\nrecords) for the <code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code>\nfunction will contain an array of objects with the following properties:</p>\n<ul>\n<li><code>flags</code></li>\n<li><code>service</code></li>\n<li><code>regexp</code></li>\n<li><code>replacement</code></li>\n<li><code>order</code></li>\n<li><code>preference</code></li>\n</ul>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  flags: &#39;s&#39;,\n  service: &#39;SIP+D2U&#39;,\n  regexp: &#39;&#39;,\n  replacement: &#39;_sip._udp.example.com&#39;,\n  order: 30,\n  preference: 100\n}\n</code></pre>\n"
        },
        {
          "textRaw": "dns.resolveNs(hostname, callback)",
          "type": "method",
          "name": "resolveNs",
          "meta": {
            "added": [
              "v0.1.90"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`hostname` {string} ",
                  "name": "hostname",
                  "type": "string"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`addresses` {string[]} ",
                      "name": "addresses",
                      "type": "string[]"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "hostname"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Uses the DNS protocol to resolve name server records (<code>NS</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\ncontain an array of name server records available for <code>hostname</code>\n(e.g. <code>[&#39;ns1.example.com&#39;, &#39;ns2.example.com&#39;]</code>).</p>\n"
        },
        {
          "textRaw": "dns.resolvePtr(hostname, callback)",
          "type": "method",
          "name": "resolvePtr",
          "meta": {
            "added": [
              "v6.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`hostname` {string} ",
                  "name": "hostname",
                  "type": "string"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`addresses` {string[]} ",
                      "name": "addresses",
                      "type": "string[]"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "hostname"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Uses the DNS protocol to resolve pointer records (<code>PTR</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\nbe an array of strings containing the reply records.</p>\n"
        },
        {
          "textRaw": "dns.resolveSoa(hostname, callback)",
          "type": "method",
          "name": "resolveSoa",
          "meta": {
            "added": [
              "v0.11.10"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`hostname` {string} ",
                  "name": "hostname",
                  "type": "string"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`address` {Object} ",
                      "name": "address",
                      "type": "Object"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "hostname"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Uses the DNS protocol to resolve a start of authority record (<code>SOA</code> record) for\nthe <code>hostname</code>. The <code>address</code> argument passed to the <code>callback</code> function will\nbe an object with the following properties:</p>\n<ul>\n<li><code>nsname</code></li>\n<li><code>hostmaster</code></li>\n<li><code>serial</code></li>\n<li><code>refresh</code></li>\n<li><code>retry</code></li>\n<li><code>expire</code></li>\n<li><code>minttl</code></li>\n</ul>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  nsname: &#39;ns.example.com&#39;,\n  hostmaster: &#39;root.example.com&#39;,\n  serial: 2013101809,\n  refresh: 10000,\n  retry: 2400,\n  expire: 604800,\n  minttl: 3600\n}\n</code></pre>\n"
        },
        {
          "textRaw": "dns.resolveSrv(hostname, callback)",
          "type": "method",
          "name": "resolveSrv",
          "meta": {
            "added": [
              "v0.1.27"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`hostname` {string} ",
                  "name": "hostname",
                  "type": "string"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`addresses` {Object[]} ",
                      "name": "addresses",
                      "type": "Object[]"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "hostname"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Uses the DNS protocol to resolve service records (<code>SRV</code> records) for the\n<code>hostname</code>. The <code>addresses</code> argument passed to the <code>callback</code> function will\nbe an array of objects with the following properties:</p>\n<ul>\n<li><code>priority</code></li>\n<li><code>weight</code></li>\n<li><code>port</code></li>\n<li><code>name</code></li>\n</ul>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  priority: 10,\n  weight: 5,\n  port: 21223,\n  name: &#39;service.example.com&#39;\n}\n</code></pre>\n"
        },
        {
          "textRaw": "dns.resolveTxt(hostname, callback)",
          "type": "method",
          "name": "resolveTxt",
          "meta": {
            "added": [
              "v0.1.27"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`hostname` {string} ",
                  "name": "hostname",
                  "type": "string"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`records` {string[][]} ",
                      "name": "records",
                      "type": "string[][]"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "hostname"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Uses the DNS protocol to resolve text queries (<code>TXT</code> records) for the\n<code>hostname</code>. The <code>records</code> argument passed to the <code>callback</code> function is a\ntwo-dimensional array of the text records available for <code>hostname</code> (e.g.\n<code>[ [&#39;v=spf1 ip4:0.0.0.0 &#39;, &#39;~all&#39; ] ]</code>). Each sub-array contains TXT chunks of\none record. Depending on the use case, these could be either joined together or\ntreated separately.</p>\n"
        },
        {
          "textRaw": "dns.resolveAny(hostname, callback)",
          "type": "method",
          "name": "resolveAny",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`hostname` {string} ",
                  "name": "hostname",
                  "type": "string"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`ret` {Object[]} ",
                      "name": "ret",
                      "type": "Object[]"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "hostname"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Uses the DNS protocol to resolve all records (also known as <code>ANY</code> or <code>*</code> query).\nThe <code>ret</code> argument passed to the <code>callback</code> function will be an array containing\nvarious types of records. Each object has a property <code>type</code> that indicates the\ntype of the current record. And depending on the <code>type</code>, additional properties\nwill be present on the object:</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Properties</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#39;A&#39;</code></td>\n<td><code>address</code> / <code>ttl</code></td>\n</tr>\n<tr>\n<td><code>&#39;AAAA&#39;</code></td>\n<td><code>address</code> / <code>ttl</code></td>\n</tr>\n<tr>\n<td><code>&#39;CNAME&#39;</code></td>\n<td><code>value</code></td>\n</tr>\n<tr>\n<td><code>&#39;MX&#39;</code></td>\n<td>Refer to <a href=\"#dns_dns_resolvemx_hostname_callback\"><code>dns.resolveMx()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;NAPTR&#39;</code></td>\n<td>Refer to <a href=\"#dns_dns_resolvenaptr_hostname_callback\"><code>dns.resolveNaptr()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;NS&#39;</code></td>\n<td><code>value</code></td>\n</tr>\n<tr>\n<td><code>&#39;PTR&#39;</code></td>\n<td><code>value</code></td>\n</tr>\n<tr>\n<td><code>&#39;SOA&#39;</code></td>\n<td>Refer to <a href=\"#dns_dns_resolvesoa_hostname_callback\"><code>dns.resolveSoa()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;SRV&#39;</code></td>\n<td>Refer to <a href=\"#dns_dns_resolvesrv_hostname_callback\"><code>dns.resolveSrv()</code></a></td>\n</tr>\n<tr>\n<td><code>&#39;TXT&#39;</code></td>\n<td>This type of record contains an array property called <code>entries</code> which refers to <a href=\"#dns_dns_resolvetxt_hostname_callback\"><code>dns.resolveTxt()</code></a>, eg. <code>{ entries: [&#39;...&#39;], type: &#39;TXT&#39; }</code></td>\n</tr>\n</tbody>\n</table>\n<p>Here is an example of the <code>ret</code> object passed to the callback:</p>\n<!-- eslint-disable semi -->\n<pre><code class=\"lang-js\">[ { type: &#39;A&#39;, address: &#39;127.0.0.1&#39;, ttl: 299 },\n  { type: &#39;CNAME&#39;, value: &#39;example.com&#39; },\n  { type: &#39;MX&#39;, exchange: &#39;alt4.aspmx.l.example.com&#39;, priority: 50 },\n  { type: &#39;NS&#39;, value: &#39;ns1.example.com&#39; },\n  { type: &#39;TXT&#39;, entries: [ &#39;v=spf1 include:_spf.example.com ~all&#39; ] },\n  { type: &#39;SOA&#39;,\n    nsname: &#39;ns1.example.com&#39;,\n    hostmaster: &#39;admin.example.com&#39;,\n    serial: 156696742,\n    refresh: 900,\n    retry: 900,\n    expire: 1800,\n    minttl: 60 } ]\n</code></pre>\n"
        },
        {
          "textRaw": "dns.reverse(ip, callback)",
          "type": "method",
          "name": "reverse",
          "meta": {
            "added": [
              "v0.1.16"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`ip` {string} ",
                  "name": "ip",
                  "type": "string"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`hostnames` {string[]} ",
                      "name": "hostnames",
                      "type": "string[]"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "ip"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\narray of hostnames.</p>\n<p>On error, <code>err</code> is an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object, where <code>err.code</code> is\none of the <a href=\"#dns_error_codes\">DNS error codes</a>.</p>\n"
        },
        {
          "textRaw": "dns.setServers(servers)",
          "type": "method",
          "name": "setServers",
          "meta": {
            "added": [
              "v0.11.3"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`servers` {string[]} array of [rfc5952][] formatted addresses ",
                  "name": "servers",
                  "type": "string[]",
                  "desc": "array of [rfc5952][] formatted addresses"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "servers"
                }
              ]
            }
          ],
          "desc": "<p>Sets the IP address and port of servers to be used when performing DNS\nresolution. The <code>servers</code> argument is an array of <a href=\"https://tools.ietf.org/html/rfc5952#section-6\">rfc5952</a> formatted\naddresses. If the port is the IANA default DNS port (53) it can be omitted.</p>\n<pre><code class=\"lang-js\">dns.setServers([\n  &#39;4.4.4.4&#39;,\n  &#39;[2001:4860:4860::8888]&#39;,\n  &#39;4.4.4.4:1053&#39;,\n  &#39;[2001:4860:4860::8888]:1053&#39;\n]);\n</code></pre>\n<p>An error will be thrown if an invalid address is provided.</p>\n<p>The <code>dns.setServers()</code> method must not be called while a DNS query is in\nprogress.</p>\n"
        }
      ],
      "modules": [
        {
          "textRaw": "Error codes",
          "name": "error_codes",
          "desc": "<p>Each DNS query can return one of the following error codes:</p>\n<ul>\n<li><code>dns.NODATA</code>: DNS server returned answer with no data.</li>\n<li><code>dns.FORMERR</code>: DNS server claims query was misformatted.</li>\n<li><code>dns.SERVFAIL</code>: DNS server returned general failure.</li>\n<li><code>dns.NOTFOUND</code>: Domain name not found.</li>\n<li><code>dns.NOTIMP</code>: DNS server does not implement requested operation.</li>\n<li><code>dns.REFUSED</code>: DNS server refused query.</li>\n<li><code>dns.BADQUERY</code>: Misformatted DNS query.</li>\n<li><code>dns.BADNAME</code>: Misformatted hostname.</li>\n<li><code>dns.BADFAMILY</code>: Unsupported address family.</li>\n<li><code>dns.BADRESP</code>: Misformatted DNS reply.</li>\n<li><code>dns.CONNREFUSED</code>: Could not contact DNS servers.</li>\n<li><code>dns.TIMEOUT</code>: Timeout while contacting DNS servers.</li>\n<li><code>dns.EOF</code>: End of file.</li>\n<li><code>dns.FILE</code>: Error reading file.</li>\n<li><code>dns.NOMEM</code>: Out of memory.</li>\n<li><code>dns.DESTRUCTION</code>: Channel is being destroyed.</li>\n<li><code>dns.BADSTR</code>: Misformatted string.</li>\n<li><code>dns.BADFLAGS</code>: Illegal flags specified.</li>\n<li><code>dns.NONAME</code>: Given hostname is not numeric.</li>\n<li><code>dns.BADHINTS</code>: Illegal hints flags specified.</li>\n<li><code>dns.NOTINITIALIZED</code>: c-ares library initialization not yet performed.</li>\n<li><code>dns.LOADIPHLPAPI</code>: Error loading <code>iphlpapi.dll</code>.</li>\n<li><code>dns.ADDRGETNETWORKPARAMS</code>: Could not find <code>GetNetworkParams</code> function.</li>\n<li><code>dns.CANCELLED</code>: DNS query cancelled.</li>\n</ul>\n",
          "type": "module",
          "displayName": "Error codes"
        },
        {
          "textRaw": "Implementation considerations",
          "name": "implementation_considerations",
          "desc": "<p>Although <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> and the various <code>dns.resolve*()/dns.reverse()</code>\nfunctions have the same goal of associating a network name with a network\naddress (or vice versa), their behavior is quite different. These differences\ncan have subtle but significant consequences on the behavior of Node.js\nprograms.</p>\n",
          "modules": [
            {
              "textRaw": "`dns.lookup()`",
              "name": "`dns.lookup()`",
              "desc": "<p>Under the hood, <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> uses the same operating system facilities\nas most other programs. For instance, <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> will almost always\nresolve a given name the same way as the <code>ping</code> command. On most POSIX-like\noperating systems, the behavior of the <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> function can be\nmodified by changing settings in nsswitch.conf(5) and/or resolv.conf(5),\nbut note that changing these files will change the behavior of <em>all other\nprograms running on the same operating system</em>.</p>\n<p>Though the call to <code>dns.lookup()</code> will be asynchronous from JavaScript&#39;s\nperspective, it is implemented as a synchronous call to getaddrinfo(3) that runs\non libuv&#39;s threadpool. This can have surprising negative performance\nimplications for some applications, see the <a href=\"cli.html#cli_uv_threadpool_size_size\"><code>UV_THREADPOOL_SIZE</code></a>\ndocumentation for more information.</p>\n<p>Note that various networking APIs will call <code>dns.lookup()</code> internally to resolve\nhost names. If that is an issue, consider resolving the hostname to and address\nusing <code>dns.resolve()</code> and using the address instead of a host name. Also, some\nnetworking APIs (such as <a href=\"#net_socket_connect\"><code>socket.connect()</code></a> and <a href=\"#dgram_dgram_createsocket_options_callback\"><code>dgram.createSocket()</code></a>)\nallow the default resolver, <code>dns.lookup()</code>, to be replaced.</p>\n",
              "type": "module",
              "displayName": "`dns.lookup()`"
            },
            {
              "textRaw": "`dns.resolve()`, `dns.resolve*()` and `dns.reverse()`",
              "name": "`dns.resolve()`,_`dns.resolve*()`_and_`dns.reverse()`",
              "desc": "<p>These functions are implemented quite differently than <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>. They\ndo not use getaddrinfo(3) and they <em>always</em> perform a DNS query on the\nnetwork. This network communication is always done asynchronously, and does not\nuse libuv&#39;s threadpool.</p>\n<p>As a result, these functions cannot have the same negative impact on other\nprocessing that happens on libuv&#39;s threadpool that <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a> can have.</p>\n<p>They do not use the same set of configuration files than what <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>\nuses. For instance, <em>they do not use the configuration from <code>/etc/hosts</code></em>.</p>\n<!-- [end-include:dns.md] -->\n<!-- [start-include:domain.md] -->\n",
              "type": "module",
              "displayName": "`dns.resolve()`, `dns.resolve*()` and `dns.reverse()`"
            }
          ],
          "type": "module",
          "displayName": "Implementation considerations"
        }
      ],
      "type": "module",
      "displayName": "DNS"
    },
    {
      "textRaw": "Domain",
      "name": "domain",
      "meta": {
        "changes": [
          {
            "version": "v8.8.0",
            "description": "Any `Promise`s created in VM contexts no longer have a `.domain` property. Their handlers are still executed in the proper domain, however, and `Promise`s created in the main context still possess a `.domain` property."
          },
          {
            "version": "v8.0.0",
            "pr-url": "https://github.com/nodejs/node/pull/12489",
            "description": "Handlers for `Promise`s are now invoked in the domain in which the first promise of a chain was created."
          }
        ]
      },
      "introduced_in": "v0.10.0",
      "stability": 0,
      "stabilityText": "Deprecated",
      "desc": "<p><strong>This module is pending deprecation</strong>. Once a replacement API has been\nfinalized, this module will be fully deprecated. Most end users should\n<strong>not</strong> have cause to use this module. Users who absolutely must have\nthe functionality that domains provide may rely on it for the time being\nbut should expect to have to migrate to a different solution\nin the future.</p>\n<p>Domains provide a way to handle multiple different IO operations as a\nsingle group. If any of the event emitters or callbacks registered to a\ndomain emit an <code>&#39;error&#39;</code> event, or throw an error, then the domain object\nwill be notified, rather than losing the context of the error in the\n<code>process.on(&#39;uncaughtException&#39;)</code> handler, or causing the program to\nexit immediately with an error code.</p>\n",
      "miscs": [
        {
          "textRaw": "Warning: Don't Ignore Errors!",
          "name": "Warning: Don't Ignore Errors!",
          "type": "misc",
          "desc": "<p>Domain error handlers are not a substitute for closing down a\nprocess when an error occurs.</p>\n<p>By the very nature of how <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw\"><code>throw</code></a> works in JavaScript, there is almost\nnever any way to safely &quot;pick up where you left off&quot;, without leaking\nreferences, or creating some other sort of undefined brittle state.</p>\n<p>The safest way to respond to a thrown error is to shut down the\nprocess. Of course, in a normal web server, there may be many\nopen connections, and it is not reasonable to abruptly shut those down\nbecause an error was triggered by someone else.</p>\n<p>The better approach is to send an error response to the request that\ntriggered the error, while letting the others finish in their normal\ntime, and stop listening for new requests in that worker.</p>\n<p>In this way, <code>domain</code> usage goes hand-in-hand with the cluster module,\nsince the master process can fork a new worker when a worker\nencounters an error. For Node.js programs that scale to multiple\nmachines, the terminating proxy or service registry can take note of\nthe failure, and react accordingly.</p>\n<p>For example, this is not a good idea:</p>\n<pre><code class=\"lang-js\">// XXX WARNING! BAD IDEA!\n\nconst d = require(&#39;domain&#39;).create();\nd.on(&#39;error&#39;, (er) =&gt; {\n  // The error won&#39;t crash the process, but what it does is worse!\n  // Though we&#39;ve prevented abrupt process restarting, we are leaking\n  // resources like crazy if this ever happens.\n  // This is no better than process.on(&#39;uncaughtException&#39;)!\n  console.log(`error, but oh well ${er.message}`);\n});\nd.run(() =&gt; {\n  require(&#39;http&#39;).createServer((req, res) =&gt; {\n    handleRequest(req, res);\n  }).listen(PORT);\n});\n</code></pre>\n<p>By using the context of a domain, and the resilience of separating our\nprogram into multiple worker processes, we can react more\nappropriately, and handle errors with much greater safety.</p>\n<pre><code class=\"lang-js\">// Much better!\n\nconst cluster = require(&#39;cluster&#39;);\nconst PORT = +process.env.PORT || 1337;\n\nif (cluster.isMaster) {\n  // A more realistic scenario would have more than 2 workers,\n  // and perhaps not put the master and worker in the same file.\n  //\n  // It is also possible to get a bit fancier about logging, and\n  // implement whatever custom logic is needed to prevent DoS\n  // attacks and other bad behavior.\n  //\n  // See the options in the cluster documentation.\n  //\n  // The important thing is that the master does very little,\n  // increasing our resilience to unexpected errors.\n\n  cluster.fork();\n  cluster.fork();\n\n  cluster.on(&#39;disconnect&#39;, (worker) =&gt; {\n    console.error(&#39;disconnect!&#39;);\n    cluster.fork();\n  });\n\n} else {\n  // the worker\n  //\n  // This is where we put our bugs!\n\n  const domain = require(&#39;domain&#39;);\n\n  // See the cluster documentation for more details about using\n  // worker processes to serve requests. How it works, caveats, etc.\n\n  const server = require(&#39;http&#39;).createServer((req, res) =&gt; {\n    const d = domain.create();\n    d.on(&#39;error&#39;, (er) =&gt; {\n      console.error(`error ${er.stack}`);\n\n      // Note: We&#39;re in dangerous territory!\n      // By definition, something unexpected occurred,\n      // which we probably didn&#39;t want.\n      // Anything can happen now! Be very careful!\n\n      try {\n        // make sure we close down within 30 seconds\n        const killtimer = setTimeout(() =&gt; {\n          process.exit(1);\n        }, 30000);\n        // But don&#39;t keep the process open just for that!\n        killtimer.unref();\n\n        // stop taking new requests.\n        server.close();\n\n        // Let the master know we&#39;re dead. This will trigger a\n        // &#39;disconnect&#39; in the cluster master, and then it will fork\n        // a new worker.\n        cluster.worker.disconnect();\n\n        // try to send an error to the request that triggered the problem\n        res.statusCode = 500;\n        res.setHeader(&#39;content-type&#39;, &#39;text/plain&#39;);\n        res.end(&#39;Oops, there was a problem!\\n&#39;);\n      } catch (er2) {\n        // oh well, not much we can do at this point.\n        console.error(`Error sending 500! ${er2.stack}`);\n      }\n    });\n\n    // Because req and res were created before this domain existed,\n    // we need to explicitly add them.\n    // See the explanation of implicit vs explicit binding below.\n    d.add(req);\n    d.add(res);\n\n    // Now run the handler function in the domain.\n    d.run(() =&gt; {\n      handleRequest(req, res);\n    });\n  });\n  server.listen(PORT);\n}\n\n// This part is not important. Just an example routing thing.\n// Put fancy application logic here.\nfunction handleRequest(req, res) {\n  switch (req.url) {\n    case &#39;/error&#39;:\n      // We do some async stuff, and then...\n      setTimeout(() =&gt; {\n        // Whoops!\n        flerb.bark();\n      }, timeout);\n      break;\n    default:\n      res.end(&#39;ok&#39;);\n  }\n}\n</code></pre>\n"
        },
        {
          "textRaw": "Additions to Error objects",
          "name": "Additions to Error objects",
          "type": "misc",
          "desc": "<p>Any time an <code>Error</code> object is routed through a domain, a few extra fields\nare added to it.</p>\n<ul>\n<li><code>error.domain</code> The domain that first handled the error.</li>\n<li><code>error.domainEmitter</code> The event emitter that emitted an <code>&#39;error&#39;</code> event\nwith the error object.</li>\n<li><code>error.domainBound</code> The callback function which was bound to the\ndomain, and passed an error as its first argument.</li>\n<li><code>error.domainThrown</code> A boolean indicating whether the error was\nthrown, emitted, or passed to a bound callback function.</li>\n</ul>\n"
        },
        {
          "textRaw": "Implicit Binding",
          "name": "Implicit Binding",
          "type": "misc",
          "desc": "<p>If domains are in use, then all <strong>new</strong> <code>EventEmitter</code> objects (including\nStream objects, requests, responses, etc.) will be implicitly bound to\nthe active domain at the time of their creation.</p>\n<p>Additionally, callbacks passed to lowlevel event loop requests (such as\nto <code>fs.open()</code>, or other callback-taking methods) will automatically be\nbound to the active domain. If they throw, then the domain will catch\nthe error.</p>\n<p>In order to prevent excessive memory usage, <code>Domain</code> objects themselves\nare not implicitly added as children of the active domain. If they\nwere, then it would be too easy to prevent request and response objects\nfrom being properly garbage collected.</p>\n<p>To nest <code>Domain</code> objects as children of a parent <code>Domain</code> they must be\nexplicitly added.</p>\n<p>Implicit binding routes thrown errors and <code>&#39;error&#39;</code> events to the\n<code>Domain</code>&#39;s <code>&#39;error&#39;</code> event, but does not register the <code>EventEmitter</code> on the\n<code>Domain</code>.\nImplicit binding only takes care of thrown errors and <code>&#39;error&#39;</code> events.</p>\n"
        },
        {
          "textRaw": "Explicit Binding",
          "name": "Explicit Binding",
          "type": "misc",
          "desc": "<p>Sometimes, the domain in use is not the one that ought to be used for a\nspecific event emitter. Or, the event emitter could have been created\nin the context of one domain, but ought to instead be bound to some\nother domain.</p>\n<p>For example, there could be one domain in use for an HTTP server, but\nperhaps we would like to have a separate domain to use for each request.</p>\n<p>That is possible via explicit binding.</p>\n<pre><code class=\"lang-js\">// create a top-level domain for the server\nconst domain = require(&#39;domain&#39;);\nconst http = require(&#39;http&#39;);\nconst serverDomain = domain.create();\n\nserverDomain.run(() =&gt; {\n  // server is created in the scope of serverDomain\n  http.createServer((req, res) =&gt; {\n    // req and res are also created in the scope of serverDomain\n    // however, we&#39;d prefer to have a separate domain for each request.\n    // create it first thing, and add req and res to it.\n    const reqd = domain.create();\n    reqd.add(req);\n    reqd.add(res);\n    reqd.on(&#39;error&#39;, (er) =&gt; {\n      console.error(&#39;Error&#39;, er, req.url);\n      try {\n        res.writeHead(500);\n        res.end(&#39;Error occurred, sorry.&#39;);\n      } catch (er2) {\n        console.error(&#39;Error sending 500&#39;, er2, req.url);\n      }\n    });\n  }).listen(1337);\n});\n</code></pre>\n"
        }
      ],
      "methods": [
        {
          "textRaw": "domain.create()",
          "type": "method",
          "name": "create",
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Domain} ",
                "name": "return",
                "type": "Domain"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>Domain</code> class encapsulates the functionality of routing errors and\nuncaught exceptions to the active <code>Domain</code> object.</p>\n<p><code>Domain</code> is a child class of <a href=\"events.html\"><code>EventEmitter</code></a>. To handle the errors that it\ncatches, listen to its <code>&#39;error&#39;</code> event.</p>\n",
          "properties": [
            {
              "textRaw": "`members` {Array} ",
              "name": "members",
              "desc": "<p>An array of timers and event emitters that have been explicitly added\nto the domain.</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "domain.add(emitter)",
              "type": "method",
              "name": "add",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`emitter` {EventEmitter|Timer} emitter or timer to be added to the domain ",
                      "name": "emitter",
                      "type": "EventEmitter|Timer",
                      "desc": "emitter or timer to be added to the domain"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "emitter"
                    }
                  ]
                }
              ],
              "desc": "<p>Explicitly adds an emitter to the domain. If any event handlers called by\nthe emitter throw an error, or if the emitter emits an <code>&#39;error&#39;</code> event, it\nwill be routed to the domain&#39;s <code>&#39;error&#39;</code> event, just like with implicit\nbinding.</p>\n<p>This also works with timers that are returned from <a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a> and\n<a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a>. If their callback function throws, it will be caught by\nthe domain <code>&#39;error&#39;</code> handler.</p>\n<p>If the Timer or <code>EventEmitter</code> was already bound to a domain, it is removed\nfrom that one, and bound to this one instead.</p>\n"
            },
            {
              "textRaw": "domain.bind(callback)",
              "type": "method",
              "name": "bind",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Function} The bound function ",
                    "name": "return",
                    "type": "Function",
                    "desc": "The bound function"
                  },
                  "params": [
                    {
                      "textRaw": "`callback` {Function} The callback function ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "The callback function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>The returned function will be a wrapper around the supplied callback\nfunction. When the returned function is called, any errors that are\nthrown will be routed to the domain&#39;s <code>&#39;error&#39;</code> event.</p>\n<h4>Example</h4>\n<pre><code class=\"lang-js\">const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &#39;utf8&#39;, d.bind((er, data) =&gt; {\n    // if this throws, it will also be passed to the domain\n    return cb(er, data ? JSON.parse(data) : null);\n  }));\n}\n\nd.on(&#39;error&#39;, (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n</code></pre>\n"
            },
            {
              "textRaw": "domain.enter()",
              "type": "method",
              "name": "enter",
              "desc": "<p>The <code>enter()</code> method is plumbing used by the <code>run()</code>, <code>bind()</code>, and\n<code>intercept()</code> methods to set the active domain. It sets <code>domain.active</code> and\n<code>process.domain</code> to the domain, and implicitly pushes the domain onto the domain\nstack managed by the domain module (see <a href=\"#domain_domain_exit\"><code>domain.exit()</code></a> for details on the\ndomain stack). The call to <code>enter()</code> delimits the beginning of a chain of\nasynchronous calls and I/O operations bound to a domain.</p>\n<p>Calling <code>enter()</code> changes only the active domain, and does not alter the domain\nitself. <code>enter()</code> and <code>exit()</code> can be called an arbitrary number of times on a\nsingle domain.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "domain.exit()",
              "type": "method",
              "name": "exit",
              "desc": "<p>The <code>exit()</code> method exits the current domain, popping it off the domain stack.\nAny time execution is going to switch to the context of a different chain of\nasynchronous calls, it&#39;s important to ensure that the current domain is exited.\nThe call to <code>exit()</code> delimits either the end of or an interruption to the chain\nof asynchronous calls and I/O operations bound to a domain.</p>\n<p>If there are multiple, nested domains bound to the current execution context,\n<code>exit()</code> will exit any domains nested within this domain.</p>\n<p>Calling <code>exit()</code> changes only the active domain, and does not alter the domain\nitself. <code>enter()</code> and <code>exit()</code> can be called an arbitrary number of times on a\nsingle domain.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "domain.intercept(callback)",
              "type": "method",
              "name": "intercept",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Function} The intercepted function ",
                    "name": "return",
                    "type": "Function",
                    "desc": "The intercepted function"
                  },
                  "params": [
                    {
                      "textRaw": "`callback` {Function} The callback function ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "The callback function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>This method is almost identical to <a href=\"#domain_domain_bind_callback\"><code>domain.bind(callback)</code></a>. However, in\naddition to catching thrown errors, it will also intercept <a href=\"errors.html#errors_class_error\"><code>Error</code></a>\nobjects sent as the first argument to the function.</p>\n<p>In this way, the common <code>if (err) return callback(err);</code> pattern can be replaced\nwith a single error handler in a single place.</p>\n<h4>Example</h4>\n<pre><code class=\"lang-js\">const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &#39;utf8&#39;, d.intercept((data) =&gt; {\n    // note, the first argument is never passed to the\n    // callback since it is assumed to be the &#39;Error&#39; argument\n    // and thus intercepted by the domain.\n\n    // if this throws, it will also be passed to the domain\n    // so the error-handling logic can be moved to the &#39;error&#39;\n    // event on the domain instead of being repeated throughout\n    // the program.\n    return cb(null, JSON.parse(data));\n  }));\n}\n\nd.on(&#39;error&#39;, (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n</code></pre>\n"
            },
            {
              "textRaw": "domain.remove(emitter)",
              "type": "method",
              "name": "remove",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`emitter` {EventEmitter|Timer} emitter or timer to be removed from the domain ",
                      "name": "emitter",
                      "type": "EventEmitter|Timer",
                      "desc": "emitter or timer to be removed from the domain"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "emitter"
                    }
                  ]
                }
              ],
              "desc": "<p>The opposite of <a href=\"#domain_domain_add_emitter\"><code>domain.add(emitter)</code></a>. Removes domain handling from the\nspecified emitter.</p>\n"
            },
            {
              "textRaw": "domain.run(fn[, ...args])",
              "type": "method",
              "name": "run",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`fn` {Function} ",
                      "name": "fn",
                      "type": "Function"
                    },
                    {
                      "textRaw": "`...args` {any} ",
                      "name": "...args",
                      "type": "any",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "fn"
                    },
                    {
                      "name": "...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Run the supplied function in the context of the domain, implicitly\nbinding all event emitters, timers, and lowlevel requests that are\ncreated in that context. Optionally, arguments can be passed to\nthe function.</p>\n<p>This is the most basic way to use a domain.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const domain = require(&#39;domain&#39;);\nconst fs = require(&#39;fs&#39;);\nconst d = domain.create();\nd.on(&#39;error&#39;, (er) =&gt; {\n  console.error(&#39;Caught error!&#39;, er);\n});\nd.run(() =&gt; {\n  process.nextTick(() =&gt; {\n    setTimeout(() =&gt; { // simulating some various async stuff\n      fs.open(&#39;non-existent file&#39;, &#39;r&#39;, (er, fd) =&gt; {\n        if (er) throw er;\n        // proceed...\n      });\n    }, 100);\n  });\n});\n</code></pre>\n<p>In this example, the <code>d.on(&#39;error&#39;)</code> handler will be triggered, rather\nthan crashing the program.</p>\n"
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: Domain",
          "type": "class",
          "name": "Domain",
          "desc": "<p>The <code>Domain</code> class encapsulates the functionality of routing errors and\nuncaught exceptions to the active <code>Domain</code> object.</p>\n<p><code>Domain</code> is a child class of <a href=\"events.html\"><code>EventEmitter</code></a>. To handle the errors that it\ncatches, listen to its <code>&#39;error&#39;</code> event.</p>\n",
          "properties": [
            {
              "textRaw": "`members` {Array} ",
              "type": "Array",
              "name": "members",
              "desc": "<p>An array of timers and event emitters that have been explicitly added\nto the domain.</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "domain.add(emitter)",
              "type": "method",
              "name": "add",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`emitter` {EventEmitter|Timer} emitter or timer to be added to the domain ",
                      "name": "emitter",
                      "type": "EventEmitter|Timer",
                      "desc": "emitter or timer to be added to the domain"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "emitter"
                    }
                  ]
                }
              ],
              "desc": "<p>Explicitly adds an emitter to the domain. If any event handlers called by\nthe emitter throw an error, or if the emitter emits an <code>&#39;error&#39;</code> event, it\nwill be routed to the domain&#39;s <code>&#39;error&#39;</code> event, just like with implicit\nbinding.</p>\n<p>This also works with timers that are returned from <a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a> and\n<a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a>. If their callback function throws, it will be caught by\nthe domain <code>&#39;error&#39;</code> handler.</p>\n<p>If the Timer or <code>EventEmitter</code> was already bound to a domain, it is removed\nfrom that one, and bound to this one instead.</p>\n"
            },
            {
              "textRaw": "domain.bind(callback)",
              "type": "method",
              "name": "bind",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Function} The bound function ",
                    "name": "return",
                    "type": "Function",
                    "desc": "The bound function"
                  },
                  "params": [
                    {
                      "textRaw": "`callback` {Function} The callback function ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "The callback function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>The returned function will be a wrapper around the supplied callback\nfunction. When the returned function is called, any errors that are\nthrown will be routed to the domain&#39;s <code>&#39;error&#39;</code> event.</p>\n<h4>Example</h4>\n<pre><code class=\"lang-js\">const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &#39;utf8&#39;, d.bind((er, data) =&gt; {\n    // if this throws, it will also be passed to the domain\n    return cb(er, data ? JSON.parse(data) : null);\n  }));\n}\n\nd.on(&#39;error&#39;, (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n</code></pre>\n"
            },
            {
              "textRaw": "domain.enter()",
              "type": "method",
              "name": "enter",
              "desc": "<p>The <code>enter()</code> method is plumbing used by the <code>run()</code>, <code>bind()</code>, and\n<code>intercept()</code> methods to set the active domain. It sets <code>domain.active</code> and\n<code>process.domain</code> to the domain, and implicitly pushes the domain onto the domain\nstack managed by the domain module (see <a href=\"#domain_domain_exit\"><code>domain.exit()</code></a> for details on the\ndomain stack). The call to <code>enter()</code> delimits the beginning of a chain of\nasynchronous calls and I/O operations bound to a domain.</p>\n<p>Calling <code>enter()</code> changes only the active domain, and does not alter the domain\nitself. <code>enter()</code> and <code>exit()</code> can be called an arbitrary number of times on a\nsingle domain.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "domain.exit()",
              "type": "method",
              "name": "exit",
              "desc": "<p>The <code>exit()</code> method exits the current domain, popping it off the domain stack.\nAny time execution is going to switch to the context of a different chain of\nasynchronous calls, it&#39;s important to ensure that the current domain is exited.\nThe call to <code>exit()</code> delimits either the end of or an interruption to the chain\nof asynchronous calls and I/O operations bound to a domain.</p>\n<p>If there are multiple, nested domains bound to the current execution context,\n<code>exit()</code> will exit any domains nested within this domain.</p>\n<p>Calling <code>exit()</code> changes only the active domain, and does not alter the domain\nitself. <code>enter()</code> and <code>exit()</code> can be called an arbitrary number of times on a\nsingle domain.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "domain.intercept(callback)",
              "type": "method",
              "name": "intercept",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Function} The intercepted function ",
                    "name": "return",
                    "type": "Function",
                    "desc": "The intercepted function"
                  },
                  "params": [
                    {
                      "textRaw": "`callback` {Function} The callback function ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "The callback function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>This method is almost identical to <a href=\"#domain_domain_bind_callback\"><code>domain.bind(callback)</code></a>. However, in\naddition to catching thrown errors, it will also intercept <a href=\"errors.html#errors_class_error\"><code>Error</code></a>\nobjects sent as the first argument to the function.</p>\n<p>In this way, the common <code>if (err) return callback(err);</code> pattern can be replaced\nwith a single error handler in a single place.</p>\n<h4>Example</h4>\n<pre><code class=\"lang-js\">const d = domain.create();\n\nfunction readSomeFile(filename, cb) {\n  fs.readFile(filename, &#39;utf8&#39;, d.intercept((data) =&gt; {\n    // note, the first argument is never passed to the\n    // callback since it is assumed to be the &#39;Error&#39; argument\n    // and thus intercepted by the domain.\n\n    // if this throws, it will also be passed to the domain\n    // so the error-handling logic can be moved to the &#39;error&#39;\n    // event on the domain instead of being repeated throughout\n    // the program.\n    return cb(null, JSON.parse(data));\n  }));\n}\n\nd.on(&#39;error&#39;, (er) =&gt; {\n  // an error occurred somewhere.\n  // if we throw it now, it will crash the program\n  // with the normal line number and stack message.\n});\n</code></pre>\n"
            },
            {
              "textRaw": "domain.remove(emitter)",
              "type": "method",
              "name": "remove",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`emitter` {EventEmitter|Timer} emitter or timer to be removed from the domain ",
                      "name": "emitter",
                      "type": "EventEmitter|Timer",
                      "desc": "emitter or timer to be removed from the domain"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "emitter"
                    }
                  ]
                }
              ],
              "desc": "<p>The opposite of <a href=\"#domain_domain_add_emitter\"><code>domain.add(emitter)</code></a>. Removes domain handling from the\nspecified emitter.</p>\n"
            },
            {
              "textRaw": "domain.run(fn[, ...args])",
              "type": "method",
              "name": "run",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`fn` {Function} ",
                      "name": "fn",
                      "type": "Function"
                    },
                    {
                      "textRaw": "`...args` {any} ",
                      "name": "...args",
                      "type": "any",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "fn"
                    },
                    {
                      "name": "...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Run the supplied function in the context of the domain, implicitly\nbinding all event emitters, timers, and lowlevel requests that are\ncreated in that context. Optionally, arguments can be passed to\nthe function.</p>\n<p>This is the most basic way to use a domain.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const domain = require(&#39;domain&#39;);\nconst fs = require(&#39;fs&#39;);\nconst d = domain.create();\nd.on(&#39;error&#39;, (er) =&gt; {\n  console.error(&#39;Caught error!&#39;, er);\n});\nd.run(() =&gt; {\n  process.nextTick(() =&gt; {\n    setTimeout(() =&gt; { // simulating some various async stuff\n      fs.open(&#39;non-existent file&#39;, &#39;r&#39;, (er, fd) =&gt; {\n        if (er) throw er;\n        // proceed...\n      });\n    }, 100);\n  });\n});\n</code></pre>\n<p>In this example, the <code>d.on(&#39;error&#39;)</code> handler will be triggered, rather\nthan crashing the program.</p>\n"
            }
          ]
        }
      ],
      "modules": [
        {
          "textRaw": "Domains and Promises",
          "name": "domains_and_promises",
          "desc": "<p>As of Node.js 8.0.0, the handlers of Promises are run inside the domain in\nwhich the call to <code>.then()</code> or <code>.catch()</code> itself was made:</p>\n<pre><code class=\"lang-js\">const d1 = domain.create();\nconst d2 = domain.create();\n\nlet p;\nd1.run(() =&gt; {\n  p = Promise.resolve(42);\n});\n\nd2.run(() =&gt; {\n  p.then((v) =&gt; {\n    // running in d2\n  });\n});\n</code></pre>\n<p>A callback may be bound to a specific domain using <a href=\"#domain_domain_bind_callback\"><code>domain.bind(callback)</code></a>:</p>\n<pre><code class=\"lang-js\">const d1 = domain.create();\nconst d2 = domain.create();\n\nlet p;\nd1.run(() =&gt; {\n  p = Promise.resolve(42);\n});\n\nd2.run(() =&gt; {\n  p.then(p.domain.bind((v) =&gt; {\n    // running in d1\n  }));\n});\n</code></pre>\n<p>Note that domains will not interfere with the error handling mechanisms for\nPromises, i.e. no <code>&#39;error&#39;</code> event will be emitted for unhandled <code>Promise</code>\nrejections.</p>\n<!-- [end-include:domain.md] -->\n<!-- [start-include:esm.md] -->\n",
          "type": "module",
          "displayName": "Domains and Promises"
        }
      ],
      "type": "module",
      "displayName": "Domain"
    },
    {
      "textRaw": "Events",
      "name": "Events",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "type": "module",
      "desc": "<p>Much of the Node.js core API is built around an idiomatic asynchronous\nevent-driven architecture in which certain kinds of objects (called &quot;emitters&quot;)\nemit named events that cause <code>Function</code> objects (&quot;listeners&quot;) to be called.</p>\n<p>For instance: a <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a> object emits an event each time a peer\nconnects to it; a <a href=\"fs.html#fs_class_fs_readstream\"><code>fs.ReadStream</code></a> emits an event when the file is opened;\na <a href=\"stream.html#stream_stream\">stream</a> emits an event whenever data is available to be read.</p>\n<p>All objects that emit events are instances of the <code>EventEmitter</code> class. These\nobjects expose an <code>eventEmitter.on()</code> function that allows one or more\nfunctions to be attached to named events emitted by the object. Typically,\nevent names are camel-cased strings but any valid JavaScript property key\ncan be used.</p>\n<p>When the <code>EventEmitter</code> object emits an event, all of the functions attached\nto that specific event are called <em>synchronously</em>. Any values returned by the\ncalled listeners are <em>ignored</em> and will be discarded.</p>\n<p>The following example shows a simple <code>EventEmitter</code> instance with a single\nlistener. The <code>eventEmitter.on()</code> method is used to register listeners, while\nthe <code>eventEmitter.emit()</code> method is used to trigger the event.</p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\n\nclass MyEmitter extends EventEmitter {}\n\nconst myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, () =&gt; {\n  console.log(&#39;an event occurred!&#39;);\n});\nmyEmitter.emit(&#39;event&#39;);\n</code></pre>\n",
      "modules": [
        {
          "textRaw": "Passing arguments and `this` to listeners",
          "name": "passing_arguments_and_`this`_to_listeners",
          "desc": "<p>The <code>eventEmitter.emit()</code> method allows an arbitrary set of arguments to be\npassed to the listener functions. It is important to keep in mind that when\nan ordinary listener function is called, the standard <code>this</code> keyword\nis intentionally set to reference the <code>EventEmitter</code> instance to which the\nlistener is attached.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, function(a, b) {\n  console.log(a, b, this, this === myEmitter);\n  // Prints:\n  //   a b MyEmitter {\n  //     domain: null,\n  //     _events: { event: [Function] },\n  //     _eventsCount: 1,\n  //     _maxListeners: undefined } true\n});\nmyEmitter.emit(&#39;event&#39;, &#39;a&#39;, &#39;b&#39;);\n</code></pre>\n<p>It is possible to use ES6 Arrow Functions as listeners, however, when doing so,\nthe <code>this</code> keyword will no longer reference the <code>EventEmitter</code> instance:</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, (a, b) =&gt; {\n  console.log(a, b, this);\n  // Prints: a b {}\n});\nmyEmitter.emit(&#39;event&#39;, &#39;a&#39;, &#39;b&#39;);\n</code></pre>\n",
          "type": "module",
          "displayName": "Passing arguments and `this` to listeners"
        },
        {
          "textRaw": "Asynchronous vs. Synchronous",
          "name": "asynchronous_vs._synchronous",
          "desc": "<p>The <code>EventEmitter</code> calls all listeners synchronously in the order in which\nthey were registered. This is important to ensure the proper sequencing of\nevents and to avoid race conditions or logic errors. When appropriate,\nlistener functions can switch to an asynchronous mode of operation using\nthe <code>setImmediate()</code> or <code>process.nextTick()</code> methods:</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, (a, b) =&gt; {\n  setImmediate(() =&gt; {\n    console.log(&#39;this happens asynchronously&#39;);\n  });\n});\nmyEmitter.emit(&#39;event&#39;, &#39;a&#39;, &#39;b&#39;);\n</code></pre>\n",
          "type": "module",
          "displayName": "Asynchronous vs. Synchronous"
        },
        {
          "textRaw": "Handling events only once",
          "name": "handling_events_only_once",
          "desc": "<p>When a listener is registered using the <code>eventEmitter.on()</code> method, that\nlistener will be invoked <em>every time</em> the named event is emitted.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nlet m = 0;\nmyEmitter.on(&#39;event&#39;, () =&gt; {\n  console.log(++m);\n});\nmyEmitter.emit(&#39;event&#39;);\n// Prints: 1\nmyEmitter.emit(&#39;event&#39;);\n// Prints: 2\n</code></pre>\n<p>Using the <code>eventEmitter.once()</code> method, it is possible to register a listener\nthat is called at most once for a particular event. Once the event is emitted,\nthe listener is unregistered and <em>then</em> called.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nlet m = 0;\nmyEmitter.once(&#39;event&#39;, () =&gt; {\n  console.log(++m);\n});\nmyEmitter.emit(&#39;event&#39;);\n// Prints: 1\nmyEmitter.emit(&#39;event&#39;);\n// Ignored\n</code></pre>\n",
          "type": "module",
          "displayName": "Handling events only once"
        },
        {
          "textRaw": "Error events",
          "name": "error_events",
          "desc": "<p>When an error occurs within an <code>EventEmitter</code> instance, the typical action is\nfor an <code>&#39;error&#39;</code> event to be emitted. These are treated as special cases\nwithin Node.js.</p>\n<p>If an <code>EventEmitter</code> does <em>not</em> have at least one listener registered for the\n<code>&#39;error&#39;</code> event, and an <code>&#39;error&#39;</code> event is emitted, the error is thrown, a\nstack trace is printed, and the Node.js process exits.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nmyEmitter.emit(&#39;error&#39;, new Error(&#39;whoops!&#39;));\n// Throws and crashes Node.js\n</code></pre>\n<p>To guard against crashing the Node.js process the <a href=\"domain.html\"><code>domain</code></a> module can be\nused. (Note, however, that the <code>domain</code> module has been deprecated.)</p>\n<p>As a best practice, listeners should always be added for the <code>&#39;error&#39;</code> events.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nmyEmitter.on(&#39;error&#39;, (err) =&gt; {\n  console.error(&#39;whoops! there was an error&#39;);\n});\nmyEmitter.emit(&#39;error&#39;, new Error(&#39;whoops!&#39;));\n// Prints: whoops! there was an error\n</code></pre>\n",
          "type": "module",
          "displayName": "Error events"
        }
      ],
      "classes": [
        {
          "textRaw": "Class: EventEmitter",
          "type": "class",
          "name": "EventEmitter",
          "meta": {
            "added": [
              "v0.1.26"
            ],
            "changes": []
          },
          "desc": "<p>The <code>EventEmitter</code> class is defined and exposed by the <code>events</code> module:</p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\n</code></pre>\n<p>All <code>EventEmitter</code>s emit the event <code>&#39;newListener&#39;</code> when new listeners are\nadded and <code>&#39;removeListener&#39;</code> when existing listeners are removed.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'newListener'",
              "type": "event",
              "name": "newListener",
              "meta": {
                "added": [
                  "v0.1.26"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>The <code>EventEmitter</code> instance will emit its own <code>&#39;newListener&#39;</code> event <em>before</em>\na listener is added to its internal array of listeners.</p>\n<p>Listeners registered for the <code>&#39;newListener&#39;</code> event will be passed the event\nname and a reference to the listener being added.</p>\n<p>The fact that the event is triggered before adding the listener has a subtle\nbut important side effect: any <em>additional</em> listeners registered to the same\n<code>name</code> <em>within</em> the <code>&#39;newListener&#39;</code> callback will be inserted <em>before</em> the\nlistener that is in the process of being added.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\n// Only do this once so we don&#39;t loop forever\nmyEmitter.once(&#39;newListener&#39;, (event, listener) =&gt; {\n  if (event === &#39;event&#39;) {\n    // Insert a new listener in front\n    myEmitter.on(&#39;event&#39;, () =&gt; {\n      console.log(&#39;B&#39;);\n    });\n  }\n});\nmyEmitter.on(&#39;event&#39;, () =&gt; {\n  console.log(&#39;A&#39;);\n});\nmyEmitter.emit(&#39;event&#39;);\n// Prints:\n//   B\n//   A\n</code></pre>\n"
            },
            {
              "textRaw": "Event: 'removeListener'",
              "type": "event",
              "name": "removeListener",
              "meta": {
                "added": [
                  "v0.9.3"
                ],
                "changes": [
                  {
                    "version": "v6.1.0, v4.7.0",
                    "pr-url": "https://github.com/nodejs/node/pull/6394",
                    "description": "For listeners attached using `.once()`, the `listener` argument now yields the original listener function."
                  }
                ]
              },
              "params": [],
              "desc": "<p>The <code>&#39;removeListener&#39;</code> event is emitted <em>after</em> the <code>listener</code> is removed.</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "EventEmitter.listenerCount(emitter, eventName)",
              "type": "method",
              "name": "listenerCount",
              "meta": {
                "added": [
                  "v0.9.12"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`emitter.listenerCount()`][] instead.",
              "desc": "<p>A class method that returns the number of listeners for the given <code>eventName</code>\nregistered on the given <code>emitter</code>.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\nmyEmitter.on(&#39;event&#39;, () =&gt; {});\nmyEmitter.on(&#39;event&#39;, () =&gt; {});\nconsole.log(EventEmitter.listenerCount(myEmitter, &#39;event&#39;));\n// Prints: 2\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "emitter"
                    },
                    {
                      "name": "eventName"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "emitter.addListener(eventName, listener)",
              "type": "method",
              "name": "addListener",
              "meta": {
                "added": [
                  "v0.1.26"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`eventName` {string|symbol} ",
                      "name": "eventName",
                      "type": "string|symbol"
                    },
                    {
                      "textRaw": "`listener` {Function} ",
                      "name": "listener",
                      "type": "Function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "eventName"
                    },
                    {
                      "name": "listener"
                    }
                  ]
                }
              ],
              "desc": "<p>Alias for <code>emitter.on(eventName, listener)</code>.</p>\n"
            },
            {
              "textRaw": "emitter.emit(eventName[, ...args])",
              "type": "method",
              "name": "emit",
              "meta": {
                "added": [
                  "v0.1.26"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`eventName` {string|symbol} ",
                      "name": "eventName",
                      "type": "string|symbol"
                    },
                    {
                      "textRaw": "`...args` {any} ",
                      "name": "...args",
                      "type": "any",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "eventName"
                    },
                    {
                      "name": "...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Synchronously calls each of the listeners registered for the event named\n<code>eventName</code>, in the order they were registered, passing the supplied arguments\nto each.</p>\n<p>Returns <code>true</code> if the event had listeners, <code>false</code> otherwise.</p>\n"
            },
            {
              "textRaw": "emitter.eventNames()",
              "type": "method",
              "name": "eventNames",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Array} ",
                    "name": "return",
                    "type": "Array"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array will be strings or <code>Symbol</code>s.</p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\nconst myEE = new EventEmitter();\nmyEE.on(&#39;foo&#39;, () =&gt; {});\nmyEE.on(&#39;bar&#39;, () =&gt; {});\n\nconst sym = Symbol(&#39;symbol&#39;);\nmyEE.on(sym, () =&gt; {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ &#39;foo&#39;, &#39;bar&#39;, Symbol(symbol) ]\n</code></pre>\n"
            },
            {
              "textRaw": "emitter.getMaxListeners()",
              "type": "method",
              "name": "getMaxListeners",
              "meta": {
                "added": [
                  "v1.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns the current max listener value for the <code>EventEmitter</code> which is either\nset by <a href=\"#events_emitter_setmaxlisteners_n\"><code>emitter.setMaxListeners(n)</code></a> or defaults to\n<a href=\"#events_eventemitter_defaultmaxlisteners\"><code>EventEmitter.defaultMaxListeners</code></a>.</p>\n"
            },
            {
              "textRaw": "emitter.listenerCount(eventName)",
              "type": "method",
              "name": "listenerCount",
              "meta": {
                "added": [
                  "v3.2.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {integer} ",
                    "name": "return",
                    "type": "integer"
                  },
                  "params": [
                    {
                      "textRaw": "`eventName` {string|symbol} The name of the event being listened for ",
                      "name": "eventName",
                      "type": "string|symbol",
                      "desc": "The name of the event being listened for"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "eventName"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns the number of listeners listening to the event named <code>eventName</code>.</p>\n"
            },
            {
              "textRaw": "emitter.listeners(eventName)",
              "type": "method",
              "name": "listeners",
              "meta": {
                "added": [
                  "v0.1.26"
                ],
                "changes": [
                  {
                    "version": "v7.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/6881",
                    "description": "For listeners attached using `.once()` this returns the original listeners instead of wrapper functions now."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Function[]} ",
                    "name": "return",
                    "type": "Function[]"
                  },
                  "params": [
                    {
                      "textRaw": "`eventName` {string|symbol} ",
                      "name": "eventName",
                      "type": "string|symbol"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "eventName"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p>\n<pre><code class=\"lang-js\">server.on(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n});\nconsole.log(util.inspect(server.listeners(&#39;connection&#39;)));\n// Prints: [ [Function] ]\n</code></pre>\n"
            },
            {
              "textRaw": "emitter.off(eventName, listener)",
              "type": "method",
              "name": "off",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {EventEmitter} ",
                    "name": "return",
                    "type": "EventEmitter"
                  },
                  "params": [
                    {
                      "textRaw": "`eventName` {string|symbol} ",
                      "name": "eventName",
                      "type": "string|symbol"
                    },
                    {
                      "textRaw": "`listener` {Function} ",
                      "name": "listener",
                      "type": "Function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "eventName"
                    },
                    {
                      "name": "listener"
                    }
                  ]
                }
              ],
              "desc": "<p>Alias for <a href=\"#events_emitter_removelistener_eventname_listener\"><code>emitter.removeListener()</code></a>.</p>\n"
            },
            {
              "textRaw": "emitter.on(eventName, listener)",
              "type": "method",
              "name": "on",
              "meta": {
                "added": [
                  "v0.1.101"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {EventEmitter} ",
                    "name": "return",
                    "type": "EventEmitter"
                  },
                  "params": [
                    {
                      "textRaw": "`eventName` {string|symbol} The name of the event. ",
                      "name": "eventName",
                      "type": "string|symbol",
                      "desc": "The name of the event."
                    },
                    {
                      "textRaw": "`listener` {Function} The callback function ",
                      "name": "listener",
                      "type": "Function",
                      "desc": "The callback function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "eventName"
                    },
                    {
                      "name": "listener"
                    }
                  ]
                }
              ],
              "desc": "<p>Adds the <code>listener</code> function to the end of the listeners array for the\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\nalready been added. Multiple calls passing the same combination of <code>eventName</code>\nand <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\ntimes.</p>\n<pre><code class=\"lang-js\">server.on(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n});\n</code></pre>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n<p>By default, event listeners are invoked in the order they are added. The\n<code>emitter.prependListener()</code> method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.</p>\n<pre><code class=\"lang-js\">const myEE = new EventEmitter();\nmyEE.on(&#39;foo&#39;, () =&gt; console.log(&#39;a&#39;));\nmyEE.prependListener(&#39;foo&#39;, () =&gt; console.log(&#39;b&#39;));\nmyEE.emit(&#39;foo&#39;);\n// Prints:\n//   b\n//   a\n</code></pre>\n"
            },
            {
              "textRaw": "emitter.once(eventName, listener)",
              "type": "method",
              "name": "once",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {EventEmitter} ",
                    "name": "return",
                    "type": "EventEmitter"
                  },
                  "params": [
                    {
                      "textRaw": "`eventName` {string|symbol} The name of the event. ",
                      "name": "eventName",
                      "type": "string|symbol",
                      "desc": "The name of the event."
                    },
                    {
                      "textRaw": "`listener` {Function} The callback function ",
                      "name": "listener",
                      "type": "Function",
                      "desc": "The callback function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "eventName"
                    },
                    {
                      "name": "listener"
                    }
                  ]
                }
              ],
              "desc": "<p>Adds a <strong>one-time</strong> <code>listener</code> function for the event named <code>eventName</code>. The\nnext time <code>eventName</code> is triggered, this listener is removed and then invoked.</p>\n<pre><code class=\"lang-js\">server.once(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;Ah, we have our first user!&#39;);\n});\n</code></pre>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n<p>By default, event listeners are invoked in the order they are added. The\n<code>emitter.prependOnceListener()</code> method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.</p>\n<pre><code class=\"lang-js\">const myEE = new EventEmitter();\nmyEE.once(&#39;foo&#39;, () =&gt; console.log(&#39;a&#39;));\nmyEE.prependOnceListener(&#39;foo&#39;, () =&gt; console.log(&#39;b&#39;));\nmyEE.emit(&#39;foo&#39;);\n// Prints:\n//   b\n//   a\n</code></pre>\n"
            },
            {
              "textRaw": "emitter.prependListener(eventName, listener)",
              "type": "method",
              "name": "prependListener",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {EventEmitter} ",
                    "name": "return",
                    "type": "EventEmitter"
                  },
                  "params": [
                    {
                      "textRaw": "`eventName` {string|symbol} The name of the event. ",
                      "name": "eventName",
                      "type": "string|symbol",
                      "desc": "The name of the event."
                    },
                    {
                      "textRaw": "`listener` {Function} The callback function ",
                      "name": "listener",
                      "type": "Function",
                      "desc": "The callback function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "eventName"
                    },
                    {
                      "name": "listener"
                    }
                  ]
                }
              ],
              "desc": "<p>Adds the <code>listener</code> function to the <em>beginning</em> of the listeners array for the\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\nalready been added. Multiple calls passing the same combination of <code>eventName</code>\nand <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\ntimes.</p>\n<pre><code class=\"lang-js\">server.prependListener(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n});\n</code></pre>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n"
            },
            {
              "textRaw": "emitter.prependOnceListener(eventName, listener)",
              "type": "method",
              "name": "prependOnceListener",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {EventEmitter} ",
                    "name": "return",
                    "type": "EventEmitter"
                  },
                  "params": [
                    {
                      "textRaw": "`eventName` {string|symbol} The name of the event. ",
                      "name": "eventName",
                      "type": "string|symbol",
                      "desc": "The name of the event."
                    },
                    {
                      "textRaw": "`listener` {Function} The callback function ",
                      "name": "listener",
                      "type": "Function",
                      "desc": "The callback function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "eventName"
                    },
                    {
                      "name": "listener"
                    }
                  ]
                }
              ],
              "desc": "<p>Adds a <strong>one-time</strong> <code>listener</code> function for the event named <code>eventName</code> to the\n<em>beginning</em> of the listeners array. The next time <code>eventName</code> is triggered, this\nlistener is removed, and then invoked.</p>\n<pre><code class=\"lang-js\">server.prependOnceListener(&#39;connection&#39;, (stream) =&gt; {\n  console.log(&#39;Ah, we have our first user!&#39;);\n});\n</code></pre>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n"
            },
            {
              "textRaw": "emitter.removeAllListeners([eventName])",
              "type": "method",
              "name": "removeAllListeners",
              "meta": {
                "added": [
                  "v0.1.26"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {EventEmitter} ",
                    "name": "return",
                    "type": "EventEmitter"
                  },
                  "params": [
                    {
                      "textRaw": "`eventName` {string|symbol} ",
                      "name": "eventName",
                      "type": "string|symbol",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "eventName",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Removes all listeners, or those of the specified <code>eventName</code>.</p>\n<p>Note that it is bad practice to remove listeners added elsewhere in the code,\nparticularly when the <code>EventEmitter</code> instance was created by some other\ncomponent or module (e.g. sockets or file streams).</p>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n"
            },
            {
              "textRaw": "emitter.removeListener(eventName, listener)",
              "type": "method",
              "name": "removeListener",
              "meta": {
                "added": [
                  "v0.1.26"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {EventEmitter} ",
                    "name": "return",
                    "type": "EventEmitter"
                  },
                  "params": [
                    {
                      "textRaw": "`eventName` {string|symbol} ",
                      "name": "eventName",
                      "type": "string|symbol"
                    },
                    {
                      "textRaw": "`listener` {Function} ",
                      "name": "listener",
                      "type": "Function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "eventName"
                    },
                    {
                      "name": "listener"
                    }
                  ]
                }
              ],
              "desc": "<p>Removes the specified <code>listener</code> from the listener array for the event named\n<code>eventName</code>.</p>\n<pre><code class=\"lang-js\">const callback = (stream) =&gt; {\n  console.log(&#39;someone connected!&#39;);\n};\nserver.on(&#39;connection&#39;, callback);\n// ...\nserver.removeListener(&#39;connection&#39;, callback);\n</code></pre>\n<p><code>removeListener()</code> will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified <code>eventName</code>, then <code>removeListener()</code> must be\ncalled multiple times to remove each instance.</p>\n<p>Note that once an event has been emitted, all listeners attached to it at the\ntime of emitting will be called in order. This implies that any\n<code>removeListener()</code> or <code>removeAllListeners()</code> calls <em>after</em> emitting and\n<em>before</em> the last listener finishes execution will not remove them from\n<code>emit()</code> in progress. Subsequent events will behave as expected.</p>\n<pre><code class=\"lang-js\">const myEmitter = new MyEmitter();\n\nconst callbackA = () =&gt; {\n  console.log(&#39;A&#39;);\n  myEmitter.removeListener(&#39;event&#39;, callbackB);\n};\n\nconst callbackB = () =&gt; {\n  console.log(&#39;B&#39;);\n};\n\nmyEmitter.on(&#39;event&#39;, callbackA);\n\nmyEmitter.on(&#39;event&#39;, callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit(&#39;event&#39;);\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit(&#39;event&#39;);\n// Prints:\n//   A\n</code></pre>\n<p>Because listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered <em>after</em> the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe <code>emitter.listeners()</code> method will need to be recreated.</p>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n"
            },
            {
              "textRaw": "emitter.setMaxListeners(n)",
              "type": "method",
              "name": "setMaxListeners",
              "meta": {
                "added": [
                  "v0.3.5"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {EventEmitter} ",
                    "name": "return",
                    "type": "EventEmitter"
                  },
                  "params": [
                    {
                      "textRaw": "`n` {integer} ",
                      "name": "n",
                      "type": "integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "n"
                    }
                  ]
                }
              ],
              "desc": "<p>By default <code>EventEmitter</code>s will print a warning if more than <code>10</code> listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. Obviously, not all events should be limited to just 10 listeners.\nThe <code>emitter.setMaxListeners()</code> method allows the limit to be modified for this\nspecific <code>EventEmitter</code> instance. The value can be set to <code>Infinity</code> (or <code>0</code>)\nto indicate an unlimited number of listeners.</p>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n"
            },
            {
              "textRaw": "emitter.rawListeners(eventName)",
              "type": "method",
              "name": "rawListeners",
              "meta": {
                "added": [
                  "v9.4.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Function[]} ",
                    "name": "return",
                    "type": "Function[]"
                  },
                  "params": [
                    {
                      "textRaw": "`eventName` {string|symbol} ",
                      "name": "eventName",
                      "type": "string|symbol"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "eventName"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns a copy of the array of listeners for the event named <code>eventName</code>,\nincluding any wrappers (such as those created by <code>.once()</code>).</p>\n<pre><code class=\"lang-js\">const emitter = new EventEmitter();\nemitter.once(&#39;log&#39;, () =&gt; console.log(&#39;log once&#39;));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners(&#39;log&#39;);\nconst logFnWrapper = listeners[0];\n\n// logs &quot;log once&quot; to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// logs &quot;log once&quot; to the console and removes the listener\nlogFnWrapper();\n\nemitter.on(&#39;log&#39;, () =&gt; console.log(&#39;log persistently&#39;));\n// will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners(&#39;log&#39;);\n\n// logs &quot;log persistently&quot; twice\nnewListeners[0]();\nemitter.emit(&#39;log&#39;);\n</code></pre>\n<!-- [end-include:events.md] -->\n<!-- [start-include:fs.md] -->\n"
            }
          ],
          "properties": [
            {
              "textRaw": "EventEmitter.defaultMaxListeners",
              "name": "defaultMaxListeners",
              "meta": {
                "added": [
                  "v0.11.2"
                ],
                "changes": []
              },
              "desc": "<p>By default, a maximum of <code>10</code> listeners can be registered for any single\nevent. This limit can be changed for individual <code>EventEmitter</code> instances\nusing the <a href=\"#events_emitter_setmaxlisteners_n\"><code>emitter.setMaxListeners(n)</code></a> method. To change the default\nfor <em>all</em> <code>EventEmitter</code> instances, the <code>EventEmitter.defaultMaxListeners</code>\nproperty can be used. If this value is not a positive number, a <code>TypeError</code>\nwill be thrown.</p>\n<p>Take caution when setting the <code>EventEmitter.defaultMaxListeners</code> because the\nchange affects <em>all</em> <code>EventEmitter</code> instances, including those created before\nthe change is made. However, calling <a href=\"#events_emitter_setmaxlisteners_n\"><code>emitter.setMaxListeners(n)</code></a> still has\nprecedence over <code>EventEmitter.defaultMaxListeners</code>.</p>\n<p>Note that this is not a hard limit. The <code>EventEmitter</code> instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a &quot;possible EventEmitter memory leak&quot; has been detected. For any single\n<code>EventEmitter</code>, the <code>emitter.getMaxListeners()</code> and <code>emitter.setMaxListeners()</code>\nmethods can be used to temporarily avoid this warning:</p>\n<pre><code class=\"lang-js\">emitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once(&#39;event&#39;, () =&gt; {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n</code></pre>\n<p>The <a href=\"cli.html#cli_trace_warnings\"><code>--trace-warnings</code></a> command line flag can be used to display the\nstack trace for such warnings.</p>\n<p>The emitted warning can be inspected with <a href=\"process.html#process_event_warning\"><code>process.on(&#39;warning&#39;)</code></a> and will\nhave the additional <code>emitter</code>, <code>type</code> and <code>count</code> properties, referring to\nthe event emitter instance, the event’s name and the number of attached\nlisteners, respectively.\nIts <code>name</code> property is set to <code>&#39;MaxListenersExceededWarning&#39;</code>.</p>\n"
            }
          ]
        }
      ]
    },
    {
      "textRaw": "File System",
      "name": "fs",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>fs</code> module provides an API for interacting with the file system in a\nmanner closely modeled around standard POSIX functions.</p>\n<p>To use this module:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n</code></pre>\n<p>All file system operations have synchronous and asynchronous forms.</p>\n<p>The asynchronous form always takes a completion callback as its last argument.\nThe arguments passed to the completion callback depend on the method, but the\nfirst argument is always reserved for an exception. If the operation was\ncompleted successfully, then the first argument will be <code>null</code> or <code>undefined</code>.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\nfs.unlink(&#39;/tmp/hello&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;successfully deleted /tmp/hello&#39;);\n});\n</code></pre>\n<p>Exceptions that occur using synchronous operations are thrown immediately and\nmay be handled using <code>try</code>/<code>catch</code>, or may be allowed to bubble up.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\ntry {\n  fs.unlinkSync(&#39;/tmp/hello&#39;);\n  console.log(&#39;successfully deleted /tmp/hello&#39;);\n} catch (err) {\n  // handle the error\n}\n</code></pre>\n<p>Note that there is no guaranteed ordering when using asynchronous methods.\nSo the following is prone to error because the <code>fs.stat()</code> operation may\ncomplete before the <code>fs.rename()</code> operation.</p>\n<pre><code class=\"lang-js\">fs.rename(&#39;/tmp/hello&#39;, &#39;/tmp/world&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;renamed complete&#39;);\n});\nfs.stat(&#39;/tmp/world&#39;, (err, stats) =&gt; {\n  if (err) throw err;\n  console.log(`stats: ${JSON.stringify(stats)}`);\n});\n</code></pre>\n<p>To correctly order the operations, move the <code>fs.stat()</code> call into the callback\nof the <code>fs.rename()</code> operation:</p>\n<pre><code class=\"lang-js\">fs.rename(&#39;/tmp/hello&#39;, &#39;/tmp/world&#39;, (err) =&gt; {\n  if (err) throw err;\n  fs.stat(&#39;/tmp/world&#39;, (err, stats) =&gt; {\n    if (err) throw err;\n    console.log(`stats: ${JSON.stringify(stats)}`);\n  });\n});\n</code></pre>\n<p>In busy processes, the programmer is <em>strongly encouraged</em> to use the\nasynchronous versions of these calls. The synchronous versions will block\nthe entire process until they complete — halting all connections.</p>\n<p>While it is not recommended, most fs functions allow the callback argument to\nbe omitted, in which case a default callback is used that rethrows errors. To\nget a trace to the original call site, set the <code>NODE_DEBUG</code> environment\nvariable:</p>\n<p>Omitting the callback function on asynchronous fs functions is deprecated and\nmay result in an error being thrown in the future.</p>\n<pre><code class=\"lang-txt\">$ cat script.js\nfunction bad() {\n  require(&#39;fs&#39;).readFile(&#39;/&#39;);\n}\nbad();\n\n$ env NODE_DEBUG=fs node script.js\nfs.js:88\n        throw backtrace;\n        ^\nError: EISDIR: illegal operation on a directory, read\n    &lt;stack trace.&gt;\n</code></pre>\n",
      "modules": [
        {
          "textRaw": "File paths",
          "name": "file_paths",
          "desc": "<p>Most <code>fs</code> operations accept filepaths that may be specified in the form of\na string, a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, or a <a href=\"url.html#url_class_url\"><code>URL</code></a> object using the <code>file:</code> protocol.</p>\n<p>String form paths are interpreted as UTF-8 character sequences identifying\nthe absolute or relative filename. Relative paths will be resolved relative\nto the current working directory as specified by <code>process.cwd()</code>.</p>\n<p>Example using an absolute path on POSIX:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\nfs.open(&#39;/open/some/file.txt&#39;, &#39;r&#39;, (err, fd) =&gt; {\n  if (err) throw err;\n  fs.close(fd, (err) =&gt; {\n    if (err) throw err;\n  });\n});\n</code></pre>\n<p>Example using a relative path on POSIX (relative to <code>process.cwd()</code>):</p>\n<pre><code class=\"lang-js\">fs.open(&#39;file.txt&#39;, &#39;r&#39;, (err, fd) =&gt; {\n  if (err) throw err;\n  fs.close(fd, (err) =&gt; {\n    if (err) throw err;\n  });\n});\n</code></pre>\n<p>Paths specified using a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a> are useful primarily on certain POSIX\noperating systems that treat file paths as opaque byte sequences. On such\nsystems, it is possible for a single file path to contain sub-sequences that\nuse multiple character encodings. As with string paths, <code>Buffer</code> paths may\nbe relative or absolute:</p>\n<p>Example using an absolute path on POSIX:</p>\n<pre><code class=\"lang-js\">fs.open(Buffer.from(&#39;/open/some/file.txt&#39;), &#39;r&#39;, (err, fd) =&gt; {\n  if (err) throw err;\n  fs.close(fd, (err) =&gt; {\n    if (err) throw err;\n  });\n});\n</code></pre>\n<p><em>Note:</em> On Windows Node.js follows the concept of per-drive working directory.\nThis behavior can be observed when using a drive path without a backslash. For\nexample <code>fs.readdirSync(&#39;c:\\\\&#39;)</code> can potentially return a different result than\n<code>fs.readdirSync(&#39;c:&#39;)</code>. For more information, see\n<a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247.aspx#fully_qualified_vs._relative_paths\">this MSDN page</a>.</p>\n",
          "modules": [
            {
              "textRaw": "URL object support",
              "name": "url_object_support",
              "meta": {
                "added": [
                  "v7.6.0"
                ],
                "changes": []
              },
              "desc": "<p>For most <code>fs</code> module functions, the <code>path</code> or <code>filename</code> argument may be passed\nas a WHATWG <a href=\"url.html#url_class_url\"><code>URL</code></a> object. Only <a href=\"url.html#url_class_url\"><code>URL</code></a> objects using the <code>file:</code> protocol\nare supported.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst fileUrl = new URL(&#39;file:///tmp/hello&#39;);\n\nfs.readFileSync(fileUrl);\n</code></pre>\n<p><code>file:</code> URLs are always absolute paths.</p>\n<p>Using WHATWG <a href=\"url.html#url_class_url\"><code>URL</code></a> objects might introduce platform-specific behaviors.</p>\n<p>On Windows, <code>file:</code> URLs with a hostname convert to UNC paths, while <code>file:</code>\nURLs with drive letters convert to local absolute paths. <code>file:</code> URLs without a\nhostname nor a drive letter will result in a throw:</p>\n<pre><code class=\"lang-js\">// On Windows :\n\n// - WHATWG file URLs with hostname convert to UNC path\n// file://hostname/p/a/t/h/file =&gt; \\\\hostname\\p\\a\\t\\h\\file\nfs.readFileSync(new URL(&#39;file://hostname/p/a/t/h/file&#39;));\n\n// - WHATWG file URLs with drive letters convert to absolute path\n// file:///C:/tmp/hello =&gt; C:\\tmp\\hello\nfs.readFileSync(new URL(&#39;file:///C:/tmp/hello&#39;));\n\n// - WHATWG file URLs without hostname must have a drive letters\nfs.readFileSync(new URL(&#39;file:///notdriveletter/p/a/t/h/file&#39;));\nfs.readFileSync(new URL(&#39;file:///c/p/a/t/h/file&#39;));\n// TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must be absolute\n</code></pre>\n<p><code>file:</code> URLs with drive letters must use <code>:</code> as a separator just after\nthe drive letter. Using another separator will result in a throw.</p>\n<p>On all other platforms, <code>file:</code> URLs with a hostname are unsupported and will\nresult in a throw:</p>\n<pre><code class=\"lang-js\">// On other platforms:\n\n// - WHATWG file URLs with hostname are unsupported\n// file://hostname/p/a/t/h/file =&gt; throw!\nfs.readFileSync(new URL(&#39;file://hostname/p/a/t/h/file&#39;));\n// TypeError [ERR_INVALID_FILE_URL_PATH]: must be absolute\n\n// - WHATWG file URLs convert to absolute path\n// file:///tmp/hello =&gt; /tmp/hello\nfs.readFileSync(new URL(&#39;file:///tmp/hello&#39;));\n</code></pre>\n<p>A <code>file:</code> URL having encoded slash characters will result in a throw on all\nplatforms:</p>\n<pre><code class=\"lang-js\">// On Windows\nfs.readFileSync(new URL(&#39;file:///C:/p/a/t/h/%2F&#39;));\nfs.readFileSync(new URL(&#39;file:///C:/p/a/t/h/%2f&#39;));\n/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded\n\\ or / characters */\n\n// On POSIX\nfs.readFileSync(new URL(&#39;file:///p/a/t/h/%2F&#39;));\nfs.readFileSync(new URL(&#39;file:///p/a/t/h/%2f&#39;));\n/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded\n/ characters */\n</code></pre>\n<p>On Windows, <code>file:</code> URLs having encoded backslash will result in a throw:</p>\n<pre><code class=\"lang-js\">// On Windows\nfs.readFileSync(new URL(&#39;file:///C:/path/%5C&#39;));\nfs.readFileSync(new URL(&#39;file:///C:/path/%5c&#39;));\n/* TypeError [ERR_INVALID_FILE_URL_PATH]: File URL path must not include encoded\n\\ or / characters */\n</code></pre>\n",
              "type": "module",
              "displayName": "URL object support"
            }
          ],
          "type": "module",
          "displayName": "File paths"
        },
        {
          "textRaw": "File Descriptors",
          "name": "file_descriptors",
          "desc": "<p>On POSIX systems, for every process, the kernel maintains a table of currently\nopen files and resources. Each open file is assigned a simple numeric\nidentifier called a <em>file descriptor</em>. At the system-level, all file system\noperations use these file descriptors to identify and track each specific\nfile. Windows systems use a different but conceptually similar mechanism for\ntracking resources. To simplify things for users, Node.js abstracts away the\nspecific differences between operating systems and assigns all open files a\nnumeric file descriptor.</p>\n<p>The <code>fs.open()</code> method is used to allocate a new file descriptor. Once\nallocated, the file descriptor may be used to read data from, write data to,\nor request information about the file.</p>\n<pre><code class=\"lang-js\">fs.open(&#39;/open/some/file.txt&#39;, &#39;r&#39;, (err, fd) =&gt; {\n  if (err) throw err;\n  fs.fstat(fd, (err, stat) =&gt; {\n    if (err) throw err;\n    // use stat\n\n    // always close the file descriptor!\n    fs.close(fd, (err) =&gt; {\n      if (err) throw err;\n    });\n  });\n});\n</code></pre>\n<p>Most operating systems limit the number of file descriptors that may be open\nat any given time so it is critical to close the descriptor when operations\nare completed. Failure to do so will result in a memory leak that will\neventually cause an application to crash.</p>\n",
          "type": "module",
          "displayName": "File Descriptors"
        },
        {
          "textRaw": "Threadpool Usage",
          "name": "threadpool_usage",
          "desc": "<p>Note that all file system APIs except <code>fs.FSWatcher()</code> and those that are\nexplicitly synchronous use libuv&#39;s threadpool, which can have surprising and\nnegative performance implications for some applications, see the\n<a href=\"cli.html#cli_uv_threadpool_size_size\"><code>UV_THREADPOOL_SIZE</code></a> documentation for more information.</p>\n",
          "type": "module",
          "displayName": "Threadpool Usage"
        },
        {
          "textRaw": "fs Promises API",
          "name": "fs_promises_api",
          "stability": 1,
          "stabilityText": "Experimental",
          "desc": "<p>The <code>fs.promises</code> API provides an alternative set of asynchronous file system\nmethods that return <code>Promise</code> objects rather than using callbacks. The\nAPI is accessible via <code>require(&#39;fs&#39;).promises</code>.</p>\n",
          "classes": [
            {
              "textRaw": "class: FileHandle",
              "type": "class",
              "name": "FileHandle",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>A <code>FileHandle</code> object is a wrapper for a numeric file descriptor.\nInstances of <code>FileHandle</code> are distinct from numeric file descriptors\nin that, if the <code>FileHandle</code> is not explicitly closed using the\n<code>filehandle.close()</code> method, they will automatically close the file descriptor\nand will emit a process warning, thereby helping to prevent memory leaks.</p>\n<p>Instances of the <code>FileHandle</code> object are created internally by the\n<code>fsPromises.open()</code> method.</p>\n<p>Unlike the callback-based API (<code>fs.fstat()</code>, <code>fs.fchown()</code>, <code>fs.fchmod()</code>, and\nso on), a numeric file descriptor is not used by the promise-based API. Instead,\nthe promise-based API uses the <code>FileHandle</code> class in order to help avoid\naccidental leaking of unclosed file descriptors after a <code>Promise</code> is resolved or\nrejected.</p>\n",
              "methods": [
                {
                  "textRaw": "filehandle.appendFile(data, options)",
                  "type": "method",
                  "name": "appendFile",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} ",
                        "name": "return",
                        "type": "Promise"
                      },
                      "params": [
                        {
                          "textRaw": "`data` {string|Buffer} ",
                          "name": "data",
                          "type": "string|Buffer"
                        },
                        {
                          "textRaw": "`options` {Object|string} ",
                          "options": [
                            {
                              "textRaw": "`encoding` {string|null} **Default:** `'utf8'` ",
                              "name": "encoding",
                              "type": "string|null",
                              "default": "`'utf8'`"
                            },
                            {
                              "textRaw": "`mode` {integer} **Default:** `0o666` ",
                              "name": "mode",
                              "type": "integer",
                              "default": "`0o666`"
                            },
                            {
                              "textRaw": "`flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. ",
                              "name": "flag",
                              "type": "string",
                              "default": "`'a'`",
                              "desc": "See [support of file system `flags`][]."
                            }
                          ],
                          "name": "options",
                          "type": "Object|string"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "data"
                        },
                        {
                          "name": "options"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Asynchronously append data to this file, creating the file if it does not yet\nexist. <code>data</code> can be a string or a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>. The <code>Promise</code> will be\nresolved with no arguments upon success.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>The <code>FileHandle</code> must have been opened for appending.</p>\n"
                },
                {
                  "textRaw": "filehandle.chmod(mode)",
                  "type": "method",
                  "name": "chmod",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} ",
                        "name": "return",
                        "type": "Promise"
                      },
                      "params": [
                        {
                          "textRaw": "`mode` {integer} ",
                          "name": "mode",
                          "type": "integer"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "mode"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Modifies the permissions on the file. The <code>Promise</code> is resolved with no\narguments upon success.</p>\n"
                },
                {
                  "textRaw": "filehandle.chown(uid, gid)",
                  "type": "method",
                  "name": "chown",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} ",
                        "name": "return",
                        "type": "Promise"
                      },
                      "params": [
                        {
                          "textRaw": "`uid` {integer} ",
                          "name": "uid",
                          "type": "integer"
                        },
                        {
                          "textRaw": "`gid` {integer} ",
                          "name": "gid",
                          "type": "integer"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "uid"
                        },
                        {
                          "name": "gid"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Changes the ownership of the file then resolves the <code>Promise</code> with no arguments\nupon success.</p>\n"
                },
                {
                  "textRaw": "filehandle.close()",
                  "type": "method",
                  "name": "close",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} A `Promise` that will be resolved once the underlying file descriptor is closed, or will be rejected if an error occurs while closing. ",
                        "name": "return",
                        "type": "Promise",
                        "desc": "A `Promise` that will be resolved once the underlying file descriptor is closed, or will be rejected if an error occurs while closing."
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Closes the file descriptor.</p>\n<pre><code class=\"lang-js\">async function openAndClose() {\n  let filehandle;\n  try {\n    filehandle = await fsPromises.open(&#39;thefile.txt&#39;, &#39;r&#39;);\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}\n</code></pre>\n"
                },
                {
                  "textRaw": "filehandle.datasync()",
                  "type": "method",
                  "name": "datasync",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} ",
                        "name": "return",
                        "type": "Promise"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Asynchronous fdatasync(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n"
                },
                {
                  "textRaw": "filehandle.read(buffer, offset, length, position)",
                  "type": "method",
                  "name": "read",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} ",
                        "name": "return",
                        "type": "Promise"
                      },
                      "params": [
                        {
                          "textRaw": "`buffer` {Buffer|Uint8Array} ",
                          "name": "buffer",
                          "type": "Buffer|Uint8Array"
                        },
                        {
                          "textRaw": "`offset` {integer} ",
                          "name": "offset",
                          "type": "integer"
                        },
                        {
                          "textRaw": "`length` {integer} ",
                          "name": "length",
                          "type": "integer"
                        },
                        {
                          "textRaw": "`position` {integer} ",
                          "name": "position",
                          "type": "integer"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "buffer"
                        },
                        {
                          "name": "offset"
                        },
                        {
                          "name": "length"
                        },
                        {
                          "name": "position"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Read data from the file.</p>\n<p><code>buffer</code> is the buffer that the data will be written to.</p>\n<p><code>offset</code> is the offset in the buffer to start writing at.</p>\n<p><code>length</code> is an integer specifying the number of bytes to read.</p>\n<p><code>position</code> is an argument specifying where to begin reading from in the file.\nIf <code>position</code> is <code>null</code>, data will be read from the current file position,\nand the file position will be updated.\nIf <code>position</code> is an integer, the file position will remain unchanged.</p>\n<p>Following successful read, the <code>Promise</code> is resolved with an object with a\n<code>bytesRead</code> property specifying the number of bytes read, and a <code>buffer</code>\nproperty that is a reference to the passed in <code>buffer</code> argument.</p>\n"
                },
                {
                  "textRaw": "filehandle.readFile(options)",
                  "type": "method",
                  "name": "readFile",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} ",
                        "name": "return",
                        "type": "Promise"
                      },
                      "params": [
                        {
                          "textRaw": "`options` {Object|string} ",
                          "options": [
                            {
                              "textRaw": "`encoding` {string|null} **Default:** `null` ",
                              "name": "encoding",
                              "type": "string|null",
                              "default": "`null`"
                            },
                            {
                              "textRaw": "`flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. ",
                              "name": "flag",
                              "type": "string",
                              "default": "`'r'`",
                              "desc": "See [support of file system `flags`][]."
                            }
                          ],
                          "name": "options",
                          "type": "Object|string"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "options"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Asynchronously reads the entire contents of a file.</p>\n<p>The <code>Promise</code> is resolved with the contents of the file. If no encoding is\nspecified (using <code>options.encoding</code>), the data is returned as a <code>Buffer</code>\nobject. Otherwise, the data will be a string.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>When the <code>path</code> is a directory, the behavior of <code>fsPromises.readFile()</code> is\nplatform-specific. On macOS, Linux, and Windows, the promise will be rejected\nwith an error. On FreeBSD, a representation of the directory&#39;s contents will be\nreturned.</p>\n<p>The <code>FileHandle</code> has to support reading.</p>\n"
                },
                {
                  "textRaw": "filehandle.stat()",
                  "type": "method",
                  "name": "stat",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} ",
                        "name": "return",
                        "type": "Promise"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Retrieves the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> for the file.</p>\n"
                },
                {
                  "textRaw": "filehandle.sync()",
                  "type": "method",
                  "name": "sync",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} ",
                        "name": "return",
                        "type": "Promise"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Asynchronous fsync(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n"
                },
                {
                  "textRaw": "filehandle.truncate(len)",
                  "type": "method",
                  "name": "truncate",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} ",
                        "name": "return",
                        "type": "Promise"
                      },
                      "params": [
                        {
                          "textRaw": "`len` {integer} **Default:** `0` ",
                          "name": "len",
                          "type": "integer",
                          "default": "`0`"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "len"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Truncates the file then resolves the <code>Promise</code> with no arguments upon success.</p>\n<p>If the file was larger than <code>len</code> bytes, only the first <code>len</code> bytes will be\nretained in the file.</p>\n<p>For example, the following program retains only the first four bytes of the\nfile:</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\nasync function doTruncate() {\n  const fd = await fsPromises.open(&#39;temp.txt&#39;, &#39;r+&#39;);\n  await fsPromises.ftruncate(fd, 4);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));  // Prints: Node\n}\n\ndoTruncate().catch(console.error);\n</code></pre>\n<p>If the file previously was shorter than <code>len</code> bytes, it is extended, and the\nextended part is filled with null bytes (<code>&#39;\\0&#39;</code>). For example,</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\nasync function doTruncate() {\n  const fd = await fsPromises.open(&#39;temp.txt&#39;, &#39;r+&#39;);\n  await fsPromises.ftruncate(fd, 10);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));  // Prints Node.js\\0\\0\\0\n}\n\ndoTruncate().catch(console.error);\n</code></pre>\n<p>The last three bytes are null bytes (<code>&#39;\\0&#39;</code>), to compensate the over-truncation.</p>\n"
                },
                {
                  "textRaw": "filehandle.utimes(atime, mtime)",
                  "type": "method",
                  "name": "utimes",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} ",
                        "name": "return",
                        "type": "Promise"
                      },
                      "params": [
                        {
                          "textRaw": "`atime` {number|string|Date} ",
                          "name": "atime",
                          "type": "number|string|Date"
                        },
                        {
                          "textRaw": "`mtime` {number|string|Date} ",
                          "name": "mtime",
                          "type": "number|string|Date"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "atime"
                        },
                        {
                          "name": "mtime"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Change the file system timestamps of the object referenced by the <code>FileHandle</code>\nthen resolves the <code>Promise</code> with no arguments upon success.</p>\n<p>This function does not work on AIX versions before 7.1, it will resolve the\n<code>Promise</code> with an error using code <code>UV_ENOSYS</code>.</p>\n"
                },
                {
                  "textRaw": "filehandle.write(buffer, offset, length, position)",
                  "type": "method",
                  "name": "write",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} ",
                        "name": "return",
                        "type": "Promise"
                      },
                      "params": [
                        {
                          "textRaw": "`buffer` {Buffer|Uint8Array} ",
                          "name": "buffer",
                          "type": "Buffer|Uint8Array"
                        },
                        {
                          "textRaw": "`offset` {integer} ",
                          "name": "offset",
                          "type": "integer"
                        },
                        {
                          "textRaw": "`length` {integer} ",
                          "name": "length",
                          "type": "integer"
                        },
                        {
                          "textRaw": "`position` {integer} ",
                          "name": "position",
                          "type": "integer"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "buffer"
                        },
                        {
                          "name": "offset"
                        },
                        {
                          "name": "length"
                        },
                        {
                          "name": "position"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Write <code>buffer</code> to the file.</p>\n<p>The <code>Promise</code> is resolved with an object containing a <code>bytesWritten</code> property\nidentifying the number of bytes written, and a <code>buffer</code> property containing\na reference to the <code>buffer</code> written.</p>\n<p><code>offset</code> determines the part of the buffer to be written, and <code>length</code> is\nan integer specifying the number of bytes to write.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code>, the data will be written\nat the current position. See pwrite(2).</p>\n<p>It is unsafe to use <code>filehandle.write()</code> multiple times on the same file\nwithout waiting for the <code>Promise</code> to be resolved (or rejected). For this\nscenario, <code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes do not work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n"
                },
                {
                  "textRaw": "filehandle.writeFile(data, options)",
                  "type": "method",
                  "name": "writeFile",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} ",
                        "name": "return",
                        "type": "Promise"
                      },
                      "params": [
                        {
                          "textRaw": "`data` {string|Buffer|Uint8Array} ",
                          "name": "data",
                          "type": "string|Buffer|Uint8Array"
                        },
                        {
                          "textRaw": "`options` {Object|string} ",
                          "options": [
                            {
                              "textRaw": "`encoding` {string|null} **Default:** `'utf8'` ",
                              "name": "encoding",
                              "type": "string|null",
                              "default": "`'utf8'`"
                            },
                            {
                              "textRaw": "`mode` {integer} **Default:** `0o666` ",
                              "name": "mode",
                              "type": "integer",
                              "default": "`0o666`"
                            },
                            {
                              "textRaw": "`flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. ",
                              "name": "flag",
                              "type": "string",
                              "default": "`'w'`",
                              "desc": "See [support of file system `flags`][]."
                            }
                          ],
                          "name": "options",
                          "type": "Object|string"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "data"
                        },
                        {
                          "name": "options"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Asynchronously writes data to a file, replacing the file if it already exists.\n<code>data</code> can be a string or a buffer. The <code>Promise</code> will be resolved with no\narguments upon success.</p>\n<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>The <code>FileHandle</code> has to support writing.</p>\n<p>It is unsafe to use <code>filehandle.writeFile()</code> multiple times on the same file\nwithout waiting for the <code>Promise</code> to be resolved (or rejected).</p>\n"
                }
              ],
              "properties": [
                {
                  "textRaw": "`fd` {number} The numeric file descriptor managed by the `FileHandle` object. ",
                  "type": "number",
                  "name": "fd",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "The numeric file descriptor managed by the `FileHandle` object.",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Promise} ",
                        "name": "return",
                        "type": "Promise"
                      },
                      "params": [
                        {
                          "textRaw": "`buffer` {Buffer|Uint8Array} ",
                          "name": "buffer",
                          "type": "Buffer|Uint8Array"
                        },
                        {
                          "textRaw": "`offset` {integer} ",
                          "name": "offset",
                          "type": "integer"
                        },
                        {
                          "textRaw": "`length` {integer} ",
                          "name": "length",
                          "type": "integer"
                        },
                        {
                          "textRaw": "`position` {integer} ",
                          "name": "position",
                          "type": "integer"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "buffer"
                        },
                        {
                          "name": "offset"
                        },
                        {
                          "name": "length"
                        },
                        {
                          "name": "position"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ],
          "methods": [
            {
              "textRaw": "fsPromises.access(path[, mode])",
              "type": "method",
              "name": "access",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`mode` {integer} **Default:** `fs.constants.F_OK` ",
                      "name": "mode",
                      "type": "integer",
                      "default": "`fs.constants.F_OK`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "mode",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Tests a user&#39;s permissions for the file or directory specified by <code>path</code>.\nThe <code>mode</code> argument is an optional integer that specifies the accessibility\nchecks to be performed. The following constants define the possible values of\n<code>mode</code>. It is possible to create a mask consisting of the bitwise OR of two or\nmore values (e.g. <code>fs.constants.W_OK | fs.constants.R_OK</code>).</p>\n<ul>\n<li><code>fs.constants.F_OK</code> - <code>path</code> is visible to the calling process. This is useful\nfor determining if a file exists, but says nothing about <code>rwx</code> permissions.\nDefault if no <code>mode</code> is specified.</li>\n<li><code>fs.constants.R_OK</code> - <code>path</code> can be read by the calling process.</li>\n<li><code>fs.constants.W_OK</code> - <code>path</code> can be written by the calling process.</li>\n<li><code>fs.constants.X_OK</code> - <code>path</code> can be executed by the calling process. This has\nno effect on Windows (will behave like <code>fs.constants.F_OK</code>).</li>\n</ul>\n<p>If the accessibility check is successful, the <code>Promise</code> is resolved with no\nvalue. If any of the accessibility checks fail, the <code>Promise</code> is rejected\nwith an <code>Error</code> object. The following example checks if the file\n<code>/etc/passwd</code> can be read and written by the current process.</p>\n<pre><code class=\"lang-js\">fsPromises.access(&#39;/etc/passwd&#39;, fs.constants.R_OK | fs.constants.W_OK)\n  .then(() =&gt; console.log(&#39;can access&#39;))\n  .catch(() =&gt; console.error(&#39;cannot access&#39;));\n</code></pre>\n<p>Using <code>fsPromises.access()</code> to check for the accessibility of a file before\ncalling <code>fsPromises.open()</code> is not recommended. Doing so introduces a race\ncondition, since other processes may change the file&#39;s state between the two\ncalls. Instead, user code should open/read/write the file directly and handle\nthe error raised if the file is not accessible.</p>\n"
            },
            {
              "textRaw": "fsPromises.appendFile(path, data[, options])",
              "type": "method",
              "name": "appendFile",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` ",
                      "name": "path",
                      "type": "string|Buffer|URL|FileHandle",
                      "desc": "filename or `FileHandle`"
                    },
                    {
                      "textRaw": "`data` {string|Buffer} ",
                      "name": "data",
                      "type": "string|Buffer"
                    },
                    {
                      "textRaw": "`options` {Object|string} ",
                      "options": [
                        {
                          "textRaw": "`encoding` {string|null} **Default:** `'utf8'` ",
                          "name": "encoding",
                          "type": "string|null",
                          "default": "`'utf8'`"
                        },
                        {
                          "textRaw": "`mode` {integer} **Default:** `0o666` ",
                          "name": "mode",
                          "type": "integer",
                          "default": "`0o666`"
                        },
                        {
                          "textRaw": "`flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. ",
                          "name": "flag",
                          "type": "string",
                          "default": "`'a'`",
                          "desc": "See [support of file system `flags`][]."
                        }
                      ],
                      "name": "options",
                      "type": "Object|string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "data"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronously append data to a file, creating the file if it does not yet\nexist. <code>data</code> can be a string or a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>. The <code>Promise</code> will be\nresolved with no arguments upon success.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>The <code>path</code> may be specified as a <code>FileHandle</code> that has been opened\nfor appending (using <code>fsPromises.open()</code>).</p>\n"
            },
            {
              "textRaw": "fsPromises.chmod(path, mode)",
              "type": "method",
              "name": "chmod",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`mode` {integer} ",
                      "name": "mode",
                      "type": "integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "mode"
                    }
                  ]
                }
              ],
              "desc": "<p>Changes the permissions of a file then resolves the <code>Promise</code> with no\narguments upon succces.</p>\n"
            },
            {
              "textRaw": "fsPromises.chown(path, uid, gid)",
              "type": "method",
              "name": "chown",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`uid` {integer} ",
                      "name": "uid",
                      "type": "integer"
                    },
                    {
                      "textRaw": "`gid` {integer} ",
                      "name": "gid",
                      "type": "integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "uid"
                    },
                    {
                      "name": "gid"
                    }
                  ]
                }
              ],
              "desc": "<p>Changes the ownership of a file then resolves the <code>Promise</code> with no arguments\nupon success.</p>\n"
            },
            {
              "textRaw": "fsPromises.copyFile(src, dest[, flags])",
              "type": "method",
              "name": "copyFile",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`src` {string|Buffer|URL} source filename to copy ",
                      "name": "src",
                      "type": "string|Buffer|URL",
                      "desc": "source filename to copy"
                    },
                    {
                      "textRaw": "`dest` {string|Buffer|URL} destination filename of the copy operation ",
                      "name": "dest",
                      "type": "string|Buffer|URL",
                      "desc": "destination filename of the copy operation"
                    },
                    {
                      "textRaw": "`flags` {number} modifiers for copy operation. **Default:** `0`. ",
                      "name": "flags",
                      "type": "number",
                      "default": "`0`",
                      "desc": "modifiers for copy operation.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "src"
                    },
                    {
                      "name": "dest"
                    },
                    {
                      "name": "flags",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it\nalready exists. The <code>Promise</code> will be resolved with no arguments upon success.</p>\n<p>Node.js makes no guarantees about the atomicity of the copy operation. If an\nerror occurs after the destination file has been opened for writing, Node.js\nwill attempt to remove the destination.</p>\n<p><code>flags</code> is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n<code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>).</p>\n<ul>\n<li><code>fs.constants.COPYFILE_EXCL</code> - The copy operation will fail if <code>dest</code> already\nexists.</li>\n<li><code>fs.constants.COPYFILE_FICLONE</code> - The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used.</li>\n<li><code>fs.constants.COPYFILE_FICLONE_FORCE</code> - The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support copy-on-write,\nthen the operation will fail.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\n// destination.txt will be created or overwritten by default.\nfsPromises.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;)\n  .then(() =&gt; console.log(&#39;source.txt was copied to destination.txt&#39;))\n  .catch(() =&gt; console.log(&#39;The file could not be copied&#39;));\n</code></pre>\n<p>If the third argument is a number, then it specifies <code>flags</code>, as shown in the\nfollowing example.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst { COPYFILE_EXCL } = fs.constants;\n\n// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\nfsPromises.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;, COPYFILE_EXCL)\n  .then(() =&gt; console.log(&#39;source.txt was copied to destination.txt&#39;))\n  .catch(() =&gt; console.log(&#39;The file could not be copied&#39;));\n</code></pre>\n"
            },
            {
              "textRaw": "fsPromises.fchmod(filehandle, mode)",
              "type": "method",
              "name": "fchmod",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`filehandle` {FileHandle} ",
                      "name": "filehandle",
                      "type": "FileHandle"
                    },
                    {
                      "textRaw": "`mode` {integer} ",
                      "name": "mode",
                      "type": "integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "filehandle"
                    },
                    {
                      "name": "mode"
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronous fchmod(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n"
            },
            {
              "textRaw": "fsPromises.fchown(filehandle, uid, gid)",
              "type": "method",
              "name": "fchown",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`filehandle` {FileHandle} ",
                      "name": "filehandle",
                      "type": "FileHandle"
                    },
                    {
                      "textRaw": "`uid` {integer} ",
                      "name": "uid",
                      "type": "integer"
                    },
                    {
                      "textRaw": "`gid` {integer} ",
                      "name": "gid",
                      "type": "integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "filehandle"
                    },
                    {
                      "name": "uid"
                    },
                    {
                      "name": "gid"
                    }
                  ]
                }
              ],
              "desc": "<p>Changes the ownership of the file represented by <code>filehandle</code> then resolves\nthe <code>Promise</code> with no arguments upon success.</p>\n"
            },
            {
              "textRaw": "fsPromises.fdatasync(filehandle)",
              "type": "method",
              "name": "fdatasync",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`filehandle` {FileHandle} ",
                      "name": "filehandle",
                      "type": "FileHandle"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "filehandle"
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronous fdatasync(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n"
            },
            {
              "textRaw": "fsPromises.fstat(filehandle)",
              "type": "method",
              "name": "fstat",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`filehandle` {FileHandle} ",
                      "name": "filehandle",
                      "type": "FileHandle"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "filehandle"
                    }
                  ]
                }
              ],
              "desc": "<p>Retrieves the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> for the given <code>filehandle</code>.</p>\n"
            },
            {
              "textRaw": "fsPromises.fsync(filehandle)",
              "type": "method",
              "name": "fsync",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`filehandle` {FileHandle} ",
                      "name": "filehandle",
                      "type": "FileHandle"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "filehandle"
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronous fsync(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n"
            },
            {
              "textRaw": "fsPromises.ftruncate(filehandle[, len])",
              "type": "method",
              "name": "ftruncate",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`filehandle` {FileHandle} ",
                      "name": "filehandle",
                      "type": "FileHandle"
                    },
                    {
                      "textRaw": "`len` {integer} **Default:** `0` ",
                      "name": "len",
                      "type": "integer",
                      "default": "`0`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "filehandle"
                    },
                    {
                      "name": "len",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Truncates the file represented by <code>filehandle</code> then resolves the <code>Promise</code>\nwith no arguments upon success.</p>\n<p>If the file referred to by the <code>FileHandle</code> was larger than <code>len</code> bytes, only\nthe first <code>len</code> bytes will be retained in the file.</p>\n<p>For example, the following program retains only the first four bytes of the\nfile:</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\nasync function doTruncate() {\n  const fd = await fsPromises.open(&#39;temp.txt&#39;, &#39;r+&#39;);\n  await fsPromises.ftruncate(fd, 4);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));  // Prints: Node\n}\n\ndoTruncate().catch(console.error);\n</code></pre>\n<p>If the file previously was shorter than <code>len</code> bytes, it is extended, and the\nextended part is filled with null bytes (<code>&#39;\\0&#39;</code>). For example,</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\nasync function doTruncate() {\n  const fd = await fsPromises.open(&#39;temp.txt&#39;, &#39;r+&#39;);\n  await fsPromises.ftruncate(fd, 10);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));  // Prints Node.js\\0\\0\\0\n}\n\ndoTruncate().catch(console.error);\n</code></pre>\n<p>The last three bytes are null bytes (<code>&#39;\\0&#39;</code>), to compensate the over-truncation.</p>\n"
            },
            {
              "textRaw": "fsPromises.futimes(filehandle, atime, mtime)",
              "type": "method",
              "name": "futimes",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`filehandle` {FileHandle} ",
                      "name": "filehandle",
                      "type": "FileHandle"
                    },
                    {
                      "textRaw": "`atime` {number|string|Date} ",
                      "name": "atime",
                      "type": "number|string|Date"
                    },
                    {
                      "textRaw": "`mtime` {number|string|Date} ",
                      "name": "mtime",
                      "type": "number|string|Date"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "filehandle"
                    },
                    {
                      "name": "atime"
                    },
                    {
                      "name": "mtime"
                    }
                  ]
                }
              ],
              "desc": "<p>Change the file system timestamps of the object referenced by the supplied\n<code>FileHandle</code> then resolves the <code>Promise</code> with no arguments upon success.</p>\n<p>This function does not work on AIX versions before 7.1, it will resolve the\n<code>Promise</code> with an error using code <code>UV_ENOSYS</code>.</p>\n"
            },
            {
              "textRaw": "fsPromises.lchmod(path, mode)",
              "type": "method",
              "name": "lchmod",
              "meta": {
                "deprecated": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`mode` {integer} ",
                      "name": "mode",
                      "type": "integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "mode"
                    }
                  ]
                }
              ],
              "desc": "<p>Changes the permissions on a symbolic link then resolves the <code>Promise</code> with\nno arguments upon success. This method is only implemented on macOS.</p>\n"
            },
            {
              "textRaw": "fsPromises.lchown(path, uid, gid)",
              "type": "method",
              "name": "lchown",
              "meta": {
                "deprecated": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`uid` {integer} ",
                      "name": "uid",
                      "type": "integer"
                    },
                    {
                      "textRaw": "`gid` {integer} ",
                      "name": "gid",
                      "type": "integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "uid"
                    },
                    {
                      "name": "gid"
                    }
                  ]
                }
              ],
              "desc": "<p>Changes the ownership on a symbolic link then resolves the <code>Promise</code> with\nno arguments upon success. This method is only implemented on macOS.</p>\n"
            },
            {
              "textRaw": "fsPromises.link(existingPath, newPath)",
              "type": "method",
              "name": "link",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`existingPath` {string|Buffer|URL} ",
                      "name": "existingPath",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`newPath` {string|Buffer|URL} ",
                      "name": "newPath",
                      "type": "string|Buffer|URL"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "existingPath"
                    },
                    {
                      "name": "newPath"
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronous link(2). The <code>Promise</code> is resolved with no arguments upon success.</p>\n"
            },
            {
              "textRaw": "fsPromises.lstat(path)",
              "type": "method",
              "name": "lstat",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronous lstat(2). The <code>Promise</code> is resolved with the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object\nfor the given symbolic link <code>path</code>.</p>\n"
            },
            {
              "textRaw": "fsPromises.mkdir(path[, mode])",
              "type": "method",
              "name": "mkdir",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`mode` {integer} **Default:** `0o777` ",
                      "name": "mode",
                      "type": "integer",
                      "default": "`0o777`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "mode",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronously creates a directory then resolves the <code>Promise</code> with no\narguments upon success.</p>\n"
            },
            {
              "textRaw": "fsPromises.mkdtemp(prefix[, options])",
              "type": "method",
              "name": "mkdtemp",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`prefix` {string} ",
                      "name": "prefix",
                      "type": "string"
                    },
                    {
                      "textRaw": "`options` {string|Object} ",
                      "options": [
                        {
                          "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                          "name": "encoding",
                          "type": "string",
                          "default": "`'utf8'`"
                        }
                      ],
                      "name": "options",
                      "type": "string|Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "prefix"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a unique temporary directory and resolves the <code>Promise</code> with the created\nfolder path. A unique directory name is generated by appending six random\ncharacters to the end of the provided <code>prefix</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use.</p>\n<pre><code class=\"lang-js\">fsPromises.mkdtemp(path.join(os.tmpdir(), &#39;foo-&#39;))\n  .catch(console.error);\n</code></pre>\n<p>The <code>fsPromises.mkdtemp()</code> method will append the six randomly selected\ncharacters directly to the <code>prefix</code> string. For instance, given a directory\n<code>/tmp</code>, if the intention is to create a temporary directory <em>within</em> <code>/tmp</code>, the\n<code>prefix</code> must end with a trailing platform-specific path separator\n(<code>require(&#39;path&#39;).sep</code>).</p>\n"
            },
            {
              "textRaw": "fsPromises.open(path, flags[, mode])",
              "type": "method",
              "name": "open",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`flags` {string|number} See [support of file system `flags`][]. ",
                      "name": "flags",
                      "type": "string|number",
                      "desc": "See [support of file system `flags`][]."
                    },
                    {
                      "textRaw": "`mode` {integer} **Default:** `0o666` (readable and writable) ",
                      "name": "mode",
                      "type": "integer",
                      "default": "`0o666` (readable and writable)",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "flags"
                    },
                    {
                      "name": "mode",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronous file open that returns a <code>Promise</code> that, when resolved, yields a\n<code>FileHandle</code> object. See open(2).</p>\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the file was\ncreated.</p>\n<p>Some characters (<code>&lt; &gt; : &quot; / \\ | ? *</code>) are reserved under Windows as documented\nby <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx\">Naming Files, Paths, and Namespaces</a>. Under NTFS, if the filename contains\na colon, Node.js will open a file system stream, as described by\n<a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/bb540537.aspx\">this MSDN page</a>.</p>\n"
            },
            {
              "textRaw": "fsPromises.read(filehandle, buffer, offset, length, position)",
              "type": "method",
              "name": "read",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`filehandle` {FileHandle} ",
                      "name": "filehandle",
                      "type": "FileHandle"
                    },
                    {
                      "textRaw": "`buffer` {Buffer|Uint8Array} ",
                      "name": "buffer",
                      "type": "Buffer|Uint8Array"
                    },
                    {
                      "textRaw": "`offset` {integer} ",
                      "name": "offset",
                      "type": "integer"
                    },
                    {
                      "textRaw": "`length` {integer} ",
                      "name": "length",
                      "type": "integer"
                    },
                    {
                      "textRaw": "`position` {integer} ",
                      "name": "position",
                      "type": "integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "filehandle"
                    },
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "offset"
                    },
                    {
                      "name": "length"
                    },
                    {
                      "name": "position"
                    }
                  ]
                }
              ],
              "desc": "<p>Read data from the file specified by <code>filehandle</code>.</p>\n<p><code>buffer</code> is the buffer that the data will be written to.</p>\n<p><code>offset</code> is the offset in the buffer to start writing at.</p>\n<p><code>length</code> is an integer specifying the number of bytes to read.</p>\n<p><code>position</code> is an argument specifying where to begin reading from in the file.\nIf <code>position</code> is <code>null</code>, data will be read from the current file position,\nand the file position will be updated.\nIf <code>position</code> is an integer, the file position will remain unchanged.</p>\n<p>Following successful read, the <code>Promise</code> is resolved with an object with a\n<code>bytesRead</code> property specifying the number of bytes read, and a <code>buffer</code>\nproperty that is a reference to the passed in <code>buffer</code> argument.</p>\n"
            },
            {
              "textRaw": "fsPromises.readdir(path[, options])",
              "type": "method",
              "name": "readdir",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`options` {string|Object} ",
                      "options": [
                        {
                          "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                          "name": "encoding",
                          "type": "string",
                          "default": "`'utf8'`"
                        }
                      ],
                      "name": "options",
                      "type": "string|Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Reads the contents of a directory then resolves the <code>Promise</code> with an array\nof the names of the files in the directory excludiing <code>&#39;.&#39;</code> and <code>&#39;..&#39;</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe filenames. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the filenames returned\nwill be passed as <code>Buffer</code> objects.</p>\n"
            },
            {
              "textRaw": "fsPromises.readFile(path[, options])",
              "type": "method",
              "name": "readFile",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` ",
                      "name": "path",
                      "type": "string|Buffer|URL|FileHandle",
                      "desc": "filename or `FileHandle`"
                    },
                    {
                      "textRaw": "`options` {Object|string} ",
                      "options": [
                        {
                          "textRaw": "`encoding` {string|null} **Default:** `null` ",
                          "name": "encoding",
                          "type": "string|null",
                          "default": "`null`"
                        },
                        {
                          "textRaw": "`flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. ",
                          "name": "flag",
                          "type": "string",
                          "default": "`'r'`",
                          "desc": "See [support of file system `flags`][]."
                        }
                      ],
                      "name": "options",
                      "type": "Object|string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronously reads the entire contents of a file.</p>\n<p>The <code>Promise</code> is resolved with the contents of the file. If no encoding is\nspecified (using <code>options.encoding</code>), the data is returned as a <code>Buffer</code>\nobject. Otherwise, the data will be a string.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>When the <code>path</code> is a directory, the behavior of <code>fsPromises.readFile()</code> is\nplatform-specific. On macOS, Linux, and Windows, the promise will be rejected\nwith an error. On FreeBSD, a representation of the directory&#39;s contents will be\nreturned.</p>\n<p>Any specified <code>FileHandle</code> has to support reading.</p>\n"
            },
            {
              "textRaw": "fsPromises.readlink(path[, options])",
              "type": "method",
              "name": "readlink",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`options` {string|Object} ",
                      "options": [
                        {
                          "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                          "name": "encoding",
                          "type": "string",
                          "default": "`'utf8'`"
                        }
                      ],
                      "name": "options",
                      "type": "string|Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronous readlink(2). The <code>Promise</code> is resolved with the <code>linkString</code> upon\nsuccess.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe link path returned. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the link path\nreturned will be passed as a <code>Buffer</code> object.</p>\n"
            },
            {
              "textRaw": "fsPromises.realpath(path[, options])",
              "type": "method",
              "name": "realpath",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`options` {string|Object} ",
                      "options": [
                        {
                          "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                          "name": "encoding",
                          "type": "string",
                          "default": "`'utf8'`"
                        }
                      ],
                      "name": "options",
                      "type": "string|Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Determines the actual location of <code>path</code> using the same semantics as the\n<code>fs.realpath.native()</code> function then resolves the <code>Promise</code> with the resolved\npath.</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the path returned will be\npassed as a <code>Buffer</code> object.</p>\n<p>On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on <code>/proc</code> in order for this function to work. Glibc does not have\nthis restriction.</p>\n"
            },
            {
              "textRaw": "fsPromises.rename(oldPath, newPath)",
              "type": "method",
              "name": "rename",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`oldPath` {string|Buffer|URL} ",
                      "name": "oldPath",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`newPath` {string|Buffer|URL} ",
                      "name": "newPath",
                      "type": "string|Buffer|URL"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "oldPath"
                    },
                    {
                      "name": "newPath"
                    }
                  ]
                }
              ],
              "desc": "<p>Renames <code>oldPath</code> to <code>newPath</code> and resolves the <code>Promise</code> with no arguments\nupon success.</p>\n"
            },
            {
              "textRaw": "fsPromises.rmdir(path)",
              "type": "method",
              "name": "rmdir",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    }
                  ]
                }
              ],
              "desc": "<p>Removes the directory identified by <code>path</code> then resolves the <code>Promise</code> with\nno arguments upon success.</p>\n<p>Using <code>fsPromises.rmdir()</code> on a file (not a directory) results in the\n<code>Promise</code> being rejected with an <code>ENOENT</code> error on Windows and an <code>ENOTDIR</code>\nerror on POSIX.</p>\n"
            },
            {
              "textRaw": "fsPromises.stat(path)",
              "type": "method",
              "name": "stat",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>Promise</code> is resolved with the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object for the given <code>path</code>.</p>\n"
            },
            {
              "textRaw": "fsPromises.symlink(target, path[, type])",
              "type": "method",
              "name": "symlink",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`target` {string|Buffer|URL} ",
                      "name": "target",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`type` {string} **Default:** `'file'` ",
                      "name": "type",
                      "type": "string",
                      "default": "`'file'`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "target"
                    },
                    {
                      "name": "path"
                    },
                    {
                      "name": "type",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a symbolic link then resolves the <code>Promise</code> with no arguments upon\nsuccess.</p>\n<p>The <code>type</code> argument is only used on Windows platforms and can be one of <code>&#39;dir&#39;</code>,\n<code>&#39;file&#39;</code>, or <code>&#39;junction&#39;</code>. Note that Windows junction\npoints require the destination path to be absolute. When using <code>&#39;junction&#39;</code>,\nthe <code>target</code> argument will automatically be normalized to absolute path.</p>\n"
            },
            {
              "textRaw": "fsPromises.truncate(path[, len])",
              "type": "method",
              "name": "truncate",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`len` {integer} **Default:** `0` ",
                      "name": "len",
                      "type": "integer",
                      "default": "`0`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "len",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Truncates the <code>path</code> then resolves the <code>Promise</code> with no arguments upon\nsuccess. The <code>path</code> <em>must</em> be a string or <code>Buffer</code>.</p>\n"
            },
            {
              "textRaw": "fsPromises.unlink(path)",
              "type": "method",
              "name": "unlink",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronous unlink(2). The <code>Promise</code> is resolved with no arguments upon\nsuccess.</p>\n"
            },
            {
              "textRaw": "fsPromises.utimes(path, atime, mtime)",
              "type": "method",
              "name": "utimes",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string|Buffer|URL} ",
                      "name": "path",
                      "type": "string|Buffer|URL"
                    },
                    {
                      "textRaw": "`atime` {number|string|Date} ",
                      "name": "atime",
                      "type": "number|string|Date"
                    },
                    {
                      "textRaw": "`mtime` {number|string|Date} ",
                      "name": "mtime",
                      "type": "number|string|Date"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "atime"
                    },
                    {
                      "name": "mtime"
                    }
                  ]
                }
              ],
              "desc": "<p>Change the file system timestamps of the object referenced by <code>path</code> then\nresolves the <code>Promise</code> with no arguments upon success.</p>\n<p>The <code>atime</code> and <code>mtime</code> arguments follow these rules:</p>\n<ul>\n<li>Values can be either numbers representing Unix epoch time, <code>Date</code>s, or a\nnumeric string like <code>&#39;123456789.0&#39;</code>.</li>\n<li>If the value can not be converted to a number, or is <code>NaN</code>, <code>Infinity</code> or\n<code>-Infinity</code>, an <code>Error</code> will be thrown.</li>\n</ul>\n"
            },
            {
              "textRaw": "fsPromises.write(filehandle, buffer[, offset[, length[, position]]])",
              "type": "method",
              "name": "write",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`filehandle` {FileHandle} ",
                      "name": "filehandle",
                      "type": "FileHandle"
                    },
                    {
                      "textRaw": "`buffer` {Buffer|Uint8Array} ",
                      "name": "buffer",
                      "type": "Buffer|Uint8Array"
                    },
                    {
                      "textRaw": "`offset` {integer} ",
                      "name": "offset",
                      "type": "integer",
                      "optional": true
                    },
                    {
                      "textRaw": "`length` {integer} ",
                      "name": "length",
                      "type": "integer",
                      "optional": true
                    },
                    {
                      "textRaw": "`position` {integer} ",
                      "name": "position",
                      "type": "integer",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "filehandle"
                    },
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "offset",
                      "optional": true
                    },
                    {
                      "name": "length",
                      "optional": true
                    },
                    {
                      "name": "position",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Write <code>buffer</code> to the file specified by <code>filehandle</code>.</p>\n<p>The <code>Promise</code> is resolved with an object containing a <code>bytesWritten</code> property\nidentifying the number of bytes written, and a <code>buffer</code> property containing\na reference to the <code>buffer</code> written.</p>\n<p><code>offset</code> determines the part of the buffer to be written, and <code>length</code> is\nan integer specifying the number of bytes to write.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code>, the data will be written\nat the current position. See pwrite(2).</p>\n<p>It is unsafe to use <code>fsPromises.write()</code> multiple times on the same file\nwithout waiting for the <code>Promise</code> to be resolved (or rejected). For this\nscenario, <code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes do not work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n"
            },
            {
              "textRaw": "fsPromises.writeFile(file, data[, options])",
              "type": "method",
              "name": "writeFile",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`file` {string|Buffer|URL|FileHandle} filename or `FileHandle` ",
                      "name": "file",
                      "type": "string|Buffer|URL|FileHandle",
                      "desc": "filename or `FileHandle`"
                    },
                    {
                      "textRaw": "`data` {string|Buffer|Uint8Array} ",
                      "name": "data",
                      "type": "string|Buffer|Uint8Array"
                    },
                    {
                      "textRaw": "`options` {Object|string} ",
                      "options": [
                        {
                          "textRaw": "`encoding` {string|null} **Default:** `'utf8'` ",
                          "name": "encoding",
                          "type": "string|null",
                          "default": "`'utf8'`"
                        },
                        {
                          "textRaw": "`mode` {integer} **Default:** `0o666` ",
                          "name": "mode",
                          "type": "integer",
                          "default": "`0o666`"
                        },
                        {
                          "textRaw": "`flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. ",
                          "name": "flag",
                          "type": "string",
                          "default": "`'w'`",
                          "desc": "See [support of file system `flags`][]."
                        }
                      ],
                      "name": "options",
                      "type": "Object|string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "file"
                    },
                    {
                      "name": "data"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronously writes data to a file, replacing the file if it already exists.\n<code>data</code> can be a string or a buffer. The <code>Promise</code> will be resolved with no\narguments upon success.</p>\n<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n<p>Any specified <code>FileHandle</code> has to support writing.</p>\n<p>It is unsafe to use <code>fsPromises.writeFile()</code> multiple times on the same file\nwithout waiting for the <code>Promise</code> to be resolved (or rejected).</p>\n"
            }
          ],
          "type": "module",
          "displayName": "fs Promises API"
        },
        {
          "textRaw": "FS Constants",
          "name": "fs_constants",
          "desc": "<p>The following constants are exported by <code>fs.constants</code>.</p>\n<p>Not every constant will be available on every operating system.</p>\n",
          "modules": [
            {
              "textRaw": "File Access Constants",
              "name": "file_access_constants",
              "desc": "<p>The following constants are meant for use with <a href=\"#fs_fs_access_path_mode_callback\"><code>fs.access()</code></a>.</p>\n<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>F_OK</code></td>\n    <td>Flag indicating that the file is visible to the calling process.</td>\n  </tr>\n  <tr>\n    <td><code>R_OK</code></td>\n    <td>Flag indicating that the file can be read by the calling process.</td>\n  </tr>\n  <tr>\n    <td><code>W_OK</code></td>\n    <td>Flag indicating that the file can be written by the calling\n    process.</td>\n  </tr>\n  <tr>\n    <td><code>X_OK</code></td>\n    <td>Flag indicating that the file can be executed by the calling\n    process.</td>\n  </tr>\n</table>\n\n",
              "type": "module",
              "displayName": "File Access Constants"
            },
            {
              "textRaw": "File Copy Constants",
              "name": "file_copy_constants",
              "desc": "<p>The following constants are meant for use with <a href=\"#fs_fs_copyfile_src_dest_flags_callback\"><code>fs.copyFile()</code></a>.</p>\n<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>COPYFILE_EXCL</code></td>\n    <td>If present, the copy operation will fail with an error if the\n    destination path already exists.</td>\n  </tr>\n  <tr>\n    <td><code>COPYFILE_FICLONE</code></td>\n    <td>If present, the copy operation will attempt to create a\n    copy-on-write reflink. If the underlying platform does not support\n    copy-on-write, then a fallback copy mechanism is used.</td>\n  </tr>\n  <tr>\n    <td><code>COPYFILE_FICLONE_FORCE</code></td>\n    <td>If present, the copy operation will attempt to create a\n    copy-on-write reflink. If the underlying platform does not support\n    copy-on-write, then the operation will fail with an error.</td>\n  </tr>\n</table>\n\n",
              "type": "module",
              "displayName": "File Copy Constants"
            },
            {
              "textRaw": "File Open Constants",
              "name": "file_open_constants",
              "desc": "<p>The following constants are meant for use with <code>fs.open()</code>.</p>\n<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>O_RDONLY</code></td>\n    <td>Flag indicating to open a file for read-only access.</td>\n  </tr>\n  <tr>\n    <td><code>O_WRONLY</code></td>\n    <td>Flag indicating to open a file for write-only access.</td>\n  </tr>\n  <tr>\n    <td><code>O_RDWR</code></td>\n    <td>Flag indicating to open a file for read-write access.</td>\n  </tr>\n  <tr>\n    <td><code>O_CREAT</code></td>\n    <td>Flag indicating to create the file if it does not already exist.</td>\n  </tr>\n  <tr>\n    <td><code>O_EXCL</code></td>\n    <td>Flag indicating that opening a file should fail if the\n    <code>O_CREAT</code> flag is set and the file already exists.</td>\n  </tr>\n  <tr>\n    <td><code>O_NOCTTY</code></td>\n    <td>Flag indicating that if path identifies a terminal device, opening the\n    path shall not cause that terminal to become the controlling terminal for\n    the process (if the process does not already have one).</td>\n  </tr>\n  <tr>\n    <td><code>O_TRUNC</code></td>\n    <td>Flag indicating that if the file exists and is a regular file, and the\n    file is opened successfully for write access, its length shall be truncated\n    to zero.</td>\n  </tr>\n  <tr>\n    <td><code>O_APPEND</code></td>\n    <td>Flag indicating that data will be appended to the end of the file.</td>\n  </tr>\n  <tr>\n    <td><code>O_DIRECTORY</code></td>\n    <td>Flag indicating that the open should fail if the path is not a\n    directory.</td>\n  </tr>\n  <tr>\n  <td><code>O_NOATIME</code></td>\n    <td>Flag indicating reading accesses to the file system will no longer\n    result in an update to the <code>atime</code> information associated with the file.\n    This flag is available on Linux operating systems only.</td>\n  </tr>\n  <tr>\n    <td><code>O_NOFOLLOW</code></td>\n    <td>Flag indicating that the open should fail if the path is a symbolic\n    link.</td>\n  </tr>\n  <tr>\n    <td><code>O_SYNC</code></td>\n    <td>Flag indicating that the file is opened for synchronized I/O with write\n    operations waiting for file integrity.</td>\n  </tr>\n  <tr>\n    <td><code>O_DSYNC</code></td>\n    <td>Flag indicating that the file is opened for synchronized I/O with write\n    operations waiting for data integrity.</td>\n  </tr>\n  <tr>\n    <td><code>O_SYMLINK</code></td>\n    <td>Flag indicating to open the symbolic link itself rather than the\n    resource it is pointing to.</td>\n  </tr>\n  <tr>\n    <td><code>O_DIRECT</code></td>\n    <td>When set, an attempt will be made to minimize caching effects of file\n    I/O.</td>\n  </tr>\n  <tr>\n    <td><code>O_NONBLOCK</code></td>\n    <td>Flag indicating to open the file in nonblocking mode when possible.</td>\n  </tr>\n</table>\n\n",
              "type": "module",
              "displayName": "File Open Constants"
            },
            {
              "textRaw": "File Type Constants",
              "name": "file_type_constants",
              "desc": "<p>The following constants are meant for use with the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object&#39;s\n<code>mode</code> property for determining a file&#39;s type.</p>\n<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>S_IFMT</code></td>\n    <td>Bit mask used to extract the file type code.</td>\n  </tr>\n  <tr>\n    <td><code>S_IFREG</code></td>\n    <td>File type constant for a regular file.</td>\n  </tr>\n  <tr>\n    <td><code>S_IFDIR</code></td>\n    <td>File type constant for a directory.</td>\n  </tr>\n  <tr>\n    <td><code>S_IFCHR</code></td>\n    <td>File type constant for a character-oriented device file.</td>\n  </tr>\n  <tr>\n    <td><code>S_IFBLK</code></td>\n    <td>File type constant for a block-oriented device file.</td>\n  </tr>\n  <tr>\n    <td><code>S_IFIFO</code></td>\n    <td>File type constant for a FIFO/pipe.</td>\n  </tr>\n  <tr>\n    <td><code>S_IFLNK</code></td>\n    <td>File type constant for a symbolic link.</td>\n  </tr>\n  <tr>\n    <td><code>S_IFSOCK</code></td>\n    <td>File type constant for a socket.</td>\n  </tr>\n</table>\n\n",
              "type": "module",
              "displayName": "File Type Constants"
            },
            {
              "textRaw": "File Mode Constants",
              "name": "file_mode_constants",
              "desc": "<p>The following constants are meant for use with the <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object&#39;s\n<code>mode</code> property for determining the access permissions for a file.</p>\n<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>S_IRWXU</code></td>\n    <td>File mode indicating readable, writable, and executable by owner.</td>\n  </tr>\n  <tr>\n    <td><code>S_IRUSR</code></td>\n    <td>File mode indicating readable by owner.</td>\n  </tr>\n  <tr>\n    <td><code>S_IWUSR</code></td>\n    <td>File mode indicating writable by owner.</td>\n  </tr>\n  <tr>\n    <td><code>S_IXUSR</code></td>\n    <td>File mode indicating executable by owner.</td>\n  </tr>\n  <tr>\n    <td><code>S_IRWXG</code></td>\n    <td>File mode indicating readable, writable, and executable by group.</td>\n  </tr>\n  <tr>\n    <td><code>S_IRGRP</code></td>\n    <td>File mode indicating readable by group.</td>\n  </tr>\n  <tr>\n    <td><code>S_IWGRP</code></td>\n    <td>File mode indicating writable by group.</td>\n  </tr>\n  <tr>\n    <td><code>S_IXGRP</code></td>\n    <td>File mode indicating executable by group.</td>\n  </tr>\n  <tr>\n    <td><code>S_IRWXO</code></td>\n    <td>File mode indicating readable, writable, and executable by others.</td>\n  </tr>\n  <tr>\n    <td><code>S_IROTH</code></td>\n    <td>File mode indicating readable by others.</td>\n  </tr>\n  <tr>\n    <td><code>S_IWOTH</code></td>\n    <td>File mode indicating writable by others.</td>\n  </tr>\n  <tr>\n    <td><code>S_IXOTH</code></td>\n    <td>File mode indicating executable by others.</td>\n  </tr>\n</table>\n\n",
              "type": "module",
              "displayName": "File Mode Constants"
            }
          ],
          "type": "module",
          "displayName": "FS Constants"
        },
        {
          "textRaw": "File System Flags",
          "name": "file_system_flags",
          "desc": "<p>The following flags are available wherever the <code>flag</code> option takes a\nstring:</p>\n<ul>\n<li><p><code>&#39;a&#39;</code> - Open file for appending.\nThe file is created if it does not exist.</p>\n</li>\n<li><p><code>&#39;ax&#39;</code> - Like <code>&#39;a&#39;</code> but fails if the path exists.</p>\n</li>\n<li><p><code>&#39;a+&#39;</code> - Open file for reading and appending.\nThe file is created if it does not exist.</p>\n</li>\n<li><p><code>&#39;ax+&#39;</code> - Like <code>&#39;a+&#39;</code> but fails if the path exists.</p>\n</li>\n<li><p><code>&#39;as&#39;</code> - Open file for appending in synchronous mode.\nThe file is created if it does not exist.</p>\n</li>\n<li><p><code>&#39;as+&#39;</code> - Open file for reading and appending in synchronous mode.\nThe file is created if it does not exist.</p>\n</li>\n<li><p><code>&#39;r&#39;</code> - Open file for reading.\nAn exception occurs if the file does not exist.</p>\n</li>\n<li><p><code>&#39;r+&#39;</code> - Open file for reading and writing.\nAn exception occurs if the file does not exist.</p>\n</li>\n<li><p><code>&#39;rs+&#39;</code> - Open file for reading and writing in synchronous mode. Instructs\nthe operating system to bypass the local file system cache.</p>\n<p>This is primarily useful for opening files on NFS mounts as it allows\nskipping the potentially stale local cache. It has a very real impact on\nI/O performance so using this flag is not recommended unless it is needed.</p>\n<p>Note that this doesn&#39;t turn <code>fs.open()</code> or <code>fsPromises.open()</code> into a\nsynchronous blocking call. If synchronous operation is desired, something\nlike <code>fs.openSync()</code> should be used.</p>\n</li>\n<li><p><code>&#39;w&#39;</code> - Open file for writing.\nThe file is created (if it does not exist) or truncated (if it exists).</p>\n</li>\n<li><p><code>&#39;wx&#39;</code> - Like <code>&#39;w&#39;</code> but fails if the path exists.</p>\n</li>\n<li><p><code>&#39;w+&#39;</code> - Open file for reading and writing.\nThe file is created (if it does not exist) or truncated (if it exists).</p>\n</li>\n<li><p><code>&#39;wx+&#39;</code> - Like <code>&#39;w+&#39;</code> but fails if the path exists.</p>\n</li>\n</ul>\n<p><code>flag</code> can also be a number as documented by open(2); commonly used constants\nare available from <code>fs.constants</code>. On Windows, flags are translated to\ntheir equivalent ones where applicable, e.g. <code>O_WRONLY</code> to <code>FILE_GENERIC_WRITE</code>,\nor <code>O_EXCL|O_CREAT</code> to <code>CREATE_NEW</code>, as accepted by <code>CreateFileW</code>.</p>\n<p>The exclusive flag <code>&#39;x&#39;</code> (<code>O_EXCL</code> flag in open(2)) ensures that path is newly\ncreated. On POSIX systems, path is considered to exist even if it is a symlink\nto a non-existent file. The exclusive flag may or may not work with network\nfile systems.</p>\n<p>On Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n<p>Modifying a file rather than replacing it may require a flags mode of <code>&#39;r+&#39;</code>\nrather than the default mode <code>&#39;w&#39;</code>.</p>\n<p>The behavior of some flags are platform-specific. As such, opening a directory\non macOS and Linux with the <code>&#39;a+&#39;</code> flag - see example below - will return an\nerror. In contrast, on Windows and FreeBSD, a file descriptor or a <code>FileHandle</code>\nwill be returned.</p>\n<pre><code class=\"lang-js\">// macOS and Linux\nfs.open(&#39;&lt;directory&gt;&#39;, &#39;a+&#39;, (err, fd) =&gt; {\n  // =&gt; [Error: EISDIR: illegal operation on a directory, open &lt;directory&gt;]\n});\n\n// Windows and FreeBSD\nfs.open(&#39;&lt;directory&gt;&#39;, &#39;a+&#39;, (err, fd) =&gt; {\n  // =&gt; null, &lt;fd&gt;\n});\n</code></pre>\n<p>On Windows, opening an existing hidden file using the <code>&#39;w&#39;</code> flag (either\nthrough <code>fs.open()</code> or <code>fs.writeFile()</code> or <code>fsPromises.open()</code>) will fail with\n<code>EPERM</code>. Existing hidden files can be opened for writing with the <code>&#39;r+&#39;</code> flag.</p>\n<p>A call to <code>fs.ftruncate()</code> or <code>fsPromises.ftruncate()</code> can be used to reset\nthe file contents.</p>\n<!-- [end-include:fs.md] -->\n<!-- [start-include:globals.md] -->\n",
          "type": "module",
          "displayName": "File System Flags"
        }
      ],
      "classes": [
        {
          "textRaw": "Class: fs.FSWatcher",
          "type": "class",
          "name": "fs.FSWatcher",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>A successful call to <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a> method will return a new <code>fs.FSWatcher</code>\nobject.</p>\n<p>All <code>fs.FSWatcher</code> objects are <a href=\"events.html\"><code>EventEmitter</code></a>&#39;s that will emit a <code>&#39;change&#39;</code>\nevent whenever a specific watched file is modified.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'change'",
              "type": "event",
              "name": "change",
              "meta": {
                "added": [
                  "v0.5.8"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted when something changes in a watched directory or file.\nSee more details in <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a>.</p>\n<p>The <code>filename</code> argument may not be provided depending on operating system\nsupport. If <code>filename</code> is provided, it will be provided as a <code>Buffer</code> if\n<code>fs.watch()</code> is called with its <code>encoding</code> option set to <code>&#39;buffer&#39;</code>, otherwise\n<code>filename</code> will be a UTF-8 string.</p>\n<pre><code class=\"lang-js\">// Example when handled through fs.watch() listener\nfs.watch(&#39;./tmp&#39;, { encoding: &#39;buffer&#39; }, (eventType, filename) =&gt; {\n  if (filename) {\n    console.log(filename);\n    // Prints: &lt;Buffer ...&gt;\n  }\n});\n</code></pre>\n"
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the watcher stops watching for changes.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "meta": {
                "added": [
                  "v0.5.8"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted when an error occurs while watching the file.</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "watcher.close()",
              "type": "method",
              "name": "close",
              "meta": {
                "added": [
                  "v0.5.8"
                ],
                "changes": []
              },
              "desc": "<p>Stop watching for changes on the given <code>fs.FSWatcher</code>. Once stopped, the\n<code>fs.FSWatcher</code> object is no longer usable.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Class: fs.ReadStream",
          "type": "class",
          "name": "fs.ReadStream",
          "meta": {
            "added": [
              "v0.1.93"
            ],
            "changes": []
          },
          "desc": "<p>A successful call to <code>fs.createReadStream()</code> will return a new <code>fs.ReadStream</code>\nobject.</p>\n<p>All <code>fs.ReadStream</code> objects are <a href=\"stream.html#stream_class_stream_readable\">Readable Streams</a>.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "meta": {
                "added": [
                  "v0.1.93"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the <code>fs.ReadStream</code>&#39;s underlying file descriptor has been closed.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'open'",
              "type": "event",
              "name": "open",
              "meta": {
                "added": [
                  "v0.1.93"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted when the <code>fs.ReadStream</code>&#39;s file descriptor has been opened.</p>\n"
            },
            {
              "textRaw": "Event: 'ready'",
              "type": "event",
              "name": "ready",
              "meta": {
                "added": [
                  "v9.11.0"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the <code>fs.ReadStream</code> is ready to be used.</p>\n<p>Fires immediately after <code>&#39;open&#39;</code>.</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "`bytesRead` {number} ",
              "type": "number",
              "name": "bytesRead",
              "meta": {
                "added": [
                  "v6.4.0"
                ],
                "changes": []
              },
              "desc": "<p>The number of bytes that have been read so far.</p>\n"
            },
            {
              "textRaw": "`path` {string|Buffer} ",
              "type": "string|Buffer",
              "name": "path",
              "meta": {
                "added": [
                  "v0.1.93"
                ],
                "changes": []
              },
              "desc": "<p>The path to the file the stream is reading from as specified in the first\nargument to <code>fs.createReadStream()</code>. If <code>path</code> is passed as a string, then\n<code>readStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then\n<code>readStream.path</code> will be a <code>Buffer</code>.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: fs.Stats",
          "type": "class",
          "name": "fs.Stats",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v8.1.0",
                "pr-url": "https://github.com/nodejs/node/pull/13173",
                "description": "Added times as numbers."
              }
            ]
          },
          "desc": "<p>A <code>fs.Stats</code> object provides information about a file.</p>\n<p>Objects returned from <a href=\"#fs_fs_stat_path_callback\"><code>fs.stat()</code></a>, <a href=\"#fs_fs_lstat_path_callback\"><code>fs.lstat()</code></a> and <a href=\"#fs_fs_fstat_fd_callback\"><code>fs.fstat()</code></a> and\ntheir synchronous counterparts are of this type.</p>\n<pre><code class=\"lang-console\">Stats {\n  dev: 2114,\n  ino: 48064969,\n  mode: 33188,\n  nlink: 1,\n  uid: 85,\n  gid: 100,\n  rdev: 0,\n  size: 527,\n  blksize: 4096,\n  blocks: 8,\n  atimeMs: 1318289051000.1,\n  mtimeMs: 1318289051000.1,\n  ctimeMs: 1318289051000.1,\n  birthtimeMs: 1318289051000.1,\n  atime: Mon, 10 Oct 2011 23:24:11 GMT,\n  mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n  ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n  birthtime: Mon, 10 Oct 2011 23:24:11 GMT }\n</code></pre>\n",
          "methods": [
            {
              "textRaw": "stats.isBlockDevice()",
              "type": "method",
              "name": "isBlockDevice",
              "meta": {
                "added": [
                  "v0.1.10"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a block device.</p>\n"
            },
            {
              "textRaw": "stats.isCharacterDevice()",
              "type": "method",
              "name": "isCharacterDevice",
              "meta": {
                "added": [
                  "v0.1.10"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a character device.</p>\n"
            },
            {
              "textRaw": "stats.isDirectory()",
              "type": "method",
              "name": "isDirectory",
              "meta": {
                "added": [
                  "v0.1.10"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a file system directory.</p>\n"
            },
            {
              "textRaw": "stats.isFIFO()",
              "type": "method",
              "name": "isFIFO",
              "meta": {
                "added": [
                  "v0.1.10"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a first-in-first-out (FIFO)\npipe.</p>\n"
            },
            {
              "textRaw": "stats.isFile()",
              "type": "method",
              "name": "isFile",
              "meta": {
                "added": [
                  "v0.1.10"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a regular file.</p>\n"
            },
            {
              "textRaw": "stats.isSocket()",
              "type": "method",
              "name": "isSocket",
              "meta": {
                "added": [
                  "v0.1.10"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a socket.</p>\n"
            },
            {
              "textRaw": "stats.isSymbolicLink()",
              "type": "method",
              "name": "isSymbolicLink",
              "meta": {
                "added": [
                  "v0.1.10"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns <code>true</code> if the <code>fs.Stats</code> object describes a symbolic link.</p>\n<p>This method is only valid when using <a href=\"#fs_fs_lstat_path_callback\"><code>fs.lstat()</code></a>.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`dev` {number} ",
              "type": "number",
              "name": "dev",
              "desc": "<p>The numeric identifier of the device containing the file.</p>\n"
            },
            {
              "textRaw": "`ino` {number} ",
              "type": "number",
              "name": "ino",
              "desc": "<p>The file system specific &quot;Inode&quot; number for the file.</p>\n"
            },
            {
              "textRaw": "`mode` {number} ",
              "type": "number",
              "name": "mode",
              "desc": "<p>A bit-field describing the file type and mode.</p>\n"
            },
            {
              "textRaw": "`nlink` {number} ",
              "type": "number",
              "name": "nlink",
              "desc": "<p>The number of hard-links that exist for the file.</p>\n"
            },
            {
              "textRaw": "`uid` {number} ",
              "type": "number",
              "name": "uid",
              "desc": "<p>The numeric user identifier of the user that owns the file (POSIX).</p>\n"
            },
            {
              "textRaw": "`gid` {number} ",
              "type": "number",
              "name": "gid",
              "desc": "<p>The numeric group identifier of the group that owns the file (POSIX).</p>\n"
            },
            {
              "textRaw": "`rdev` {number} ",
              "type": "number",
              "name": "rdev",
              "desc": "<p>A numeric device identifier if the file is considered &quot;special&quot;.</p>\n"
            },
            {
              "textRaw": "`size` {number} ",
              "type": "number",
              "name": "size",
              "desc": "<p>The size of the file in bytes.</p>\n"
            },
            {
              "textRaw": "`blksize` {number} ",
              "type": "number",
              "name": "blksize",
              "desc": "<p>The file system block size for i/o operations.</p>\n"
            },
            {
              "textRaw": "`blocks` {number} ",
              "type": "number",
              "name": "blocks",
              "desc": "<p>The number of blocks allocated for this file.</p>\n"
            },
            {
              "textRaw": "`atimeMs` {number} ",
              "type": "number",
              "name": "atimeMs",
              "meta": {
                "added": [
                  "v8.1.0"
                ],
                "changes": []
              },
              "desc": "<p>The timestamp indicating the last time this file was accessed expressed in\nmilliseconds since the POSIX Epoch.</p>\n"
            },
            {
              "textRaw": "`mtimeMs` {number} ",
              "type": "number",
              "name": "mtimeMs",
              "meta": {
                "added": [
                  "v8.1.0"
                ],
                "changes": []
              },
              "desc": "<p>The timestamp indicating the last time this file was modified expressed in\nmilliseconds since the POSIX Epoch.</p>\n"
            },
            {
              "textRaw": "`ctimeMs` {number} ",
              "type": "number",
              "name": "ctimeMs",
              "meta": {
                "added": [
                  "v8.1.0"
                ],
                "changes": []
              },
              "desc": "<p>The timestamp indicating the last time the file status was changed expressed\nin milliseconds since the POSIX Epoch.</p>\n"
            },
            {
              "textRaw": "`birthtimeMs` {number} ",
              "type": "number",
              "name": "birthtimeMs",
              "meta": {
                "added": [
                  "v8.1.0"
                ],
                "changes": []
              },
              "desc": "<p>The timestamp indicating the creation time of this file expressed in\nmilliseconds since the POSIX Epoch.</p>\n"
            },
            {
              "textRaw": "`atime` {Date} ",
              "type": "Date",
              "name": "atime",
              "meta": {
                "added": [
                  "v0.11.13"
                ],
                "changes": []
              },
              "desc": "<p>The timestamp indicating the last time this file was accessed.</p>\n"
            },
            {
              "textRaw": "`mtime` {Date} ",
              "type": "Date",
              "name": "mtime",
              "meta": {
                "added": [
                  "v0.11.13"
                ],
                "changes": []
              },
              "desc": "<p>The timestamp indicating the last time this file was modified.</p>\n"
            },
            {
              "textRaw": "`ctime` {Date} ",
              "type": "Date",
              "name": "ctime",
              "meta": {
                "added": [
                  "v0.11.13"
                ],
                "changes": []
              },
              "desc": "<p>The timestamp indicating the last time the file status was changed.</p>\n"
            },
            {
              "textRaw": "`birthtime` {Date} ",
              "type": "Date",
              "name": "birthtime",
              "meta": {
                "added": [
                  "v0.11.13"
                ],
                "changes": []
              },
              "desc": "<p>The timestamp indicating the creation time of this file.</p>\n"
            }
          ],
          "modules": [
            {
              "textRaw": "Stat Time Values",
              "name": "stat_time_values",
              "desc": "<p>The <code>atimeMs</code>, <code>mtimeMs</code>, <code>ctimeMs</code>, <code>birthtimeMs</code> properties are\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type\">numbers</a> that hold the corresponding times in milliseconds. Their\nprecision is platform specific. <code>atime</code>, <code>mtime</code>, <code>ctime</code>, and <code>birthtime</code> are\n<a href=\"https://developer.mozilla.org/en-US/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object alternate representations of the various times. The\n<code>Date</code> and number values are not connected. Assigning a new number value, or\nmutating the <code>Date</code> value, will not be reflected in the corresponding alternate\nrepresentation.</p>\n<p>The times in the stat object have the following semantics:</p>\n<ul>\n<li><code>atime</code> &quot;Access Time&quot; - Time when file data last accessed. Changed\nby the mknod(2), utimes(2), and read(2) system calls.</li>\n<li><code>mtime</code> &quot;Modified Time&quot; - Time when file data last modified.\nChanged by the mknod(2), utimes(2), and write(2) system calls.</li>\n<li><code>ctime</code> &quot;Change Time&quot; - Time when file status was last changed\n(inode data modification). Changed by the chmod(2), chown(2),\nlink(2), mknod(2), rename(2), unlink(2), utimes(2),\nread(2), and write(2) system calls.</li>\n<li><code>birthtime</code> &quot;Birth Time&quot; - Time of file creation. Set once when the\nfile is created. On filesystems where birthtime is not available,\nthis field may instead hold either the <code>ctime</code> or\n<code>1970-01-01T00:00Z</code> (ie, unix epoch timestamp <code>0</code>). Note that this\nvalue may be greater than <code>atime</code> or <code>mtime</code> in this case. On Darwin\nand other FreeBSD variants, also set if the <code>atime</code> is explicitly\nset to an earlier value than the current <code>birthtime</code> using the\nutimes(2) system call.</li>\n</ul>\n<p>Prior to Node.js v0.12, the <code>ctime</code> held the <code>birthtime</code> on Windows\nsystems. Note that as of v0.12, <code>ctime</code> is not &quot;creation time&quot;, and\non Unix systems, it never was.</p>\n",
              "type": "module",
              "displayName": "Stat Time Values"
            }
          ]
        },
        {
          "textRaw": "Class: fs.WriteStream",
          "type": "class",
          "name": "fs.WriteStream",
          "meta": {
            "added": [
              "v0.1.93"
            ],
            "changes": []
          },
          "desc": "<p><code>WriteStream</code> is a <a href=\"stream.html#stream_writable_streams\">Writable Stream</a>.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "meta": {
                "added": [
                  "v0.1.93"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the <code>WriteStream</code>&#39;s underlying file descriptor has been closed.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'open'",
              "type": "event",
              "name": "open",
              "meta": {
                "added": [
                  "v0.1.93"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted when the <code>WriteStream</code>&#39;s file is opened.</p>\n"
            },
            {
              "textRaw": "Event: 'ready'",
              "type": "event",
              "name": "ready",
              "meta": {
                "added": [
                  "v9.11.0"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the <code>fs.WriteStream</code> is ready to be used.</p>\n<p>Fires immediately after <code>&#39;open&#39;</code>.</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "writeStream.bytesWritten",
              "name": "bytesWritten",
              "meta": {
                "added": [
                  "v0.4.7"
                ],
                "changes": []
              },
              "desc": "<p>The number of bytes written so far. Does not include data that is still queued\nfor writing.</p>\n"
            },
            {
              "textRaw": "writeStream.path",
              "name": "path",
              "meta": {
                "added": [
                  "v0.1.93"
                ],
                "changes": []
              },
              "desc": "<p>The path to the file the stream is writing to as specified in the first\nargument to <code>fs.createWriteStream()</code>. If <code>path</code> is passed as a string, then\n<code>writeStream.path</code> will be a string. If <code>path</code> is passed as a <code>Buffer</code>, then\n<code>writeStream.path</code> will be a <code>Buffer</code>.</p>\n"
            }
          ]
        }
      ],
      "methods": [
        {
          "textRaw": "fs.access(path[, mode], callback)",
          "type": "method",
          "name": "access",
          "meta": {
            "added": [
              "v0.11.15"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v6.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/6534",
                "description": "The constants like `fs.R_OK`, etc which were present directly on `fs` were moved into `fs.constants` as a soft deprecation. Thus for Node.js `< v6.3.0` use `fs` to access those constants, or do something like `(fs.constants || fs).R_OK` to work with all versions."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`mode` {integer} **Default:** `fs.constants.F_OK` ",
                  "name": "mode",
                  "type": "integer",
                  "default": "`fs.constants.F_OK`",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Tests a user&#39;s permissions for the file or directory specified by <code>path</code>.\nThe <code>mode</code> argument is an optional integer that specifies the accessibility\nchecks to be performed. The following constants define the possible values of\n<code>mode</code>. It is possible to create a mask consisting of the bitwise OR of two or\nmore values (e.g. <code>fs.constants.W_OK | fs.constants.R_OK</code>).</p>\n<ul>\n<li><code>fs.constants.F_OK</code> - <code>path</code> is visible to the calling process. This is useful\nfor determining if a file exists, but says nothing about <code>rwx</code> permissions.\nDefault if no <code>mode</code> is specified.</li>\n<li><code>fs.constants.R_OK</code> - <code>path</code> can be read by the calling process.</li>\n<li><code>fs.constants.W_OK</code> - <code>path</code> can be written by the calling process.</li>\n<li><code>fs.constants.X_OK</code> - <code>path</code> can be executed by the calling process. This has\nno effect on Windows (will behave like <code>fs.constants.F_OK</code>).</li>\n</ul>\n<p>The final argument, <code>callback</code>, is a callback function that is invoked with\na possible error argument. If any of the accessibility checks fail, the error\nargument will be an <code>Error</code> object. The following examples check if\n<code>package.json</code> exists, and if it is readable or writable.</p>\n<pre><code class=\"lang-js\">const file = &#39;package.json&#39;;\n\n// Check if the file exists in the current directory.\nfs.access(file, fs.constants.F_OK, (err) =&gt; {\n  console.log(`${file} ${err ? &#39;does not exist&#39; : &#39;exists&#39;}`);\n});\n\n// Check if the file is readable.\nfs.access(file, fs.constants.R_OK, (err) =&gt; {\n  console.log(`${file} ${err ? &#39;is not readable&#39; : &#39;is readable&#39;}`);\n});\n\n// Check if the file is writable.\nfs.access(file, fs.constants.W_OK, (err) =&gt; {\n  console.log(`${file} ${err ? &#39;is not writable&#39; : &#39;is writable&#39;}`);\n});\n\n// Check if the file exists in the current directory, and if it is writable.\nfs.access(file, fs.constants.F_OK | fs.constants.W_OK, (err) =&gt; {\n  if (err) {\n    console.error(\n      `${file} ${err.code === &#39;ENOENT&#39; ? &#39;does not exist&#39; : &#39;is read-only&#39;}`);\n  } else {\n    console.log(`${file} exists, and it is writable`);\n  }\n});\n</code></pre>\n<p>Using <code>fs.access()</code> to check for the accessibility of a file before calling\n<code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended. Doing\nso introduces a race condition, since other processes may change the file&#39;s\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file is not accessible.</p>\n<p><strong>write (NOT RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.access(&#39;myfile&#39;, (err) =&gt; {\n  if (!err) {\n    console.error(&#39;myfile already exists&#39;);\n    return;\n  }\n\n  fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n    if (err) throw err;\n    writeMyData(fd);\n  });\n});\n</code></pre>\n<p><strong>write (RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &#39;EEXIST&#39;) {\n      console.error(&#39;myfile already exists&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  writeMyData(fd);\n});\n</code></pre>\n<p><strong>read (NOT RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.access(&#39;myfile&#39;, (err) =&gt; {\n  if (err) {\n    if (err.code === &#39;ENOENT&#39;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n    if (err) throw err;\n    readMyData(fd);\n  });\n});\n</code></pre>\n<p><strong>read (RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &#39;ENOENT&#39;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  readMyData(fd);\n});\n</code></pre>\n<p>The &quot;not recommended&quot; examples above check for accessibility and then use the\nfile; the &quot;recommended&quot; examples are better because they use the file directly\nand handle the error, if any.</p>\n<p>In general, check for the accessibility of a file only if the file will not be\nused directly, for example when its accessibility is a signal from another\nprocess.</p>\n"
        },
        {
          "textRaw": "fs.accessSync(path[, mode])",
          "type": "method",
          "name": "accessSync",
          "meta": {
            "added": [
              "v0.11.15"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`mode` {integer} **Default:** `fs.constants.F_OK` ",
                  "name": "mode",
                  "type": "integer",
                  "default": "`fs.constants.F_OK`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronously tests a user&#39;s permissions for the file or directory specified by\n<code>path</code>. The <code>mode</code> argument is an optional integer that specifies the\naccessibility checks to be performed. The following constants define the\npossible values of <code>mode</code>. It is possible to create a mask consisting of the\nbitwise OR of two or more values (e.g. <code>fs.constants.W_OK | fs.constants.R_OK</code>).</p>\n<ul>\n<li><code>fs.constants.F_OK</code> - <code>path</code> is visible to the calling process. This is useful\nfor determining if a file exists, but says nothing about <code>rwx</code> permissions.\nDefault if no <code>mode</code> is specified.</li>\n<li><code>fs.constants.R_OK</code> - <code>path</code> can be read by the calling process.</li>\n<li><code>fs.constants.W_OK</code> - <code>path</code> can be written by the calling process.</li>\n<li><code>fs.constants.X_OK</code> - <code>path</code> can be executed by the calling process. This has\nno effect on Windows (will behave like <code>fs.constants.F_OK</code>).</li>\n</ul>\n<p>If any of the accessibility checks fail, an <code>Error</code> will be thrown. Otherwise,\nthe method will return <code>undefined</code>.</p>\n<pre><code class=\"lang-js\">try {\n  fs.accessSync(&#39;etc/passwd&#39;, fs.constants.R_OK | fs.constants.W_OK);\n  console.log(&#39;can read/write&#39;);\n} catch (err) {\n  console.error(&#39;no access!&#39;);\n}\n</code></pre>\n"
        },
        {
          "textRaw": "fs.appendFile(path, data[, options], callback)",
          "type": "method",
          "name": "appendFile",
          "meta": {
            "added": [
              "v0.6.7"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7831",
                "description": "The passed `options` object will never be modified."
              },
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/3163",
                "description": "The `file` parameter can be a file descriptor now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL|number} filename or file descriptor ",
                  "name": "path",
                  "type": "string|Buffer|URL|number",
                  "desc": "filename or file descriptor"
                },
                {
                  "textRaw": "`data` {string|Buffer} ",
                  "name": "data",
                  "type": "string|Buffer"
                },
                {
                  "textRaw": "`options` {Object|string} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string|null} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string|null",
                      "default": "`'utf8'`"
                    },
                    {
                      "textRaw": "`mode` {integer} **Default:** `0o666` ",
                      "name": "mode",
                      "type": "integer",
                      "default": "`0o666`"
                    },
                    {
                      "textRaw": "`flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. ",
                      "name": "flag",
                      "type": "string",
                      "default": "`'a'`",
                      "desc": "See [support of file system `flags`][]."
                    }
                  ],
                  "name": "options",
                  "type": "Object|string",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "data"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronously append data to a file, creating the file if it does not yet\nexist. <code>data</code> can be a string or a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;The &quot;data to append&quot; was appended to file!&#39;);\n});\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.appendFile(&#39;message.txt&#39;, &#39;data to append&#39;, &#39;utf8&#39;, callback);\n</code></pre>\n<p>The <code>path</code> may be specified as a numeric file descriptor that has been opened\nfor appending (using <code>fs.open()</code> or <code>fs.openSync()</code>). The file descriptor will\nnot be closed automatically.</p>\n<pre><code class=\"lang-js\">fs.open(&#39;message.txt&#39;, &#39;a&#39;, (err, fd) =&gt; {\n  if (err) throw err;\n  fs.appendFile(fd, &#39;data to append&#39;, &#39;utf8&#39;, (err) =&gt; {\n    fs.close(fd, (err) =&gt; {\n      if (err) throw err;\n    });\n    if (err) throw err;\n  });\n});\n</code></pre>\n"
        },
        {
          "textRaw": "fs.appendFileSync(path, data[, options])",
          "type": "method",
          "name": "appendFileSync",
          "meta": {
            "added": [
              "v0.6.7"
            ],
            "changes": [
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7831",
                "description": "The passed `options` object will never be modified."
              },
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/3163",
                "description": "The `file` parameter can be a file descriptor now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL|number} filename or file descriptor ",
                  "name": "path",
                  "type": "string|Buffer|URL|number",
                  "desc": "filename or file descriptor"
                },
                {
                  "textRaw": "`data` {string|Buffer} ",
                  "name": "data",
                  "type": "string|Buffer"
                },
                {
                  "textRaw": "`options` {Object|string} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string|null} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string|null",
                      "default": "`'utf8'`"
                    },
                    {
                      "textRaw": "`mode` {integer} **Default:** `0o666` ",
                      "name": "mode",
                      "type": "integer",
                      "default": "`0o666`"
                    },
                    {
                      "textRaw": "`flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. ",
                      "name": "flag",
                      "type": "string",
                      "default": "`'a'`",
                      "desc": "See [support of file system `flags`][]."
                    }
                  ],
                  "name": "options",
                  "type": "Object|string",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "data"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronously append data to a file, creating the file if it does not yet\nexist. <code>data</code> can be a string or a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">try {\n  fs.appendFileSync(&#39;message.txt&#39;, &#39;data to append&#39;);\n  console.log(&#39;The &quot;data to append&quot; was appended to file!&#39;);\n} catch (err) {\n  /* Handle the error */\n}\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.appendFileSync(&#39;message.txt&#39;, &#39;data to append&#39;, &#39;utf8&#39;);\n</code></pre>\n<p>The <code>path</code> may be specified as a numeric file descriptor that has been opened\nfor appending (using <code>fs.open()</code> or <code>fs.openSync()</code>). The file descriptor will\nnot be closed automatically.</p>\n<pre><code class=\"lang-js\">let fd;\n\ntry {\n  fd = fs.openSync(&#39;message.txt&#39;, &#39;a&#39;);\n  fs.appendFileSync(fd, &#39;data to append&#39;, &#39;utf8&#39;);\n} catch (err) {\n  /* Handle the error */\n} finally {\n  if (fd !== undefined)\n    fs.closeSync(fd);\n}\n</code></pre>\n"
        },
        {
          "textRaw": "fs.chmod(path, mode, callback)",
          "type": "method",
          "name": "chmod",
          "meta": {
            "added": [
              "v0.1.30"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`mode` {integer} ",
                  "name": "mode",
                  "type": "integer"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronously changes the permissions of a file. No arguments other than a\npossible exception are given to the completion callback.</p>\n<p>See also: chmod(2).</p>\n",
          "modules": [
            {
              "textRaw": "File modes",
              "name": "file_modes",
              "desc": "<p>The <code>mode</code> argument used in both the <code>fs.chmod()</code> and <code>fs.chmodSync()</code>\nmethods is a numeric bitmask created using a logical OR of the following\nconstants:</p>\n<table>\n<thead>\n<tr>\n<th>Constant</th>\n<th>Octal</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>fs.constants.S_IRUSR</code></td>\n<td><code>0o400</code></td>\n<td>read by owner</td>\n</tr>\n<tr>\n<td><code>fs.constants.S_IWUSR</code></td>\n<td><code>0o200</code></td>\n<td>write by owner</td>\n</tr>\n<tr>\n<td><code>fs.constants.S_IXUSR</code></td>\n<td><code>0o100</code></td>\n<td>execute/search by owner</td>\n</tr>\n<tr>\n<td><code>fs.constants.S_IRGRP</code></td>\n<td><code>0o40</code></td>\n<td>read by group</td>\n</tr>\n<tr>\n<td><code>fs.constants.S_IWGRP</code></td>\n<td><code>0o20</code></td>\n<td>write by group</td>\n</tr>\n<tr>\n<td><code>fs.constants.S_IXGRP</code></td>\n<td><code>0o10</code></td>\n<td>execute/search by group</td>\n</tr>\n<tr>\n<td><code>fs.constants.S_IROTH</code></td>\n<td><code>0o4</code></td>\n<td>read by others</td>\n</tr>\n<tr>\n<td><code>fs.constants.S_IWOTH</code></td>\n<td><code>0o2</code></td>\n<td>write by others</td>\n</tr>\n<tr>\n<td><code>fs.constants.S_IXOTH</code></td>\n<td><code>0o1</code></td>\n<td>execute/search by others</td>\n</tr>\n</tbody>\n</table>\n<p>An easier method of constructing the <code>mode</code> is to use a sequence of three\noctal digits (e.g. <code>765</code>). The left-most digit (<code>7</code> in the example), specifies\nthe permissions for the file owner. The middle digit (<code>6</code> in the example),\nspecifies permissions for the group. The right-most digit (<code>5</code> in the example),\nspecifies the permissions for others.</p>\n<table>\n<thead>\n<tr>\n<th>Number</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>7</code></td>\n<td>read, write, and execute</td>\n</tr>\n<tr>\n<td><code>6</code></td>\n<td>read and write</td>\n</tr>\n<tr>\n<td><code>5</code></td>\n<td>read and execute</td>\n</tr>\n<tr>\n<td><code>4</code></td>\n<td>read only</td>\n</tr>\n<tr>\n<td><code>3</code></td>\n<td>write and execute</td>\n</tr>\n<tr>\n<td><code>2</code></td>\n<td>write only</td>\n</tr>\n<tr>\n<td><code>1</code></td>\n<td>execute only</td>\n</tr>\n<tr>\n<td><code>0</code></td>\n<td>no permission</td>\n</tr>\n</tbody>\n</table>\n<p>For example, the octal value <code>0o765</code> means:</p>\n<ul>\n<li>The owner may read, write and execute the file.</li>\n<li>The group may read and write the file.</li>\n<li>Others may read and execute the file.</li>\n</ul>\n",
              "type": "module",
              "displayName": "File modes"
            }
          ]
        },
        {
          "textRaw": "fs.chmodSync(path, mode)",
          "type": "method",
          "name": "chmodSync",
          "meta": {
            "added": [
              "v0.6.7"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`mode` {integer} ",
                  "name": "mode",
                  "type": "integer"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode"
                }
              ]
            }
          ],
          "desc": "<p>Synchronously changes the permissions of a file. Returns <code>undefined</code>.\nThis is the synchronous version of <a href=\"#fs_fs_chmod_path_mode_callback\"><code>fs.chmod()</code></a>.</p>\n<p>See also: chmod(2).</p>\n"
        },
        {
          "textRaw": "fs.chown(path, uid, gid, callback)",
          "type": "method",
          "name": "chown",
          "meta": {
            "added": [
              "v0.1.97"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`uid` {integer} ",
                  "name": "uid",
                  "type": "integer"
                },
                {
                  "textRaw": "`gid` {integer} ",
                  "name": "gid",
                  "type": "integer"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "uid"
                },
                {
                  "name": "gid"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronously changes owner and group of a file. No arguments other than a\npossible exception are given to the completion callback.</p>\n<p>See also: chown(2).</p>\n"
        },
        {
          "textRaw": "fs.chownSync(path, uid, gid)",
          "type": "method",
          "name": "chownSync",
          "meta": {
            "added": [
              "v0.1.97"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`uid` {integer} ",
                  "name": "uid",
                  "type": "integer"
                },
                {
                  "textRaw": "`gid` {integer} ",
                  "name": "gid",
                  "type": "integer"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "uid"
                },
                {
                  "name": "gid"
                }
              ]
            }
          ],
          "desc": "<p>Synchronously changes owner and group of a file. Returns <code>undefined</code>.\nThis is the synchronous version of <a href=\"#fs_fs_chown_path_uid_gid_callback\"><code>fs.chown()</code></a>.</p>\n<p>See also: chown(2).</p>\n"
        },
        {
          "textRaw": "fs.close(fd, callback)",
          "type": "method",
          "name": "close",
          "meta": {
            "added": [
              "v0.0.2"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous close(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n"
        },
        {
          "textRaw": "fs.closeSync(fd)",
          "type": "method",
          "name": "closeSync",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous close(2). Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.copyFile(src, dest[, flags], callback)",
          "type": "method",
          "name": "copyFile",
          "meta": {
            "added": [
              "v8.5.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`src` {string|Buffer|URL} source filename to copy ",
                  "name": "src",
                  "type": "string|Buffer|URL",
                  "desc": "source filename to copy"
                },
                {
                  "textRaw": "`dest` {string|Buffer|URL} destination filename of the copy operation ",
                  "name": "dest",
                  "type": "string|Buffer|URL",
                  "desc": "destination filename of the copy operation"
                },
                {
                  "textRaw": "`flags` {number} modifiers for copy operation. **Default:** `0`. ",
                  "name": "flags",
                  "type": "number",
                  "default": "`0`",
                  "desc": "modifiers for copy operation.",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "src"
                },
                {
                  "name": "dest"
                },
                {
                  "name": "flags",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it\nalready exists. No arguments other than a possible exception are given to the\ncallback function. Node.js makes no guarantees about the atomicity of the copy\noperation. If an error occurs after the destination file has been opened for\nwriting, Node.js will attempt to remove the destination.</p>\n<p><code>flags</code> is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n<code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>).</p>\n<ul>\n<li><code>fs.constants.COPYFILE_EXCL</code> - The copy operation will fail if <code>dest</code> already\nexists.</li>\n<li><code>fs.constants.COPYFILE_FICLONE</code> - The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used.</li>\n<li><code>fs.constants.COPYFILE_FICLONE_FORCE</code> - The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support copy-on-write,\nthen the operation will fail.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\n// destination.txt will be created or overwritten by default.\nfs.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;source.txt was copied to destination.txt&#39;);\n});\n</code></pre>\n<p>If the third argument is a number, then it specifies <code>flags</code>, as shown in the\nfollowing example.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst { COPYFILE_EXCL } = fs.constants;\n\n// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\nfs.copyFile(&#39;source.txt&#39;, &#39;destination.txt&#39;, COPYFILE_EXCL, callback);\n</code></pre>\n"
        },
        {
          "textRaw": "fs.copyFileSync(src, dest[, flags])",
          "type": "method",
          "name": "copyFileSync",
          "meta": {
            "added": [
              "v8.5.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`src` {string|Buffer|URL} source filename to copy ",
                  "name": "src",
                  "type": "string|Buffer|URL",
                  "desc": "source filename to copy"
                },
                {
                  "textRaw": "`dest` {string|Buffer|URL} destination filename of the copy operation ",
                  "name": "dest",
                  "type": "string|Buffer|URL",
                  "desc": "destination filename of the copy operation"
                },
                {
                  "textRaw": "`flags` {number} modifiers for copy operation. **Default:** `0`. ",
                  "name": "flags",
                  "type": "number",
                  "default": "`0`",
                  "desc": "modifiers for copy operation.",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "src"
                },
                {
                  "name": "dest"
                },
                {
                  "name": "flags",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronously copies <code>src</code> to <code>dest</code>. By default, <code>dest</code> is overwritten if it\nalready exists. Returns <code>undefined</code>. Node.js makes no guarantees about the\natomicity of the copy operation. If an error occurs after the destination file\nhas been opened for writing, Node.js will attempt to remove the destination.</p>\n<p><code>flags</code> is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n<code>fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE</code>).</p>\n<ul>\n<li><code>fs.constants.COPYFILE_EXCL</code> - The copy operation will fail if <code>dest</code> already\nexists.</li>\n<li><code>fs.constants.COPYFILE_FICLONE</code> - The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used.</li>\n<li><code>fs.constants.COPYFILE_FICLONE_FORCE</code> - The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support copy-on-write,\nthen the operation will fail.</li>\n</ul>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\n// destination.txt will be created or overwritten by default.\nfs.copyFileSync(&#39;source.txt&#39;, &#39;destination.txt&#39;);\nconsole.log(&#39;source.txt was copied to destination.txt&#39;);\n</code></pre>\n<p>If the third argument is a number, then it specifies <code>flags</code>, as shown in the\nfollowing example.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst { COPYFILE_EXCL } = fs.constants;\n\n// By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\nfs.copyFileSync(&#39;source.txt&#39;, &#39;destination.txt&#39;, COPYFILE_EXCL);\n</code></pre>\n"
        },
        {
          "textRaw": "fs.createReadStream(path[, options])",
          "type": "method",
          "name": "createReadStream",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7831",
                "description": "The passed `options` object will never be modified."
              },
              {
                "version": "v2.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/1845",
                "description": "The passed `options` object can be a string now."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {fs.ReadStream} See [Readable Streams][]. ",
                "name": "return",
                "type": "fs.ReadStream",
                "desc": "See [Readable Streams][]."
              },
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`options` {string|Object} ",
                  "options": [
                    {
                      "textRaw": "`flags` {string} See [support of file system `flags`][]. **Default:** `'r'`. ",
                      "name": "flags",
                      "type": "string",
                      "default": "`'r'`",
                      "desc": "See [support of file system `flags`][]."
                    },
                    {
                      "textRaw": "`encoding` {string} **Default:** `null` ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`null`"
                    },
                    {
                      "textRaw": "`fd` {integer} **Default:** `null` ",
                      "name": "fd",
                      "type": "integer",
                      "default": "`null`"
                    },
                    {
                      "textRaw": "`mode` {integer} **Default:** `0o666` ",
                      "name": "mode",
                      "type": "integer",
                      "default": "`0o666`"
                    },
                    {
                      "textRaw": "`autoClose` {boolean} **Default:** `true` ",
                      "name": "autoClose",
                      "type": "boolean",
                      "default": "`true`"
                    },
                    {
                      "textRaw": "`start` {integer} ",
                      "name": "start",
                      "type": "integer"
                    },
                    {
                      "textRaw": "`end` {integer} **Default:** `Infinity` ",
                      "name": "end",
                      "type": "integer",
                      "default": "`Infinity`"
                    },
                    {
                      "textRaw": "`highWaterMark` {integer} **Default:** `64 * 1024` ",
                      "name": "highWaterMark",
                      "type": "integer",
                      "default": "`64 * 1024`"
                    }
                  ],
                  "name": "options",
                  "type": "string|Object",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Unlike the 16 kb default <code>highWaterMark</code> for a readable stream, the stream\nreturned by this method has a default <code>highWaterMark</code> of 64 kb.</p>\n<p><code>options</code> can include <code>start</code> and <code>end</code> values to read a range of bytes from\nthe file instead of the entire file. Both <code>start</code> and <code>end</code> are inclusive and\nstart counting at 0. If <code>fd</code> is specified and <code>start</code> is omitted or <code>undefined</code>,\n<code>fs.createReadStream()</code> reads sequentially from the current file position.\nThe <code>encoding</code> can be any one of those accepted by <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>.</p>\n<p>If <code>fd</code> is specified, <code>ReadStream</code> will ignore the <code>path</code> argument and will use\nthe specified file descriptor. This means that no <code>&#39;open&#39;</code> event will be\nemitted. Note that <code>fd</code> should be blocking; non-blocking <code>fd</code>s should be passed\nto <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>.</p>\n<p>If <code>autoClose</code> is false, then the file descriptor won&#39;t be closed, even if\nthere&#39;s an error. It is the application&#39;s responsibility to close it and make\nsure there&#39;s no file descriptor leak. If <code>autoClose</code> is set to true (default\nbehavior), on <code>&#39;error&#39;</code> or <code>&#39;end&#39;</code> the file descriptor will be closed\nautomatically.</p>\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the\nfile was created.</p>\n<p>An example to read the last 10 bytes of a file which is 100 bytes long:</p>\n<pre><code class=\"lang-js\">fs.createReadStream(&#39;sample.txt&#39;, { start: 90, end: 99 });\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n"
        },
        {
          "textRaw": "fs.createWriteStream(path[, options])",
          "type": "method",
          "name": "createWriteStream",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7831",
                "description": "The passed `options` object will never be modified."
              },
              {
                "version": "v5.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/3679",
                "description": "The `autoClose` option is supported now."
              },
              {
                "version": "v2.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/1845",
                "description": "The passed `options` object can be a string now."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {fs.WriteStream} See [Writable Stream][]. ",
                "name": "return",
                "type": "fs.WriteStream",
                "desc": "See [Writable Stream][]."
              },
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`options` {string|Object} ",
                  "options": [
                    {
                      "textRaw": "`flags` {string} See [support of file system `flags`][]. **Default:** `'w'`. ",
                      "name": "flags",
                      "type": "string",
                      "default": "`'w'`",
                      "desc": "See [support of file system `flags`][]."
                    },
                    {
                      "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`"
                    },
                    {
                      "textRaw": "`fd` {integer} **Default:** `null` ",
                      "name": "fd",
                      "type": "integer",
                      "default": "`null`"
                    },
                    {
                      "textRaw": "`mode` {integer} **Default:** `0o666` ",
                      "name": "mode",
                      "type": "integer",
                      "default": "`0o666`"
                    },
                    {
                      "textRaw": "`autoClose` {boolean} **Default:** `true` ",
                      "name": "autoClose",
                      "type": "boolean",
                      "default": "`true`"
                    },
                    {
                      "textRaw": "`start` {integer} ",
                      "name": "start",
                      "type": "integer"
                    }
                  ],
                  "name": "options",
                  "type": "string|Object",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p><code>options</code> may also include a <code>start</code> option to allow writing data at\nsome position past the beginning of the file. Modifying a file rather\nthan replacing it may require a <code>flags</code> mode of <code>r+</code> rather than the\ndefault mode <code>w</code>. The <code>encoding</code> can be any one of those accepted by\n<a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>.</p>\n<p>If <code>autoClose</code> is set to true (default behavior) on <code>&#39;error&#39;</code> or <code>&#39;finish&#39;</code>\nthe file descriptor will be closed automatically. If <code>autoClose</code> is false,\nthen the file descriptor won&#39;t be closed, even if there&#39;s an error.\nIt is the application&#39;s responsibility to close it and make sure there&#39;s no\nfile descriptor leak.</p>\n<p>Like <a href=\"#fs_class_fs_readstream\"><code>ReadStream</code></a>, if <code>fd</code> is specified, <a href=\"#fs_class_fs_writestream\"><code>WriteStream</code></a> will ignore the\n<code>path</code> argument and will use the specified file descriptor. This means that no\n<code>&#39;open&#39;</code> event will be emitted. Note that <code>fd</code> should be blocking; non-blocking\n<code>fd</code>s should be passed to <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding.</p>\n"
        },
        {
          "textRaw": "fs.exists(path, callback)",
          "type": "method",
          "name": "exists",
          "meta": {
            "added": [
              "v0.0.2"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ],
            "deprecated": [
              "v1.0.0"
            ]
          },
          "stability": 0,
          "stabilityText": "Deprecated: Use [`fs.stat()`][] or [`fs.access()`][] instead.",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`exists` {boolean} ",
                      "name": "exists",
                      "type": "boolean"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Test whether or not the given path exists by checking with the file system.\nThen call the <code>callback</code> argument with either true or false. Example:</p>\n<pre><code class=\"lang-js\">fs.exists(&#39;/etc/passwd&#39;, (exists) =&gt; {\n  console.log(exists ? &#39;it\\&#39;s there&#39; : &#39;no passwd!&#39;);\n});\n</code></pre>\n<p><strong>Note that the parameter to this callback is not consistent with other\nNode.js callbacks.</strong> Normally, the first parameter to a Node.js callback is\nan <code>err</code> parameter, optionally followed by other parameters. The\n<code>fs.exists()</code> callback has only one boolean parameter. This is one reason\n<code>fs.access()</code> is recommended instead of <code>fs.exists()</code>.</p>\n<p>Using <code>fs.exists()</code> to check for the existence of a file before calling\n<code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended. Doing\nso introduces a race condition, since other processes may change the file&#39;s\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file does not exist.</p>\n<p><strong>write (NOT RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.exists(&#39;myfile&#39;, (exists) =&gt; {\n  if (exists) {\n    console.error(&#39;myfile already exists&#39;);\n  } else {\n    fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n      if (err) throw err;\n      writeMyData(fd);\n    });\n  }\n});\n</code></pre>\n<p><strong>write (RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.open(&#39;myfile&#39;, &#39;wx&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &#39;EEXIST&#39;) {\n      console.error(&#39;myfile already exists&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  writeMyData(fd);\n});\n</code></pre>\n<p><strong>read (NOT RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.exists(&#39;myfile&#39;, (exists) =&gt; {\n  if (exists) {\n    fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n      if (err) throw err;\n      readMyData(fd);\n    });\n  } else {\n    console.error(&#39;myfile does not exist&#39;);\n  }\n});\n</code></pre>\n<p><strong>read (RECOMMENDED)</strong></p>\n<pre><code class=\"lang-js\">fs.open(&#39;myfile&#39;, &#39;r&#39;, (err, fd) =&gt; {\n  if (err) {\n    if (err.code === &#39;ENOENT&#39;) {\n      console.error(&#39;myfile does not exist&#39;);\n      return;\n    }\n\n    throw err;\n  }\n\n  readMyData(fd);\n});\n</code></pre>\n<p>The &quot;not recommended&quot; examples above check for existence and then use the\nfile; the &quot;recommended&quot; examples are better because they use the file directly\nand handle the error, if any.</p>\n<p>In general, check for the existence of a file only if the file won’t be\nused directly, for example when its existence is a signal from another\nprocess.</p>\n"
        },
        {
          "textRaw": "fs.existsSync(path)",
          "type": "method",
          "name": "existsSync",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {boolean} ",
                "name": "return",
                "type": "boolean"
              },
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous version of <a href=\"fs.html#fs_fs_exists_path_callback\"><code>fs.exists()</code></a>.\nReturns <code>true</code> if the path exists, <code>false</code> otherwise.</p>\n<p>Note that <code>fs.exists()</code> is deprecated, but <code>fs.existsSync()</code> is not.\n(The <code>callback</code> parameter to <code>fs.exists()</code> accepts parameters that are\ninconsistent with other Node.js callbacks. <code>fs.existsSync()</code> does not use\na callback.)</p>\n"
        },
        {
          "textRaw": "fs.fchmod(fd, mode, callback)",
          "type": "method",
          "name": "fchmod",
          "meta": {
            "added": [
              "v0.4.7"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`mode` {integer} ",
                  "name": "mode",
                  "type": "integer"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "mode"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous fchmod(2). No arguments other than a possible exception\nare given to the completion callback.</p>\n"
        },
        {
          "textRaw": "fs.fchmodSync(fd, mode)",
          "type": "method",
          "name": "fchmodSync",
          "meta": {
            "added": [
              "v0.4.7"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`mode` {integer} ",
                  "name": "mode",
                  "type": "integer"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "mode"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous fchmod(2). Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.fchown(fd, uid, gid, callback)",
          "type": "method",
          "name": "fchown",
          "meta": {
            "added": [
              "v0.4.7"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`uid` {integer} ",
                  "name": "uid",
                  "type": "integer"
                },
                {
                  "textRaw": "`gid` {integer} ",
                  "name": "gid",
                  "type": "integer"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "uid"
                },
                {
                  "name": "gid"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous fchown(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n"
        },
        {
          "textRaw": "fs.fchownSync(fd, uid, gid)",
          "type": "method",
          "name": "fchownSync",
          "meta": {
            "added": [
              "v0.4.7"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`uid` {integer} ",
                  "name": "uid",
                  "type": "integer"
                },
                {
                  "textRaw": "`gid` {integer} ",
                  "name": "gid",
                  "type": "integer"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "uid"
                },
                {
                  "name": "gid"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous fchown(2). Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.fdatasync(fd, callback)",
          "type": "method",
          "name": "fdatasync",
          "meta": {
            "added": [
              "v0.1.96"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous fdatasync(2). No arguments other than a possible exception are\ngiven to the completion callback.</p>\n"
        },
        {
          "textRaw": "fs.fdatasyncSync(fd)",
          "type": "method",
          "name": "fdatasyncSync",
          "meta": {
            "added": [
              "v0.1.96"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous fdatasync(2). Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.fstat(fd, callback)",
          "type": "method",
          "name": "fstat",
          "meta": {
            "added": [
              "v0.1.95"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`stats` {fs.Stats} ",
                      "name": "stats",
                      "type": "fs.Stats"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous fstat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is an <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object. <code>fstat()</code> is identical to <a href=\"fs.html#fs_fs_stat_path_callback\"><code>stat()</code></a>,\nexcept that the file to be stat-ed is specified by the file descriptor <code>fd</code>.</p>\n"
        },
        {
          "textRaw": "fs.fstatSync(fd)",
          "type": "method",
          "name": "fstatSync",
          "meta": {
            "added": [
              "v0.1.95"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {fs.Stats} ",
                "name": "return",
                "type": "fs.Stats"
              },
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous fstat(2).</p>\n"
        },
        {
          "textRaw": "fs.fsync(fd, callback)",
          "type": "method",
          "name": "fsync",
          "meta": {
            "added": [
              "v0.1.96"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous fsync(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n"
        },
        {
          "textRaw": "fs.fsyncSync(fd)",
          "type": "method",
          "name": "fsyncSync",
          "meta": {
            "added": [
              "v0.1.96"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous fsync(2). Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.ftruncate(fd[, len], callback)",
          "type": "method",
          "name": "ftruncate",
          "meta": {
            "added": [
              "v0.8.6"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`len` {integer} **Default:** `0` ",
                  "name": "len",
                  "type": "integer",
                  "default": "`0`",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "len",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous ftruncate(2). No arguments other than a possible exception are\ngiven to the completion callback.</p>\n<p>If the file referred to by the file descriptor was larger than <code>len</code> bytes, only\nthe first <code>len</code> bytes will be retained in the file.</p>\n<p>For example, the following program retains only the first four bytes of the\nfile:</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync(&#39;temp.txt&#39;, &#39;r+&#39;);\n\n// truncate the file to first four bytes\nfs.ftruncate(fd, 4, (err) =&gt; {\n  assert.ifError(err);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n});\n// Prints: Node\n</code></pre>\n<p>If the file previously was shorter than <code>len</code> bytes, it is extended, and the\nextended part is filled with null bytes (<code>&#39;\\0&#39;</code>). For example,</p>\n<pre><code class=\"lang-js\">console.log(fs.readFileSync(&#39;temp.txt&#39;, &#39;utf8&#39;));\n// Prints: Node.js\n\n// get the file descriptor of the file to be truncated\nconst fd = fs.openSync(&#39;temp.txt&#39;, &#39;r+&#39;);\n\n// truncate the file to 10 bytes, whereas the actual size is 7 bytes\nfs.ftruncate(fd, 10, (err) =&gt; {\n  assert.ifError(err);\n  console.log(fs.readFileSync(&#39;temp.txt&#39;));\n});\n// Prints: &lt;Buffer 4e 6f 64 65 2e 6a 73 00 00 00&gt;\n// (&#39;Node.js\\0\\0\\0&#39; in UTF8)\n</code></pre>\n<p>The last three bytes are null bytes (<code>&#39;\\0&#39;</code>), to compensate the over-truncation.</p>\n"
        },
        {
          "textRaw": "fs.ftruncateSync(fd[, len])",
          "type": "method",
          "name": "ftruncateSync",
          "meta": {
            "added": [
              "v0.8.6"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`len` {integer} **Default:** `0` ",
                  "name": "len",
                  "type": "integer",
                  "default": "`0`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "len",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronous ftruncate(2). Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.futimes(fd, atime, mtime, callback)",
          "type": "method",
          "name": "futimes",
          "meta": {
            "added": [
              "v0.4.2"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              },
              {
                "version": "v4.1.0",
                "pr-url": "https://github.com/nodejs/node/pull/2387",
                "description": "Numeric strings, `NaN` and `Infinity` are now allowed time specifiers."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`atime` {number|string|Date} ",
                  "name": "atime",
                  "type": "number|string|Date"
                },
                {
                  "textRaw": "`mtime` {number|string|Date} ",
                  "name": "mtime",
                  "type": "number|string|Date"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "atime"
                },
                {
                  "name": "mtime"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Change the file system timestamps of the object referenced by the supplied file\ndescriptor. See <a href=\"#fs_fs_utimes_path_atime_mtime_callback\"><code>fs.utimes()</code></a>.</p>\n<p>This function does not work on AIX versions before 7.1, it will return the\nerror <code>UV_ENOSYS</code>.</p>\n"
        },
        {
          "textRaw": "fs.futimesSync(fd, atime, mtime)",
          "type": "method",
          "name": "futimesSync",
          "meta": {
            "added": [
              "v0.4.2"
            ],
            "changes": [
              {
                "version": "v4.1.0",
                "pr-url": "https://github.com/nodejs/node/pull/2387",
                "description": "Numeric strings, `NaN` and `Infinity` are now allowed time specifiers."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`atime` {integer} ",
                  "name": "atime",
                  "type": "integer"
                },
                {
                  "textRaw": "`mtime` {integer} ",
                  "name": "mtime",
                  "type": "integer"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "atime"
                },
                {
                  "name": "mtime"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous version of <a href=\"#fs_fs_futimes_fd_atime_mtime_callback\"><code>fs.futimes()</code></a>. Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.lchmod(path, mode, callback)",
          "type": "method",
          "name": "lchmod",
          "meta": {
            "deprecated": [
              "v0.4.7"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`mode` {integer} ",
                  "name": "mode",
                  "type": "integer"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous lchmod(2). No arguments other than a possible exception\nare given to the completion callback.</p>\n<p>Only available on macOS.</p>\n"
        },
        {
          "textRaw": "fs.lchmodSync(path, mode)",
          "type": "method",
          "name": "lchmodSync",
          "meta": {
            "deprecated": [
              "v0.4.7"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`mode` {integer} ",
                  "name": "mode",
                  "type": "integer"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous lchmod(2). Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.lchown(path, uid, gid, callback)",
          "type": "method",
          "name": "lchown",
          "meta": {
            "deprecated": [
              "v0.4.7"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`uid` {integer} ",
                  "name": "uid",
                  "type": "integer"
                },
                {
                  "textRaw": "`gid` {integer} ",
                  "name": "gid",
                  "type": "integer"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "uid"
                },
                {
                  "name": "gid"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous lchown(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n"
        },
        {
          "textRaw": "fs.lchownSync(path, uid, gid)",
          "type": "method",
          "name": "lchownSync",
          "meta": {
            "deprecated": [
              "v0.4.7"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`uid` {integer} ",
                  "name": "uid",
                  "type": "integer"
                },
                {
                  "textRaw": "`gid` {integer} ",
                  "name": "gid",
                  "type": "integer"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "uid"
                },
                {
                  "name": "gid"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous lchown(2). Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.link(existingPath, newPath, callback)",
          "type": "method",
          "name": "link",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `existingPath` and `newPath` parameters can be WHATWG `URL` objects using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`existingPath` {string|Buffer|URL} ",
                  "name": "existingPath",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`newPath` {string|Buffer|URL} ",
                  "name": "newPath",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "existingPath"
                },
                {
                  "name": "newPath"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous link(2). No arguments other than a possible exception are given to\nthe completion callback.</p>\n"
        },
        {
          "textRaw": "fs.linkSync(existingPath, newPath)",
          "type": "method",
          "name": "linkSync",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `existingPath` and `newPath` parameters can be WHATWG `URL` objects using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`existingPath` {string|Buffer|URL} ",
                  "name": "existingPath",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`newPath` {string|Buffer|URL} ",
                  "name": "newPath",
                  "type": "string|Buffer|URL"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "existingPath"
                },
                {
                  "name": "newPath"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous link(2). Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.lstat(path, callback)",
          "type": "method",
          "name": "lstat",
          "meta": {
            "added": [
              "v0.1.30"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`stats` {fs.Stats} ",
                      "name": "stats",
                      "type": "fs.Stats"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous lstat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is a <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object. <code>lstat()</code> is identical to <code>stat()</code>,\nexcept that if <code>path</code> is a symbolic link, then the link itself is stat-ed,\nnot the file that it refers to.</p>\n"
        },
        {
          "textRaw": "fs.lstatSync(path)",
          "type": "method",
          "name": "lstatSync",
          "meta": {
            "added": [
              "v0.1.30"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {fs.Stats} ",
                "name": "return",
                "type": "fs.Stats"
              },
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous lstat(2).</p>\n"
        },
        {
          "textRaw": "fs.mkdir(path[, mode], callback)",
          "type": "method",
          "name": "mkdir",
          "meta": {
            "added": [
              "v0.1.8"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`mode` {integer} **Default:** `0o777` ",
                  "name": "mode",
                  "type": "integer",
                  "default": "`0o777`",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronously creates a directory. No arguments other than a possible exception\nare given to the completion callback.</p>\n<p>See also: mkdir(2).</p>\n"
        },
        {
          "textRaw": "fs.mkdirSync(path[, mode])",
          "type": "method",
          "name": "mkdirSync",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`mode` {integer} **Default:** `0o777` ",
                  "name": "mode",
                  "type": "integer",
                  "default": "`0o777`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "mode",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronously creates a directory. Returns <code>undefined</code>.\nThis is the synchronous version of <a href=\"#fs_fs_mkdir_path_mode_callback\"><code>fs.mkdir()</code></a>.</p>\n<p>See also: mkdir(2).</p>\n"
        },
        {
          "textRaw": "fs.mkdtemp(prefix[, options], callback)",
          "type": "method",
          "name": "mkdtemp",
          "meta": {
            "added": [
              "v5.10.0"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              },
              {
                "version": "v6.2.1",
                "pr-url": "https://github.com/nodejs/node/pull/6828",
                "description": "The `callback` parameter is optional now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`prefix` {string} ",
                  "name": "prefix",
                  "type": "string"
                },
                {
                  "textRaw": "`options` {string|Object} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`"
                    }
                  ],
                  "name": "options",
                  "type": "string|Object",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`folder` {string} ",
                      "name": "folder",
                      "type": "string"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "prefix"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Creates a unique temporary directory.</p>\n<p>Generates six random characters to be appended behind a required\n<code>prefix</code> to create a unique temporary directory.</p>\n<p>The created folder path is passed as a string to the callback&#39;s second\nparameter.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use.</p>\n<pre><code class=\"lang-js\">fs.mkdtemp(path.join(os.tmpdir(), &#39;foo-&#39;), (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Prints: /tmp/foo-itXde2 or C:\\Users\\...\\AppData\\Local\\Temp\\foo-itXde2\n});\n</code></pre>\n<p>The <code>fs.mkdtemp()</code> method will append the six randomly selected characters\ndirectly to the <code>prefix</code> string. For instance, given a directory <code>/tmp</code>, if the\nintention is to create a temporary directory <em>within</em> <code>/tmp</code>, the <code>prefix</code>\nmust end with a trailing platform-specific path separator\n(<code>require(&#39;path&#39;).sep</code>).</p>\n<pre><code class=\"lang-js\">// The parent directory for the new temporary directory\nconst tmpDir = os.tmpdir();\n\n// This method is *INCORRECT*:\nfs.mkdtemp(tmpDir, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmpabc123`.\n  // Note that a new temporary directory is created\n  // at the file system root rather than *within*\n  // the /tmp directory.\n});\n\n// This method is *CORRECT*:\nconst { sep } = require(&#39;path&#39;);\nfs.mkdtemp(`${tmpDir}${sep}`, (err, folder) =&gt; {\n  if (err) throw err;\n  console.log(folder);\n  // Will print something similar to `/tmp/abc123`.\n  // A new temporary directory is created within\n  // the /tmp directory.\n});\n</code></pre>\n"
        },
        {
          "textRaw": "fs.mkdtempSync(prefix[, options])",
          "type": "method",
          "name": "mkdtempSync",
          "meta": {
            "added": [
              "v5.10.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": [
                {
                  "textRaw": "`prefix` {string} ",
                  "name": "prefix",
                  "type": "string"
                },
                {
                  "textRaw": "`options` {string|Object} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`"
                    }
                  ],
                  "name": "options",
                  "type": "string|Object",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "prefix"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The synchronous version of <a href=\"#fs_fs_mkdtemp_prefix_options_callback\"><code>fs.mkdtemp()</code></a>. Returns the created\nfolder path.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use.</p>\n"
        },
        {
          "textRaw": "fs.open(path, flags[, mode], callback)",
          "type": "method",
          "name": "open",
          "meta": {
            "added": [
              "v0.0.2"
            ],
            "changes": [
              {
                "version": "v9.9.0",
                "pr-url": "https://github.com/nodejs/node/pull/18801",
                "description": "The `as` and `as+` modes are supported now."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`flags` {string|number} See [support of file system `flags`][]. ",
                  "name": "flags",
                  "type": "string|number",
                  "desc": "See [support of file system `flags`][]."
                },
                {
                  "textRaw": "`mode` {integer} **Default:** `0o666` (readable and writable) ",
                  "name": "mode",
                  "type": "integer",
                  "default": "`0o666` (readable and writable)",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`fd` {integer} ",
                      "name": "fd",
                      "type": "integer"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "flags"
                },
                {
                  "name": "mode",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous file open. See open(2).</p>\n<p><code>mode</code> sets the file mode (permission and sticky bits), but only if the file was\ncreated.</p>\n<p>The callback gets two arguments <code>(err, fd)</code>.</p>\n<p>Some characters (<code>&lt; &gt; : &quot; / \\ | ? *</code>) are reserved under Windows as documented\nby <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx\">Naming Files, Paths, and Namespaces</a>. Under NTFS, if the filename contains\na colon, Node.js will open a file system stream, as described by\n<a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/bb540537.aspx\">this MSDN page</a>.</p>\n<p>Functions based on <code>fs.open()</code> exhibit this behavior as well. eg.\n<code>fs.writeFile()</code>, <code>fs.readFile()</code>, etc.</p>\n"
        },
        {
          "textRaw": "fs.openSync(path, flags[, mode])",
          "type": "method",
          "name": "openSync",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {number} ",
                "name": "return",
                "type": "number"
              },
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`flags` {string|number} See [support of file system `flags`][]. ",
                  "name": "flags",
                  "type": "string|number",
                  "desc": "See [support of file system `flags`][]."
                },
                {
                  "textRaw": "`mode` {integer} **Default:** `0o666` ",
                  "name": "mode",
                  "type": "integer",
                  "default": "`0o666`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "flags"
                },
                {
                  "name": "mode",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronous version of <a href=\"#fs_fs_open_path_flags_mode_callback\"><code>fs.open()</code></a>. Returns an integer representing the file\ndescriptor.</p>\n"
        },
        {
          "textRaw": "fs.read(fd, buffer, offset, length, position, callback)",
          "type": "method",
          "name": "read",
          "meta": {
            "added": [
              "v0.0.2"
            ],
            "changes": [
              {
                "version": "v7.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/10382",
                "description": "The `buffer` parameter can now be a `Uint8Array`."
              },
              {
                "version": "v6.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/4518",
                "description": "The `length` parameter can now be `0`."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`buffer` {Buffer|Uint8Array} ",
                  "name": "buffer",
                  "type": "Buffer|Uint8Array"
                },
                {
                  "textRaw": "`offset` {integer} ",
                  "name": "offset",
                  "type": "integer"
                },
                {
                  "textRaw": "`length` {integer} ",
                  "name": "length",
                  "type": "integer"
                },
                {
                  "textRaw": "`position` {integer} ",
                  "name": "position",
                  "type": "integer"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`bytesRead` {integer} ",
                      "name": "bytesRead",
                      "type": "integer"
                    },
                    {
                      "textRaw": "`buffer` {Buffer} ",
                      "name": "buffer",
                      "type": "Buffer"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "buffer"
                },
                {
                  "name": "offset"
                },
                {
                  "name": "length"
                },
                {
                  "name": "position"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Read data from the file specified by <code>fd</code>.</p>\n<p><code>buffer</code> is the buffer that the data will be written to.</p>\n<p><code>offset</code> is the offset in the buffer to start writing at.</p>\n<p><code>length</code> is an integer specifying the number of bytes to read.</p>\n<p><code>position</code> is an argument specifying where to begin reading from in the file.\nIf <code>position</code> is <code>null</code>, data will be read from the current file position,\nand the file position will be updated.\nIf <code>position</code> is an integer, the file position will remain unchanged.</p>\n<p>The callback is given the three arguments, <code>(err, bytesRead, buffer)</code>.</p>\n<p>If this method is invoked as its <a href=\"#util_util_promisify_original\"><code>util.promisify()</code></a>ed version, it returns\na <code>Promise</code> for an <code>Object</code> with <code>bytesRead</code> and <code>buffer</code> properties.</p>\n"
        },
        {
          "textRaw": "fs.readdir(path[, options], callback)",
          "type": "method",
          "name": "readdir",
          "meta": {
            "added": [
              "v0.1.8"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              },
              {
                "version": "v6.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/5616",
                "description": "The `options` parameter was added."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`options` {string|Object} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`"
                    }
                  ],
                  "name": "options",
                  "type": "string|Object",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`files` {string[]|Buffer[]} ",
                      "name": "files",
                      "type": "string[]|Buffer[]"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous readdir(3). Reads the contents of a directory.\nThe callback gets two arguments <code>(err, files)</code> where <code>files</code> is an array of\nthe names of the files in the directory excluding <code>&#39;.&#39;</code> and <code>&#39;..&#39;</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe filenames passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe filenames returned will be passed as <code>Buffer</code> objects.</p>\n"
        },
        {
          "textRaw": "fs.readdirSync(path[, options])",
          "type": "method",
          "name": "readdirSync",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string[]} An array of filenames excluding `'.'` and `'..'`. ",
                "name": "return",
                "type": "string[]",
                "desc": "An array of filenames excluding `'.'` and `'..'`."
              },
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`options` {string|Object} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`"
                    }
                  ],
                  "name": "options",
                  "type": "string|Object",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronous readdir(3).</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe filenames passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe filenames returned will be passed as <code>Buffer</code> objects.</p>\n"
        },
        {
          "textRaw": "fs.readFile(path[, options], callback)",
          "type": "method",
          "name": "readFile",
          "meta": {
            "added": [
              "v0.1.29"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              },
              {
                "version": "v5.1.0",
                "pr-url": "https://github.com/nodejs/node/pull/3740",
                "description": "The `callback` will always be called with `null` as the `error` parameter in case of success."
              },
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/3163",
                "description": "The `path` parameter can be a file descriptor now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL|integer} filename or file descriptor ",
                  "name": "path",
                  "type": "string|Buffer|URL|integer",
                  "desc": "filename or file descriptor"
                },
                {
                  "textRaw": "`options` {Object|string} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string|null} **Default:** `null` ",
                      "name": "encoding",
                      "type": "string|null",
                      "default": "`null`"
                    },
                    {
                      "textRaw": "`flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. ",
                      "name": "flag",
                      "type": "string",
                      "default": "`'r'`",
                      "desc": "See [support of file system `flags`][]."
                    }
                  ],
                  "name": "options",
                  "type": "Object|string",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`data` {string|Buffer} ",
                      "name": "data",
                      "type": "string|Buffer"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronously reads the entire contents of a file. Example:</p>\n<pre><code class=\"lang-js\">fs.readFile(&#39;/etc/passwd&#39;, (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n</code></pre>\n<p>The callback is passed two arguments <code>(err, data)</code>, where <code>data</code> is the\ncontents of the file.</p>\n<p>If no encoding is specified, then the raw buffer is returned.</p>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.readFile(&#39;/etc/passwd&#39;, &#39;utf8&#39;, callback);\n</code></pre>\n<p>When the path is a directory, the behavior of <code>fs.readFile()</code> and\n<a href=\"#fs_fs_readfilesync_path_options\"><code>fs.readFileSync()</code></a> is platform-specific. On macOS, Linux, and Windows, an\nerror will be returned. On FreeBSD, a representation of the directory&#39;s contents\nwill be returned.</p>\n<pre><code class=\"lang-js\">// macOS, Linux, and Windows\nfs.readFile(&#39;&lt;directory&gt;&#39;, (err, data) =&gt; {\n  // =&gt; [Error: EISDIR: illegal operation on a directory, read &lt;directory&gt;]\n});\n\n//  FreeBSD\nfs.readFile(&#39;&lt;directory&gt;&#39;, (err, data) =&gt; {\n  // =&gt; null, &lt;data&gt;\n});\n</code></pre>\n<p>Any specified file descriptor has to support reading.</p>\n<p>If a file descriptor is specified as the <code>path</code>, it will not be closed\nautomatically.</p>\n<p>The <code>fs.readFile()</code> function buffers the entire file. To minimize memory costs,\nwhen possible prefer streaming via <code>fs.createReadStream()</code>.</p>\n"
        },
        {
          "textRaw": "fs.readFileSync(path[, options])",
          "type": "method",
          "name": "readFileSync",
          "meta": {
            "added": [
              "v0.1.8"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/3163",
                "description": "The `path` parameter can be a file descriptor now."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string|Buffer} ",
                "name": "return",
                "type": "string|Buffer"
              },
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL|integer} filename or file descriptor ",
                  "name": "path",
                  "type": "string|Buffer|URL|integer",
                  "desc": "filename or file descriptor"
                },
                {
                  "textRaw": "`options` {Object|string} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string|null} **Default:** `null` ",
                      "name": "encoding",
                      "type": "string|null",
                      "default": "`null`"
                    },
                    {
                      "textRaw": "`flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. ",
                      "name": "flag",
                      "type": "string",
                      "default": "`'r'`",
                      "desc": "See [support of file system `flags`][]."
                    }
                  ],
                  "name": "options",
                  "type": "Object|string",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronous version of <a href=\"#fs_fs_readfile_path_options_callback\"><code>fs.readFile()</code></a>. Returns the contents of the <code>path</code>.</p>\n<p>If the <code>encoding</code> option is specified then this function returns a\nstring. Otherwise it returns a buffer.</p>\n<p>Similar to <a href=\"#fs_fs_readfile_path_options_callback\"><code>fs.readFile()</code></a>, when the path is a directory, the behavior of\n<code>fs.readFileSync()</code> is platform-specific.</p>\n<pre><code class=\"lang-js\">// macOS, Linux, and Windows\nfs.readFileSync(&#39;&lt;directory&gt;&#39;);\n// =&gt; [Error: EISDIR: illegal operation on a directory, read &lt;directory&gt;]\n\n//  FreeBSD\nfs.readFileSync(&#39;&lt;directory&gt;&#39;); // =&gt; null, &lt;data&gt;\n</code></pre>\n"
        },
        {
          "textRaw": "fs.readlink(path[, options], callback)",
          "type": "method",
          "name": "readlink",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`options` {string|Object} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`"
                    }
                  ],
                  "name": "options",
                  "type": "string|Object",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`linkString` {string|Buffer} ",
                      "name": "linkString",
                      "type": "string|Buffer"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous readlink(2). The callback gets two arguments <code>(err,\nlinkString)</code>.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe link path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe link path returned will be passed as a <code>Buffer</code> object.</p>\n"
        },
        {
          "textRaw": "fs.readlinkSync(path[, options])",
          "type": "method",
          "name": "readlinkSync",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string|Buffer} ",
                "name": "return",
                "type": "string|Buffer"
              },
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`options` {string|Object} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`"
                    }
                  ],
                  "name": "options",
                  "type": "string|Object",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronous readlink(2). Returns the symbolic link&#39;s string value.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe link path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe link path returned will be passed as a <code>Buffer</code> object.</p>\n"
        },
        {
          "textRaw": "fs.readSync(fd, buffer, offset, length, position)",
          "type": "method",
          "name": "readSync",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v6.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/4518",
                "description": "The `length` parameter can now be `0`."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {number} ",
                "name": "return",
                "type": "number"
              },
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`buffer` {Buffer|Uint8Array} ",
                  "name": "buffer",
                  "type": "Buffer|Uint8Array"
                },
                {
                  "textRaw": "`offset` {integer} ",
                  "name": "offset",
                  "type": "integer"
                },
                {
                  "textRaw": "`length` {integer} ",
                  "name": "length",
                  "type": "integer"
                },
                {
                  "textRaw": "`position` {integer} ",
                  "name": "position",
                  "type": "integer"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "buffer"
                },
                {
                  "name": "offset"
                },
                {
                  "name": "length"
                },
                {
                  "name": "position"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous version of <a href=\"#fs_fs_read_fd_buffer_offset_length_position_callback\"><code>fs.read()</code></a>. Returns the number of <code>bytesRead</code>.</p>\n"
        },
        {
          "textRaw": "fs.realpath(path[, options], callback)",
          "type": "method",
          "name": "realpath",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/13028",
                "description": "Pipe/Socket resolve support was added."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              },
              {
                "version": "v6.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/7899",
                "description": "Calling `realpath` now works again for various edge cases on Windows."
              },
              {
                "version": "v6.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/3594",
                "description": "The `cache` parameter was removed."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`options` {string|Object} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`"
                    }
                  ],
                  "name": "options",
                  "type": "string|Object",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`resolvedPath` {string|Buffer} ",
                      "name": "resolvedPath",
                      "type": "string|Buffer"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronously computes the canonical pathname by resolving <code>.</code>, <code>..</code> and\nsymbolic links.</p>\n<p>Note that &quot;canonical&quot; does not mean &quot;unique&quot;: hard links and bind mounts can\nexpose a file system entity through many pathnames.</p>\n<p>This function behaves like realpath(3), with some exceptions:</p>\n<ol>\n<li><p>No case conversion is performed on case-insensitive file systems.</p>\n</li>\n<li><p>The maximum number of symbolic links is platform-independent and generally\n(much) higher than what the native realpath(3) implementation supports.</p>\n</li>\n</ol>\n<p>The <code>callback</code> gets two arguments <code>(err, resolvedPath)</code>. May use <code>process.cwd</code>\nto resolve relative paths.</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe path returned will be passed as a <code>Buffer</code> object.</p>\n<p>If <code>path</code> resolves to a socket or a pipe, the function will return a system\ndependent name for that object.</p>\n"
        },
        {
          "textRaw": "fs.realpath.native(path[, options], callback)",
          "type": "method",
          "name": "native",
          "meta": {
            "added": [
              "v9.2.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`options` {string|Object} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`"
                    }
                  ],
                  "name": "options",
                  "type": "string|Object",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`resolvedPath` {string|Buffer} ",
                      "name": "resolvedPath",
                      "type": "string|Buffer"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous realpath(3).</p>\n<p>The <code>callback</code> gets two arguments <code>(err, resolvedPath)</code>.</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe path returned will be passed as a <code>Buffer</code> object.</p>\n<p>On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on <code>/proc</code> in order for this function to work. Glibc does not have\nthis restriction.</p>\n"
        },
        {
          "textRaw": "fs.realpathSync(path[, options])",
          "type": "method",
          "name": "realpathSync",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": [
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/13028",
                "description": "Pipe/Socket resolve support was added."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v6.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/7899",
                "description": "Calling `realpathSync` now works again for various edge cases on Windows."
              },
              {
                "version": "v6.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/3594",
                "description": "The `cache` parameter was removed."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string|Buffer} ",
                "name": "return",
                "type": "string|Buffer"
              },
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`options` {string|Object} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`"
                    }
                  ],
                  "name": "options",
                  "type": "string|Object",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronously computes the canonical pathname by resolving <code>.</code>, <code>..</code> and\nsymbolic links.</p>\n<p>Note that &quot;canonical&quot; does not mean &quot;unique&quot;: hard links and bind mounts can\nexpose a file system entity through many pathnames.</p>\n<p>This function behaves like realpath(3), with some exceptions:</p>\n<ol>\n<li><p>No case conversion is performed on case-insensitive file systems.</p>\n</li>\n<li><p>The maximum number of symbolic links is platform-independent and generally\n(much) higher than what the native realpath(3) implementation supports.</p>\n</li>\n</ol>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe returned value. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>, the path returned\nwill be passed as a <code>Buffer</code> object.</p>\n<p>If <code>path</code> resolves to a socket or a pipe, the function will return a system\ndependent name for that object.</p>\n"
        },
        {
          "textRaw": "fs.realpathSync.native(path[, options])",
          "type": "method",
          "name": "native",
          "meta": {
            "added": [
              "v9.2.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string|Buffer} ",
                "name": "return",
                "type": "string|Buffer"
              },
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`options` {string|Object} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`"
                    }
                  ],
                  "name": "options",
                  "type": "string|Object",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronous realpath(3).</p>\n<p>Only paths that can be converted to UTF8 strings are supported.</p>\n<p>The optional <code>options</code> argument can be a string specifying an encoding, or an\nobject with an <code>encoding</code> property specifying the character encoding to use for\nthe path passed to the callback. If the <code>encoding</code> is set to <code>&#39;buffer&#39;</code>,\nthe path returned will be passed as a <code>Buffer</code> object.</p>\n<p>On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on <code>/proc</code> in order for this function to work. Glibc does not have\nthis restriction.</p>\n"
        },
        {
          "textRaw": "fs.rename(oldPath, newPath, callback)",
          "type": "method",
          "name": "rename",
          "meta": {
            "added": [
              "v0.0.2"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `oldPath` and `newPath` parameters can be WHATWG `URL` objects using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`oldPath` {string|Buffer|URL} ",
                  "name": "oldPath",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`newPath` {string|Buffer|URL} ",
                  "name": "newPath",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "oldPath"
                },
                {
                  "name": "newPath"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronously rename file at <code>oldPath</code> to the pathname provided\nas <code>newPath</code>. In the case that <code>newPath</code> already exists, it will\nbe overwritten. No arguments other than a possible exception are\ngiven to the completion callback.</p>\n<p>See also: rename(2).</p>\n<pre><code class=\"lang-js\">fs.rename(&#39;oldFile.txt&#39;, &#39;newFile.txt&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;Rename complete!&#39;);\n});\n</code></pre>\n"
        },
        {
          "textRaw": "fs.renameSync(oldPath, newPath)",
          "type": "method",
          "name": "renameSync",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `oldPath` and `newPath` parameters can be WHATWG `URL` objects using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`oldPath` {string|Buffer|URL} ",
                  "name": "oldPath",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`newPath` {string|Buffer|URL} ",
                  "name": "newPath",
                  "type": "string|Buffer|URL"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "oldPath"
                },
                {
                  "name": "newPath"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous rename(2). Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.rmdir(path, callback)",
          "type": "method",
          "name": "rmdir",
          "meta": {
            "added": [
              "v0.0.2"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameters can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous rmdir(2). No arguments other than a possible exception are given\nto the completion callback.</p>\n<p>Using <code>fs.rmdir()</code> on a file (not a directory) results in an <code>ENOENT</code> error on\nWindows and an <code>ENOTDIR</code> error on POSIX.</p>\n"
        },
        {
          "textRaw": "fs.rmdirSync(path)",
          "type": "method",
          "name": "rmdirSync",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameters can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous rmdir(2). Returns <code>undefined</code>.</p>\n<p>Using <code>fs.rmdirSync()</code> on a file (not a directory) results in an <code>ENOENT</code> error\non Windows and an <code>ENOTDIR</code> error on POSIX.</p>\n"
        },
        {
          "textRaw": "fs.stat(path, callback)",
          "type": "method",
          "name": "stat",
          "meta": {
            "added": [
              "v0.0.2"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`stats` {fs.Stats} ",
                      "name": "stats",
                      "type": "fs.Stats"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous stat(2). The callback gets two arguments <code>(err, stats)</code> where\n<code>stats</code> is an <a href=\"#fs_class_fs_stats\"><code>fs.Stats</code></a> object.</p>\n<p>In case of an error, the <code>err.code</code> will be one of <a href=\"errors.html#errors_common_system_errors\">Common System Errors</a>.</p>\n<p>Using <code>fs.stat()</code> to check for the existence of a file before calling\n<code>fs.open()</code>, <code>fs.readFile()</code> or <code>fs.writeFile()</code> is not recommended.\nInstead, user code should open/read/write the file directly and handle the\nerror raised if the file is not available.</p>\n<p>To check if a file exists without manipulating it afterwards, <a href=\"#fs_fs_access_path_mode_callback\"><code>fs.access()</code></a>\nis recommended.</p>\n"
        },
        {
          "textRaw": "fs.statSync(path)",
          "type": "method",
          "name": "statSync",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {fs.Stats} ",
                "name": "return",
                "type": "fs.Stats"
              },
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous stat(2).</p>\n"
        },
        {
          "textRaw": "fs.symlink(target, path[, type], callback)",
          "type": "method",
          "name": "symlink",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `target` and `path` parameters can be WHATWG `URL` objects using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string|Buffer|URL} ",
                  "name": "target",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`type` {string} **Default:** `'file'` ",
                  "name": "type",
                  "type": "string",
                  "default": "`'file'`",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "path"
                },
                {
                  "name": "type",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous symlink(2). No arguments other than a possible exception are given\nto the completion callback. The <code>type</code> argument can be set to <code>&#39;dir&#39;</code>,\n<code>&#39;file&#39;</code>, or <code>&#39;junction&#39;</code> and is only available on\nWindows (ignored on other platforms). Note that Windows junction points require\nthe destination path to be absolute. When using <code>&#39;junction&#39;</code>, the <code>target</code>\nargument will automatically be normalized to absolute path.</p>\n<p>Here is an example below:</p>\n<pre><code class=\"lang-js\">fs.symlink(&#39;./foo&#39;, &#39;./new-port&#39;, callback);\n</code></pre>\n<p>It creates a symbolic link named &quot;new-port&quot; that points to &quot;foo&quot;.</p>\n"
        },
        {
          "textRaw": "fs.symlinkSync(target, path[, type])",
          "type": "method",
          "name": "symlinkSync",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `target` and `path` parameters can be WHATWG `URL` objects using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string|Buffer|URL} ",
                  "name": "target",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`type` {string} **Default:** `'file'` ",
                  "name": "type",
                  "type": "string",
                  "default": "`'file'`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "path"
                },
                {
                  "name": "type",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronous symlink(2). Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.truncate(path[, len], callback)",
          "type": "method",
          "name": "truncate",
          "meta": {
            "added": [
              "v0.8.6"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`len` {integer} **Default:** `0` ",
                  "name": "len",
                  "type": "integer",
                  "default": "`0`",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "len",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronous truncate(2). No arguments other than a possible exception are\ngiven to the completion callback. A file descriptor can also be passed as the\nfirst argument. In this case, <code>fs.ftruncate()</code> is called.</p>\n<p>Passing a file descriptor is deprecated and may result in an error being thrown\nin the future.</p>\n"
        },
        {
          "textRaw": "fs.truncateSync(path[, len])",
          "type": "method",
          "name": "truncateSync",
          "meta": {
            "added": [
              "v0.8.6"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`len` {integer} **Default:** `0` ",
                  "name": "len",
                  "type": "integer",
                  "default": "`0`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "len",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronous truncate(2). Returns <code>undefined</code>. A file descriptor can also be\npassed as the first argument. In this case, <code>fs.ftruncateSync()</code> is called.</p>\n<p>Passing a file descriptor is deprecated and may result in an error being thrown\nin the future.</p>\n"
        },
        {
          "textRaw": "fs.unlink(path, callback)",
          "type": "method",
          "name": "unlink",
          "meta": {
            "added": [
              "v0.0.2"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronously removes a file or symbolic link. No arguments other than a\npossible exception are given to the completion callback.</p>\n<pre><code class=\"lang-js\">// Assuming that &#39;path/file.txt&#39; is a regular file.\nfs.unlink(&#39;path/file.txt&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;path/file.txt was deleted&#39;);\n});\n</code></pre>\n<p><code>fs.unlink()</code> will not work on a directory, empty or otherwise. To remove a\ndirectory, use <a href=\"#fs_fs_rmdir_path_callback\"><code>fs.rmdir()</code></a>.</p>\n<p>See also: unlink(2).</p>\n"
        },
        {
          "textRaw": "fs.unlinkSync(path)",
          "type": "method",
          "name": "unlinkSync",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous unlink(2). Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.unwatchFile(filename[, listener])",
          "type": "method",
          "name": "unwatchFile",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`filename` {string|Buffer|URL} ",
                  "name": "filename",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`listener` {Function} Optional, a listener previously attached using `fs.watchFile()` ",
                  "name": "listener",
                  "type": "Function",
                  "desc": "Optional, a listener previously attached using `fs.watchFile()`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "filename"
                },
                {
                  "name": "listener",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Stop watching for changes on <code>filename</code>. If <code>listener</code> is specified, only that\nparticular listener is removed. Otherwise, <em>all</em> listeners are removed,\neffectively stopping watching of <code>filename</code>.</p>\n<p>Calling <code>fs.unwatchFile()</code> with a filename that is not being watched is a\nno-op, not an error.</p>\n<p>Using <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile()</code> and\n<code>fs.unwatchFile()</code>. <code>fs.watch()</code> should be used instead of <code>fs.watchFile()</code>\nand <code>fs.unwatchFile()</code> when possible.</p>\n"
        },
        {
          "textRaw": "fs.utimes(path, atime, mtime, callback)",
          "type": "method",
          "name": "utimes",
          "meta": {
            "added": [
              "v0.4.2"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/11919",
                "description": "`NaN`, `Infinity`, and `-Infinity` are no longer valid time specifiers."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              },
              {
                "version": "v4.1.0",
                "pr-url": "https://github.com/nodejs/node/pull/2387",
                "description": "Numeric strings, `NaN` and `Infinity` are now allowed time specifiers."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`atime` {number|string|Date} ",
                  "name": "atime",
                  "type": "number|string|Date"
                },
                {
                  "textRaw": "`mtime` {number|string|Date} ",
                  "name": "mtime",
                  "type": "number|string|Date"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "atime"
                },
                {
                  "name": "mtime"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Change the file system timestamps of the object referenced by <code>path</code>.</p>\n<p>The <code>atime</code> and <code>mtime</code> arguments follow these rules:</p>\n<ul>\n<li>Values can be either numbers representing Unix epoch time, <code>Date</code>s, or a\nnumeric string like <code>&#39;123456789.0&#39;</code>.</li>\n<li>If the value can not be converted to a number, or is <code>NaN</code>, <code>Infinity</code> or\n<code>-Infinity</code>, an <code>Error</code> will be thrown.</li>\n</ul>\n"
        },
        {
          "textRaw": "fs.utimesSync(path, atime, mtime)",
          "type": "method",
          "name": "utimesSync",
          "meta": {
            "added": [
              "v0.4.2"
            ],
            "changes": [
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/11919",
                "description": "`NaN`, `Infinity`, and `-Infinity` are no longer valid time specifiers."
              },
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `path` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v4.1.0",
                "pr-url": "https://github.com/nodejs/node/pull/2387",
                "description": "Numeric strings, `NaN` and `Infinity` are now allowed time specifiers."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string|Buffer|URL} ",
                  "name": "path",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`atime` {integer} ",
                  "name": "atime",
                  "type": "integer"
                },
                {
                  "textRaw": "`mtime` {integer} ",
                  "name": "mtime",
                  "type": "integer"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "atime"
                },
                {
                  "name": "mtime"
                }
              ]
            }
          ],
          "desc": "<p>Synchronous version of <a href=\"#fs_fs_utimes_path_atime_mtime_callback\"><code>fs.utimes()</code></a>. Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.watch(filename[, options][, listener])",
          "type": "method",
          "name": "watch",
          "meta": {
            "added": [
              "v0.5.10"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `filename` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7831",
                "description": "The passed `options` object will never be modified."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {fs.FSWatcher} ",
                "name": "return",
                "type": "fs.FSWatcher"
              },
              "params": [
                {
                  "textRaw": "`filename` {string|Buffer|URL} ",
                  "name": "filename",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`options` {string|Object} ",
                  "options": [
                    {
                      "textRaw": "`persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched. **Default:** `true`. ",
                      "name": "persistent",
                      "type": "boolean",
                      "default": "`true`",
                      "desc": "Indicates whether the process should continue to run as long as files are being watched."
                    },
                    {
                      "textRaw": "`recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See [Caveats][]). **Default:** `false`. ",
                      "name": "recursive",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See [Caveats][])."
                    },
                    {
                      "textRaw": "`encoding` {string} Specifies the character encoding to be used for the  filename passed to the listener. **Default:** `'utf8'`. ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`",
                      "desc": "Specifies the character encoding to be used for the  filename passed to the listener."
                    }
                  ],
                  "name": "options",
                  "type": "string|Object",
                  "optional": true
                },
                {
                  "textRaw": "`listener` {Function|undefined} **Default:** `undefined` ",
                  "options": [
                    {
                      "textRaw": "`eventType` {string} ",
                      "name": "eventType",
                      "type": "string"
                    },
                    {
                      "textRaw": "`filename` {string|Buffer} ",
                      "name": "filename",
                      "type": "string|Buffer"
                    }
                  ],
                  "name": "listener",
                  "type": "Function|undefined",
                  "default": "`undefined`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "filename"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "listener",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Watch for changes on <code>filename</code>, where <code>filename</code> is either a file or a\ndirectory.</p>\n<p>The second argument is optional. If <code>options</code> is provided as a string, it\nspecifies the <code>encoding</code>. Otherwise <code>options</code> should be passed as an object.</p>\n<p>The listener callback gets two arguments <code>(eventType, filename)</code>. <code>eventType</code>\nis either <code>&#39;rename&#39;</code> or <code>&#39;change&#39;</code>, and <code>filename</code> is the name of the file\nwhich triggered the event.</p>\n<p>Note that on most platforms, <code>&#39;rename&#39;</code> is emitted whenever a filename appears\nor disappears in the directory.</p>\n<p>Also note the listener callback is attached to the <code>&#39;change&#39;</code> event fired by\n<a href=\"#fs_class_fs_fswatcher\"><code>fs.FSWatcher</code></a>, but it is not the same thing as the <code>&#39;change&#39;</code> value of\n<code>eventType</code>.</p>\n",
          "miscs": [
            {
              "textRaw": "Caveats",
              "name": "Caveats",
              "type": "misc",
              "desc": "<p>The <code>fs.watch</code> API is not 100% consistent across platforms, and is\nunavailable in some situations.</p>\n<p>The recursive option is only supported on macOS and Windows.</p>\n",
              "miscs": [
                {
                  "textRaw": "Availability",
                  "name": "Availability",
                  "type": "misc",
                  "desc": "<p>This feature depends on the underlying operating system providing a way\nto be notified of filesystem changes.</p>\n<ul>\n<li>On Linux systems, this uses <a href=\"http://man7.org/linux/man-pages/man7/inotify.7.html\"><code>inotify</code></a></li>\n<li>On BSD systems, this uses <a href=\"https://www.freebsd.org/cgi/man.cgi?kqueue\"><code>kqueue</code></a></li>\n<li>On macOS, this uses <a href=\"https://www.freebsd.org/cgi/man.cgi?kqueue\"><code>kqueue</code></a> for files and <a href=\"https://developer.apple.com/library/mac/documentation/Darwin/Conceptual/FSEvents_ProgGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005289-CH1-SW1\"><code>FSEvents</code></a> for directories.</li>\n<li>On SunOS systems (including Solaris and SmartOS), this uses <a href=\"http://illumos.org/man/port_create\"><code>event ports</code></a>.</li>\n<li>On Windows systems, this feature depends on <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365465%28v=vs.85%29.aspx\"><code>ReadDirectoryChangesW</code></a>.</li>\n<li>On Aix systems, this feature depends on <a href=\"https://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/\"><code>AHAFS</code></a>, which must be enabled.</li>\n</ul>\n<p>If the underlying functionality is not available for some reason, then\n<code>fs.watch</code> will not be able to function. For example, watching files or\ndirectories can be unreliable, and in some cases impossible, on network file\nsystems (NFS, SMB, etc), or host file systems when using virtualization software\nsuch as Vagrant, Docker, etc.</p>\n<p>It is still possible to use <code>fs.watchFile()</code>, which uses stat polling, but\nthis method is slower and less reliable.</p>\n"
                },
                {
                  "textRaw": "Inodes",
                  "name": "Inodes",
                  "type": "misc",
                  "desc": "<p>On Linux and macOS systems, <code>fs.watch()</code> resolves the path to an <a href=\"https://en.wikipedia.org/wiki/Inode\">inode</a> and\nwatches the inode. If the watched path is deleted and recreated, it is assigned\na new inode. The watch will emit an event for the delete but will continue\nwatching the <em>original</em> inode. Events for the new inode will not be emitted.\nThis is expected behavior.</p>\n<p>AIX files retain the same inode for the lifetime of a file. Saving and closing a\nwatched file on AIX will result in two notifications (one for adding new\ncontent, and one for truncation).</p>\n"
                },
                {
                  "textRaw": "Filename Argument",
                  "name": "Filename Argument",
                  "type": "misc",
                  "desc": "<p>Providing <code>filename</code> argument in the callback is only supported on Linux,\nmacOS, Windows, and AIX. Even on supported platforms, <code>filename</code> is not always\nguaranteed to be provided. Therefore, don&#39;t assume that <code>filename</code> argument is\nalways provided in the callback, and have some fallback logic if it is <code>null</code>.</p>\n<pre><code class=\"lang-js\">fs.watch(&#39;somedir&#39;, (eventType, filename) =&gt; {\n  console.log(`event type is: ${eventType}`);\n  if (filename) {\n    console.log(`filename provided: ${filename}`);\n  } else {\n    console.log(&#39;filename not provided&#39;);\n  }\n});\n</code></pre>\n"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "fs.watchFile(filename[, options], listener)",
          "type": "method",
          "name": "watchFile",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": [
              {
                "version": "v7.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/10739",
                "description": "The `filename` parameter can be a WHATWG `URL` object using `file:` protocol. Support is currently still *experimental*."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`filename` {string|Buffer|URL} ",
                  "name": "filename",
                  "type": "string|Buffer|URL"
                },
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`persistent` {boolean} **Default:** `true` ",
                      "name": "persistent",
                      "type": "boolean",
                      "default": "`true`"
                    },
                    {
                      "textRaw": "`interval` {integer} **Default:** `5007` ",
                      "name": "interval",
                      "type": "integer",
                      "default": "`5007`"
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "optional": true
                },
                {
                  "textRaw": "`listener` {Function} ",
                  "options": [
                    {
                      "textRaw": "`current` {fs.Stats} ",
                      "name": "current",
                      "type": "fs.Stats"
                    },
                    {
                      "textRaw": "`previous` {fs.Stats} ",
                      "name": "previous",
                      "type": "fs.Stats"
                    }
                  ],
                  "name": "listener",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "filename"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "listener"
                }
              ]
            }
          ],
          "desc": "<p>Watch for changes on <code>filename</code>. The callback <code>listener</code> will be called each\ntime the file is accessed.</p>\n<p>The <code>options</code> argument may be omitted. If provided, it should be an object. The\n<code>options</code> object may contain a boolean named <code>persistent</code> that indicates\nwhether the process should continue to run as long as files are being watched.\nThe <code>options</code> object may specify an <code>interval</code> property indicating how often the\ntarget should be polled in milliseconds.</p>\n<p>The <code>listener</code> gets two arguments the current stat object and the previous\nstat object:</p>\n<pre><code class=\"lang-js\">fs.watchFile(&#39;message.text&#39;, (curr, prev) =&gt; {\n  console.log(`the current mtime is: ${curr.mtime}`);\n  console.log(`the previous mtime was: ${prev.mtime}`);\n});\n</code></pre>\n<p>These stat objects are instances of <code>fs.Stat</code>.</p>\n<p>To be notified when the file was modified, not just accessed, it is necessary\nto compare <code>curr.mtime</code> and <code>prev.mtime</code>.</p>\n<p>When an <code>fs.watchFile</code> operation results in an <code>ENOENT</code> error, it\nwill invoke the listener once, with all the fields zeroed (or, for dates, the\nUnix Epoch). In Windows, <code>blksize</code> and <code>blocks</code> fields will be <code>undefined</code>,\ninstead of zero. If the file is created later on, the listener will be called\nagain, with the latest stat objects. This is a change in functionality since\nv0.10.</p>\n<p>Using <a href=\"#fs_fs_watch_filename_options_listener\"><code>fs.watch()</code></a> is more efficient than <code>fs.watchFile</code> and\n<code>fs.unwatchFile</code>. <code>fs.watch</code> should be used instead of <code>fs.watchFile</code> and\n<code>fs.unwatchFile</code> when possible.</p>\n<p>When a file being watched by <code>fs.watchFile()</code> disappears and reappears,\nthen the <code>previousStat</code> reported in the second callback event (the file&#39;s\nreappearance) will be the same as the <code>previousStat</code> of the first callback\nevent (its disappearance).</p>\n<p>This happens when:</p>\n<ul>\n<li>the file is deleted, followed by a restore</li>\n<li>the file is renamed twice - the second time back to its original name</li>\n</ul>\n"
        },
        {
          "textRaw": "fs.write(fd, buffer[, offset[, length[, position]]], callback)",
          "type": "method",
          "name": "write",
          "meta": {
            "added": [
              "v0.0.2"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/10382",
                "description": "The `buffer` parameter can now be a `Uint8Array`."
              },
              {
                "version": "v7.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/7856",
                "description": "The `offset` and `length` parameters are optional now."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`buffer` {Buffer|Uint8Array} ",
                  "name": "buffer",
                  "type": "Buffer|Uint8Array"
                },
                {
                  "textRaw": "`offset` {integer} ",
                  "name": "offset",
                  "type": "integer",
                  "optional": true
                },
                {
                  "textRaw": "`length` {integer} ",
                  "name": "length",
                  "type": "integer",
                  "optional": true
                },
                {
                  "textRaw": "`position` {integer} ",
                  "name": "position",
                  "type": "integer",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`bytesWritten` {integer} ",
                      "name": "bytesWritten",
                      "type": "integer"
                    },
                    {
                      "textRaw": "`buffer` {Buffer|Uint8Array} ",
                      "name": "buffer",
                      "type": "Buffer|Uint8Array"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "buffer"
                },
                {
                  "name": "offset",
                  "optional": true
                },
                {
                  "name": "length",
                  "optional": true
                },
                {
                  "name": "position",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Write <code>buffer</code> to the file specified by <code>fd</code>.</p>\n<p><code>offset</code> determines the part of the buffer to be written, and <code>length</code> is\nan integer specifying the number of bytes to write.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code>, the data will be written\nat the current position. See pwrite(2).</p>\n<p>The callback will be given three arguments <code>(err, bytesWritten, buffer)</code> where\n<code>bytesWritten</code> specifies how many <em>bytes</em> were written from <code>buffer</code>.</p>\n<p>If this method is invoked as its <a href=\"#util_util_promisify_original\"><code>util.promisify()</code></a>ed version, it returns\na <code>Promise</code> for an <code>Object</code> with <code>bytesWritten</code> and <code>buffer</code> properties.</p>\n<p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n"
        },
        {
          "textRaw": "fs.write(fd, string[, position[, encoding]], callback)",
          "type": "method",
          "name": "write",
          "meta": {
            "added": [
              "v0.11.5"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/7856",
                "description": "The `position` parameter is optional now."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`string` {string} ",
                  "name": "string",
                  "type": "string"
                },
                {
                  "textRaw": "`position` {integer} ",
                  "name": "position",
                  "type": "integer",
                  "optional": true
                },
                {
                  "textRaw": "`encoding` {string} ",
                  "name": "encoding",
                  "type": "string",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    },
                    {
                      "textRaw": "`written` {integer} ",
                      "name": "written",
                      "type": "integer"
                    },
                    {
                      "textRaw": "`string` {string} ",
                      "name": "string",
                      "type": "string"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "string"
                },
                {
                  "name": "position",
                  "optional": true
                },
                {
                  "name": "encoding",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Write <code>string</code> to the file specified by <code>fd</code>. If <code>string</code> is not a string, then\nthe value will be coerced to one.</p>\n<p><code>position</code> refers to the offset from the beginning of the file where this data\nshould be written. If <code>typeof position !== &#39;number&#39;</code> the data will be written at\nthe current position. See pwrite(2).</p>\n<p><code>encoding</code> is the expected string encoding.</p>\n<p>The callback will receive the arguments <code>(err, written, string)</code> where <code>written</code>\nspecifies how many <em>bytes</em> the passed string required to be written. Note that\nbytes written is not the same as string characters. See <a href=\"buffer.html#buffer_class_method_buffer_bytelength_string_encoding\"><code>Buffer.byteLength</code></a>.</p>\n<p>Note that it is unsafe to use <code>fs.write</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>On Linux, positional writes don&#39;t work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.</p>\n"
        },
        {
          "textRaw": "fs.writeFile(file, data[, options], callback)",
          "type": "method",
          "name": "writeFile",
          "meta": {
            "added": [
              "v0.1.29"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12562",
                "description": "The `callback` parameter is no longer optional. Not passing it will throw a `TypeError` at runtime."
              },
              {
                "version": "v7.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/10382",
                "description": "The `data` parameter can now be a `Uint8Array`."
              },
              {
                "version": "v7.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/7897",
                "description": "The `callback` parameter is no longer optional. Not passing it will emit a deprecation warning with id DEP0013."
              },
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/3163",
                "description": "The `file` parameter can be a file descriptor now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`file` {string|Buffer|URL|integer} filename or file descriptor ",
                  "name": "file",
                  "type": "string|Buffer|URL|integer",
                  "desc": "filename or file descriptor"
                },
                {
                  "textRaw": "`data` {string|Buffer|Uint8Array} ",
                  "name": "data",
                  "type": "string|Buffer|Uint8Array"
                },
                {
                  "textRaw": "`options` {Object|string} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string|null} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string|null",
                      "default": "`'utf8'`"
                    },
                    {
                      "textRaw": "`mode` {integer} **Default:** `0o666` ",
                      "name": "mode",
                      "type": "integer",
                      "default": "`0o666`"
                    },
                    {
                      "textRaw": "`flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. ",
                      "name": "flag",
                      "type": "string",
                      "default": "`'w'`",
                      "desc": "See [support of file system `flags`][]."
                    }
                  ],
                  "name": "options",
                  "type": "Object|string",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`err` {Error} ",
                      "name": "err",
                      "type": "Error"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "file"
                },
                {
                  "name": "data"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Asynchronously writes data to a file, replacing the file if it already exists.\n<code>data</code> can be a string or a buffer.</p>\n<p>The <code>encoding</code> option is ignored if <code>data</code> is a buffer.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, (err) =&gt; {\n  if (err) throw err;\n  console.log(&#39;The file has been saved!&#39;);\n});\n</code></pre>\n<p>If <code>options</code> is a string, then it specifies the encoding. Example:</p>\n<pre><code class=\"lang-js\">fs.writeFile(&#39;message.txt&#39;, &#39;Hello Node.js&#39;, &#39;utf8&#39;, callback);\n</code></pre>\n<p>Any specified file descriptor has to support writing.</p>\n<p>Note that it is unsafe to use <code>fs.writeFile</code> multiple times on the same file\nwithout waiting for the callback. For this scenario,\n<code>fs.createWriteStream</code> is strongly recommended.</p>\n<p>If a file descriptor is specified as the <code>file</code>, it will not be closed\nautomatically.</p>\n"
        },
        {
          "textRaw": "fs.writeFileSync(file, data[, options])",
          "type": "method",
          "name": "writeFileSync",
          "meta": {
            "added": [
              "v0.1.29"
            ],
            "changes": [
              {
                "version": "v7.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/10382",
                "description": "The `data` parameter can now be a `Uint8Array`."
              },
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/3163",
                "description": "The `file` parameter can be a file descriptor now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`file` {string|Buffer|URL|integer} filename or file descriptor ",
                  "name": "file",
                  "type": "string|Buffer|URL|integer",
                  "desc": "filename or file descriptor"
                },
                {
                  "textRaw": "`data` {string|Buffer|Uint8Array} ",
                  "name": "data",
                  "type": "string|Buffer|Uint8Array"
                },
                {
                  "textRaw": "`options` {Object|string} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string|null} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string|null",
                      "default": "`'utf8'`"
                    },
                    {
                      "textRaw": "`mode` {integer} **Default:** `0o666` ",
                      "name": "mode",
                      "type": "integer",
                      "default": "`0o666`"
                    },
                    {
                      "textRaw": "`flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. ",
                      "name": "flag",
                      "type": "string",
                      "default": "`'w'`",
                      "desc": "See [support of file system `flags`][]."
                    }
                  ],
                  "name": "options",
                  "type": "Object|string",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "file"
                },
                {
                  "name": "data"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The synchronous version of <a href=\"#fs_fs_writefile_file_data_options_callback\"><code>fs.writeFile()</code></a>. Returns <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "fs.writeSync(fd, buffer[, offset[, length[, position]]])",
          "type": "method",
          "name": "writeSync",
          "meta": {
            "added": [
              "v0.1.21"
            ],
            "changes": [
              {
                "version": "v7.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/10382",
                "description": "The `buffer` parameter can now be a `Uint8Array`."
              },
              {
                "version": "v7.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/7856",
                "description": "The `offset` and `length` parameters are optional now."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {number} ",
                "name": "return",
                "type": "number"
              },
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`buffer` {Buffer|Uint8Array} ",
                  "name": "buffer",
                  "type": "Buffer|Uint8Array"
                },
                {
                  "textRaw": "`offset` {integer} ",
                  "name": "offset",
                  "type": "integer",
                  "optional": true
                },
                {
                  "textRaw": "`length` {integer} ",
                  "name": "length",
                  "type": "integer",
                  "optional": true
                },
                {
                  "textRaw": "`position` {integer} ",
                  "name": "position",
                  "type": "integer",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "buffer"
                },
                {
                  "name": "offset",
                  "optional": true
                },
                {
                  "name": "length",
                  "optional": true
                },
                {
                  "name": "position",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronous versions of <a href=\"#fs_fs_write_fd_buffer_offset_length_position_callback\"><code>fs.write()</code></a>. Returns the number of bytes written.</p>\n"
        },
        {
          "textRaw": "fs.writeSync(fd, string[, position[, encoding]])",
          "type": "method",
          "name": "writeSync",
          "meta": {
            "added": [
              "v0.11.5"
            ],
            "changes": [
              {
                "version": "v7.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/7856",
                "description": "The `position` parameter is optional now."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {number} ",
                "name": "return",
                "type": "number"
              },
              "params": [
                {
                  "textRaw": "`fd` {integer} ",
                  "name": "fd",
                  "type": "integer"
                },
                {
                  "textRaw": "`string` {string} ",
                  "name": "string",
                  "type": "string"
                },
                {
                  "textRaw": "`position` {integer} ",
                  "name": "position",
                  "type": "integer",
                  "optional": true
                },
                {
                  "textRaw": "`encoding` {string} ",
                  "name": "encoding",
                  "type": "string",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                },
                {
                  "name": "string"
                },
                {
                  "name": "position",
                  "optional": true
                },
                {
                  "name": "encoding",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Synchronous versions of <a href=\"#fs_fs_write_fd_buffer_offset_length_position_callback\"><code>fs.write()</code></a>. Returns the number of bytes written.</p>\n"
        }
      ],
      "properties": [
        {
          "textRaw": "`constants` {Object} ",
          "type": "Object",
          "name": "constants",
          "desc": "<p>Returns an object containing commonly used constants for file system\noperations. The specific constants currently defined are described in\n<a href=\"#fs_fs_constants_1\">FS Constants</a>.</p>\n"
        }
      ],
      "type": "module",
      "displayName": "fs"
    },
    {
      "textRaw": "HTTP",
      "name": "http",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>To use the HTTP server and client one must <code>require(&#39;http&#39;)</code>.</p>\n<p>The HTTP interfaces in Node.js are designed to support many features\nof the protocol which have been traditionally difficult to use.\nIn particular, large, possibly chunk-encoded, messages. The interface is\ncareful to never buffer entire requests or responses — the\nuser is able to stream data.</p>\n<p>HTTP message headers are represented by an object like this:</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{ &#39;content-length&#39;: &#39;123&#39;,\n  &#39;content-type&#39;: &#39;text/plain&#39;,\n  &#39;connection&#39;: &#39;keep-alive&#39;,\n  &#39;host&#39;: &#39;mysite.com&#39;,\n  &#39;accept&#39;: &#39;*/*&#39; }\n</code></pre>\n<p>Keys are lowercased. Values are not modified.</p>\n<p>In order to support the full spectrum of possible HTTP applications, Node.js&#39;s\nHTTP API is very low-level. It deals with stream handling and message\nparsing only. It parses a message into headers and body but it does not\nparse the actual headers or the body.</p>\n<p>See <a href=\"#http_message_headers\"><code>message.headers</code></a> for details on how duplicate headers are handled.</p>\n<p>The raw headers as they were received are retained in the <code>rawHeaders</code>\nproperty, which is an array of <code>[key, value, key2, value2, ...]</code>. For\nexample, the previous message header object might have a <code>rawHeaders</code>\nlist like the following:</p>\n<!-- eslint-disable semi -->\n<pre><code class=\"lang-js\">[ &#39;ConTent-Length&#39;, &#39;123456&#39;,\n  &#39;content-LENGTH&#39;, &#39;123&#39;,\n  &#39;content-type&#39;, &#39;text/plain&#39;,\n  &#39;CONNECTION&#39;, &#39;keep-alive&#39;,\n  &#39;Host&#39;, &#39;mysite.com&#39;,\n  &#39;accepT&#39;, &#39;*/*&#39; ]\n</code></pre>\n",
      "classes": [
        {
          "textRaw": "Class: http.Agent",
          "type": "class",
          "name": "http.Agent",
          "meta": {
            "added": [
              "v0.3.4"
            ],
            "changes": []
          },
          "desc": "<p>An <code>Agent</code> is responsible for managing connection persistence\nand reuse for HTTP clients. It maintains a queue of pending requests\nfor a given host and port, reusing a single socket connection for each\nuntil the queue is empty, at which time the socket is either destroyed\nor put into a pool where it is kept to be used again for requests to the\nsame host and port. Whether it is destroyed or pooled depends on the\n<code>keepAlive</code> <a href=\"#http_new_agent_options\">option</a>.</p>\n<p>Pooled connections have TCP Keep-Alive enabled for them, but servers may\nstill close idle connections, in which case they will be removed from the\npool and a new connection will be made when a new HTTP request is made for\nthat host and port. Servers may also refuse to allow multiple requests\nover the same connection, in which case the connection will have to be\nremade for every request and cannot be pooled. The <code>Agent</code> will still make\nthe requests to that server, but each one will occur over a new connection.</p>\n<p>When a connection is closed by the client or the server, it is removed\nfrom the pool. Any unused sockets in the pool will be unrefed so as not\nto keep the Node.js process running when there are no outstanding requests.\n(see <a href=\"net.html#net_socket_unref\"><code>socket.unref()</code></a>).</p>\n<p>It is good practice, to <a href=\"#http_agent_destroy\"><code>destroy()</code></a> an <code>Agent</code> instance when it is no\nlonger in use, because unused sockets consume OS resources.</p>\n<p>Sockets are removed from an agent when the socket emits either\na <code>&#39;close&#39;</code> event or an <code>&#39;agentRemove&#39;</code> event. When intending to keep one\nHTTP request open for a long time without keeping it in the agent, something\nlike the following may be done:</p>\n<pre><code class=\"lang-js\">http.get(options, (res) =&gt; {\n  // Do stuff\n}).on(&#39;socket&#39;, (socket) =&gt; {\n  socket.emit(&#39;agentRemove&#39;);\n});\n</code></pre>\n<p>An agent may also be used for an individual request. By providing\n<code>{agent: false}</code> as an option to the <code>http.get()</code> or <code>http.request()</code>\nfunctions, a one-time use <code>Agent</code> with default options will be used\nfor the client connection.</p>\n<p><code>agent:false</code>:</p>\n<pre><code class=\"lang-js\">http.get({\n  hostname: &#39;localhost&#39;,\n  port: 80,\n  path: &#39;/&#39;,\n  agent: false  // create a new agent just for this one request\n}, (res) =&gt; {\n  // Do stuff with response\n});\n</code></pre>\n",
          "methods": [
            {
              "textRaw": "agent.createConnection(options[, callback])",
              "type": "method",
              "name": "createConnection",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} ",
                    "name": "return",
                    "type": "net.Socket"
                  },
                  "params": [
                    {
                      "textRaw": "`options` {Object} Options containing connection details. Check [`net.createConnection()`][] for the format of the options ",
                      "name": "options",
                      "type": "Object",
                      "desc": "Options containing connection details. Check [`net.createConnection()`][] for the format of the options"
                    },
                    {
                      "textRaw": "`callback` {Function} Callback function that receives the created socket ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "Callback function that receives the created socket",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "options"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Produces a socket/stream to be used for HTTP requests.</p>\n<p>By default, this function is the same as <a href=\"#net_net_createconnection\"><code>net.createConnection()</code></a>. However,\ncustom agents may override this method in case greater flexibility is desired.</p>\n<p>A socket/stream can be supplied in one of two ways: by returning the\nsocket/stream from this function, or by passing the socket/stream to <code>callback</code>.</p>\n<p><code>callback</code> has a signature of <code>(err, stream)</code>.</p>\n"
            },
            {
              "textRaw": "agent.keepSocketAlive(socket)",
              "type": "method",
              "name": "keepSocketAlive",
              "meta": {
                "added": [
                  "v8.1.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`socket` {net.Socket} ",
                      "name": "socket",
                      "type": "net.Socket"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "socket"
                    }
                  ]
                }
              ],
              "desc": "<p>Called when <code>socket</code> is detached from a request and could be persisted by the\n<code>Agent</code>. Default behavior is to:</p>\n<pre><code class=\"lang-js\">socket.setKeepAlive(true, this.keepAliveMsecs);\nsocket.unref();\nreturn true;\n</code></pre>\n<p>This method can be overridden by a particular <code>Agent</code> subclass. If this\nmethod returns a falsy value, the socket will be destroyed instead of persisting\nit for use with the next request.</p>\n"
            },
            {
              "textRaw": "agent.reuseSocket(socket, request)",
              "type": "method",
              "name": "reuseSocket",
              "meta": {
                "added": [
                  "v8.1.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`socket` {net.Socket} ",
                      "name": "socket",
                      "type": "net.Socket"
                    },
                    {
                      "textRaw": "`request` {http.ClientRequest} ",
                      "name": "request",
                      "type": "http.ClientRequest"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "socket"
                    },
                    {
                      "name": "request"
                    }
                  ]
                }
              ],
              "desc": "<p>Called when <code>socket</code> is attached to <code>request</code> after being persisted because of\nthe keep-alive options. Default behavior is to:</p>\n<pre><code class=\"lang-js\">socket.ref();\n</code></pre>\n<p>This method can be overridden by a particular <code>Agent</code> subclass.</p>\n"
            },
            {
              "textRaw": "agent.destroy()",
              "type": "method",
              "name": "destroy",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Destroy any sockets that are currently in use by the agent.</p>\n<p>It is usually not necessary to do this. However, if using an\nagent with <code>keepAlive</code> enabled, then it is best to explicitly shut down\nthe agent when it will no longer be used. Otherwise,\nsockets may hang open for quite a long time before the server\nterminates them.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "agent.getName(options)",
              "type": "method",
              "name": "getName",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string} ",
                    "name": "return",
                    "type": "string"
                  },
                  "params": [
                    {
                      "textRaw": "`options` {Object} A set of options providing information for name generation ",
                      "options": [
                        {
                          "textRaw": "`host` {string} A domain name or IP address of the server to issue the request to ",
                          "name": "host",
                          "type": "string",
                          "desc": "A domain name or IP address of the server to issue the request to"
                        },
                        {
                          "textRaw": "`port` {number} Port of remote server ",
                          "name": "port",
                          "type": "number",
                          "desc": "Port of remote server"
                        },
                        {
                          "textRaw": "`localAddress` {string} Local interface to bind for network connections when issuing the request ",
                          "name": "localAddress",
                          "type": "string",
                          "desc": "Local interface to bind for network connections when issuing the request"
                        },
                        {
                          "textRaw": "`family` {integer} Must be 4 or 6 if this doesn't equal `undefined`. ",
                          "name": "family",
                          "type": "integer",
                          "desc": "Must be 4 or 6 if this doesn't equal `undefined`."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "desc": "A set of options providing information for name generation"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "options"
                    }
                  ]
                }
              ],
              "desc": "<p>Get a unique name for a set of request options, to determine whether a\nconnection can be reused. For an HTTP agent, this returns\n<code>host:port:localAddress</code> or <code>host:port:localAddress:family</code>. For an HTTPS agent,\nthe name includes the CA, cert, ciphers, and other HTTPS/TLS-specific options\nthat determine socket reusability.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`freeSockets` {Object} ",
              "type": "Object",
              "name": "freeSockets",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>An object which contains arrays of sockets currently awaiting use by\nthe agent when <code>keepAlive</code> is enabled. Do not modify.</p>\n"
            },
            {
              "textRaw": "`maxFreeSockets` {number} ",
              "type": "number",
              "name": "maxFreeSockets",
              "meta": {
                "added": [
                  "v0.11.7"
                ],
                "changes": []
              },
              "desc": "<p>By default set to 256. For agents with <code>keepAlive</code> enabled, this\nsets the maximum number of sockets that will be left open in the free\nstate.</p>\n"
            },
            {
              "textRaw": "`maxSockets` {number} ",
              "type": "number",
              "name": "maxSockets",
              "meta": {
                "added": [
                  "v0.3.6"
                ],
                "changes": []
              },
              "desc": "<p>By default set to <code>Infinity</code>. Determines how many concurrent sockets the agent\ncan have open per origin. Origin is the returned value of <a href=\"#http_agent_getname_options\"><code>agent.getName()</code></a>.</p>\n"
            },
            {
              "textRaw": "`requests` {Object} ",
              "type": "Object",
              "name": "requests",
              "meta": {
                "added": [
                  "v0.5.9"
                ],
                "changes": []
              },
              "desc": "<p>An object which contains queues of requests that have not yet been assigned to\nsockets. Do not modify.</p>\n"
            },
            {
              "textRaw": "`sockets` {Object} ",
              "type": "Object",
              "name": "sockets",
              "meta": {
                "added": [
                  "v0.3.6"
                ],
                "changes": []
              },
              "desc": "<p>An object which contains arrays of sockets currently in use by the\nagent. Do not modify.</p>\n"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`options` {Object} Set of configurable options to set on the agent. Can have the following fields: ",
                  "options": [
                    {
                      "textRaw": "`keepAlive` {boolean} Keep sockets around even when there are no outstanding requests, so they can be used for future requests without having to reestablish a TCP connection. **Default:** `false`. ",
                      "name": "keepAlive",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "Keep sockets around even when there are no outstanding requests, so they can be used for future requests without having to reestablish a TCP connection."
                    },
                    {
                      "textRaw": "`keepAliveMsecs` {number} When using the `keepAlive` option, specifies the [initial delay](net.html#net_socket_setkeepalive_enable_initialdelay) for TCP Keep-Alive packets. Ignored when the `keepAlive` option is `false` or `undefined`. **Default:** `1000`. ",
                      "name": "keepAliveMsecs",
                      "type": "number",
                      "default": "`1000`",
                      "desc": "When using the `keepAlive` option, specifies the [initial delay](net.html#net_socket_setkeepalive_enable_initialdelay) for TCP Keep-Alive packets. Ignored when the `keepAlive` option is `false` or `undefined`."
                    },
                    {
                      "textRaw": "`maxSockets` {number} Maximum number of sockets to allow per host. **Default:** `Infinity`. ",
                      "name": "maxSockets",
                      "type": "number",
                      "default": "`Infinity`",
                      "desc": "Maximum number of sockets to allow per host."
                    },
                    {
                      "textRaw": "`maxFreeSockets` {number} Maximum number of sockets to leave open in a free state. Only relevant if `keepAlive` is set to `true`. **Default:** `256`. ",
                      "name": "maxFreeSockets",
                      "type": "number",
                      "default": "`256`",
                      "desc": "Maximum number of sockets to leave open in a free state. Only relevant if `keepAlive` is set to `true`."
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "desc": "Set of configurable options to set on the agent. Can have the following fields:",
                  "optional": true
                }
              ],
              "desc": "<p>The default <a href=\"#http_http_globalagent\"><code>http.globalAgent</code></a> that is used by <a href=\"http.html#http_http_request_options_callback\"><code>http.request()</code></a> has all\nof these values set to their respective defaults.</p>\n<p>To configure any of them, a custom <a href=\"http.html#http_class_http_agent\"><code>http.Agent</code></a> instance must be created.</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\nconst keepAliveAgent = new http.Agent({ keepAlive: true });\noptions.agent = keepAliveAgent;\nhttp.request(options, onResponseCallback);\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ],
              "desc": "<p>The default <a href=\"#http_http_globalagent\"><code>http.globalAgent</code></a> that is used by <a href=\"http.html#http_http_request_options_callback\"><code>http.request()</code></a> has all\nof these values set to their respective defaults.</p>\n<p>To configure any of them, a custom <a href=\"http.html#http_class_http_agent\"><code>http.Agent</code></a> instance must be created.</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\nconst keepAliveAgent = new http.Agent({ keepAlive: true });\noptions.agent = keepAliveAgent;\nhttp.request(options, onResponseCallback);\n</code></pre>\n"
            }
          ]
        },
        {
          "textRaw": "Class: http.ClientRequest",
          "type": "class",
          "name": "http.ClientRequest",
          "meta": {
            "added": [
              "v0.1.17"
            ],
            "changes": []
          },
          "desc": "<p>This object is created internally and returned from <a href=\"http.html#http_http_request_options_callback\"><code>http.request()</code></a>. It\nrepresents an <em>in-progress</em> request whose header has already been queued. The\nheader is still mutable using the <a href=\"#http_request_setheader_name_value\"><code>setHeader(name, value)</code></a>,\n <a href=\"#http_request_getheader_name\"><code>getHeader(name)</code></a>, <a href=\"#http_request_removeheader_name\"><code>removeHeader(name)</code></a> API. The actual header will\nbe sent along with the first data chunk or when calling <a href=\"#http_request_end_data_encoding_callback\"><code>request.end()</code></a>.</p>\n<p>To get the response, add a listener for <a href=\"#http_event_response\"><code>&#39;response&#39;</code></a> to the request object.\n<a href=\"#http_event_response\"><code>&#39;response&#39;</code></a> will be emitted from the request object when the response\nheaders have been received. The <a href=\"#http_event_response\"><code>&#39;response&#39;</code></a> event is executed with one\nargument which is an instance of <a href=\"#http_class_http_incomingmessage\"><code>http.IncomingMessage</code></a>.</p>\n<p>During the <a href=\"#http_event_response\"><code>&#39;response&#39;</code></a> event, one can add listeners to the\nresponse object; particularly to listen for the <code>&#39;data&#39;</code> event.</p>\n<p>If no <a href=\"#http_event_response\"><code>&#39;response&#39;</code></a> handler is added, then the response will be\nentirely discarded. However, if a <a href=\"#http_event_response\"><code>&#39;response&#39;</code></a> event handler is added,\nthen the data from the response object <strong>must</strong> be consumed, either by\ncalling <code>response.read()</code> whenever there is a <code>&#39;readable&#39;</code> event, or\nby adding a <code>&#39;data&#39;</code> handler, or by calling the <code>.resume()</code> method.\nUntil the data is consumed, the <code>&#39;end&#39;</code> event will not fire. Also, until\nthe data is read it will consume memory that can eventually lead to a\n&#39;process out of memory&#39; error.</p>\n<p>Node.js does not check whether Content-Length and the length of the\nbody which has been transmitted are equal or not.</p>\n<p>The request implements the <a href=\"stream.html#stream_writable_streams\">Writable Stream</a> interface. This is an\n<a href=\"events.html\"><code>EventEmitter</code></a> with the following events:</p>\n",
          "events": [
            {
              "textRaw": "Event: 'abort'",
              "type": "event",
              "name": "abort",
              "meta": {
                "added": [
                  "v1.4.1"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the request has been aborted by the client. This event is only\nemitted on the first call to <code>abort()</code>.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'connect'",
              "type": "event",
              "name": "connect",
              "meta": {
                "added": [
                  "v0.7.0"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted each time a server responds to a request with a <code>CONNECT</code> method. If\nthis event is not being listened for, clients receiving a <code>CONNECT</code> method will\nhave their connections closed.</p>\n<p>A client and server pair demonstrating how to listen for the <code>&#39;connect&#39;</code> event:</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\nconst net = require(&#39;net&#39;);\nconst url = require(&#39;url&#39;);\n\n// Create an HTTP tunneling proxy\nconst proxy = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39; });\n  res.end(&#39;okay&#39;);\n});\nproxy.on(&#39;connect&#39;, (req, cltSocket, head) =&gt; {\n  // connect to an origin server\n  const srvUrl = url.parse(`http://${req.url}`);\n  const srvSocket = net.connect(srvUrl.port, srvUrl.hostname, () =&gt; {\n    cltSocket.write(&#39;HTTP/1.1 200 Connection Established\\r\\n&#39; +\n                    &#39;Proxy-agent: Node.js-Proxy\\r\\n&#39; +\n                    &#39;\\r\\n&#39;);\n    srvSocket.write(head);\n    srvSocket.pipe(cltSocket);\n    cltSocket.pipe(srvSocket);\n  });\n});\n\n// now that proxy is running\nproxy.listen(1337, &#39;127.0.0.1&#39;, () =&gt; {\n\n  // make a request to a tunneling proxy\n  const options = {\n    port: 1337,\n    hostname: &#39;127.0.0.1&#39;,\n    method: &#39;CONNECT&#39;,\n    path: &#39;www.google.com:80&#39;\n  };\n\n  const req = http.request(options);\n  req.end();\n\n  req.on(&#39;connect&#39;, (res, socket, head) =&gt; {\n    console.log(&#39;got connected!&#39;);\n\n    // make a request over an HTTP tunnel\n    socket.write(&#39;GET / HTTP/1.1\\r\\n&#39; +\n                 &#39;Host: www.google.com:80\\r\\n&#39; +\n                 &#39;Connection: close\\r\\n&#39; +\n                 &#39;\\r\\n&#39;);\n    socket.on(&#39;data&#39;, (chunk) =&gt; {\n      console.log(chunk.toString());\n    });\n    socket.on(&#39;end&#39;, () =&gt; {\n      proxy.close();\n    });\n  });\n});\n</code></pre>\n"
            },
            {
              "textRaw": "Event: 'continue'",
              "type": "event",
              "name": "continue",
              "meta": {
                "added": [
                  "v0.3.2"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the server sends a &#39;100 Continue&#39; HTTP response, usually because\nthe request contained &#39;Expect: 100-continue&#39;. This is an instruction that\nthe client should send the request body.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'information'",
              "type": "event",
              "name": "information",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the server sends a 1xx response (excluding 101 Upgrade). This\nevent is emitted with a callback containing an object with a status code.</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\n\nconst options = {\n  hostname: &#39;127.0.0.1&#39;,\n  port: 8080,\n  path: &#39;/length_request&#39;\n};\n\n// Make a request\nconst req = http.request(options);\nreq.end();\n\nreq.on(&#39;information&#39;, (res) =&gt; {\n  console.log(`Got information prior to main response: ${res.statusCode}`);\n});\n</code></pre>\n<p>101 Upgrade statuses do not fire this event due to their break from the\ntraditional HTTP request/response chain, such as web sockets, in-place TLS\nupgrades, or HTTP 2.0. To be notified of 101 Upgrade notices, listen for the\n<a href=\"#http_event_upgrade\"><code>&#39;upgrade&#39;</code></a> event instead.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'response'",
              "type": "event",
              "name": "response",
              "meta": {
                "added": [
                  "v0.1.0"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted when a response is received to this request. This event is emitted only\nonce.</p>\n"
            },
            {
              "textRaw": "Event: 'socket'",
              "type": "event",
              "name": "socket",
              "meta": {
                "added": [
                  "v0.5.3"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted after a socket is assigned to this request.</p>\n"
            },
            {
              "textRaw": "Event: 'timeout'",
              "type": "event",
              "name": "timeout",
              "meta": {
                "added": [
                  "v0.7.8"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the underlying socket times out from inactivity. This only notifies\nthat the socket has been idle. The request must be aborted manually.</p>\n<p>See also: <a href=\"#http_request_settimeout_timeout_callback\"><code>request.setTimeout()</code></a>.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'upgrade'",
              "type": "event",
              "name": "upgrade",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted each time a server responds to a request with an upgrade. If this\nevent is not being listened for and the response status code is 101 Switching\nProtocols, clients receiving an upgrade header will have their connections\nclosed.</p>\n<p>A client server pair demonstrating how to listen for the <code>&#39;upgrade&#39;</code> event.</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\n\n// Create an HTTP server\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39; });\n  res.end(&#39;okay&#39;);\n});\nsrv.on(&#39;upgrade&#39;, (req, socket, head) =&gt; {\n  socket.write(&#39;HTTP/1.1 101 Web Socket Protocol Handshake\\r\\n&#39; +\n               &#39;Upgrade: WebSocket\\r\\n&#39; +\n               &#39;Connection: Upgrade\\r\\n&#39; +\n               &#39;\\r\\n&#39;);\n\n  socket.pipe(socket); // echo back\n});\n\n// now that server is running\nsrv.listen(1337, &#39;127.0.0.1&#39;, () =&gt; {\n\n  // make a request\n  const options = {\n    port: 1337,\n    hostname: &#39;127.0.0.1&#39;,\n    headers: {\n      &#39;Connection&#39;: &#39;Upgrade&#39;,\n      &#39;Upgrade&#39;: &#39;websocket&#39;\n    }\n  };\n\n  const req = http.request(options);\n  req.end();\n\n  req.on(&#39;upgrade&#39;, (res, socket, upgradeHead) =&gt; {\n    console.log(&#39;got upgraded!&#39;);\n    socket.end();\n    process.exit(0);\n  });\n});\n</code></pre>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "request.abort()",
              "type": "method",
              "name": "abort",
              "meta": {
                "added": [
                  "v0.3.8"
                ],
                "changes": []
              },
              "desc": "<p>Marks the request as aborting. Calling this will cause remaining data\nin the response to be dropped and the socket to be destroyed.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "request.end([data[, encoding]][, callback])",
              "type": "method",
              "name": "end",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18780",
                    "description": "This method now returns a reference to `ClientRequest`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {this} ",
                    "name": "return",
                    "type": "this"
                  },
                  "params": [
                    {
                      "textRaw": "`data` {string|Buffer} ",
                      "name": "data",
                      "type": "string|Buffer",
                      "optional": true
                    },
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Finishes sending the request. If any parts of the body are\nunsent, it will flush them to the stream. If the request is\nchunked, this will send the terminating <code>&#39;0\\r\\n\\r\\n&#39;</code>.</p>\n<p>If <code>data</code> is specified, it is equivalent to calling\n<a href=\"#http_request_write_chunk_encoding_callback\"><code>request.write(data, encoding)</code></a> followed by <code>request.end(callback)</code>.</p>\n<p>If <code>callback</code> is specified, it will be called when the request stream\nis finished.</p>\n"
            },
            {
              "textRaw": "request.flushHeaders()",
              "type": "method",
              "name": "flushHeaders",
              "meta": {
                "added": [
                  "v1.6.0"
                ],
                "changes": []
              },
              "desc": "<p>Flush the request headers.</p>\n<p>For efficiency reasons, Node.js normally buffers the request headers until\n<code>request.end()</code> is called or the first chunk of request data is written. It\nthen tries to pack the request headers and data into a single TCP packet.</p>\n<p>That&#39;s usually desired (it saves a TCP round-trip), but not when the first\ndata is not sent until possibly much later. <code>request.flushHeaders()</code> bypasses\nthe optimization and kickstarts the request.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "request.getHeader(name)",
              "type": "method",
              "name": "getHeader",
              "meta": {
                "added": [
                  "v1.6.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {any} ",
                    "name": "return",
                    "type": "any"
                  },
                  "params": [
                    {
                      "textRaw": "`name` {string} ",
                      "name": "name",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "name"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads out a header on the request. Note that the name is case insensitive.\nThe type of the return value depends on the arguments provided to\n<a href=\"#http_request_setheader_name_value\"><code>request.setHeader()</code></a>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">request.setHeader(&#39;content-type&#39;, &#39;text/html&#39;);\nrequest.setHeader(&#39;Content-Length&#39;, Buffer.byteLength(body));\nrequest.setHeader(&#39;Set-Cookie&#39;, [&#39;type=ninja&#39;, &#39;language=javascript&#39;]);\nconst contentType = request.getHeader(&#39;Content-Type&#39;);\n// contentType is &#39;text/html&#39;\nconst contentLength = request.getHeader(&#39;Content-Length&#39;);\n// contentLength is of type number\nconst setCookie = request.getHeader(&#39;set-cookie&#39;);\n// setCookie is of type string[]\n</code></pre>\n"
            },
            {
              "textRaw": "request.removeHeader(name)",
              "type": "method",
              "name": "removeHeader",
              "meta": {
                "added": [
                  "v1.6.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`name` {string} ",
                      "name": "name",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "name"
                    }
                  ]
                }
              ],
              "desc": "<p>Removes a header that&#39;s already defined into headers object.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">request.removeHeader(&#39;Content-Type&#39;);\n</code></pre>\n"
            },
            {
              "textRaw": "request.setHeader(name, value)",
              "type": "method",
              "name": "setHeader",
              "meta": {
                "added": [
                  "v1.6.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`name` {string} ",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "textRaw": "`value` {any} ",
                      "name": "value",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "name"
                    },
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Sets a single header value for headers object. If this header already exists in\nthe to-be-sent headers, its value will be replaced. Use an array of strings\nhere to send multiple headers with the same name. Non-string values will be\nstored without modification. Therefore, <a href=\"#http_request_getheader_name\"><code>request.getHeader()</code></a> may return\nnon-string values. However, the non-string values will be converted to strings\nfor network transmission.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">request.setHeader(&#39;Content-Type&#39;, &#39;application/json&#39;);\n</code></pre>\n<p>or</p>\n<pre><code class=\"lang-js\">request.setHeader(&#39;Set-Cookie&#39;, [&#39;type=ninja&#39;, &#39;language=javascript&#39;]);\n</code></pre>\n"
            },
            {
              "textRaw": "request.setNoDelay([noDelay])",
              "type": "method",
              "name": "setNoDelay",
              "meta": {
                "added": [
                  "v0.5.9"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`noDelay` {boolean} ",
                      "name": "noDelay",
                      "type": "boolean",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "noDelay",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Once a socket is assigned to this request and is connected\n<a href=\"net.html#net_socket_setnodelay_nodelay\"><code>socket.setNoDelay()</code></a> will be called.</p>\n"
            },
            {
              "textRaw": "request.setSocketKeepAlive([enable][, initialDelay])",
              "type": "method",
              "name": "setSocketKeepAlive",
              "meta": {
                "added": [
                  "v0.5.9"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`enable` {boolean} ",
                      "name": "enable",
                      "type": "boolean",
                      "optional": true
                    },
                    {
                      "textRaw": "`initialDelay` {number} ",
                      "name": "initialDelay",
                      "type": "number",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "enable",
                      "optional": true
                    },
                    {
                      "name": "initialDelay",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Once a socket is assigned to this request and is connected\n<a href=\"net.html#net_socket_setkeepalive_enable_initialdelay\"><code>socket.setKeepAlive()</code></a> will be called.</p>\n"
            },
            {
              "textRaw": "request.setTimeout(timeout[, callback])",
              "type": "method",
              "name": "setTimeout",
              "meta": {
                "added": [
                  "v0.5.9"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {http.ClientRequest} ",
                    "name": "return",
                    "type": "http.ClientRequest"
                  },
                  "params": [
                    {
                      "textRaw": "`timeout` {number} Milliseconds before a request times out. ",
                      "name": "timeout",
                      "type": "number",
                      "desc": "Milliseconds before a request times out."
                    },
                    {
                      "textRaw": "`callback` {Function} Optional function to be called when a timeout occurs. Same as binding to the `'timeout'` event. ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "Optional function to be called when a timeout occurs. Same as binding to the `'timeout'` event.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "timeout"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Once a socket is assigned to this request and is connected\n<a href=\"#net_socket_settimeout_timeout_callback\"><code>socket.setTimeout()</code></a> will be called.</p>\n"
            },
            {
              "textRaw": "request.write(chunk[, encoding][, callback])",
              "type": "method",
              "name": "write",
              "meta": {
                "added": [
                  "v0.1.29"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`chunk` {string|Buffer} ",
                      "name": "chunk",
                      "type": "string|Buffer"
                    },
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "chunk"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Sends a chunk of the body. By calling this method\nmany times, a request body can be sent to a\nserver — in that case it is suggested to use the\n<code>[&#39;Transfer-Encoding&#39;, &#39;chunked&#39;]</code> header line when\ncreating the request.</p>\n<p>The <code>encoding</code> argument is optional and only applies when <code>chunk</code> is a string.\nDefaults to <code>&#39;utf8&#39;</code>.</p>\n<p>The <code>callback</code> argument is optional and will be called when this chunk of data\nis flushed.</p>\n<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel\nbuffer. Returns <code>false</code> if all or part of the data was queued in user memory.\n<code>&#39;drain&#39;</code> will be emitted when the buffer is free again.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "request.aborted",
              "name": "aborted",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": []
              },
              "desc": "<p>If a request has been aborted, this value is the time when the request was\naborted, in milliseconds since 1 January 1970 00:00:00 UTC.</p>\n"
            },
            {
              "textRaw": "`connection` {net.Socket} ",
              "type": "net.Socket",
              "name": "connection",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "desc": "<p>See <a href=\"#http_request_socket\"><code>request.socket</code></a>.</p>\n"
            },
            {
              "textRaw": "`maxHeadersCount` {number} **Default:** `2000` ",
              "type": "number",
              "name": "maxHeadersCount",
              "default": "`2000`",
              "desc": "<p>Limits maximum response headers count. If set to 0, no limit will be applied.</p>\n"
            },
            {
              "textRaw": "`socket` {net.Socket} ",
              "type": "net.Socket",
              "name": "socket",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "desc": "<p>Reference to the underlying socket. Usually users will not want to access\nthis property. In particular, the socket will not emit <code>&#39;readable&#39;</code> events\nbecause of how the protocol parser attaches to the socket. The <code>socket</code>\nmay also be accessed via <code>request.connection</code>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\nconst options = {\n  host: &#39;www.google.com&#39;,\n};\nconst req = http.get(options);\nreq.end();\nreq.once(&#39;response&#39;, (res) =&gt; {\n  const ip = req.socket.localAddress;\n  const port = req.socket.localPort;\n  console.log(`Your IP address is ${ip} and your source port is ${port}.`);\n  // consume response object\n});\n</code></pre>\n"
            }
          ]
        },
        {
          "textRaw": "Class: http.Server",
          "type": "class",
          "name": "http.Server",
          "meta": {
            "added": [
              "v0.1.17"
            ],
            "changes": []
          },
          "desc": "<p>This class inherits from <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a> and has the following additional\nevents:</p>\n",
          "events": [
            {
              "textRaw": "Event: 'checkContinue'",
              "type": "event",
              "name": "checkContinue",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted each time a request with an HTTP <code>Expect: 100-continue</code> is received.\nIf this event is not listened for, the server will automatically respond\nwith a <code>100 Continue</code> as appropriate.</p>\n<p>Handling this event involves calling <a href=\"#http2_response_writecontinue\"><code>response.writeContinue()</code></a> if the\nclient should continue to send the request body, or generating an appropriate\nHTTP response (e.g. 400 Bad Request) if the client should not continue to send\nthe request body.</p>\n<p>Note that when this event is emitted and handled, the <a href=\"#http2_event_request\"><code>&#39;request&#39;</code></a> event will\nnot be emitted.</p>\n"
            },
            {
              "textRaw": "Event: 'checkExpectation'",
              "type": "event",
              "name": "checkExpectation",
              "meta": {
                "added": [
                  "v5.5.0"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted each time a request with an HTTP <code>Expect</code> header is received, where the\nvalue is not <code>100-continue</code>. If this event is not listened for, the server will\nautomatically respond with a <code>417 Expectation Failed</code> as appropriate.</p>\n<p>Note that when this event is emitted and handled, the <a href=\"#http2_event_request\"><code>&#39;request&#39;</code></a> event will\nnot be emitted.</p>\n"
            },
            {
              "textRaw": "Event: 'clientError'",
              "type": "event",
              "name": "clientError",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "changes": [
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/4557",
                    "description": "The default action of calling `.destroy()` on the `socket` will no longer take place if there are listeners attached for `'clientError'`."
                  },
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/17672",
                    "description": "The `rawPacket` is the current buffer that just parsed. Adding this buffer to the error object of `'clientError'` event is to make it possible that developers can log the broken packet."
                  }
                ]
              },
              "params": [],
              "desc": "<p>If a client connection emits an <code>&#39;error&#39;</code> event, it will be forwarded here.\nListener of this event is responsible for closing/destroying the underlying\nsocket. For example, one may wish to more gracefully close the socket with a\ncustom HTTP response instead of abruptly severing the connection.</p>\n<p>Default behavior is to close the socket with an HTTP &#39;400 Bad Request&#39; response\nif possible, otherwise the socket is immediately destroyed.</p>\n<p><code>socket</code> is the <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> object that the error originated from.</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\n\nconst server = http.createServer((req, res) =&gt; {\n  res.end();\n});\nserver.on(&#39;clientError&#39;, (err, socket) =&gt; {\n  socket.end(&#39;HTTP/1.1 400 Bad Request\\r\\n\\r\\n&#39;);\n});\nserver.listen(8000);\n</code></pre>\n<p>When the <code>&#39;clientError&#39;</code> event occurs, there is no <code>request</code> or <code>response</code>\nobject, so any HTTP response sent, including response headers and payload,\n<em>must</em> be written directly to the <code>socket</code> object. Care must be taken to\nensure the response is a properly formatted HTTP response message.</p>\n<p><code>err</code> is an instance of <code>Error</code> with two extra columns:</p>\n<ul>\n<li><code>bytesParsed</code>: the bytes count of request packet that Node.js may have parsed\ncorrectly;</li>\n<li><code>rawPacket</code>: the raw packet of current request.</li>\n</ul>\n"
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "meta": {
                "added": [
                  "v0.1.4"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the server closes.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'connect'",
              "type": "event",
              "name": "connect",
              "meta": {
                "added": [
                  "v0.7.0"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted each time a client requests an HTTP <code>CONNECT</code> method. If this event is\nnot listened for, then clients requesting a <code>CONNECT</code> method will have their\nconnections closed.</p>\n<p>After this event is emitted, the request&#39;s socket will not have a <code>&#39;data&#39;</code>\nevent listener, meaning it will need to be bound in order to handle data\nsent to the server on that socket.</p>\n"
            },
            {
              "textRaw": "Event: 'connection'",
              "type": "event",
              "name": "connection",
              "meta": {
                "added": [
                  "v0.1.0"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>This event is emitted when a new TCP stream is established. <code>socket</code> is\ntypically an object of type <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>. Usually users will not want to\naccess this event. In particular, the socket will not emit <code>&#39;readable&#39;</code> events\nbecause of how the protocol parser attaches to the socket. The <code>socket</code> can\nalso be accessed at <code>request.connection</code>.</p>\n<p>This event can also be explicitly emitted by users to inject connections\ninto the HTTP server. In that case, any <a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a> stream can be passed.</p>\n"
            },
            {
              "textRaw": "Event: 'request'",
              "type": "event",
              "name": "request",
              "meta": {
                "added": [
                  "v0.1.0"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted each time there is a request. Note that there may be multiple requests\nper connection (in the case of HTTP Keep-Alive connections).</p>\n"
            },
            {
              "textRaw": "Event: 'upgrade'",
              "type": "event",
              "name": "upgrade",
              "meta": {
                "added": [
                  "v0.1.94"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "v10.0.0",
                    "description": "Not listening to this event no longer causes the socket to be destroyed if a client sends an Upgrade header."
                  }
                ]
              },
              "params": [],
              "desc": "<p>Emitted each time a client requests an HTTP upgrade. Listening to this event\nis optional and clients cannot insist on a protocol change.</p>\n<p>After this event is emitted, the request&#39;s socket will not have a <code>&#39;data&#39;</code>\nevent listener, meaning it will need to be bound in order to handle data\nsent to the server on that socket.</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "server.close([callback])",
              "type": "method",
              "name": "close",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Stops the server from accepting new connections. See <a href=\"net.html#net_server_close_callback\"><code>net.Server.close()</code></a>.</p>\n"
            },
            {
              "textRaw": "server.listen()",
              "type": "method",
              "name": "listen",
              "desc": "<p>Starts the HTTP server listening for connections.\nThis method is identical to <a href=\"net.html#net_server_listen\"><code>server.listen()</code></a> from <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a>.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "server.setTimeout([msecs][, callback])",
              "type": "method",
              "name": "setTimeout",
              "meta": {
                "added": [
                  "v0.9.12"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {http.Server} ",
                    "name": "return",
                    "type": "http.Server"
                  },
                  "params": [
                    {
                      "textRaw": "`msecs` {number} **Default:** `120000` (2 minutes) ",
                      "name": "msecs",
                      "type": "number",
                      "default": "`120000` (2 minutes)",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "msecs",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Sets the timeout value for sockets, and emits a <code>&#39;timeout&#39;</code> event on\nthe Server object, passing the socket as an argument, if a timeout\noccurs.</p>\n<p>If there is a <code>&#39;timeout&#39;</code> event listener on the Server object, then it\nwill be called with the timed-out socket as an argument.</p>\n<p>By default, the Server&#39;s timeout value is 2 minutes, and sockets are\ndestroyed automatically if they time out. However, if a callback is assigned\nto the Server&#39;s <code>&#39;timeout&#39;</code> event, timeouts must be handled explicitly.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`listening` {boolean} Indicates whether or not the server is listening for connections. ",
              "type": "boolean",
              "name": "listening",
              "meta": {
                "added": [
                  "v5.7.0"
                ],
                "changes": []
              },
              "desc": "Indicates whether or not the server is listening for connections.",
              "default": "`2000`"
            },
            {
              "textRaw": "`maxHeadersCount` {number} **Default:** `2000` ",
              "type": "number",
              "name": "maxHeadersCount",
              "meta": {
                "added": [
                  "v0.7.0"
                ],
                "changes": []
              },
              "default": "`2000`",
              "desc": "<p>Limits maximum incoming headers count. If set to 0, no limit will be applied.</p>\n"
            },
            {
              "textRaw": "`timeout` {number} Timeout in milliseconds. **Default:** `120000` (2 minutes). ",
              "type": "number",
              "name": "timeout",
              "meta": {
                "added": [
                  "v0.9.12"
                ],
                "changes": []
              },
              "default": "`120000` (2 minutes)",
              "desc": "<p>The number of milliseconds of inactivity before a socket is presumed\nto have timed out.</p>\n<p>A value of <code>0</code> will disable the timeout behavior on incoming connections.</p>\n<p>The socket timeout logic is set up on connection, so changing this\nvalue only affects new connections to the server, not any existing connections.</p>\n",
              "shortDesc": "Timeout in milliseconds."
            },
            {
              "textRaw": "`keepAliveTimeout` {number} Timeout in milliseconds. **Default:** `5000` (5 seconds). ",
              "type": "number",
              "name": "keepAliveTimeout",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "default": "`5000` (5 seconds)",
              "desc": "<p>The number of milliseconds of inactivity a server needs to wait for additional\nincoming data, after it has finished writing the last response, before a socket\nwill be destroyed. If the server receives new data before the keep-alive\ntimeout has fired, it will reset the regular inactivity timeout, i.e.,\n<a href=\"#http_server_timeout\"><code>server.timeout</code></a>.</p>\n<p>A value of <code>0</code> will disable the keep-alive timeout behavior on incoming\nconnections.\nA value of <code>0</code> makes the http server behave similarly to Node.js versions prior\nto 8.0.0, which did not have a keep-alive timeout.</p>\n<p>The socket timeout logic is set up on connection, so changing this value only\naffects new connections to the server, not any existing connections.</p>\n",
              "shortDesc": "Timeout in milliseconds."
            }
          ]
        },
        {
          "textRaw": "Class: http.ServerResponse",
          "type": "class",
          "name": "http.ServerResponse",
          "meta": {
            "added": [
              "v0.1.17"
            ],
            "changes": []
          },
          "desc": "<p>This object is created internally by an HTTP server — not by the user. It is\npassed as the second parameter to the <a href=\"#http2_event_request\"><code>&#39;request&#39;</code></a> event.</p>\n<p>The response implements, but does not inherit from, the <a href=\"stream.html#stream_writable_streams\">Writable Stream</a>\ninterface. This is an <a href=\"events.html\"><code>EventEmitter</code></a> with the following events:</p>\n",
          "events": [
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "meta": {
                "added": [
                  "v0.6.7"
                ],
                "changes": []
              },
              "desc": "<p>Indicates that the underlying connection was terminated before\n<a href=\"#http2_response_end_data_encoding_callback\"><code>response.end()</code></a> was called or able to flush.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'finish'",
              "type": "event",
              "name": "finish",
              "meta": {
                "added": [
                  "v0.3.6"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the response has been sent. More specifically, this event is\nemitted when the last segment of the response headers and body have been\nhanded off to the operating system for transmission over the network. It\ndoes not imply that the client has received anything yet.</p>\n<p>After this event, no more events will be emitted on the response object.</p>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "response.addTrailers(headers)",
              "type": "method",
              "name": "addTrailers",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`headers` {Object} ",
                      "name": "headers",
                      "type": "Object"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "headers"
                    }
                  ]
                }
              ],
              "desc": "<p>This method adds HTTP trailing headers (a header but at the end of the\nmessage) to the response.</p>\n<p>Trailers will <strong>only</strong> be emitted if chunked encoding is used for the\nresponse; if it is not (e.g. if the request was HTTP/1.0), they will\nbe silently discarded.</p>\n<p>Note that HTTP requires the <code>Trailer</code> header to be sent in order to\nemit trailers, with a list of the header fields in its value. E.g.,</p>\n<pre><code class=\"lang-js\">response.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39;,\n                          &#39;Trailer&#39;: &#39;Content-MD5&#39; });\nresponse.write(fileData);\nresponse.addTrailers({ &#39;Content-MD5&#39;: &#39;7895bf4b8828b55ceaf47747b4bca667&#39; });\nresponse.end();\n</code></pre>\n<p>Attempting to set a header field name or value that contains invalid characters\nwill result in a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p>\n"
            },
            {
              "textRaw": "response.end([data][, encoding][, callback])",
              "type": "method",
              "name": "end",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18780",
                    "description": "This method now returns a reference to `ServerResponse`."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {this} ",
                    "name": "return",
                    "type": "this"
                  },
                  "params": [
                    {
                      "textRaw": "`data` {string|Buffer} ",
                      "name": "data",
                      "type": "string|Buffer",
                      "optional": true
                    },
                    {
                      "textRaw": "`encoding` {string} ",
                      "name": "encoding",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>This method signals to the server that all of the response headers and body\nhave been sent; that server should consider this message complete.\nThe method, <code>response.end()</code>, MUST be called on each response.</p>\n<p>If <code>data</code> is specified, it is equivalent to calling\n<a href=\"http.html#http_response_write_chunk_encoding_callback\"><code>response.write(data, encoding)</code></a> followed by <code>response.end(callback)</code>.</p>\n<p>If <code>callback</code> is specified, it will be called when the response stream\nis finished.</p>\n"
            },
            {
              "textRaw": "response.getHeader(name)",
              "type": "method",
              "name": "getHeader",
              "meta": {
                "added": [
                  "v0.4.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {any} ",
                    "name": "return",
                    "type": "any"
                  },
                  "params": [
                    {
                      "textRaw": "`name` {string} ",
                      "name": "name",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "name"
                    }
                  ]
                }
              ],
              "desc": "<p>Reads out a header that&#39;s already been queued but not sent to the client.\nNote that the name is case insensitive. The type of the return value depends\non the arguments provided to <a href=\"#http2_response_setheader_name_value\"><code>response.setHeader()</code></a>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\nresponse.setHeader(&#39;Content-Length&#39;, Buffer.byteLength(body));\nresponse.setHeader(&#39;Set-Cookie&#39;, [&#39;type=ninja&#39;, &#39;language=javascript&#39;]);\nconst contentType = response.getHeader(&#39;content-type&#39;);\n// contentType is &#39;text/html&#39;\nconst contentLength = response.getHeader(&#39;Content-Length&#39;);\n// contentLength is of type number\nconst setCookie = response.getHeader(&#39;set-cookie&#39;);\n// setCookie is of type string[]\n</code></pre>\n"
            },
            {
              "textRaw": "response.getHeaderNames()",
              "type": "method",
              "name": "getHeaderNames",
              "meta": {
                "added": [
                  "v7.7.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string[]} ",
                    "name": "return",
                    "type": "string[]"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns an array containing the unique names of the current outgoing headers.\nAll header names are lowercase.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.setHeader(&#39;Foo&#39;, &#39;bar&#39;);\nresponse.setHeader(&#39;Set-Cookie&#39;, [&#39;foo=bar&#39;, &#39;bar=baz&#39;]);\n\nconst headerNames = response.getHeaderNames();\n// headerNames === [&#39;foo&#39;, &#39;set-cookie&#39;]\n</code></pre>\n"
            },
            {
              "textRaw": "response.getHeaders()",
              "type": "method",
              "name": "getHeaders",
              "meta": {
                "added": [
                  "v7.7.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "name": "return",
                    "type": "Object"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns a shallow copy of the current outgoing headers. Since a shallow copy\nis used, array values may be mutated without additional calls to various\nheader-related http module methods. The keys of the returned object are the\nheader names and the values are the respective header values. All header names\nare lowercase.</p>\n<p>The object returned by the <code>response.getHeaders()</code> method <em>does not</em>\nprototypically inherit from the JavaScript <code>Object</code>. This means that typical\n<code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hasOwnProperty()</code>, and others\nare not defined and <em>will not work</em>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.setHeader(&#39;Foo&#39;, &#39;bar&#39;);\nresponse.setHeader(&#39;Set-Cookie&#39;, [&#39;foo=bar&#39;, &#39;bar=baz&#39;]);\n\nconst headers = response.getHeaders();\n// headers === { foo: &#39;bar&#39;, &#39;set-cookie&#39;: [&#39;foo=bar&#39;, &#39;bar=baz&#39;] }\n</code></pre>\n"
            },
            {
              "textRaw": "response.hasHeader(name)",
              "type": "method",
              "name": "hasHeader",
              "meta": {
                "added": [
                  "v7.7.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`name` {string} ",
                      "name": "name",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "name"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the header identified by <code>name</code> is currently set in the\noutgoing headers. Note that the header name matching is case-insensitive.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const hasContentType = response.hasHeader(&#39;content-type&#39;);\n</code></pre>\n"
            },
            {
              "textRaw": "response.removeHeader(name)",
              "type": "method",
              "name": "removeHeader",
              "meta": {
                "added": [
                  "v0.4.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`name` {string} ",
                      "name": "name",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "name"
                    }
                  ]
                }
              ],
              "desc": "<p>Removes a header that&#39;s queued for implicit sending.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.removeHeader(&#39;Content-Encoding&#39;);\n</code></pre>\n"
            },
            {
              "textRaw": "response.setHeader(name, value)",
              "type": "method",
              "name": "setHeader",
              "meta": {
                "added": [
                  "v0.4.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`name` {string} ",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "textRaw": "`value` {any} ",
                      "name": "value",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "name"
                    },
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Sets a single header value for implicit headers. If this header already exists\nin the to-be-sent headers, its value will be replaced. Use an array of strings\nhere to send multiple headers with the same name. Non-string values will be\nstored without modification. Therefore, <a href=\"#http_response_getheader_name\"><code>response.getHeader()</code></a> may return\nnon-string values. However, the non-string values will be converted to strings\nfor network transmission.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n</code></pre>\n<p>or</p>\n<pre><code class=\"lang-js\">response.setHeader(&#39;Set-Cookie&#39;, [&#39;type=ninja&#39;, &#39;language=javascript&#39;]);\n</code></pre>\n<p>Attempting to set a header field name or value that contains invalid characters\nwill result in a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p>\n<p>When headers have been set with <a href=\"#http2_response_setheader_name_value\"><code>response.setHeader()</code></a>, they will be merged\nwith any headers passed to <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a>, with the headers passed\nto <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> given precedence.</p>\n<pre><code class=\"lang-js\">// returns content-type = text/plain\nconst server = http.createServer((req, res) =&gt; {\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);\n  res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39; });\n  res.end(&#39;ok&#39;);\n});\n</code></pre>\n"
            },
            {
              "textRaw": "response.setTimeout(msecs[, callback])",
              "type": "method",
              "name": "setTimeout",
              "meta": {
                "added": [
                  "v0.9.12"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {http.ServerResponse} ",
                    "name": "return",
                    "type": "http.ServerResponse"
                  },
                  "params": [
                    {
                      "textRaw": "`msecs` {number} ",
                      "name": "msecs",
                      "type": "number"
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "msecs"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Sets the Socket&#39;s timeout value to <code>msecs</code>. If a callback is\nprovided, then it is added as a listener on the <code>&#39;timeout&#39;</code> event on\nthe response object.</p>\n<p>If no <code>&#39;timeout&#39;</code> listener is added to the request, the response, or\nthe server, then sockets are destroyed when they time out. If a handler is\nassigned to the request, the response, or the server&#39;s <code>&#39;timeout&#39;</code> events,\ntimed out sockets must be handled explicitly.</p>\n"
            },
            {
              "textRaw": "response.write(chunk[, encoding][, callback])",
              "type": "method",
              "name": "write",
              "meta": {
                "added": [
                  "v0.1.29"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`chunk` {string|Buffer} ",
                      "name": "chunk",
                      "type": "string|Buffer"
                    },
                    {
                      "textRaw": "`encoding` {string} **Default:** `'utf8'` ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "chunk"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>If this method is called and <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> has not been called,\nit will switch to implicit header mode and flush the implicit headers.</p>\n<p>This sends a chunk of the response body. This method may\nbe called multiple times to provide successive parts of the body.</p>\n<p>Note that in the <code>http</code> module, the response body is omitted when the\nrequest is a HEAD request. Similarly, the <code>204</code> and <code>304</code> responses\n<em>must not</em> include a message body.</p>\n<p><code>chunk</code> can be a string or a buffer. If <code>chunk</code> is a string,\nthe second parameter specifies how to encode it into a byte stream.\n<code>callback</code> will be called when this chunk of data is flushed.</p>\n<p>This is the raw HTTP body and has nothing to do with higher-level multi-part\nbody encodings that may be used.</p>\n<p>The first time <a href=\"#http2_response_write_chunk_encoding_callback\"><code>response.write()</code></a> is called, it will send the buffered\nheader information and the first chunk of the body to the client. The second\ntime <a href=\"#http2_response_write_chunk_encoding_callback\"><code>response.write()</code></a> is called, Node.js assumes data will be streamed,\nand sends the new data separately. That is, the response is buffered up to the\nfirst chunk of the body.</p>\n<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel\nbuffer. Returns <code>false</code> if all or part of the data was queued in user memory.\n<code>&#39;drain&#39;</code> will be emitted when the buffer is free again.</p>\n"
            },
            {
              "textRaw": "response.writeContinue()",
              "type": "method",
              "name": "writeContinue",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "desc": "<p>Sends a HTTP/1.1 100 Continue message to the client, indicating that\nthe request body should be sent. See the <a href=\"#http2_event_checkcontinue\"><code>&#39;checkContinue&#39;</code></a> event on\n<code>Server</code>.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "response.writeHead(statusCode[, statusMessage][, headers])",
              "type": "method",
              "name": "writeHead",
              "meta": {
                "added": [
                  "v0.1.30"
                ],
                "changes": [
                  {
                    "version": "v5.11.0, v4.4.5",
                    "pr-url": "https://github.com/nodejs/node/pull/6291",
                    "description": "A `RangeError` is thrown if `statusCode` is not a number in the range `[100, 999]`."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`statusCode` {number} ",
                      "name": "statusCode",
                      "type": "number"
                    },
                    {
                      "textRaw": "`statusMessage` {string} ",
                      "name": "statusMessage",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`headers` {Object} ",
                      "name": "headers",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "statusCode"
                    },
                    {
                      "name": "statusMessage",
                      "optional": true
                    },
                    {
                      "name": "headers",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Sends a response header to the request. The status code is a 3-digit HTTP\nstatus code, like <code>404</code>. The last argument, <code>headers</code>, are the response headers.\nOptionally one can give a human-readable <code>statusMessage</code> as the second\nargument.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const body = &#39;hello world&#39;;\nresponse.writeHead(200, {\n  &#39;Content-Length&#39;: Buffer.byteLength(body),\n  &#39;Content-Type&#39;: &#39;text/plain&#39; });\n</code></pre>\n<p>This method must only be called once on a message and it must\nbe called before <a href=\"#http2_response_end_data_encoding_callback\"><code>response.end()</code></a> is called.</p>\n<p>If <a href=\"#http2_response_write_chunk_encoding_callback\"><code>response.write()</code></a> or <a href=\"#http2_response_end_data_encoding_callback\"><code>response.end()</code></a> are called before calling\nthis, the implicit/mutable headers will be calculated and call this function.</p>\n<p>When headers have been set with <a href=\"#http2_response_setheader_name_value\"><code>response.setHeader()</code></a>, they will be merged\nwith any headers passed to <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a>, with the headers passed\nto <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> given precedence.</p>\n<pre><code class=\"lang-js\">// returns content-type = text/plain\nconst server = http.createServer((req, res) =&gt; {\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);\n  res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39; });\n  res.end(&#39;ok&#39;);\n});\n</code></pre>\n<p>Note that Content-Length is given in bytes not characters. The above example\nworks because the string <code>&#39;hello world&#39;</code> contains only single byte characters.\nIf the body contains higher coded characters then <code>Buffer.byteLength()</code>\nshould be used to determine the number of bytes in a given encoding.\nAnd Node.js does not check whether Content-Length and the length of the body\nwhich has been transmitted are equal or not.</p>\n<p>Attempting to set a header field name or value that contains invalid characters\nwill result in a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p>\n"
            },
            {
              "textRaw": "response.writeProcessing()",
              "type": "method",
              "name": "writeProcessing",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Sends a HTTP/1.1 102 Processing message to the client, indicating that\nthe request body should be sent.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ],
          "properties": [
            {
              "textRaw": "`connection` {net.Socket} ",
              "type": "net.Socket",
              "name": "connection",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "desc": "<p>See <a href=\"#http2_response_socket\"><code>response.socket</code></a>.</p>\n"
            },
            {
              "textRaw": "`finished` {boolean} ",
              "type": "boolean",
              "name": "finished",
              "meta": {
                "added": [
                  "v0.0.2"
                ],
                "changes": []
              },
              "desc": "<p>Boolean value that indicates whether the response has completed. Starts\nas <code>false</code>. After <a href=\"#http2_response_end_data_encoding_callback\"><code>response.end()</code></a> executes, the value will be <code>true</code>.</p>\n"
            },
            {
              "textRaw": "`headersSent` {boolean} ",
              "type": "boolean",
              "name": "headersSent",
              "meta": {
                "added": [
                  "v0.9.3"
                ],
                "changes": []
              },
              "desc": "<p>Boolean (read-only). True if headers were sent, false otherwise.</p>\n"
            },
            {
              "textRaw": "`sendDate` {boolean} ",
              "type": "boolean",
              "name": "sendDate",
              "meta": {
                "added": [
                  "v0.7.5"
                ],
                "changes": []
              },
              "desc": "<p>When true, the Date header will be automatically generated and sent in\nthe response if it is not already present in the headers. Defaults to true.</p>\n<p>This should only be disabled for testing; HTTP requires the Date header\nin responses.</p>\n"
            },
            {
              "textRaw": "`socket` {net.Socket} ",
              "type": "net.Socket",
              "name": "socket",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "desc": "<p>Reference to the underlying socket. Usually users will not want to access\nthis property. In particular, the socket will not emit <code>&#39;readable&#39;</code> events\nbecause of how the protocol parser attaches to the socket. After\n<code>response.end()</code>, the property is nulled. The <code>socket</code> may also be accessed\nvia <code>response.connection</code>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\nconst server = http.createServer((req, res) =&gt; {\n  const ip = res.socket.remoteAddress;\n  const port = res.socket.remotePort;\n  res.end(`Your IP address is ${ip} and your source port is ${port}.`);\n}).listen(3000);\n</code></pre>\n"
            },
            {
              "textRaw": "`statusCode` {number} ",
              "type": "number",
              "name": "statusCode",
              "meta": {
                "added": [
                  "v0.4.0"
                ],
                "changes": []
              },
              "desc": "<p>When using implicit headers (not calling <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> explicitly),\nthis property controls the status code that will be sent to the client when\nthe headers get flushed.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.statusCode = 404;\n</code></pre>\n<p>After response header was sent to the client, this property indicates the\nstatus code which was sent out.</p>\n"
            },
            {
              "textRaw": "`statusMessage` {string} ",
              "type": "string",
              "name": "statusMessage",
              "meta": {
                "added": [
                  "v0.11.8"
                ],
                "changes": []
              },
              "desc": "<p>When using implicit headers (not calling <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> explicitly),\nthis property controls the status message that will be sent to the client when\nthe headers get flushed. If this is left as <code>undefined</code> then the standard\nmessage for the status code will be used.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.statusMessage = &#39;Not found&#39;;\n</code></pre>\n<p>After response header was sent to the client, this property indicates the\nstatus message which was sent out.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: http.IncomingMessage",
          "type": "class",
          "name": "http.IncomingMessage",
          "meta": {
            "added": [
              "v0.1.17"
            ],
            "changes": []
          },
          "desc": "<p>An <code>IncomingMessage</code> object is created by <a href=\"http.html#http_class_http_server\"><code>http.Server</code></a> or\n<a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a> and passed as the first argument to the <a href=\"#http2_event_request\"><code>&#39;request&#39;</code></a>\nand <a href=\"#http_event_response\"><code>&#39;response&#39;</code></a> event respectively. It may be used to access response\nstatus, headers and data.</p>\n<p>It implements the <a href=\"stream.html#stream_class_stream_readable\">Readable Stream</a> interface, as well as the\nfollowing additional events, methods, and properties.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'aborted'",
              "type": "event",
              "name": "aborted",
              "meta": {
                "added": [
                  "v0.3.8"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the request has been aborted.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "meta": {
                "added": [
                  "v0.4.2"
                ],
                "changes": []
              },
              "desc": "<p>Indicates that the underlying connection was closed.\nJust like <code>&#39;end&#39;</code>, this event occurs only once per response.</p>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "`aborted` {boolean} ",
              "type": "boolean",
              "name": "aborted",
              "meta": {
                "added": [
                  "v10.1.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>message.aborted</code> property will be <code>true</code> if the request has\nbeen aborted.</p>\n"
            },
            {
              "textRaw": "`headers` {Object} ",
              "type": "Object",
              "name": "headers",
              "meta": {
                "added": [
                  "v0.1.5"
                ],
                "changes": []
              },
              "desc": "<p>The request/response headers object.</p>\n<p>Key-value pairs of header names and values. Header names are lower-cased.\nExample:</p>\n<pre><code class=\"lang-js\">// Prints something like:\n//\n// { &#39;user-agent&#39;: &#39;curl/7.22.0&#39;,\n//   host: &#39;127.0.0.1:8000&#39;,\n//   accept: &#39;*/*&#39; }\nconsole.log(request.headers);\n</code></pre>\n<p>Duplicates in raw headers are handled in the following ways, depending on the\nheader name:</p>\n<ul>\n<li>Duplicates of <code>age</code>, <code>authorization</code>, <code>content-length</code>, <code>content-type</code>,\n<code>etag</code>, <code>expires</code>, <code>from</code>, <code>host</code>, <code>if-modified-since</code>, <code>if-unmodified-since</code>,\n<code>last-modified</code>, <code>location</code>, <code>max-forwards</code>, <code>proxy-authorization</code>, <code>referer</code>,\n<code>retry-after</code>, or <code>user-agent</code> are discarded.</li>\n<li><code>set-cookie</code> is always an array. Duplicates are added to the array.</li>\n<li>For all other headers, the values are joined together with &#39;, &#39;.</li>\n</ul>\n"
            },
            {
              "textRaw": "`httpVersion` {string} ",
              "type": "string",
              "name": "httpVersion",
              "meta": {
                "added": [
                  "v0.1.1"
                ],
                "changes": []
              },
              "desc": "<p>In case of server request, the HTTP version sent by the client. In the case of\nclient response, the HTTP version of the connected-to server.\nProbably either <code>&#39;1.1&#39;</code> or <code>&#39;1.0&#39;</code>.</p>\n<p>Also <code>message.httpVersionMajor</code> is the first integer and\n<code>message.httpVersionMinor</code> is the second.</p>\n"
            },
            {
              "textRaw": "`method` {string} ",
              "type": "string",
              "name": "method",
              "meta": {
                "added": [
                  "v0.1.1"
                ],
                "changes": []
              },
              "desc": "<p><strong>Only valid for request obtained from <a href=\"http.html#http_class_http_server\"><code>http.Server</code></a>.</strong></p>\n<p>The request method as a string. Read only. Example:\n<code>&#39;GET&#39;</code>, <code>&#39;DELETE&#39;</code>.</p>\n"
            },
            {
              "textRaw": "`rawHeaders` {string[]} ",
              "type": "string[]",
              "name": "rawHeaders",
              "meta": {
                "added": [
                  "v0.11.6"
                ],
                "changes": []
              },
              "desc": "<p>The raw request/response headers list exactly as they were received.</p>\n<p>Note that the keys and values are in the same list. It is <em>not</em> a\nlist of tuples. So, the even-numbered offsets are key values, and the\nodd-numbered offsets are the associated values.</p>\n<p>Header names are not lowercased, and duplicates are not merged.</p>\n<pre><code class=\"lang-js\">// Prints something like:\n//\n// [ &#39;user-agent&#39;,\n//   &#39;this is invalid because there can be only one&#39;,\n//   &#39;User-Agent&#39;,\n//   &#39;curl/7.22.0&#39;,\n//   &#39;Host&#39;,\n//   &#39;127.0.0.1:8000&#39;,\n//   &#39;ACCEPT&#39;,\n//   &#39;*/*&#39; ]\nconsole.log(request.rawHeaders);\n</code></pre>\n"
            },
            {
              "textRaw": "`rawTrailers` {string[]} ",
              "type": "string[]",
              "name": "rawTrailers",
              "meta": {
                "added": [
                  "v0.11.6"
                ],
                "changes": []
              },
              "desc": "<p>The raw request/response trailer keys and values exactly as they were\nreceived. Only populated at the <code>&#39;end&#39;</code> event.</p>\n"
            },
            {
              "textRaw": "`socket` {net.Socket} ",
              "type": "net.Socket",
              "name": "socket",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "desc": "<p>The <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> object associated with the connection.</p>\n<p>With HTTPS support, use <a href=\"tls.html#tls_tlssocket_getpeercertificate_detailed\"><code>request.socket.getPeerCertificate()</code></a> to obtain the\nclient&#39;s authentication details.</p>\n"
            },
            {
              "textRaw": "`statusCode` {number} ",
              "type": "number",
              "name": "statusCode",
              "meta": {
                "added": [
                  "v0.1.1"
                ],
                "changes": []
              },
              "desc": "<p><strong>Only valid for response obtained from <a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a>.</strong></p>\n<p>The 3-digit HTTP response status code. E.G. <code>404</code>.</p>\n"
            },
            {
              "textRaw": "`statusMessage` {string} ",
              "type": "string",
              "name": "statusMessage",
              "meta": {
                "added": [
                  "v0.11.10"
                ],
                "changes": []
              },
              "desc": "<p><strong>Only valid for response obtained from <a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a>.</strong></p>\n<p>The HTTP response status message (reason phrase). E.G. <code>OK</code> or <code>Internal Server\nError</code>.</p>\n"
            },
            {
              "textRaw": "`trailers` {Object} ",
              "type": "Object",
              "name": "trailers",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "desc": "<p>The request/response trailers object. Only populated at the <code>&#39;end&#39;</code> event.</p>\n"
            },
            {
              "textRaw": "`url` {string} ",
              "type": "string",
              "name": "url",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "desc": "<p><strong>Only valid for request obtained from <a href=\"http.html#http_class_http_server\"><code>http.Server</code></a>.</strong></p>\n<p>Request URL string. This contains only the URL that is\npresent in the actual HTTP request. If the request is:</p>\n<pre><code class=\"lang-txt\">GET /status?name=ryan HTTP/1.1\\r\\n\nAccept: text/plain\\r\\n\n\\r\\n\n</code></pre>\n<p>Then <code>request.url</code> will be:</p>\n<!-- eslint-disable semi -->\n<pre><code class=\"lang-js\">&#39;/status?name=ryan&#39;\n</code></pre>\n<p>To parse the url into its parts <code>require(&#39;url&#39;).parse(request.url)</code>\ncan be used. Example:</p>\n<pre><code class=\"lang-txt\">$ node\n&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;)\nUrl {\n  protocol: null,\n  slashes: null,\n  auth: null,\n  host: null,\n  port: null,\n  hostname: null,\n  hash: null,\n  search: &#39;?name=ryan&#39;,\n  query: &#39;name=ryan&#39;,\n  pathname: &#39;/status&#39;,\n  path: &#39;/status?name=ryan&#39;,\n  href: &#39;/status?name=ryan&#39; }\n</code></pre>\n<p>To extract the parameters from the query string, the\n<code>require(&#39;querystring&#39;).parse</code> function can be used, or\n<code>true</code> can be passed as the second argument to <code>require(&#39;url&#39;).parse</code>.\nExample:</p>\n<pre><code class=\"lang-txt\">$ node\n&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;, true)\nUrl {\n  protocol: null,\n  slashes: null,\n  auth: null,\n  host: null,\n  port: null,\n  hostname: null,\n  hash: null,\n  search: &#39;?name=ryan&#39;,\n  query: { name: &#39;ryan&#39; },\n  pathname: &#39;/status&#39;,\n  path: &#39;/status?name=ryan&#39;,\n  href: &#39;/status?name=ryan&#39; }\n</code></pre>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "message.destroy([error])",
              "type": "method",
              "name": "destroy",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`error` {Error} ",
                      "name": "error",
                      "type": "Error",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "error",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Calls <code>destroy()</code> on the socket that received the <code>IncomingMessage</code>. If <code>error</code>\nis provided, an <code>&#39;error&#39;</code> event is emitted and <code>error</code> is passed as an argument\nto any listeners on the event.</p>\n"
            },
            {
              "textRaw": "message.setTimeout(msecs, callback)",
              "type": "method",
              "name": "setTimeout",
              "meta": {
                "added": [
                  "v0.5.9"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {http.IncomingMessage} ",
                    "name": "return",
                    "type": "http.IncomingMessage"
                  },
                  "params": [
                    {
                      "textRaw": "`msecs` {number} ",
                      "name": "msecs",
                      "type": "number"
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "msecs"
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>Calls <code>message.connection.setTimeout(msecs, callback)</code>.</p>\n"
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "`METHODS` {string[]} ",
          "type": "string[]",
          "name": "METHODS",
          "meta": {
            "added": [
              "v0.11.8"
            ],
            "changes": []
          },
          "desc": "<p>A list of the HTTP methods that are supported by the parser.</p>\n"
        },
        {
          "textRaw": "`STATUS_CODES` {Object} ",
          "type": "Object",
          "name": "STATUS_CODES",
          "meta": {
            "added": [
              "v0.1.22"
            ],
            "changes": []
          },
          "desc": "<p>A collection of all the standard HTTP response status codes, and the\nshort description of each. For example, <code>http.STATUS_CODES[404] === &#39;Not\nFound&#39;</code>.</p>\n"
        },
        {
          "textRaw": "`globalAgent` {http.Agent} ",
          "type": "http.Agent",
          "name": "globalAgent",
          "meta": {
            "added": [
              "v0.5.9"
            ],
            "changes": []
          },
          "desc": "<p>Global instance of <code>Agent</code> which is used as the default for all HTTP client\nrequests.</p>\n"
        }
      ],
      "methods": [
        {
          "textRaw": "http.createServer([options][, requestListener])",
          "type": "method",
          "name": "createServer",
          "meta": {
            "added": [
              "v0.1.13"
            ],
            "changes": [
              {
                "version": "v9.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/15752",
                "description": "The `options` argument is supported now."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {http.Server} ",
                "name": "return",
                "type": "http.Server"
              },
              "params": [
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`IncomingMessage` {http.IncomingMessage} Specifies the `IncomingMessage` class to be used. Useful for extending the original `IncomingMessage`. **Default:** `IncomingMessage`. ",
                      "name": "IncomingMessage",
                      "type": "http.IncomingMessage",
                      "default": "`IncomingMessage`",
                      "desc": "Specifies the `IncomingMessage` class to be used. Useful for extending the original `IncomingMessage`."
                    },
                    {
                      "textRaw": "`ServerResponse` {http.ServerResponse} Specifies the `ServerResponse` class to be used. Useful for extending the original `ServerResponse`. **Default:** `ServerResponse`. ",
                      "name": "ServerResponse",
                      "type": "http.ServerResponse",
                      "default": "`ServerResponse`",
                      "desc": "Specifies the `ServerResponse` class to be used. Useful for extending the original `ServerResponse`."
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "optional": true
                },
                {
                  "textRaw": "`requestListener` {Function} ",
                  "name": "requestListener",
                  "type": "Function",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "requestListener",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Returns a new instance of <a href=\"http.html#http_class_http_server\"><code>http.Server</code></a>.</p>\n<p>The <code>requestListener</code> is a function which is automatically\nadded to the <a href=\"#http2_event_request\"><code>&#39;request&#39;</code></a> event.</p>\n"
        },
        {
          "textRaw": "http.get(options[, callback])",
          "type": "method",
          "name": "get",
          "meta": {
            "added": [
              "v0.3.6"
            ],
            "changes": [
              {
                "version": "v7.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/10638",
                "description": "The `options` parameter can be a WHATWG `URL` object."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {http.ClientRequest} ",
                "name": "return",
                "type": "http.ClientRequest"
              },
              "params": [
                {
                  "textRaw": "`options` {Object | string | URL} Accepts the same `options` as [`http.request()`][], with the `method` always set to `GET`. Properties that are inherited from the prototype are ignored. ",
                  "name": "options",
                  "type": "Object | string | URL",
                  "desc": "Accepts the same `options` as [`http.request()`][], with the `method` always set to `GET`. Properties that are inherited from the prototype are ignored."
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "name": "callback",
                  "type": "Function",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Since most requests are GET requests without bodies, Node.js provides this\nconvenience method. The only difference between this method and\n<a href=\"http.html#http_http_request_options_callback\"><code>http.request()</code></a> is that it sets the method to GET and calls <code>req.end()</code>\nautomatically. Note that the callback must take care to consume the response\ndata for reasons stated in <a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a> section.</p>\n<p>The <code>callback</code> is invoked with a single argument that is an instance of\n<a href=\"#http_class_http_incomingmessage\"><code>http.IncomingMessage</code></a>.</p>\n<p>JSON Fetching Example:</p>\n<pre><code class=\"lang-js\">http.get(&#39;http://nodejs.org/dist/index.json&#39;, (res) =&gt; {\n  const { statusCode } = res;\n  const contentType = res.headers[&#39;content-type&#39;];\n\n  let error;\n  if (statusCode !== 200) {\n    error = new Error(&#39;Request Failed.\\n&#39; +\n                      `Status Code: ${statusCode}`);\n  } else if (!/^application\\/json/.test(contentType)) {\n    error = new Error(&#39;Invalid content-type.\\n&#39; +\n                      `Expected application/json but received ${contentType}`);\n  }\n  if (error) {\n    console.error(error.message);\n    // consume response data to free up memory\n    res.resume();\n    return;\n  }\n\n  res.setEncoding(&#39;utf8&#39;);\n  let rawData = &#39;&#39;;\n  res.on(&#39;data&#39;, (chunk) =&gt; { rawData += chunk; });\n  res.on(&#39;end&#39;, () =&gt; {\n    try {\n      const parsedData = JSON.parse(rawData);\n      console.log(parsedData);\n    } catch (e) {\n      console.error(e.message);\n    }\n  });\n}).on(&#39;error&#39;, (e) =&gt; {\n  console.error(`Got error: ${e.message}`);\n});\n</code></pre>\n"
        },
        {
          "textRaw": "http.request(options[, callback])",
          "type": "method",
          "name": "request",
          "meta": {
            "added": [
              "v0.3.6"
            ],
            "changes": [
              {
                "version": "v7.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/10638",
                "description": "The `options` parameter can be a WHATWG `URL` object."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {http.ClientRequest} ",
                "name": "return",
                "type": "http.ClientRequest"
              },
              "params": [
                {
                  "textRaw": "`options` {Object | string | URL} ",
                  "options": [
                    {
                      "textRaw": "`protocol` {string} Protocol to use. **Default:** `'http:'`. ",
                      "name": "protocol",
                      "type": "string",
                      "default": "`'http:'`",
                      "desc": "Protocol to use."
                    },
                    {
                      "textRaw": "`host` {string} A domain name or IP address of the server to issue the request to. **Default:** `'localhost'`. ",
                      "name": "host",
                      "type": "string",
                      "default": "`'localhost'`",
                      "desc": "A domain name or IP address of the server to issue the request to."
                    },
                    {
                      "textRaw": "`hostname` {string} Alias for `host`. To support [`url.parse()`][], `hostname` is preferred over `host`. ",
                      "name": "hostname",
                      "type": "string",
                      "desc": "Alias for `host`. To support [`url.parse()`][], `hostname` is preferred over `host`."
                    },
                    {
                      "textRaw": "`family` {number} IP address family to use when resolving `host` and `hostname`. Valid values are `4` or `6`. When unspecified, both IP v4 and v6 will be used. ",
                      "name": "family",
                      "type": "number",
                      "desc": "IP address family to use when resolving `host` and `hostname`. Valid values are `4` or `6`. When unspecified, both IP v4 and v6 will be used."
                    },
                    {
                      "textRaw": "`port` {number} Port of remote server. **Default:** `80`. ",
                      "name": "port",
                      "type": "number",
                      "default": "`80`",
                      "desc": "Port of remote server."
                    },
                    {
                      "textRaw": "`localAddress` {string} Local interface to bind for network connections. ",
                      "name": "localAddress",
                      "type": "string",
                      "desc": "Local interface to bind for network connections."
                    },
                    {
                      "textRaw": "`socketPath` {string} Unix Domain Socket (use one of `host:port` or `socketPath`). ",
                      "name": "socketPath",
                      "type": "string",
                      "desc": "Unix Domain Socket (use one of `host:port` or `socketPath`)."
                    },
                    {
                      "textRaw": "`method` {string} A string specifying the HTTP request method. **Default:** `'GET'`. ",
                      "name": "method",
                      "type": "string",
                      "default": "`'GET'`",
                      "desc": "A string specifying the HTTP request method."
                    },
                    {
                      "textRaw": "`path` {string} Request path. Should include query string if any. E.G. `'/index.html?page=12'`. An exception is thrown when the request path contains illegal characters. Currently, only spaces are rejected but that may change in the future. **Default:** `'/'`. ",
                      "name": "path",
                      "type": "string",
                      "default": "`'/'`",
                      "desc": "Request path. Should include query string if any. E.G. `'/index.html?page=12'`. An exception is thrown when the request path contains illegal characters. Currently, only spaces are rejected but that may change in the future."
                    },
                    {
                      "textRaw": "`headers` {Object} An object containing request headers. ",
                      "name": "headers",
                      "type": "Object",
                      "desc": "An object containing request headers."
                    },
                    {
                      "textRaw": "`auth` {string} Basic authentication i.e. `'user:password'` to compute an Authorization header. ",
                      "name": "auth",
                      "type": "string",
                      "desc": "Basic authentication i.e. `'user:password'` to compute an Authorization header."
                    },
                    {
                      "textRaw": "`agent` {http.Agent | boolean} Controls [`Agent`][] behavior. Possible values: ",
                      "options": [
                        {
                          "textRaw": "`undefined` (default): use [`http.globalAgent`][] for this host and port. ",
                          "name": "undefined",
                          "desc": "(default): use [`http.globalAgent`][] for this host and port."
                        },
                        {
                          "textRaw": "`Agent` object: explicitly use the passed in `Agent`. ",
                          "name": "Agent",
                          "desc": "object: explicitly use the passed in `Agent`."
                        },
                        {
                          "textRaw": "`false`: causes a new `Agent` with default values to be used. ",
                          "name": "false",
                          "desc": "causes a new `Agent` with default values to be used."
                        }
                      ],
                      "name": "agent",
                      "type": "http.Agent | boolean",
                      "desc": "Controls [`Agent`][] behavior. Possible values:"
                    },
                    {
                      "textRaw": "`createConnection` {Function} A function that produces a socket/stream to use for the request when the `agent` option is not used. This can be used to avoid creating a custom `Agent` class just to override the default `createConnection` function. See [`agent.createConnection()`][] for more details. Any [`Duplex`][] stream is a valid return value. ",
                      "name": "createConnection",
                      "type": "Function",
                      "desc": "A function that produces a socket/stream to use for the request when the `agent` option is not used. This can be used to avoid creating a custom `Agent` class just to override the default `createConnection` function. See [`agent.createConnection()`][] for more details. Any [`Duplex`][] stream is a valid return value."
                    },
                    {
                      "textRaw": "`timeout` {number}: A number specifying the socket timeout in milliseconds. This will set the timeout before the socket is connected. ",
                      "name": "timeout",
                      "type": "number",
                      "desc": ": A number specifying the socket timeout in milliseconds. This will set the timeout before the socket is connected."
                    },
                    {
                      "textRaw": "`setHost` {boolean}: Specifies whether or not to automatically add the `Host` header. Defaults to `true`. ",
                      "name": "setHost",
                      "type": "boolean",
                      "desc": ": Specifies whether or not to automatically add the `Host` header. Defaults to `true`."
                    }
                  ],
                  "name": "options",
                  "type": "Object | string | URL"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "name": "callback",
                  "type": "Function",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Node.js maintains several connections per server to make HTTP requests.\nThis function allows one to transparently issue requests.</p>\n<p><code>options</code> can be an object, a string, or a <a href=\"url.html#url_class_url\"><code>URL</code></a> object. If <code>options</code> is a\nstring, it is automatically parsed with <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a>. If it is a <a href=\"url.html#url_class_url\"><code>URL</code></a>\nobject, it will be automatically converted to an ordinary <code>options</code> object.</p>\n<p>The optional <code>callback</code> parameter will be added as a one-time listener for\nthe <a href=\"#http_event_response\"><code>&#39;response&#39;</code></a> event.</p>\n<p><code>http.request()</code> returns an instance of the <a href=\"#http_class_http_clientrequest\"><code>http.ClientRequest</code></a>\nclass. The <code>ClientRequest</code> instance is a writable stream. If one needs to\nupload a file with a POST request, then write to the <code>ClientRequest</code> object.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const postData = querystring.stringify({\n  &#39;msg&#39;: &#39;Hello World!&#39;\n});\n\nconst options = {\n  hostname: &#39;www.google.com&#39;,\n  port: 80,\n  path: &#39;/upload&#39;,\n  method: &#39;POST&#39;,\n  headers: {\n    &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,\n    &#39;Content-Length&#39;: Buffer.byteLength(postData)\n  }\n};\n\nconst req = http.request(options, (res) =&gt; {\n  console.log(`STATUS: ${res.statusCode}`);\n  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n  res.setEncoding(&#39;utf8&#39;);\n  res.on(&#39;data&#39;, (chunk) =&gt; {\n    console.log(`BODY: ${chunk}`);\n  });\n  res.on(&#39;end&#39;, () =&gt; {\n    console.log(&#39;No more data in response.&#39;);\n  });\n});\n\nreq.on(&#39;error&#39;, (e) =&gt; {\n  console.error(`problem with request: ${e.message}`);\n});\n\n// write data to request body\nreq.write(postData);\nreq.end();\n</code></pre>\n<p>Note that in the example <code>req.end()</code> was called. With <code>http.request()</code> one\nmust always call <code>req.end()</code> to signify the end of the request -\neven if there is no data being written to the request body.</p>\n<p>If any error is encountered during the request (be that with DNS resolution,\nTCP level errors, or actual HTTP parse errors) an <code>&#39;error&#39;</code> event is emitted\non the returned request object. As with all <code>&#39;error&#39;</code> events, if no listeners\nare registered the error will be thrown.</p>\n<p>There are a few special headers that should be noted.</p>\n<ul>\n<li><p>Sending a &#39;Connection: keep-alive&#39; will notify Node.js that the connection to\nthe server should be persisted until the next request.</p>\n</li>\n<li><p>Sending a &#39;Content-Length&#39; header will disable the default chunked encoding.</p>\n</li>\n<li><p>Sending an &#39;Expect&#39; header will immediately send the request headers.\nUsually, when sending &#39;Expect: 100-continue&#39;, both a timeout and a listener\nfor the <code>&#39;continue&#39;</code> event should be set. See RFC2616 Section 8.2.3 for more\ninformation.</p>\n</li>\n<li><p>Sending an Authorization header will override using the <code>auth</code> option\nto compute basic authentication.</p>\n</li>\n</ul>\n<p>Example using a <a href=\"url.html#url_class_url\"><code>URL</code></a> as <code>options</code>:</p>\n<pre><code class=\"lang-js\">const options = new URL(&#39;http://abc:xyz@example.com&#39;);\n\nconst req = http.request(options, (res) =&gt; {\n  // ...\n});\n</code></pre>\n<p>In a successful request, the following events will be emitted in the following\norder:</p>\n<ul>\n<li><code>&#39;socket&#39;</code></li>\n<li><code>&#39;response&#39;</code><ul>\n<li><code>&#39;data&#39;</code> any number of times, on the <code>res</code> object\n(<code>&#39;data&#39;</code> will not be emitted at all if the response body is empty, for\ninstance, in most redirects)</li>\n<li><code>&#39;end&#39;</code> on the <code>res</code> object</li>\n</ul>\n</li>\n<li><code>&#39;close&#39;</code></li>\n</ul>\n<p>In the case of a connection error, the following events will be emitted:</p>\n<ul>\n<li><code>&#39;socket&#39;</code></li>\n<li><code>&#39;error&#39;</code></li>\n<li><code>&#39;close&#39;</code></li>\n</ul>\n<p>If <code>req.abort()</code> is called before the connection succeeds, the following events\nwill be emitted in the following order:</p>\n<ul>\n<li><code>&#39;socket&#39;</code></li>\n<li>(<code>req.abort()</code> called here)</li>\n<li><code>&#39;abort&#39;</code></li>\n<li><code>&#39;close&#39;</code></li>\n<li><code>&#39;error&#39;</code> with an error with message <code>&#39;Error: socket hang up&#39;</code> and code\n<code>&#39;ECONNRESET&#39;</code></li>\n</ul>\n<p>If <code>req.abort()</code> is called after the response is received, the following events\nwill be emitted in the following order:</p>\n<ul>\n<li><code>&#39;socket&#39;</code></li>\n<li><code>&#39;response&#39;</code><ul>\n<li><code>&#39;data&#39;</code> any number of times, on the <code>res</code> object</li>\n</ul>\n</li>\n<li>(<code>req.abort()</code> called here)</li>\n<li><code>&#39;abort&#39;</code></li>\n<li><code>&#39;close&#39;</code><ul>\n<li><code>&#39;aborted&#39;</code> on the <code>res</code> object</li>\n<li><code>&#39;end&#39;</code> on the <code>res</code> object</li>\n<li><code>&#39;close&#39;</code> on the <code>res</code> object</li>\n</ul>\n</li>\n</ul>\n<p>Note that setting the <code>timeout</code> option or using the <code>setTimeout()</code> function will\nnot abort the request or do anything besides add a <code>&#39;timeout&#39;</code> event.</p>\n<!-- [end-include:http.md] -->\n<!-- [start-include:http2.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "HTTP"
    },
    {
      "textRaw": "HTTP/2",
      "name": "http/2",
      "introduced_in": "v8.4.0",
      "stability": 1,
      "stabilityText": "Experimental",
      "desc": "<p>The <code>http2</code> module provides an implementation of the <a href=\"https://tools.ietf.org/html/rfc7540\">HTTP/2</a> protocol. It\ncan be accessed using:</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\n</code></pre>\n",
      "modules": [
        {
          "textRaw": "Core API",
          "name": "core_api",
          "desc": "<p>The Core API provides a low-level interface designed specifically around\nsupport for HTTP/2 protocol features. It is specifically <em>not</em> designed for\ncompatibility with the existing <a href=\"http.html\">HTTP/1</a> module API. However,\nthe <a href=\"#http2_compatibility_api\">Compatibility API</a> is.</p>\n<p>The <code>http2</code> Core API is much more symmetric between client and server than the\n<code>http</code> API. For instance, most events, like <code>&#39;error&#39;</code>, <code>&#39;connect&#39;</code> and\n<code>&#39;stream&#39;</code>, can be emitted either by client-side code or server-side code.</p>\n",
          "modules": [
            {
              "textRaw": "Server-side example",
              "name": "server-side_example",
              "desc": "<p>The following illustrates a simple HTTP/2 server using the Core API.\nSince there are no browsers known that support\n<a href=\"https://http2.github.io/faq/#does-http2-require-encryption\">unencrypted HTTP/2</a>, the use of\n<a href=\"#http2_http2_createsecureserver_options_onrequesthandler\"><code>http2.createSecureServer()</code></a> is necessary when communicating\nwith browser clients.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst server = http2.createSecureServer({\n  key: fs.readFileSync(&#39;localhost-privkey.pem&#39;),\n  cert: fs.readFileSync(&#39;localhost-cert.pem&#39;)\n});\nserver.on(&#39;error&#39;, (err) =&gt; console.error(err));\n\nserver.on(&#39;stream&#39;, (stream, headers) =&gt; {\n  // stream is a Duplex\n  stream.respond({\n    &#39;content-type&#39;: &#39;text/html&#39;,\n    &#39;:status&#39;: 200\n  });\n  stream.end(&#39;&lt;h1&gt;Hello World&lt;/h1&gt;&#39;);\n});\n\nserver.listen(8443);\n</code></pre>\n<p>To generate the certificate and key for this example, run:</p>\n<pre><code class=\"lang-bash\">openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj &#39;/CN=localhost&#39; \\\n  -keyout localhost-privkey.pem -out localhost-cert.pem\n</code></pre>\n",
              "type": "module",
              "displayName": "Server-side example"
            },
            {
              "textRaw": "Client-side example",
              "name": "client-side_example",
              "desc": "<p>The following illustrates an HTTP/2 client:</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst fs = require(&#39;fs&#39;);\nconst client = http2.connect(&#39;https://localhost:8443&#39;, {\n  ca: fs.readFileSync(&#39;localhost-cert.pem&#39;)\n});\nclient.on(&#39;error&#39;, (err) =&gt; console.error(err));\n\nconst req = client.request({ &#39;:path&#39;: &#39;/&#39; });\n\nreq.on(&#39;response&#39;, (headers, flags) =&gt; {\n  for (const name in headers) {\n    console.log(`${name}: ${headers[name]}`);\n  }\n});\n\nreq.setEncoding(&#39;utf8&#39;);\nlet data = &#39;&#39;;\nreq.on(&#39;data&#39;, (chunk) =&gt; { data += chunk; });\nreq.on(&#39;end&#39;, () =&gt; {\n  console.log(`\\n${data}`);\n  client.close();\n});\nreq.end();\n</code></pre>\n",
              "type": "module",
              "displayName": "Client-side example"
            },
            {
              "textRaw": "Headers Object",
              "name": "headers_object",
              "desc": "<p>Headers are represented as own-properties on JavaScript objects. The property\nkeys will be serialized to lower-case. Property values should be strings (if\nthey are not they will be coerced to strings) or an <code>Array</code> of strings (in order\nto send more than one value per header field).</p>\n<pre><code class=\"lang-js\">const headers = {\n  &#39;:status&#39;: &#39;200&#39;,\n  &#39;content-type&#39;: &#39;text-plain&#39;,\n  &#39;ABC&#39;: [&#39;has&#39;, &#39;more&#39;, &#39;than&#39;, &#39;one&#39;, &#39;value&#39;]\n};\n\nstream.respond(headers);\n</code></pre>\n<p>Header objects passed to callback functions will have a <code>null</code> prototype. This\nmeans that normal JavaScript object methods such as\n<code>Object.prototype.toString()</code> and <code>Object.prototype.hasOwnProperty()</code> will\nnot work.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst server = http2.createServer();\nserver.on(&#39;stream&#39;, (stream, headers) =&gt; {\n  console.log(headers[&#39;:path&#39;]);\n  console.log(headers.ABC);\n});\n</code></pre>\n",
              "type": "module",
              "displayName": "Headers Object"
            },
            {
              "textRaw": "Settings Object",
              "name": "settings_object",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": [
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/16676",
                    "description": "The `maxHeaderListSize` setting is now strictly enforced."
                  }
                ]
              },
              "desc": "<p>The <code>http2.getDefaultSettings()</code>, <code>http2.getPackedSettings()</code>,\n<code>http2.createServer()</code>, <code>http2.createSecureServer()</code>,\n<code>http2session.settings()</code>, <code>http2session.localSettings</code>, and\n<code>http2session.remoteSettings</code> APIs either return or receive as input an\nobject that defines configuration settings for an <code>Http2Session</code> object.\nThese objects are ordinary JavaScript objects containing the following\nproperties.</p>\n<ul>\n<li><code>headerTableSize</code> {number} Specifies the maximum number of bytes used for\nheader compression. The minimum allowed value is 0. The maximum allowed value\nis 2<sup>32</sup>-1. <strong>Default:</strong> <code>4,096 octets</code>.</li>\n<li><code>enablePush</code> {boolean} Specifies <code>true</code> if HTTP/2 Push Streams are to be\npermitted on the <code>Http2Session</code> instances.</li>\n<li><code>initialWindowSize</code> {number} Specifies the <em>senders</em> initial window size\nfor stream-level flow control. The minimum allowed value is 0. The maximum\nallowed value is 2<sup>32</sup>-1. <strong>Default:</strong> <code>65,535 bytes</code>.</li>\n<li><code>maxFrameSize</code> {number} Specifies the size of the largest frame payload.\nThe minimum allowed value is 16,384. The maximum allowed value\nis 2<sup>24</sup>-1. <strong>Default:</strong> <code>16,384 bytes</code>.</li>\n<li><code>maxConcurrentStreams</code> {number} Specifies the maximum number of concurrent\nstreams permitted on an <code>Http2Session</code>. There is no default value which\nimplies, at least theoretically, 2<sup>31</sup>-1 streams may be open\nconcurrently at any given time in an <code>Http2Session</code>. The minimum value\nis 0. The maximum allowed value is 2<sup>31</sup>-1.</li>\n<li><code>maxHeaderListSize</code> {number} Specifies the maximum size (uncompressed octets)\nof header list that will be accepted. The minimum allowed value is 0. The\nmaximum allowed value is 2<sup>32</sup>-1. <strong>Default:</strong> <code>65535</code>.</li>\n</ul>\n<p>All additional properties on the settings object are ignored.</p>\n",
              "type": "module",
              "displayName": "Settings Object"
            },
            {
              "textRaw": "Using `options.selectPadding()`",
              "name": "using_`options.selectpadding()`",
              "desc": "<p>When <code>options.paddingStrategy</code> is equal to\n<code>http2.constants.PADDING_STRATEGY_CALLBACK</code>, the HTTP/2 implementation will\nconsult the <code>options.selectPadding()</code> callback function, if provided, to\ndetermine the specific amount of padding to use per <code>HEADERS</code> and <code>DATA</code> frame.</p>\n<p>The <code>options.selectPadding()</code> function receives two numeric arguments,\n<code>frameLen</code> and <code>maxFrameLen</code> and must return a number <code>N</code> such that\n<code>frameLen &lt;= N &lt;= maxFrameLen</code>.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst server = http2.createServer({\n  paddingStrategy: http2.constants.PADDING_STRATEGY_CALLBACK,\n  selectPadding(frameLen, maxFrameLen) {\n    return maxFrameLen;\n  }\n});\n</code></pre>\n<p>The <code>options.selectPadding()</code> function is invoked once for <em>every</em> <code>HEADERS</code> and\n<code>DATA</code> frame. This has a definite noticeable impact on performance.</p>\n",
              "type": "module",
              "displayName": "Using `options.selectPadding()`"
            },
            {
              "textRaw": "Error Handling",
              "name": "error_handling",
              "desc": "<p>There are several types of error conditions that may arise when using the\n<code>http2</code> module:</p>\n<p>Validation errors occur when an incorrect argument, option, or setting value is\npassed in. These will always be reported by a synchronous <code>throw</code>.</p>\n<p>State errors occur when an action is attempted at an incorrect time (for\ninstance, attempting to send data on a stream after it has closed). These will\nbe reported using either a synchronous <code>throw</code> or via an <code>&#39;error&#39;</code> event on\nthe <code>Http2Stream</code>, <code>Http2Session</code> or HTTP/2 Server objects, depending on where\nand when the error occurs.</p>\n<p>Internal errors occur when an HTTP/2 session fails unexpectedly. These will be\nreported via an <code>&#39;error&#39;</code> event on the <code>Http2Session</code> or HTTP/2 Server objects.</p>\n<p>Protocol errors occur when various HTTP/2 protocol constraints are violated.\nThese will be reported using either a synchronous <code>throw</code> or via an <code>&#39;error&#39;</code>\nevent on the <code>Http2Stream</code>, <code>Http2Session</code> or HTTP/2 Server objects, depending\non where and when the error occurs.</p>\n",
              "type": "module",
              "displayName": "Error Handling"
            },
            {
              "textRaw": "Invalid character handling in header names and values",
              "name": "invalid_character_handling_in_header_names_and_values",
              "desc": "<p>The HTTP/2 implementation applies stricter handling of invalid characters in\nHTTP header names and values than the HTTP/1 implementation.</p>\n<p>Header field names are <em>case-insensitive</em> and are transmitted over the wire\nstrictly as lower-case strings. The API provided by Node.js allows header\nnames to be set as mixed-case strings (e.g. <code>Content-Type</code>) but will convert\nthose to lower-case (e.g. <code>content-type</code>) upon transmission.</p>\n<p>Header field-names <em>must only</em> contain one or more of the following ASCII\ncharacters: <code>a</code>-<code>z</code>, <code>A</code>-<code>Z</code>, <code>0</code>-<code>9</code>, <code>!</code>, <code>#</code>, <code>$</code>, <code>%</code>, <code>&amp;</code>, <code>&#39;</code>, <code>*</code>, <code>+</code>,\n<code>-</code>, <code>.</code>, <code>^</code>, <code>_</code>, <code>` </code> (backtick), <code>|</code>, and <code>~</code>.</p>\n<p>Using invalid characters within an HTTP header field name will cause the\nstream to be closed with a protocol error being reported.</p>\n<p>Header field values are handled with more leniency but <em>should</em> not contain\nnew-line or carriage return characters and <em>should</em> be limited to US-ASCII\ncharacters, per the requirements of the HTTP specification.</p>\n",
              "type": "module",
              "displayName": "Invalid character handling in header names and values"
            },
            {
              "textRaw": "Push streams on the client",
              "name": "push_streams_on_the_client",
              "desc": "<p>To receive pushed streams on the client, set a listener for the <code>&#39;stream&#39;</code>\nevent on the <code>ClientHttp2Session</code>:</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\n\nconst client = http2.connect(&#39;http://localhost&#39;);\n\nclient.on(&#39;stream&#39;, (pushedStream, requestHeaders) =&gt; {\n  pushedStream.on(&#39;push&#39;, (responseHeaders) =&gt; {\n    // process response headers\n  });\n  pushedStream.on(&#39;data&#39;, (chunk) =&gt; { /* handle pushed data */ });\n});\n\nconst req = client.request({ &#39;:path&#39;: &#39;/&#39; });\n</code></pre>\n",
              "type": "module",
              "displayName": "Push streams on the client"
            },
            {
              "textRaw": "Supporting the CONNECT method",
              "name": "supporting_the_connect_method",
              "desc": "<p>The <code>CONNECT</code> method is used to allow an HTTP/2 server to be used as a proxy\nfor TCP/IP connections.</p>\n<p>A simple TCP Server:</p>\n<pre><code class=\"lang-js\">const net = require(&#39;net&#39;);\n\nconst server = net.createServer((socket) =&gt; {\n  let name = &#39;&#39;;\n  socket.setEncoding(&#39;utf8&#39;);\n  socket.on(&#39;data&#39;, (chunk) =&gt; name += chunk);\n  socket.on(&#39;end&#39;, () =&gt; socket.end(`hello ${name}`));\n});\n\nserver.listen(8000);\n</code></pre>\n<p>An HTTP/2 CONNECT proxy:</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst { NGHTTP2_REFUSED_STREAM } = http2.constants;\nconst net = require(&#39;net&#39;);\n\nconst proxy = http2.createServer();\nproxy.on(&#39;stream&#39;, (stream, headers) =&gt; {\n  if (headers[&#39;:method&#39;] !== &#39;CONNECT&#39;) {\n    // Only accept CONNECT requests\n    stream.close(NGHTTP2_REFUSED_STREAM);\n    return;\n  }\n  const auth = new URL(`tcp://${headers[&#39;:authority&#39;]}`);\n  // It&#39;s a very good idea to verify that hostname and port are\n  // things this proxy should be connecting to.\n  const socket = net.connect(auth.port, auth.hostname, () =&gt; {\n    stream.respond();\n    socket.pipe(stream);\n    stream.pipe(socket);\n  });\n  socket.on(&#39;error&#39;, (error) =&gt; {\n    stream.close(http2.constants.NGHTTP2_CONNECT_ERROR);\n  });\n});\n\nproxy.listen(8001);\n</code></pre>\n<p>An HTTP/2 CONNECT client:</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\n\nconst client = http2.connect(&#39;http://localhost:8001&#39;);\n\n// Must not specify the &#39;:path&#39; and &#39;:scheme&#39; headers\n// for CONNECT requests or an error will be thrown.\nconst req = client.request({\n  &#39;:method&#39;: &#39;CONNECT&#39;,\n  &#39;:authority&#39;: `localhost:${port}`\n});\n\nreq.on(&#39;response&#39;, (headers) =&gt; {\n  console.log(headers[http2.constants.HTTP2_HEADER_STATUS]);\n});\nlet data = &#39;&#39;;\nreq.setEncoding(&#39;utf8&#39;);\nreq.on(&#39;data&#39;, (chunk) =&gt; data += chunk);\nreq.on(&#39;end&#39;, () =&gt; {\n  console.log(`The server says: ${data}`);\n  client.close();\n});\nreq.end(&#39;Jane&#39;);\n</code></pre>\n",
              "type": "module",
              "displayName": "Supporting the CONNECT method"
            }
          ],
          "classes": [
            {
              "textRaw": "Class: Http2Session",
              "type": "class",
              "name": "Http2Session",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: {EventEmitter}</li>\n</ul>\n<p>Instances of the <code>http2.Http2Session</code> class represent an active communications\nsession between an HTTP/2 client and server. Instances of this class are <em>not</em>\nintended to be constructed directly by user code.</p>\n<p>Each <code>Http2Session</code> instance will exhibit slightly different behaviors\ndepending on whether it is operating as a server or a client. The\n<code>http2session.type</code> property can be used to determine the mode in which an\n<code>Http2Session</code> is operating. On the server side, user code should rarely\nhave occasion to work with the <code>Http2Session</code> object directly, with most\nactions typically taken through interactions with either the <code>Http2Server</code> or\n<code>Http2Stream</code> objects.</p>\n",
              "modules": [
                {
                  "textRaw": "`Http2Session` and Sockets",
                  "name": "`http2session`_and_sockets",
                  "desc": "<p>Every <code>Http2Session</code> instance is associated with exactly one <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> or\n<a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> when it is created. When either the <code>Socket</code> or the\n<code>Http2Session</code> are destroyed, both will be destroyed.</p>\n<p>Because the of the specific serialization and processing requirements imposed\nby the HTTP/2 protocol, it is not recommended for user code to read data from\nor write data to a <code>Socket</code> instance bound to a <code>Http2Session</code>. Doing so can\nput the HTTP/2 session into an indeterminate state causing the session and\nthe socket to become unusable.</p>\n<p>Once a <code>Socket</code> has been bound to an <code>Http2Session</code>, user code should rely\nsolely on the API of the <code>Http2Session</code>.</p>\n",
                  "type": "module",
                  "displayName": "`Http2Session` and Sockets"
                }
              ],
              "events": [
                {
                  "textRaw": "Event: 'close'",
                  "type": "event",
                  "name": "close",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;close&#39;</code> event is emitted once the <code>Http2Session</code> has been destroyed. Its\nlistener does not expect any arguments.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'connect'",
                  "type": "event",
                  "name": "connect",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>The <code>&#39;connect&#39;</code> event is emitted once the <code>Http2Session</code> has been successfully\nconnected to the remote peer and communication may begin.</p>\n<p>User code will typically not listen for this event directly.</p>\n"
                },
                {
                  "textRaw": "Event: 'error'",
                  "type": "event",
                  "name": "error",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>The <code>&#39;error&#39;</code> event is emitted when an error occurs during the processing of\nan <code>Http2Session</code>.</p>\n"
                },
                {
                  "textRaw": "Event: 'frameError'",
                  "type": "event",
                  "name": "frameError",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>The <code>&#39;frameError&#39;</code> event is emitted when an error occurs while attempting to\nsend a frame on the session. If the frame that could not be sent is associated\nwith a specific <code>Http2Stream</code>, an attempt to emit <code>&#39;frameError&#39;</code> event on the\n<code>Http2Stream</code> is made.</p>\n<p>If the <code>&#39;frameError&#39;</code> event is associated with a stream, the stream will be\nclosed and destroyed immediately following the <code>&#39;frameError&#39;</code> event. If the\nevent is not associated with a stream, the <code>Http2Session</code> will be shut down\nimmediately following the <code>&#39;frameError&#39;</code> event.</p>\n"
                },
                {
                  "textRaw": "Event: 'goaway'",
                  "type": "event",
                  "name": "goaway",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>The <code>&#39;goaway&#39;</code> event is emitted when a <code>GOAWAY</code> frame is received.</p>\n<p>The <code>Http2Session</code> instance will be shut down automatically when the <code>&#39;goaway&#39;</code>\nevent is emitted.</p>\n"
                },
                {
                  "textRaw": "Event: 'localSettings'",
                  "type": "event",
                  "name": "localSettings",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>The <code>&#39;localSettings&#39;</code> event is emitted when an acknowledgment <code>SETTINGS</code> frame\nhas been received.</p>\n<p>When using <code>http2session.settings()</code> to submit new settings, the modified\nsettings do not take effect until the <code>&#39;localSettings&#39;</code> event is emitted.</p>\n<pre><code class=\"lang-js\">session.settings({ enablePush: false });\n\nsession.on(&#39;localSettings&#39;, (settings) =&gt; {\n  /* Use the new settings */\n});\n</code></pre>\n"
                },
                {
                  "textRaw": "Event: 'remoteSettings'",
                  "type": "event",
                  "name": "remoteSettings",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>The <code>&#39;remoteSettings&#39;</code> event is emitted when a new <code>SETTINGS</code> frame is received\nfrom the connected peer.</p>\n<pre><code class=\"lang-js\">session.on(&#39;remoteSettings&#39;, (settings) =&gt; {\n  /* Use the new settings */\n});\n</code></pre>\n"
                },
                {
                  "textRaw": "Event: 'stream'",
                  "type": "event",
                  "name": "stream",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>The <code>&#39;stream&#39;</code> event is emitted when a new <code>Http2Stream</code> is created.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nsession.on(&#39;stream&#39;, (stream, headers, flags) =&gt; {\n  const method = headers[&#39;:method&#39;];\n  const path = headers[&#39;:path&#39;];\n  // ...\n  stream.respond({\n    &#39;:status&#39;: 200,\n    &#39;content-type&#39;: &#39;text/plain&#39;\n  });\n  stream.write(&#39;hello &#39;);\n  stream.end(&#39;world&#39;);\n});\n</code></pre>\n<p>On the server side, user code will typically not listen for this event directly,\nand would instead register a handler for the <code>&#39;stream&#39;</code> event emitted by the\n<code>net.Server</code> or <code>tls.Server</code> instances returned by <code>http2.createServer()</code> and\n<code>http2.createSecureServer()</code>, respectively, as in the example below:</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\n\n// Create an unencrypted HTTP/2 server\nconst server = http2.createServer();\n\nserver.on(&#39;stream&#39;, (stream, headers) =&gt; {\n  stream.respond({\n    &#39;content-type&#39;: &#39;text/html&#39;,\n    &#39;:status&#39;: 200\n  });\n  stream.end(&#39;&lt;h1&gt;Hello World&lt;/h1&gt;&#39;);\n});\n\nserver.listen(80);\n</code></pre>\n"
                },
                {
                  "textRaw": "Event: 'timeout'",
                  "type": "event",
                  "name": "timeout",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>After the <code>http2session.setTimeout()</code> method is used to set the timeout period\nfor this <code>Http2Session</code>, the <code>&#39;timeout&#39;</code> event is emitted if there is no\nactivity on the <code>Http2Session</code> after the configured number of milliseconds.</p>\n<pre><code class=\"lang-js\">session.setTimeout(2000);\nsession.on(&#39;timeout&#39;, () =&gt; { /* .. */ });\n</code></pre>\n",
                  "params": []
                }
              ],
              "properties": [
                {
                  "textRaw": "`alpnProtocol` {string|undefined} ",
                  "type": "string|undefined",
                  "name": "alpnProtocol",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Value will be <code>undefined</code> if the <code>Http2Session</code> is not yet connected to a\nsocket, <code>h2c</code> if the <code>Http2Session</code> is not connected to a <code>TLSSocket</code>, or\nwill return the value of the connected <code>TLSSocket</code>&#39;s own <code>alpnProtocol</code>\nproperty.</p>\n"
                },
                {
                  "textRaw": "`closed` {boolean} ",
                  "type": "boolean",
                  "name": "closed",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Will be <code>true</code> if this <code>Http2Session</code> instance has been closed, otherwise\n<code>false</code>.</p>\n"
                },
                {
                  "textRaw": "`connecting` {boolean} ",
                  "type": "boolean",
                  "name": "connecting",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Will be <code>true</code> if this <code>Http2Session</code> instance is still connecting, will be set\nto <code>false</code> before emitting <code>connect</code> event and/or calling the <code>http2.connect</code>\ncallback.</p>\n"
                },
                {
                  "textRaw": "`destroyed` {boolean} ",
                  "type": "boolean",
                  "name": "destroyed",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Will be <code>true</code> if this <code>Http2Session</code> instance has been destroyed and must no\nlonger be used, otherwise <code>false</code>.</p>\n"
                },
                {
                  "textRaw": "`encrypted` {boolean|undefined} ",
                  "type": "boolean|undefined",
                  "name": "encrypted",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Value is <code>undefined</code> if the <code>Http2Session</code> session socket has not yet been\nconnected, <code>true</code> if the <code>Http2Session</code> is connected with a <code>TLSSocket</code>,\nand <code>false</code> if the <code>Http2Session</code> is connected to any other kind of socket\nor stream.</p>\n"
                },
                {
                  "textRaw": "`localSettings` {HTTP/2 Settings Object} ",
                  "type": "HTTP/2 Settings Object",
                  "name": "localSettings",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>A prototype-less object describing the current local settings of this\n<code>Http2Session</code>. The local settings are local to <em>this</em> <code>Http2Session</code> instance.</p>\n"
                },
                {
                  "textRaw": "`originSet` {string[]|undefined} ",
                  "type": "string[]|undefined",
                  "name": "originSet",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>If the <code>Http2Session</code> is connected to a <code>TLSSocket</code>, the <code>originSet</code> property\nwill return an <code>Array</code> of origins for which the <code>Http2Session</code> may be\nconsidered authoritative.</p>\n"
                },
                {
                  "textRaw": "`pendingSettingsAck` {boolean} ",
                  "type": "boolean",
                  "name": "pendingSettingsAck",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Indicates whether or not the <code>Http2Session</code> is currently waiting for an\nacknowledgment for a sent <code>SETTINGS</code> frame. Will be <code>true</code> after calling the\n<code>http2session.settings()</code> method. Will be <code>false</code> once all sent SETTINGS\nframes have been acknowledged.</p>\n"
                },
                {
                  "textRaw": "`remoteSettings` {HTTP/2 Settings Object} ",
                  "type": "HTTP/2 Settings Object",
                  "name": "remoteSettings",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>A prototype-less object describing the current remote settings of this\n<code>Http2Session</code>. The remote settings are set by the <em>connected</em> HTTP/2 peer.</p>\n"
                },
                {
                  "textRaw": "`socket` {net.Socket|tls.TLSSocket} ",
                  "type": "net.Socket|tls.TLSSocket",
                  "name": "socket",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Returns a <code>Proxy</code> object that acts as a <code>net.Socket</code> (or <code>tls.TLSSocket</code>) but\nlimits available methods to ones safe to use with HTTP/2.</p>\n<p><code>destroy</code>, <code>emit</code>, <code>end</code>, <code>pause</code>, <code>read</code>, <code>resume</code>, and <code>write</code> will throw\nan error with code <code>ERR_HTTP2_NO_SOCKET_MANIPULATION</code>. See\n<a href=\"#http2_http2session_and_sockets\"><code>Http2Session</code> and Sockets</a> for more information.</p>\n<p><code>setTimeout</code> method will be called on this <code>Http2Session</code>.</p>\n<p>All other interactions will be routed directly to the socket.</p>\n"
                },
                {
                  "textRaw": "http2session.state",
                  "name": "state",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Provides miscellaneous information about the current state of the\n<code>Http2Session</code>.</p>\n<ul>\n<li>{Object}<ul>\n<li><code>effectiveLocalWindowSize</code> {number} The current local (receive)\nflow control window size for the <code>Http2Session</code>.</li>\n<li><code>effectiveRecvDataLength</code> {number} The current number of bytes\nthat have been received since the last flow control <code>WINDOW_UPDATE</code>.</li>\n<li><code>nextStreamID</code> {number} The numeric identifier to be used the\nnext time a new <code>Http2Stream</code> is created by this <code>Http2Session</code>.</li>\n<li><code>localWindowSize</code> {number} The number of bytes that the remote peer can\nsend without receiving a <code>WINDOW_UPDATE</code>.</li>\n<li><code>lastProcStreamID</code> {number} The numeric id of the <code>Http2Stream</code>\nfor which a <code>HEADERS</code> or <code>DATA</code> frame was most recently received.</li>\n<li><code>remoteWindowSize</code> {number} The number of bytes that this <code>Http2Session</code>\nmay send without receiving a <code>WINDOW_UPDATE</code>.</li>\n<li><code>outboundQueueSize</code> {number} The number of frames currently within the\noutbound queue for this <code>Http2Session</code>.</li>\n<li><code>deflateDynamicTableSize</code> {number} The current size in bytes of the\noutbound header compression state table.</li>\n<li><code>inflateDynamicTableSize</code> {number} The current size in bytes of the\ninbound header compression state table.</li>\n</ul>\n</li>\n</ul>\n<p>An object describing the current status of this <code>Http2Session</code>.</p>\n"
                },
                {
                  "textRaw": "`type` {number} ",
                  "type": "number",
                  "name": "type",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>http2session.type</code> will be equal to\n<code>http2.constants.NGHTTP2_SESSION_SERVER</code> if this <code>Http2Session</code> instance is a\nserver, and <code>http2.constants.NGHTTP2_SESSION_CLIENT</code> if the instance is a\nclient.</p>\n"
                }
              ],
              "methods": [
                {
                  "textRaw": "http2session.close([callback])",
                  "type": "method",
                  "name": "close",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`callback` {Function} ",
                          "name": "callback",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "callback",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Gracefully closes the <code>Http2Session</code>, allowing any existing streams to\ncomplete on their own and preventing new <code>Http2Stream</code> instances from being\ncreated. Once closed, <code>http2session.destroy()</code> <em>might</em> be called if there\nare no open <code>Http2Stream</code> instances.</p>\n<p>If specified, the <code>callback</code> function is registered as a handler for the\n<code>&#39;close&#39;</code> event.</p>\n"
                },
                {
                  "textRaw": "http2session.destroy([error,][code])",
                  "type": "method",
                  "name": "destroy",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`error` {Error} An `Error` object if the `Http2Session` is being destroyed due to an error. ",
                          "name": "error",
                          "type": "Error",
                          "desc": "An `Error` object if the `Http2Session` is being destroyed due to an error.",
                          "optional": true
                        },
                        {
                          "textRaw": "`code` {number} The HTTP/2 error code to send in the final `GOAWAY` frame. If unspecified, and `error` is not undefined, the default is `INTERNAL_ERROR`, otherwise defaults to `NO_ERROR`. ",
                          "name": "code",
                          "type": "number",
                          "desc": "The HTTP/2 error code to send in the final `GOAWAY` frame. If unspecified, and `error` is not undefined, the default is `INTERNAL_ERROR`, otherwise defaults to `NO_ERROR`.",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "error",
                          "optional": true
                        },
                        {
                          "name": "code",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Immediately terminates the <code>Http2Session</code> and the associated <code>net.Socket</code> or\n<code>tls.TLSSocket</code>.</p>\n<p>Once destroyed, the <code>Http2Session</code> will emit the <code>&#39;close&#39;</code> event. If <code>error</code>\nis not undefined, an <code>&#39;error&#39;</code> event will be emitted immediately before the\n<code>&#39;close&#39;</code> event.</p>\n<p>If there are any remaining open <code>Http2Streams</code> associated with the\n<code>Http2Session</code>, those will also be destroyed.</p>\n"
                },
                {
                  "textRaw": "http2session.goaway([code, [lastStreamID, [opaqueData]]])",
                  "type": "method",
                  "name": "goaway",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`code` {number} An HTTP/2 error code ",
                          "name": "code",
                          "type": "number",
                          "desc": "An HTTP/2 error code",
                          "optional": true
                        },
                        {
                          "textRaw": "`lastStreamID` {number} The numeric ID of the last processed `Http2Stream` ",
                          "name": "lastStreamID",
                          "type": "number",
                          "desc": "The numeric ID of the last processed `Http2Stream`",
                          "optional": true
                        },
                        {
                          "textRaw": "`opaqueData` {Buffer|TypedArray|DataView} A `TypedArray` or `DataView` instance containing additional data to be carried within the `GOAWAY` frame. ",
                          "name": "opaqueData",
                          "type": "Buffer|TypedArray|DataView",
                          "desc": "A `TypedArray` or `DataView` instance containing additional data to be carried within the `GOAWAY` frame.",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "code",
                          "optional": true
                        },
                        {
                          "name": "lastStreamID",
                          "optional": true
                        },
                        {
                          "name": "opaqueData",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Transmits a <code>GOAWAY</code> frame to the connected peer <em>without</em> shutting down the\n<code>Http2Session</code>.</p>\n"
                },
                {
                  "textRaw": "http2session.ping([payload, ]callback)",
                  "type": "method",
                  "name": "ping",
                  "meta": {
                    "added": [
                      "v8.9.3"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {boolean} ",
                        "name": "return",
                        "type": "boolean"
                      },
                      "params": [
                        {
                          "textRaw": "`payload` {Buffer|TypedArray|DataView} Optional ping payload. ",
                          "name": "payload",
                          "type": "Buffer|TypedArray|DataView",
                          "desc": "Optional ping payload.",
                          "optional": true
                        },
                        {
                          "textRaw": "`callback` {Function} ",
                          "name": "callback",
                          "type": "Function"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "payload",
                          "optional": true
                        },
                        {
                          "name": "callback"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Sends a <code>PING</code> frame to the connected HTTP/2 peer. A <code>callback</code> function must\nbe provided. The method will return <code>true</code> if the <code>PING</code> was sent, <code>false</code>\notherwise.</p>\n<p>The maximum number of outstanding (unacknowledged) pings is determined by the\n<code>maxOutstandingPings</code> configuration option. The default maximum is 10.</p>\n<p>If provided, the <code>payload</code> must be a <code>Buffer</code>, <code>TypedArray</code>, or <code>DataView</code>\ncontaining 8 bytes of data that will be transmitted with the <code>PING</code> and\nreturned with the ping acknowledgment.</p>\n<p>The callback will be invoked with three arguments: an error argument that will\nbe <code>null</code> if the <code>PING</code> was successfully acknowledged, a <code>duration</code> argument\nthat reports the number of milliseconds elapsed since the ping was sent and the\nacknowledgment was received, and a <code>Buffer</code> containing the 8-byte <code>PING</code>\npayload.</p>\n<pre><code class=\"lang-js\">session.ping(Buffer.from(&#39;abcdefgh&#39;), (err, duration, payload) =&gt; {\n  if (!err) {\n    console.log(`Ping acknowledged in ${duration} milliseconds`);\n    console.log(`With payload &#39;${payload.toString()}&#39;`);\n  }\n});\n</code></pre>\n<p>If the <code>payload</code> argument is not specified, the default payload will be the\n64-bit timestamp (little endian) marking the start of the <code>PING</code> duration.</p>\n"
                },
                {
                  "textRaw": "http2session.ref()",
                  "type": "method",
                  "name": "ref",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Calls <a href=\"net.html#net_socket_ref\"><code>ref()</code></a> on this <code>Http2Session</code>\ninstance&#39;s underlying <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>.</p>\n",
                  "signatures": [
                    {
                      "params": []
                    }
                  ]
                },
                {
                  "textRaw": "http2session.setTimeout(msecs, callback)",
                  "type": "method",
                  "name": "setTimeout",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`msecs` {number} ",
                          "name": "msecs",
                          "type": "number"
                        },
                        {
                          "textRaw": "`callback` {Function} ",
                          "name": "callback",
                          "type": "Function"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "msecs"
                        },
                        {
                          "name": "callback"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Used to set a callback function that is called when there is no activity on\nthe <code>Http2Session</code> after <code>msecs</code> milliseconds. The given <code>callback</code> is\nregistered as a listener on the <code>&#39;timeout&#39;</code> event.</p>\n"
                },
                {
                  "textRaw": "http2session.settings(settings)",
                  "type": "method",
                  "name": "settings",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`settings` {HTTP/2 Settings Object} ",
                          "name": "settings",
                          "type": "HTTP/2 Settings Object"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "settings"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Updates the current local settings for this <code>Http2Session</code> and sends a new\n<code>SETTINGS</code> frame to the connected HTTP/2 peer.</p>\n<p>Once called, the <code>http2session.pendingSettingsAck</code> property will be <code>true</code>\nwhile the session is waiting for the remote peer to acknowledge the new\nsettings.</p>\n<p>The new settings will not become effective until the <code>SETTINGS</code> acknowledgment\nis received and the <code>&#39;localSettings&#39;</code> event is emitted. It is possible to send\nmultiple <code>SETTINGS</code> frames while acknowledgment is still pending.</p>\n"
                },
                {
                  "textRaw": "http2session.unref()",
                  "type": "method",
                  "name": "unref",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Calls <a href=\"net.html#net_socket_unref\"><code>unref()</code></a> on this <code>Http2Session</code>\ninstance&#39;s underlying <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>.</p>\n",
                  "signatures": [
                    {
                      "params": []
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Class: ServerHttp2Session",
              "type": "class",
              "name": "ServerHttp2Session",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "methods": [
                {
                  "textRaw": "serverhttp2session.altsvc(alt, originOrStream)",
                  "type": "method",
                  "name": "altsvc",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`alt` {string} A description of the alternative service configuration as defined by [RFC 7838][]. ",
                          "name": "alt",
                          "type": "string",
                          "desc": "A description of the alternative service configuration as defined by [RFC 7838][]."
                        },
                        {
                          "textRaw": "`originOrStream` {number|string|URL|Object} Either a URL string specifying the origin (or an `Object` with an `origin` property) or the numeric identifier of an active `Http2Stream` as given by the `http2stream.id` property. ",
                          "name": "originOrStream",
                          "type": "number|string|URL|Object",
                          "desc": "Either a URL string specifying the origin (or an `Object` with an `origin` property) or the numeric identifier of an active `Http2Stream` as given by the `http2stream.id` property."
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "alt"
                        },
                        {
                          "name": "originOrStream"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Submits an <code>ALTSVC</code> frame (as defined by <a href=\"https://tools.ietf.org/html/rfc7838\">RFC 7838</a>) to the connected client.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\n\nconst server = http2.createServer();\nserver.on(&#39;session&#39;, (session) =&gt; {\n  // Set altsvc for origin https://example.org:80\n  session.altsvc(&#39;h2=&quot;:8000&quot;&#39;, &#39;https://example.org:80&#39;);\n});\n\nserver.on(&#39;stream&#39;, (stream) =&gt; {\n  // Set altsvc for a specific stream\n  stream.session.altsvc(&#39;h2=&quot;:8000&quot;&#39;, stream.id);\n});\n</code></pre>\n<p>Sending an <code>ALTSVC</code> frame with a specific stream ID indicates that the alternate\nservice is associated with the origin of the given <code>Http2Stream</code>.</p>\n<p>The <code>alt</code> and origin string <em>must</em> contain only ASCII bytes and are\nstrictly interpreted as a sequence of ASCII bytes. The special value <code>&#39;clear&#39;</code>\nmay be passed to clear any previously set alternative service for a given\ndomain.</p>\n<p>When a string is passed for the <code>originOrStream</code> argument, it will be parsed as\na URL and the origin will be derived. For instance, the origin for the\nHTTP URL <code>&#39;https://example.org/foo/bar&#39;</code> is the ASCII string\n<code>&#39;https://example.org&#39;</code>. An error will be thrown if either the given string\ncannot be parsed as a URL or if a valid origin cannot be derived.</p>\n<p>A <code>URL</code> object, or any object with an <code>origin</code> property, may be passed as\n<code>originOrStream</code>, in which case the value of the <code>origin</code> property will be\nused. The value of the <code>origin</code> property <em>must</em> be a properly serialized\nASCII origin.</p>\n"
                }
              ],
              "modules": [
                {
                  "textRaw": "Specifying alternative services",
                  "name": "specifying_alternative_services",
                  "desc": "<p>The format of the <code>alt</code> parameter is strictly defined by <a href=\"https://tools.ietf.org/html/rfc7838\">RFC 7838</a> as an\nASCII string containing a comma-delimited list of &quot;alternative&quot; protocols\nassociated with a specific host and port.</p>\n<p>For example, the value <code>&#39;h2=&quot;example.org:81&quot;&#39;</code> indicates that the HTTP/2\nprotocol is available on the host <code>&#39;example.org&#39;</code> on TCP/IP port 81. The\nhost and port <em>must</em> be contained within the quote (<code>&quot;</code>) characters.</p>\n<p>Multiple alternatives may be specified, for instance: <code>&#39;h2=&quot;example.org:81&quot;,\nh2=&quot;:82&quot;&#39;</code>.</p>\n<p>The protocol identifier (<code>&#39;h2&#39;</code> in the examples) may be any valid\n<a href=\"https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids\">ALPN Protocol ID</a>.</p>\n<p>The syntax of these values is not validated by the Node.js implementation and\nare passed through as provided by the user or received from the peer.</p>\n",
                  "type": "module",
                  "displayName": "Specifying alternative services"
                }
              ]
            },
            {
              "textRaw": "Class: ClientHttp2Session",
              "type": "class",
              "name": "ClientHttp2Session",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "events": [
                {
                  "textRaw": "Event: 'altsvc'",
                  "type": "event",
                  "name": "altsvc",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>The <code>&#39;altsvc&#39;</code> event is emitted whenever an <code>ALTSVC</code> frame is received by\nthe client. The event is emitted with the <code>ALTSVC</code> value, origin, and stream\nID. If no <code>origin</code> is provided in the <code>ALTSVC</code> frame, <code>origin</code> will\nbe an empty string.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst client = http2.connect(&#39;https://example.org&#39;);\n\nclient.on(&#39;altsvc&#39;, (alt, origin, streamId) =&gt; {\n  console.log(alt);\n  console.log(origin);\n  console.log(streamId);\n});\n</code></pre>\n"
                }
              ],
              "methods": [
                {
                  "textRaw": "clienthttp2session.request(headers[, options])",
                  "type": "method",
                  "name": "request",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {ClientHttp2Stream} ",
                        "name": "return",
                        "type": "ClientHttp2Stream"
                      },
                      "params": [
                        {
                          "textRaw": "`headers` {HTTP/2 Headers Object} ",
                          "name": "headers",
                          "type": "HTTP/2 Headers Object"
                        },
                        {
                          "textRaw": "`options` {Object} ",
                          "options": [
                            {
                              "textRaw": "`endStream` {boolean} `true` if the `Http2Stream` *writable* side should be closed initially, such as when sending a `GET` request that should not expect a payload body. ",
                              "name": "endStream",
                              "type": "boolean",
                              "desc": "`true` if the `Http2Stream` *writable* side should be closed initially, such as when sending a `GET` request that should not expect a payload body."
                            },
                            {
                              "textRaw": "`exclusive` {boolean} When `true` and `parent` identifies a parent Stream, the created stream is made the sole direct dependency of the parent, with all other existing dependents made a dependent of the newly created stream. **Default:** `false`. ",
                              "name": "exclusive",
                              "type": "boolean",
                              "default": "`false`",
                              "desc": "When `true` and `parent` identifies a parent Stream, the created stream is made the sole direct dependency of the parent, with all other existing dependents made a dependent of the newly created stream."
                            },
                            {
                              "textRaw": "`parent` {number} Specifies the numeric identifier of a stream the newly created stream is dependent on. ",
                              "name": "parent",
                              "type": "number",
                              "desc": "Specifies the numeric identifier of a stream the newly created stream is dependent on."
                            },
                            {
                              "textRaw": "`weight` {number} Specifies the relative dependency of a stream in relation to other streams with the same `parent`. The value is a number between `1` and `256` (inclusive). ",
                              "name": "weight",
                              "type": "number",
                              "desc": "Specifies the relative dependency of a stream in relation to other streams with the same `parent`. The value is a number between `1` and `256` (inclusive)."
                            },
                            {
                              "textRaw": "`waitForTrailers` {boolean} When `true`, the `Http2Stream` will emit the `'wantTrailers'` event after the final `DATA` frame has been sent. ",
                              "name": "waitForTrailers",
                              "type": "boolean",
                              "desc": "When `true`, the `Http2Stream` will emit the `'wantTrailers'` event after the final `DATA` frame has been sent."
                            }
                          ],
                          "name": "options",
                          "type": "Object",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "headers"
                        },
                        {
                          "name": "options",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>For HTTP/2 Client <code>Http2Session</code> instances only, the <code>http2session.request()</code>\ncreates and returns an <code>Http2Stream</code> instance that can be used to send an\nHTTP/2 request to the connected server.</p>\n<p>This method is only available if <code>http2session.type</code> is equal to\n<code>http2.constants.NGHTTP2_SESSION_CLIENT</code>.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst clientSession = http2.connect(&#39;https://localhost:1234&#39;);\nconst {\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS\n} = http2.constants;\n\nconst req = clientSession.request({ [HTTP2_HEADER_PATH]: &#39;/&#39; });\nreq.on(&#39;response&#39;, (headers) =&gt; {\n  console.log(headers[HTTP2_HEADER_STATUS]);\n  req.on(&#39;data&#39;, (chunk) =&gt; { /* .. */ });\n  req.on(&#39;end&#39;, () =&gt; { /* .. */ });\n});\n</code></pre>\n<p>When the <code>options.waitForTrailers</code> option is set, the <code>&#39;wantTrailers&#39;</code> event\nis emitted immediately after queuing the last chunk of payload data to be sent.\nThe <code>http2stream.sendTrailers()</code> method can then be called to send trailing\nheaders to the peer.</p>\n<p>It is important to note that when <code>options.waitForTrailers</code> is set, the\n<code>Http2Stream</code> will <em>not</em> automatically close when the final <code>DATA</code> frame is\ntransmitted. User code <em>must</em> call either <code>http2stream.sendTrailers()</code> or\n<code>http2stream.close()</code> to close the <code>Http2Stream</code>.</p>\n<p>The <code>:method</code> and <code>:path</code> pseudo-headers are not specified within <code>headers</code>,\nthey respectively default to:</p>\n<ul>\n<li><code>:method</code> = <code>&#39;GET&#39;</code></li>\n<li><code>:path</code> = <code>/</code></li>\n</ul>\n"
                }
              ]
            },
            {
              "textRaw": "Class: Http2Stream",
              "type": "class",
              "name": "Http2Stream",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: {stream.Duplex}</li>\n</ul>\n<p>Each instance of the <code>Http2Stream</code> class represents a bidirectional HTTP/2\ncommunications stream over an <code>Http2Session</code> instance. Any single <code>Http2Session</code>\nmay have up to 2<sup>31</sup>-1 <code>Http2Stream</code> instances over its lifetime.</p>\n<p>User code will not construct <code>Http2Stream</code> instances directly. Rather, these\nare created, managed, and provided to user code through the <code>Http2Session</code>\ninstance. On the server, <code>Http2Stream</code> instances are created either in response\nto an incoming HTTP request (and handed off to user code via the <code>&#39;stream&#39;</code>\nevent), or in response to a call to the <code>http2stream.pushStream()</code> method.\nOn the client, <code>Http2Stream</code> instances are created and returned when either the\n<code>http2session.request()</code> method is called, or in response to an incoming\n<code>&#39;push&#39;</code> event.</p>\n<p>The <code>Http2Stream</code> class is a base for the <a href=\"#http2_class_serverhttp2stream\"><code>ServerHttp2Stream</code></a> and\n<a href=\"#http2_class_clienthttp2stream\"><code>ClientHttp2Stream</code></a> classes, each of which is used specifically by either\nthe Server or Client side, respectively.</p>\n<p>All <code>Http2Stream</code> instances are <a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a> streams. The <code>Writable</code> side of the\n<code>Duplex</code> is used to send data to the connected peer, while the <code>Readable</code> side\nis used to receive data sent by the connected peer.</p>\n",
              "modules": [
                {
                  "textRaw": "Http2Stream Lifecycle",
                  "name": "http2stream_lifecycle",
                  "modules": [
                    {
                      "textRaw": "Creation",
                      "name": "creation",
                      "desc": "<p>On the server side, instances of <a href=\"#http2_class_serverhttp2stream\"><code>ServerHttp2Stream</code></a> are created either\nwhen:</p>\n<ul>\n<li>A new HTTP/2 <code>HEADERS</code> frame with a previously unused stream ID is received;</li>\n<li>The <code>http2stream.pushStream()</code> method is called.</li>\n</ul>\n<p>On the client side, instances of <a href=\"#http2_class_clienthttp2stream\"><code>ClientHttp2Stream</code></a> are created when the\n<code>http2session.request()</code> method is called.</p>\n<p>On the client, the <code>Http2Stream</code> instance returned by <code>http2session.request()</code>\nmay not be immediately ready for use if the parent <code>Http2Session</code> has not yet\nbeen fully established. In such cases, operations called on the <code>Http2Stream</code>\nwill be buffered until the <code>&#39;ready&#39;</code> event is emitted. User code should rarely,\nif ever, need to handle the <code>&#39;ready&#39;</code> event directly. The ready status of an\n<code>Http2Stream</code> can be determined by checking the value of <code>http2stream.id</code>. If\nthe value is <code>undefined</code>, the stream is not yet ready for use.</p>\n",
                      "type": "module",
                      "displayName": "Creation"
                    },
                    {
                      "textRaw": "Destruction",
                      "name": "destruction",
                      "desc": "<p>All <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> instances are destroyed either when:</p>\n<ul>\n<li>An <code>RST_STREAM</code> frame for the stream is received by the connected peer.</li>\n<li>The <code>http2stream.close()</code> method is called.</li>\n<li>The <code>http2stream.destroy()</code> or <code>http2session.destroy()</code> methods are called.</li>\n</ul>\n<p>When an <code>Http2Stream</code> instance is destroyed, an attempt will be made to send an\n<code>RST_STREAM</code> frame will be sent to the connected peer.</p>\n<p>When the <code>Http2Stream</code> instance is destroyed, the <code>&#39;close&#39;</code> event will\nbe emitted. Because <code>Http2Stream</code> is an instance of <code>stream.Duplex</code>, the\n<code>&#39;end&#39;</code> event will also be emitted if the stream data is currently flowing.\nThe <code>&#39;error&#39;</code> event may also be emitted if <code>http2stream.destroy()</code> was called\nwith an <code>Error</code> passed as the first argument.</p>\n<p>After the <code>Http2Stream</code> has been destroyed, the <code>http2stream.destroyed</code>\nproperty will be <code>true</code> and the <code>http2stream.rstCode</code> property will specify the\n<code>RST_STREAM</code> error code. The <code>Http2Stream</code> instance is no longer usable once\ndestroyed.</p>\n",
                      "type": "module",
                      "displayName": "Destruction"
                    }
                  ],
                  "type": "module",
                  "displayName": "Http2Stream Lifecycle"
                }
              ],
              "events": [
                {
                  "textRaw": "Event: 'aborted'",
                  "type": "event",
                  "name": "aborted",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;aborted&#39;</code> event is emitted whenever a <code>Http2Stream</code> instance is\nabnormally aborted in mid-communication.</p>\n<p>The <code>&#39;aborted&#39;</code> event will only be emitted if the <code>Http2Stream</code> writable side\nhas not been ended.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'close'",
                  "type": "event",
                  "name": "close",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;close&#39;</code> event is emitted when the <code>Http2Stream</code> is destroyed. Once\nthis event is emitted, the <code>Http2Stream</code> instance is no longer usable.</p>\n<p>The HTTP/2 error code used when closing the stream can be retrieved using\nthe <code>http2stream.rstCode</code> property. If the code is any value other than\n<code>NGHTTP2_NO_ERROR</code> (<code>0</code>), an <code>&#39;error&#39;</code> event will have also been emitted.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'error'",
                  "type": "event",
                  "name": "error",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;error&#39;</code> event is emitted when an error occurs during the processing of\nan <code>Http2Stream</code>.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'frameError'",
                  "type": "event",
                  "name": "frameError",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;frameError&#39;</code> event is emitted when an error occurs while attempting to\nsend a frame. When invoked, the handler function will receive an integer\nargument identifying the frame type, and an integer argument identifying the\nerror code. The <code>Http2Stream</code> instance will be destroyed immediately after the\n<code>&#39;frameError&#39;</code> event is emitted.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'timeout'",
                  "type": "event",
                  "name": "timeout",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;timeout&#39;</code> event is emitted after no activity is received for this\n<code>Http2Stream</code> within the number of milliseconds set using\n<code>http2stream.setTimeout()</code>.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'trailers'",
                  "type": "event",
                  "name": "trailers",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;trailers&#39;</code> event is emitted when a block of headers associated with\ntrailing header fields is received. The listener callback is passed the\n<a href=\"#http2_headers_object\">HTTP/2 Headers Object</a> and flags associated with the headers.</p>\n<pre><code class=\"lang-js\">stream.on(&#39;trailers&#39;, (headers, flags) =&gt; {\n  console.log(headers);\n});\n</code></pre>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'wantTrailers'",
                  "type": "event",
                  "name": "wantTrailers",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;wantTrailers&#39;</code> event is emitted when the <code>Http2Stream</code> has queued the\nfinal <code>DATA</code> frame to be sent on a frame and the <code>Http2Stream</code> is ready to send\ntrailing headers. When initiating a request or response, the <code>waitForTrailers</code>\noption must be set for this event to be emitted.</p>\n",
                  "params": []
                }
              ],
              "properties": [
                {
                  "textRaw": "`aborted` {boolean} ",
                  "type": "boolean",
                  "name": "aborted",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Set to <code>true</code> if the <code>Http2Stream</code> instance was aborted abnormally. When set,\nthe <code>&#39;aborted&#39;</code> event will have been emitted.</p>\n"
                },
                {
                  "textRaw": "`closed` {boolean} ",
                  "type": "boolean",
                  "name": "closed",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Set to <code>true</code> if the <code>Http2Stream</code> instance has been closed.</p>\n"
                },
                {
                  "textRaw": "`destroyed` {boolean} ",
                  "type": "boolean",
                  "name": "destroyed",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Set to <code>true</code> if the <code>Http2Stream</code> instance has been destroyed and is no longer\nusable.</p>\n"
                },
                {
                  "textRaw": "`pending` {boolean} ",
                  "type": "boolean",
                  "name": "pending",
                  "meta": {
                    "added": [
                      "v9.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Set to <code>true</code> if the <code>Http2Stream</code> instance has not yet been assigned a\nnumeric stream identifier.</p>\n"
                },
                {
                  "textRaw": "`rstCode` {number} ",
                  "type": "number",
                  "name": "rstCode",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Set to the <code>RST_STREAM</code> <a href=\"#error_codes\">error code</a> reported when the <code>Http2Stream</code> is\ndestroyed after either receiving an <code>RST_STREAM</code> frame from the connected peer,\ncalling <code>http2stream.close()</code>, or <code>http2stream.destroy()</code>. Will be\n<code>undefined</code> if the <code>Http2Stream</code> has not been closed.</p>\n"
                },
                {
                  "textRaw": "`sentHeaders` {HTTP/2 Headers Object} ",
                  "type": "HTTP/2 Headers Object",
                  "name": "sentHeaders",
                  "meta": {
                    "added": [
                      "v9.5.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>An object containing the outbound headers sent for this <code>Http2Stream</code>.</p>\n"
                },
                {
                  "textRaw": "`sentInfoHeaders` {HTTP/2 Headers Object[]} ",
                  "type": "HTTP/2 Headers Object[]",
                  "name": "sentInfoHeaders",
                  "meta": {
                    "added": [
                      "v9.5.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>An array of objects containing the outbound informational (additional) headers\nsent for this <code>Http2Stream</code>.</p>\n"
                },
                {
                  "textRaw": "`sentTrailers` {HTTP/2 Headers Object} ",
                  "type": "HTTP/2 Headers Object",
                  "name": "sentTrailers",
                  "meta": {
                    "added": [
                      "v9.5.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>An object containing the outbound trailers sent for this this <code>HttpStream</code>.</p>\n"
                },
                {
                  "textRaw": "`session` {Http2Session} ",
                  "type": "Http2Session",
                  "name": "session",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>A reference to the <code>Http2Session</code> instance that owns this <code>Http2Stream</code>. The\nvalue will be <code>undefined</code> after the <code>Http2Stream</code> instance is destroyed.</p>\n"
                },
                {
                  "textRaw": "http2stream.state",
                  "name": "state",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Provides miscellaneous information about the current state of the\n<code>Http2Stream</code>.</p>\n<ul>\n<li>{Object}<ul>\n<li><code>localWindowSize</code> {number} The number of bytes the connected peer may send\nfor this <code>Http2Stream</code> without receiving a <code>WINDOW_UPDATE</code>.</li>\n<li><code>state</code> {number} A flag indicating the low-level current state of the\n<code>Http2Stream</code> as determined by <code>nghttp2</code>.</li>\n<li><code>localClose</code> {number} <code>true</code> if this <code>Http2Stream</code> has been closed locally.</li>\n<li><code>remoteClose</code> {number} <code>true</code> if this <code>Http2Stream</code> has been closed\nremotely.</li>\n<li><code>sumDependencyWeight</code> {number} The sum weight of all <code>Http2Stream</code>\ninstances that depend on this <code>Http2Stream</code> as specified using\n<code>PRIORITY</code> frames.</li>\n<li><code>weight</code> {number} The priority weight of this <code>Http2Stream</code>.</li>\n</ul>\n</li>\n</ul>\n<p>A current state of this <code>Http2Stream</code>.</p>\n"
                }
              ],
              "methods": [
                {
                  "textRaw": "http2stream.close(code[, callback])",
                  "type": "method",
                  "name": "close",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`code` {number} Unsigned 32-bit integer identifying the error code. **Default:** `http2.constants.NGHTTP2_NO_ERROR` (`0x00`). ",
                          "name": "code",
                          "type": "number",
                          "default": "`http2.constants.NGHTTP2_NO_ERROR` (`0x00`)",
                          "desc": "Unsigned 32-bit integer identifying the error code."
                        },
                        {
                          "textRaw": "`callback` {Function} An optional function registered to listen for the `'close'` event. ",
                          "name": "callback",
                          "type": "Function",
                          "desc": "An optional function registered to listen for the `'close'` event.",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "code"
                        },
                        {
                          "name": "callback",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Closes the <code>Http2Stream</code> instance by sending an <code>RST_STREAM</code> frame to the\nconnected HTTP/2 peer.</p>\n"
                },
                {
                  "textRaw": "http2stream.priority(options)",
                  "type": "method",
                  "name": "priority",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`options` {Object} ",
                          "options": [
                            {
                              "textRaw": "`exclusive` {boolean} When `true` and `parent` identifies a parent Stream, this stream is made the sole direct dependency of the parent, with all other existing dependents made a dependent of this stream. **Default:** `false`. ",
                              "name": "exclusive",
                              "type": "boolean",
                              "default": "`false`",
                              "desc": "When `true` and `parent` identifies a parent Stream, this stream is made the sole direct dependency of the parent, with all other existing dependents made a dependent of this stream."
                            },
                            {
                              "textRaw": "`parent` {number} Specifies the numeric identifier of a stream this stream is dependent on. ",
                              "name": "parent",
                              "type": "number",
                              "desc": "Specifies the numeric identifier of a stream this stream is dependent on."
                            },
                            {
                              "textRaw": "`weight` {number} Specifies the relative dependency of a stream in relation to other streams with the same `parent`. The value is a number between `1` and `256` (inclusive). ",
                              "name": "weight",
                              "type": "number",
                              "desc": "Specifies the relative dependency of a stream in relation to other streams with the same `parent`. The value is a number between `1` and `256` (inclusive)."
                            },
                            {
                              "textRaw": "`silent` {boolean} When `true`, changes the priority locally without sending a `PRIORITY` frame to the connected peer. ",
                              "name": "silent",
                              "type": "boolean",
                              "desc": "When `true`, changes the priority locally without sending a `PRIORITY` frame to the connected peer."
                            }
                          ],
                          "name": "options",
                          "type": "Object"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "options"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Updates the priority for this <code>Http2Stream</code> instance.</p>\n"
                },
                {
                  "textRaw": "http2stream.setTimeout(msecs, callback)",
                  "type": "method",
                  "name": "setTimeout",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`msecs` {number} ",
                          "name": "msecs",
                          "type": "number"
                        },
                        {
                          "textRaw": "`callback` {Function} ",
                          "name": "callback",
                          "type": "Function"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "msecs"
                        },
                        {
                          "name": "callback"
                        }
                      ]
                    }
                  ],
                  "desc": "<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst client = http2.connect(&#39;http://example.org:8000&#39;);\nconst { NGHTTP2_CANCEL } = http2.constants;\nconst req = client.request({ &#39;:path&#39;: &#39;/&#39; });\n\n// Cancel the stream if there&#39;s no activity after 5 seconds\nreq.setTimeout(5000, () =&gt; req.close(NGHTTP2_CANCEL));\n</code></pre>\n"
                },
                {
                  "textRaw": "http2stream.sendTrailers(headers)",
                  "type": "method",
                  "name": "sendTrailers",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`headers` {HTTP/2 Headers Object} ",
                          "name": "headers",
                          "type": "HTTP/2 Headers Object"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "headers"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Sends a trailing <code>HEADERS</code> frame to the connected HTTP/2 peer. This method\nwill cause the <code>Http2Stream</code> to be immediately closed and must only be\ncalled after the <code>&#39;wantTrailers&#39;</code>  event has been emitted. When sending a\nrequest or sending a response, the <code>options.waitForTrailers</code> option must be set\nin order to keep the <code>Http2Stream</code> open after the final <code>DATA</code> frame so that\ntrailers can be sent.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst server = http2.createServer();\nserver.on(&#39;stream&#39;, (stream) =&gt; {\n  stream.respond(undefined, { waitForTrailers: true });\n  stream.on(&#39;wantTrailers&#39;, () =&gt; {\n    stream.sendTrailers({ xyz: &#39;abc&#39; });\n  });\n  stream.end(&#39;Hello World&#39;);\n});\n</code></pre>\n<p>The HTTP/1 specification forbids trailers from containing HTTP/2 pseudo-header\nfields (e.g. <code>&#39;:method&#39;</code>, <code>&#39;:path&#39;</code>, etc).</p>\n"
                }
              ]
            },
            {
              "textRaw": "Class: ClientHttp2Stream",
              "type": "class",
              "name": "ClientHttp2Stream",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends {Http2Stream}</li>\n</ul>\n<p>The <code>ClientHttp2Stream</code> class is an extension of <code>Http2Stream</code> that is\nused exclusively on HTTP/2 Clients. <code>Http2Stream</code> instances on the client\nprovide events such as <code>&#39;response&#39;</code> and <code>&#39;push&#39;</code> that are only relevant on\nthe client.</p>\n",
              "events": [
                {
                  "textRaw": "Event: 'continue'",
                  "type": "event",
                  "name": "continue",
                  "meta": {
                    "added": [
                      "v8.5.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Emitted when the server sends a <code>100 Continue</code> status, usually because\nthe request contained <code>Expect: 100-continue</code>. This is an instruction that\nthe client should send the request body.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'headers'",
                  "type": "event",
                  "name": "headers",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;headers&#39;</code> event is emitted when an additional block of headers is received\nfor a stream, such as when a block of <code>1xx</code> informational headers is received.\nThe listener callback is passed the <a href=\"#http2_headers_object\">HTTP/2 Headers Object</a> and flags\nassociated with the headers.</p>\n<pre><code class=\"lang-js\">stream.on(&#39;headers&#39;, (headers, flags) =&gt; {\n  console.log(headers);\n});\n</code></pre>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'push'",
                  "type": "event",
                  "name": "push",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;push&#39;</code> event is emitted when response headers for a Server Push stream\nare received. The listener callback is passed the <a href=\"#http2_headers_object\">HTTP/2 Headers Object</a> and\nflags associated with the headers.</p>\n<pre><code class=\"lang-js\">stream.on(&#39;push&#39;, (headers, flags) =&gt; {\n  console.log(headers);\n});\n</code></pre>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'response'",
                  "type": "event",
                  "name": "response",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;response&#39;</code> event is emitted when a response <code>HEADERS</code> frame has been\nreceived for this stream from the connected HTTP/2 server. The listener is\ninvoked with two arguments: an <code>Object</code> containing the received\n<a href=\"#http2_headers_object\">HTTP/2 Headers Object</a>, and flags associated with the headers.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst client = http2.connect(&#39;https://localhost&#39;);\nconst req = client.request({ &#39;:path&#39;: &#39;/&#39; });\nreq.on(&#39;response&#39;, (headers, flags) =&gt; {\n  console.log(headers[&#39;:status&#39;]);\n});\n</code></pre>\n",
                  "params": []
                }
              ]
            },
            {
              "textRaw": "Class: ServerHttp2Stream",
              "type": "class",
              "name": "ServerHttp2Stream",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: {Http2Stream}</li>\n</ul>\n<p>The <code>ServerHttp2Stream</code> class is an extension of <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> that is\nused exclusively on HTTP/2 Servers. <code>Http2Stream</code> instances on the server\nprovide additional methods such as <code>http2stream.pushStream()</code> and\n<code>http2stream.respond()</code> that are only relevant on the server.</p>\n",
              "methods": [
                {
                  "textRaw": "http2stream.additionalHeaders(headers)",
                  "type": "method",
                  "name": "additionalHeaders",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`headers` {HTTP/2 Headers Object} ",
                          "name": "headers",
                          "type": "HTTP/2 Headers Object"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "headers"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Sends an additional informational <code>HEADERS</code> frame to the connected HTTP/2 peer.</p>\n"
                },
                {
                  "textRaw": "http2stream.pushStream(headers[, options], callback)",
                  "type": "method",
                  "name": "pushStream",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`headers` {HTTP/2 Headers Object} ",
                          "name": "headers",
                          "type": "HTTP/2 Headers Object"
                        },
                        {
                          "textRaw": "`options` {Object} ",
                          "options": [
                            {
                              "textRaw": "`exclusive` {boolean} When `true` and `parent` identifies a parent Stream, the created stream is made the sole direct dependency of the parent, with all other existing dependents made a dependent of the newly created stream. **Default:** `false`. ",
                              "name": "exclusive",
                              "type": "boolean",
                              "default": "`false`",
                              "desc": "When `true` and `parent` identifies a parent Stream, the created stream is made the sole direct dependency of the parent, with all other existing dependents made a dependent of the newly created stream."
                            },
                            {
                              "textRaw": "`parent` {number} Specifies the numeric identifier of a stream the newly created stream is dependent on. ",
                              "name": "parent",
                              "type": "number",
                              "desc": "Specifies the numeric identifier of a stream the newly created stream is dependent on."
                            }
                          ],
                          "name": "options",
                          "type": "Object",
                          "optional": true
                        },
                        {
                          "textRaw": "`callback` {Function} Callback that is called once the push stream has been initiated. ",
                          "options": [
                            {
                              "textRaw": "`err` {Error} ",
                              "name": "err",
                              "type": "Error"
                            },
                            {
                              "textRaw": "`pushStream` {ServerHttp2Stream} The returned `pushStream` object. ",
                              "name": "pushStream",
                              "type": "ServerHttp2Stream",
                              "desc": "The returned `pushStream` object."
                            },
                            {
                              "textRaw": "`headers` {HTTP/2 Headers Object} Headers object the `pushStream` was initiated with. ",
                              "name": "headers",
                              "type": "HTTP/2 Headers Object",
                              "desc": "Headers object the `pushStream` was initiated with."
                            }
                          ],
                          "name": "callback",
                          "type": "Function",
                          "desc": "Callback that is called once the push stream has been initiated."
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "headers"
                        },
                        {
                          "name": "options",
                          "optional": true
                        },
                        {
                          "name": "callback"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Initiates a push stream. The callback is invoked with the new <code>Http2Stream</code>\ninstance created for the push stream passed as the second argument, or an\n<code>Error</code> passed as the first argument.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst server = http2.createServer();\nserver.on(&#39;stream&#39;, (stream) =&gt; {\n  stream.respond({ &#39;:status&#39;: 200 });\n  stream.pushStream({ &#39;:path&#39;: &#39;/&#39; }, (err, pushStream, headers) =&gt; {\n    if (err) throw err;\n    pushStream.respond({ &#39;:status&#39;: 200 });\n    pushStream.end(&#39;some pushed data&#39;);\n  });\n  stream.end(&#39;some data&#39;);\n});\n</code></pre>\n<p>Setting the weight of a push stream is not allowed in the <code>HEADERS</code> frame. Pass\na <code>weight</code> value to <code>http2stream.priority</code> with the <code>silent</code> option set to\n<code>true</code> to enable server-side bandwidth balancing between concurrent streams.</p>\n"
                },
                {
                  "textRaw": "http2stream.respond([headers[, options]])",
                  "type": "method",
                  "name": "respond",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`headers` {HTTP/2 Headers Object} ",
                          "name": "headers",
                          "type": "HTTP/2 Headers Object",
                          "optional": true
                        },
                        {
                          "textRaw": "`options` {Object} ",
                          "options": [
                            {
                              "textRaw": "`endStream` {boolean} Set to `true` to indicate that the response will not include payload data. ",
                              "name": "endStream",
                              "type": "boolean",
                              "desc": "Set to `true` to indicate that the response will not include payload data."
                            },
                            {
                              "textRaw": "`waitForTrailers` {boolean} When `true`, the `Http2Stream` will emit the `'wantTrailers'` event after the final `DATA` frame has been sent. ",
                              "name": "waitForTrailers",
                              "type": "boolean",
                              "desc": "When `true`, the `Http2Stream` will emit the `'wantTrailers'` event after the final `DATA` frame has been sent."
                            }
                          ],
                          "name": "options",
                          "type": "Object",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "headers",
                          "optional": true
                        },
                        {
                          "name": "options",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst server = http2.createServer();\nserver.on(&#39;stream&#39;, (stream) =&gt; {\n  stream.respond({ &#39;:status&#39;: 200 });\n  stream.end(&#39;some data&#39;);\n});\n</code></pre>\n<p>When the <code>options.waitForTrailers</code> option is set, the <code>&#39;wantTrailers&#39;</code> event\nwill be emitted immediately after queuing the last chunk of payload data to be\nsent. The <code>http2stream.sendTrailers()</code> method can then be used to sent trailing\nheader fields to the peer.</p>\n<p>It is important to note that when <code>options.waitForTrailers</code> is set, the\n<code>Http2Stream</code> will <em>not</em> automatically close when the final <code>DATA</code> frame is\ntransmitted. User code <em>must</em> call either <code>http2stream.sendTrailers()</code> or\n<code>http2stream.close()</code> to close the <code>Http2Stream</code>.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst server = http2.createServer();\nserver.on(&#39;stream&#39;, (stream) =&gt; {\n  stream.respond({ &#39;:status&#39;: 200 }, { waitForTrailers: true });\n  stream.on(&#39;wantTrailers&#39;, () =&gt; {\n    stream.sendTrailers({ ABC: &#39;some value to send&#39; });\n  });\n  stream.end(&#39;some data&#39;);\n});\n</code></pre>\n"
                },
                {
                  "textRaw": "http2stream.respondWithFD(fd[, headers[, options]])",
                  "type": "method",
                  "name": "respondWithFD",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": [
                      {
                        "version": "v10.0.0",
                        "pr-url": "https://github.com/nodejs/node/pull/18936",
                        "description": "Any readable file descriptor, not necessarily for a regular file, is supported now."
                      }
                    ]
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`fd` {number} A readable file descriptor. ",
                          "name": "fd",
                          "type": "number",
                          "desc": "A readable file descriptor."
                        },
                        {
                          "textRaw": "`headers` {HTTP/2 Headers Object} ",
                          "name": "headers",
                          "type": "HTTP/2 Headers Object",
                          "optional": true
                        },
                        {
                          "textRaw": "`options` {Object} ",
                          "options": [
                            {
                              "textRaw": "`statCheck` {Function} ",
                              "name": "statCheck",
                              "type": "Function"
                            },
                            {
                              "textRaw": "`waitForTrailers` {boolean} When `true`, the `Http2Stream` will emit the `'wantTrailers'` event after the final `DATA` frame has been sent. ",
                              "name": "waitForTrailers",
                              "type": "boolean",
                              "desc": "When `true`, the `Http2Stream` will emit the `'wantTrailers'` event after the final `DATA` frame has been sent."
                            },
                            {
                              "textRaw": "`offset` {number} The offset position at which to begin reading. ",
                              "name": "offset",
                              "type": "number",
                              "desc": "The offset position at which to begin reading."
                            },
                            {
                              "textRaw": "`length` {number} The amount of data from the fd to send. ",
                              "name": "length",
                              "type": "number",
                              "desc": "The amount of data from the fd to send."
                            }
                          ],
                          "name": "options",
                          "type": "Object",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "fd"
                        },
                        {
                          "name": "headers",
                          "optional": true
                        },
                        {
                          "name": "options",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Initiates a response whose data is read from the given file descriptor. No\nvalidation is performed on the given file descriptor. If an error occurs while\nattempting to read data using the file descriptor, the <code>Http2Stream</code> will be\nclosed using an <code>RST_STREAM</code> frame using the standard <code>INTERNAL_ERROR</code> code.</p>\n<p>When used, the <code>Http2Stream</code> object&#39;s <code>Duplex</code> interface will be closed\nautomatically.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst server = http2.createServer();\nserver.on(&#39;stream&#39;, (stream) =&gt; {\n  const fd = fs.openSync(&#39;/some/file&#39;, &#39;r&#39;);\n\n  const stat = fs.fstatSync(fd);\n  const headers = {\n    &#39;content-length&#39;: stat.size,\n    &#39;last-modified&#39;: stat.mtime.toUTCString(),\n    &#39;content-type&#39;: &#39;text/plain&#39;\n  };\n  stream.respondWithFD(fd, headers);\n  stream.on(&#39;close&#39;, () =&gt; fs.closeSync(fd));\n});\n</code></pre>\n<p>The optional <code>options.statCheck</code> function may be specified to give user code\nan opportunity to set additional content headers based on the <code>fs.Stat</code> details\nof the given fd. If the <code>statCheck</code> function is provided, the\n<code>http2stream.respondWithFD()</code> method will perform an <code>fs.fstat()</code> call to\ncollect details on the provided file descriptor.</p>\n<p>The <code>offset</code> and <code>length</code> options may be used to limit the response to a\nspecific range subset. This can be used, for instance, to support HTTP Range\nrequests.</p>\n<p>The file descriptor is not closed when the stream is closed, so it will need\nto be closed manually once it is no longer needed.\nNote that using the same file descriptor concurrently for multiple streams\nis not supported and may result in data loss. Re-using a file descriptor\nafter a stream has finished is supported.</p>\n<p>When the <code>options.waitForTrailers</code> option is set, the <code>&#39;wantTrailers&#39;</code> event\nwill be emitted immediately after queuing the last chunk of payload data to be\nsent. The <code>http2stream.sendTrailers()</code> method can then be used to sent trailing\nheader fields to the peer.</p>\n<p>It is important to note that when <code>options.waitForTrailers</code> is set, the\n<code>Http2Stream</code> will <em>not</em> automatically close when the final <code>DATA</code> frame is\ntransmitted. User code <em>must</em> call either <code>http2stream.sendTrailers()</code> or\n<code>http2stream.close()</code> to close the <code>Http2Stream</code>.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst server = http2.createServer();\nserver.on(&#39;stream&#39;, (stream) =&gt; {\n  const fd = fs.openSync(&#39;/some/file&#39;, &#39;r&#39;);\n\n  const stat = fs.fstatSync(fd);\n  const headers = {\n    &#39;content-length&#39;: stat.size,\n    &#39;last-modified&#39;: stat.mtime.toUTCString(),\n    &#39;content-type&#39;: &#39;text/plain&#39;\n  };\n  stream.respondWithFD(fd, headers, { waitForTrailers: true });\n  stream.on(&#39;wantTrailers&#39;, () =&gt; {\n    stream.sendTrailers({ ABC: &#39;some value to send&#39; });\n  });\n\n  stream.on(&#39;close&#39;, () =&gt; fs.closeSync(fd));\n});\n</code></pre>\n"
                },
                {
                  "textRaw": "http2stream.respondWithFile(path[, headers[, options]])",
                  "type": "method",
                  "name": "respondWithFile",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": [
                      {
                        "version": "v10.0.0",
                        "pr-url": "https://github.com/nodejs/node/pull/18936",
                        "description": "Any readable file, not necessarily a regular file, is supported now."
                      }
                    ]
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`path` {string|Buffer|URL} ",
                          "name": "path",
                          "type": "string|Buffer|URL"
                        },
                        {
                          "textRaw": "`headers` {HTTP/2 Headers Object} ",
                          "name": "headers",
                          "type": "HTTP/2 Headers Object",
                          "optional": true
                        },
                        {
                          "textRaw": "`options` {Object} ",
                          "options": [
                            {
                              "textRaw": "`statCheck` {Function} ",
                              "name": "statCheck",
                              "type": "Function"
                            },
                            {
                              "textRaw": "`onError` {Function} Callback function invoked in the case of an error before send. ",
                              "name": "onError",
                              "type": "Function",
                              "desc": "Callback function invoked in the case of an error before send."
                            },
                            {
                              "textRaw": "`waitForTrailers` {boolean} When `true`, the `Http2Stream` will emit the `'wantTrailers'` event after the final `DATA` frame has been sent. ",
                              "name": "waitForTrailers",
                              "type": "boolean",
                              "desc": "When `true`, the `Http2Stream` will emit the `'wantTrailers'` event after the final `DATA` frame has been sent."
                            },
                            {
                              "textRaw": "`offset` {number} The offset position at which to begin reading. ",
                              "name": "offset",
                              "type": "number",
                              "desc": "The offset position at which to begin reading."
                            },
                            {
                              "textRaw": "`length` {number} The amount of data from the fd to send. ",
                              "name": "length",
                              "type": "number",
                              "desc": "The amount of data from the fd to send."
                            }
                          ],
                          "name": "options",
                          "type": "Object",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "path"
                        },
                        {
                          "name": "headers",
                          "optional": true
                        },
                        {
                          "name": "options",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Sends a regular file as the response. The <code>path</code> must specify a regular file\nor an <code>&#39;error&#39;</code> event will be emitted on the <code>Http2Stream</code> object.</p>\n<p>When used, the <code>Http2Stream</code> object&#39;s <code>Duplex</code> interface will be closed\nautomatically.</p>\n<p>The optional <code>options.statCheck</code> function may be specified to give user code\nan opportunity to set additional content headers based on the <code>fs.Stat</code> details\nof the given file:</p>\n<p>If an error occurs while attempting to read the file data, the <code>Http2Stream</code>\nwill be closed using an <code>RST_STREAM</code> frame using the standard <code>INTERNAL_ERROR</code>\ncode. If the <code>onError</code> callback is defined, then it will be called. Otherwise\nthe stream will be destroyed.</p>\n<p>Example using a file path:</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst server = http2.createServer();\nserver.on(&#39;stream&#39;, (stream) =&gt; {\n  function statCheck(stat, headers) {\n    headers[&#39;last-modified&#39;] = stat.mtime.toUTCString();\n  }\n\n  function onError(err) {\n    if (err.code === &#39;ENOENT&#39;) {\n      stream.respond({ &#39;:status&#39;: 404 });\n    } else {\n      stream.respond({ &#39;:status&#39;: 500 });\n    }\n    stream.end();\n  }\n\n  stream.respondWithFile(&#39;/some/file&#39;,\n                         { &#39;content-type&#39;: &#39;text/plain&#39; },\n                         { statCheck, onError });\n});\n</code></pre>\n<p>The <code>options.statCheck</code> function may also be used to cancel the send operation\nby returning <code>false</code>. For instance, a conditional request may check the stat\nresults to determine if the file has been modified to return an appropriate\n<code>304</code> response:</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst server = http2.createServer();\nserver.on(&#39;stream&#39;, (stream) =&gt; {\n  function statCheck(stat, headers) {\n    // Check the stat here...\n    stream.respond({ &#39;:status&#39;: 304 });\n    return false; // Cancel the send operation\n  }\n  stream.respondWithFile(&#39;/some/file&#39;,\n                         { &#39;content-type&#39;: &#39;text/plain&#39; },\n                         { statCheck });\n});\n</code></pre>\n<p>The <code>content-length</code> header field will be automatically set.</p>\n<p>The <code>offset</code> and <code>length</code> options may be used to limit the response to a\nspecific range subset. This can be used, for instance, to support HTTP Range\nrequests.</p>\n<p>The <code>options.onError</code> function may also be used to handle all the errors\nthat could happen before the delivery of the file is initiated. The\ndefault behavior is to destroy the stream.</p>\n<p>When the <code>options.waitForTrailers</code> option is set, the <code>&#39;wantTrailers&#39;</code> event\nwill be emitted immediately after queuing the last chunk of payload data to be\nsent. The <code>http2stream.sendTrilers()</code> method can then be used to sent trailing\nheader fields to the peer.</p>\n<p>It is important to note that when <code>options.waitForTrailers</code> is set, the\n<code>Http2Stream</code> will <em>not</em> automatically close when the final <code>DATA</code> frame is\ntransmitted. User code <em>must</em> call either <code>http2stream.sendTrailers()</code> or\n<code>http2stream.close()</code> to close the <code>Http2Stream</code>.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst server = http2.createServer();\nserver.on(&#39;stream&#39;, (stream) =&gt; {\n  stream.respondWithFile(&#39;/some/file&#39;,\n                         { &#39;content-type&#39;: &#39;text/plain&#39; },\n                         { waitForTrailers: true });\n  stream.on(&#39;wantTrailers&#39;, () =&gt; {\n    stream.sendTrailers({ ABC: &#39;some value to send&#39; });\n  });\n});\n</code></pre>\n"
                }
              ],
              "properties": [
                {
                  "textRaw": "`headersSent` {boolean} ",
                  "type": "boolean",
                  "name": "headersSent",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>True if headers were sent, false otherwise (read-only).</p>\n"
                },
                {
                  "textRaw": "`pushAllowed` {boolean} ",
                  "type": "boolean",
                  "name": "pushAllowed",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Read-only property mapped to the <code>SETTINGS_ENABLE_PUSH</code> flag of the remote\nclient&#39;s most recent <code>SETTINGS</code> frame. Will be <code>true</code> if the remote peer\naccepts push streams, <code>false</code> otherwise. Settings are the same for every\n<code>Http2Stream</code> in the same <code>Http2Session</code>.</p>\n"
                }
              ]
            },
            {
              "textRaw": "Class: Http2Server",
              "type": "class",
              "name": "Http2Server",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: {net.Server}</li>\n</ul>\n<p>In <code>Http2Server</code>, there are no <code>&#39;clientError&#39;</code> events as there are in\nHTTP1. However, there are <code>&#39;sessionError&#39;</code>, and <code>&#39;streamError&#39;</code> events for\nerrors emitted on the socket, or from <code>Http2Session</code> or <code>Http2Stream</code> instances.</p>\n",
              "events": [
                {
                  "textRaw": "Event: 'checkContinue'",
                  "type": "event",
                  "name": "checkContinue",
                  "meta": {
                    "added": [
                      "v8.5.0"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>If a <a href=\"#http2_event_request\"><code>&#39;request&#39;</code></a> listener is registered or <a href=\"#http2_http2_createserver_options_onrequesthandler\"><code>http2.createServer()</code></a> is\nsupplied a callback function, the <code>&#39;checkContinue&#39;</code> event is emitted each time\na request with an HTTP <code>Expect: 100-continue</code> is received. If this event is\nnot listened for, the server will automatically respond with a status\n<code>100 Continue</code> as appropriate.</p>\n<p>Handling this event involves calling <a href=\"#http2_response_writecontinue\"><code>response.writeContinue()</code></a> if the\nclient should continue to send the request body, or generating an appropriate\nHTTP response (e.g. 400 Bad Request) if the client should not continue to send\nthe request body.</p>\n<p>Note that when this event is emitted and handled, the <a href=\"#http2_event_request\"><code>&#39;request&#39;</code></a> event will\nnot be emitted.</p>\n"
                },
                {
                  "textRaw": "Event: 'request'",
                  "type": "event",
                  "name": "request",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>Emitted each time there is a request. Note that there may be multiple requests\nper session. See the <a href=\"#http2_compatibility_api\">Compatibility API</a>.</p>\n"
                },
                {
                  "textRaw": "Event: 'session'",
                  "type": "event",
                  "name": "session",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;session&#39;</code> event is emitted when a new <code>Http2Session</code> is created by the\n<code>Http2Server</code>.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'sessionError'",
                  "type": "event",
                  "name": "sessionError",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;sessionError&#39;</code> event is emitted when an <code>&#39;error&#39;</code> event is emitted by\nan <code>Http2Session</code> object associated with the <code>Http2Server</code>.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'streamError'",
                  "type": "event",
                  "name": "streamError",
                  "meta": {
                    "added": [
                      "v8.5.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>If a <code>ServerHttp2Stream</code> emits an <code>&#39;error&#39;</code> event, it will be forwarded here.\nThe stream will already be destroyed when this event is triggered.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'stream'",
                  "type": "event",
                  "name": "stream",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;stream&#39;</code> event is emitted when a <code>&#39;stream&#39;</code> event has been emitted by\nan <code>Http2Session</code> associated with the server.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst {\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_CONTENT_TYPE\n} = http2.constants;\n\nconst server = http2.createServer();\nserver.on(&#39;stream&#39;, (stream, headers, flags) =&gt; {\n  const method = headers[HTTP2_HEADER_METHOD];\n  const path = headers[HTTP2_HEADER_PATH];\n  // ...\n  stream.respond({\n    [HTTP2_HEADER_STATUS]: 200,\n    [HTTP2_HEADER_CONTENT_TYPE]: &#39;text/plain&#39;\n  });\n  stream.write(&#39;hello &#39;);\n  stream.end(&#39;world&#39;);\n});\n</code></pre>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'timeout'",
                  "type": "event",
                  "name": "timeout",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;timeout&#39;</code> event is emitted when there is no activity on the Server for\na given number of milliseconds set using <code>http2server.setTimeout()</code>.</p>\n",
                  "params": []
                }
              ],
              "methods": [
                {
                  "textRaw": "server.close([callback])",
                  "type": "method",
                  "name": "close",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`callback` {Function} ",
                          "name": "callback",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "callback",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Stops the server from accepting new connections.  See <a href=\"net.html#net_server_close_callback\"><code>net.Server.close()</code></a>.</p>\n<p>Note that this is not analogous to restricting new requests since HTTP/2\nconnections are persistent. To achieve a similar graceful shutdown behavior,\nconsider also using <a href=\"#http2_http2session_close_callback\"><code>http2session.close()</code></a> on active sessions.</p>\n"
                }
              ]
            },
            {
              "textRaw": "Class: Http2SecureServer",
              "type": "class",
              "name": "Http2SecureServer",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Extends: {tls.Server}</li>\n</ul>\n",
              "events": [
                {
                  "textRaw": "Event: 'checkContinue'",
                  "type": "event",
                  "name": "checkContinue",
                  "meta": {
                    "added": [
                      "v8.5.0"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>If a <a href=\"#http2_event_request\"><code>&#39;request&#39;</code></a> listener is registered or <a href=\"#http2_http2_createsecureserver_options_onrequesthandler\"><code>http2.createSecureServer()</code></a>\nis supplied a callback function, the <code>&#39;checkContinue&#39;</code> event is emitted each\ntime a request with an HTTP <code>Expect: 100-continue</code> is received. If this event\nis not listened for, the server will automatically respond with a status\n<code>100 Continue</code> as appropriate.</p>\n<p>Handling this event involves calling <a href=\"#http2_response_writecontinue\"><code>response.writeContinue()</code></a> if the\nclient should continue to send the request body, or generating an appropriate\nHTTP response (e.g. 400 Bad Request) if the client should not continue to send\nthe request body.</p>\n<p>Note that when this event is emitted and handled, the <a href=\"#http2_event_request\"><code>&#39;request&#39;</code></a> event will\nnot be emitted.</p>\n"
                },
                {
                  "textRaw": "Event: 'request'",
                  "type": "event",
                  "name": "request",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "params": [],
                  "desc": "<p>Emitted each time there is a request. Note that there may be multiple requests\nper session. See the <a href=\"#http2_compatibility_api\">Compatibility API</a>.</p>\n"
                },
                {
                  "textRaw": "Event: 'session'",
                  "type": "event",
                  "name": "session",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;session&#39;</code> event is emitted when a new <code>Http2Session</code> is created by the\n<code>Http2SecureServer</code>.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'sessionError'",
                  "type": "event",
                  "name": "sessionError",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;sessionError&#39;</code> event is emitted when an <code>&#39;error&#39;</code> event is emitted by\nan <code>Http2Session</code> object associated with the <code>Http2SecureServer</code>.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'stream'",
                  "type": "event",
                  "name": "stream",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;stream&#39;</code> event is emitted when a <code>&#39;stream&#39;</code> event has been emitted by\nan <code>Http2Session</code> associated with the server.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst {\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_CONTENT_TYPE\n} = http2.constants;\n\nconst options = getOptionsSomehow();\n\nconst server = http2.createSecureServer(options);\nserver.on(&#39;stream&#39;, (stream, headers, flags) =&gt; {\n  const method = headers[HTTP2_HEADER_METHOD];\n  const path = headers[HTTP2_HEADER_PATH];\n  // ...\n  stream.respond({\n    [HTTP2_HEADER_STATUS]: 200,\n    [HTTP2_HEADER_CONTENT_TYPE]: &#39;text/plain&#39;\n  });\n  stream.write(&#39;hello &#39;);\n  stream.end(&#39;world&#39;);\n});\n</code></pre>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'timeout'",
                  "type": "event",
                  "name": "timeout",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;timeout&#39;</code> event is emitted when there is no activity on the Server for\na given number of milliseconds set using <code>http2secureServer.setTimeout()</code>.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'unknownProtocol'",
                  "type": "event",
                  "name": "unknownProtocol",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;unknownProtocol&#39;</code> event is emitted when a connecting client fails to\nnegotiate an allowed protocol (i.e. HTTP/2 or HTTP/1.1). The event handler\nreceives the socket for handling. If no listener is registered for this event,\nthe connection is terminated. See the <a href=\"#http2_compatibility_api\">Compatibility API</a>.</p>\n",
                  "params": []
                }
              ],
              "methods": [
                {
                  "textRaw": "server.close([callback])",
                  "type": "method",
                  "name": "close",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`callback` {Function} ",
                          "name": "callback",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "callback",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Stops the server from accepting new connections.  See <a href=\"tls.html#tls_server_close_callback\"><code>tls.Server.close()</code></a>.</p>\n<p>Note that this is not analogous to restricting new requests since HTTP/2\nconnections are persistent. To achieve a similar graceful shutdown behavior,\nconsider also using <a href=\"#http2_http2session_close_callback\"><code>http2session.close()</code></a> on active sessions.</p>\n"
                }
              ]
            }
          ],
          "methods": [
            {
              "textRaw": "http2.createServer(options[, onRequestHandler])",
              "type": "method",
              "name": "createServer",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": [
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/17105",
                    "description": "Added the `maxOutstandingPings` option with a default limit of 10."
                  },
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/16676",
                    "description": "Added the `maxHeaderListPairs` option with a default limit of 128 header pairs."
                  },
                  {
                    "version": "v9.6.0",
                    "pr-url": "https://github.com/nodejs/node/pull/15752",
                    "description": "Added the `Http1IncomingMessage` and `Http1ServerResponse` option."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Http2Server} ",
                    "name": "return",
                    "type": "Http2Server"
                  },
                  "params": [
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`maxDeflateDynamicTableSize` {number} Sets the maximum dynamic table size for deflating header fields. **Default:** `4Kib`. ",
                          "name": "maxDeflateDynamicTableSize",
                          "type": "number",
                          "default": "`4Kib`",
                          "desc": "Sets the maximum dynamic table size for deflating header fields."
                        },
                        {
                          "textRaw": "`maxSessionMemory`{number} Sets the maximum memory that the `Http2Session` is permitted to use. The value is expressed in terms of number of megabytes, e.g. `1` equal 1 megabyte. The minimum value allowed is `1`. This is a credit based limit, existing `Http2Stream`s may cause this limit to be exceeded, but new `Http2Stream` instances will be rejected while this limit is exceeded. The current number of `Http2Stream` sessions, the current memory use of the header compression tables, current data queued to be sent, and unacknowledged `PING` and `SETTINGS` frames are all counted towards the current limit. **Default:** `10`. ",
                          "name": "maxSessionMemory",
                          "type": "number",
                          "default": "`10`",
                          "desc": "Sets the maximum memory that the `Http2Session` is permitted to use. The value is expressed in terms of number of megabytes, e.g. `1` equal 1 megabyte. The minimum value allowed is `1`. This is a credit based limit, existing `Http2Stream`s may cause this limit to be exceeded, but new `Http2Stream` instances will be rejected while this limit is exceeded. The current number of `Http2Stream` sessions, the current memory use of the header compression tables, current data queued to be sent, and unacknowledged `PING` and `SETTINGS` frames are all counted towards the current limit."
                        },
                        {
                          "textRaw": "`maxHeaderListPairs` {number} Sets the maximum number of header entries. The minimum value is `4`. **Default:** `128`. ",
                          "name": "maxHeaderListPairs",
                          "type": "number",
                          "default": "`128`",
                          "desc": "Sets the maximum number of header entries. The minimum value is `4`."
                        },
                        {
                          "textRaw": "`maxOutstandingPings` {number} Sets the maximum number of outstanding, unacknowledged pings. **Default:** `10`. ",
                          "name": "maxOutstandingPings",
                          "type": "number",
                          "default": "`10`",
                          "desc": "Sets the maximum number of outstanding, unacknowledged pings."
                        },
                        {
                          "textRaw": "`maxSendHeaderBlockLength` {number} Sets the maximum allowed size for a serialized, compressed block of headers. Attempts to send headers that exceed this limit will result in a `'frameError'` event being emitted and the stream being closed and destroyed. ",
                          "name": "maxSendHeaderBlockLength",
                          "type": "number",
                          "desc": "Sets the maximum allowed size for a serialized, compressed block of headers. Attempts to send headers that exceed this limit will result in a `'frameError'` event being emitted and the stream being closed and destroyed."
                        },
                        {
                          "textRaw": "`paddingStrategy` {number} Identifies the strategy used for determining the  amount of padding to use for `HEADERS` and `DATA` frames. **Default:**  `http2.constants.PADDING_STRATEGY_NONE`. Value may be one of: ",
                          "options": [
                            {
                              "textRaw": "`http2.constants.PADDING_STRATEGY_NONE` - Specifies that no padding is to be applied. ",
                              "name": "http2.constants.PADDING_STRATEGY_NONE",
                              "desc": "Specifies that no padding is to be applied."
                            },
                            {
                              "textRaw": "`http2.constants.PADDING_STRATEGY_MAX` - Specifies that the maximum amount of padding, as determined by the internal implementation, is to be applied. ",
                              "name": "http2.constants.PADDING_STRATEGY_MAX",
                              "desc": "Specifies that the maximum amount of padding, as determined by the internal implementation, is to be applied."
                            },
                            {
                              "textRaw": "`http2.constants.PADDING_STRATEGY_CALLBACK` - Specifies that the user provided `options.selectPadding()` callback is to be used to determine the amount of padding. ",
                              "name": "http2.constants.PADDING_STRATEGY_CALLBACK",
                              "desc": "Specifies that the user provided `options.selectPadding()` callback is to be used to determine the amount of padding."
                            },
                            {
                              "textRaw": "`http2.constants.PADDING_STRATEGY_ALIGNED` - Will *attempt* to apply enough padding to ensure that the total frame length, including the 9-byte header, is a multiple of 8. For each frame, however, there is a maximum allowed number of padding bytes that is determined by current flow control state and settings. If this maximum is less than the calculated amount needed to ensure alignment, the maximum will be used and the total frame length will *not* necessarily be aligned at 8 bytes. ",
                              "name": "http2.constants.PADDING_STRATEGY_ALIGNED",
                              "desc": "Will *attempt* to apply enough padding to ensure that the total frame length, including the 9-byte header, is a multiple of 8. For each frame, however, there is a maximum allowed number of padding bytes that is determined by current flow control state and settings. If this maximum is less than the calculated amount needed to ensure alignment, the maximum will be used and the total frame length will *not* necessarily be aligned at 8 bytes."
                            }
                          ],
                          "name": "paddingStrategy",
                          "type": "number",
                          "default": "`http2.constants.PADDING_STRATEGY_NONE`. Value may be one of:",
                          "desc": "Identifies the strategy used for determining the  amount of padding to use for `HEADERS` and `DATA` frames."
                        },
                        {
                          "textRaw": "`peerMaxConcurrentStreams` {number} Sets the maximum number of concurrent streams for the remote peer as if a `SETTINGS` frame had been received. Will be overridden if the remote peer sets its own value for `maxConcurrentStreams`. **Default:** `100`. ",
                          "name": "peerMaxConcurrentStreams",
                          "type": "number",
                          "default": "`100`",
                          "desc": "Sets the maximum number of concurrent streams for the remote peer as if a `SETTINGS` frame had been received. Will be overridden if the remote peer sets its own value for `maxConcurrentStreams`."
                        },
                        {
                          "textRaw": "`selectPadding` {Function} When `options.paddingStrategy` is equal to `http2.constants.PADDING_STRATEGY_CALLBACK`, provides the callback function used to determine the padding. See [Using `options.selectPadding()`][]. ",
                          "name": "selectPadding",
                          "type": "Function",
                          "desc": "When `options.paddingStrategy` is equal to `http2.constants.PADDING_STRATEGY_CALLBACK`, provides the callback function used to determine the padding. See [Using `options.selectPadding()`][]."
                        },
                        {
                          "textRaw": "`settings` {HTTP/2 Settings Object} The initial settings to send to the remote peer upon connection. ",
                          "name": "settings",
                          "type": "HTTP/2 Settings Object",
                          "desc": "The initial settings to send to the remote peer upon connection."
                        },
                        {
                          "textRaw": "`Http1IncomingMessage` {http.IncomingMessage} Specifies the `IncomingMessage` class to used for HTTP/1 fallback. Useful for extending the original `http.IncomingMessage`. **Default:** `http.IncomingMessage`. ",
                          "name": "Http1IncomingMessage",
                          "type": "http.IncomingMessage",
                          "default": "`http.IncomingMessage`",
                          "desc": "Specifies the `IncomingMessage` class to used for HTTP/1 fallback. Useful for extending the original `http.IncomingMessage`."
                        },
                        {
                          "textRaw": "`Http1ServerResponse` {http.ServerResponse} Specifies the `ServerResponse` class to used for HTTP/1 fallback. Useful for extending the original `http.ServerResponse`. **Default:** `http.ServerResponse`. ",
                          "name": "Http1ServerResponse",
                          "type": "http.ServerResponse",
                          "default": "`http.ServerResponse`",
                          "desc": "Specifies the `ServerResponse` class to used for HTTP/1 fallback. Useful for extending the original `http.ServerResponse`."
                        },
                        {
                          "textRaw": "`Http2ServerRequest` {http2.Http2ServerRequest} Specifies the `Http2ServerRequest` class to use. Useful for extending the original `Http2ServerRequest`. **Default:** `Http2ServerRequest`. ",
                          "name": "Http2ServerRequest",
                          "type": "http2.Http2ServerRequest",
                          "default": "`Http2ServerRequest`",
                          "desc": "Specifies the `Http2ServerRequest` class to use. Useful for extending the original `Http2ServerRequest`."
                        },
                        {
                          "textRaw": "`Http2ServerResponse` {http2.Http2ServerResponse} Specifies the `Http2ServerResponse` class to use. Useful for extending the original `Http2ServerResponse`. **Default:** `Http2ServerResponse`. ",
                          "name": "Http2ServerResponse",
                          "type": "http2.Http2ServerResponse",
                          "default": "`Http2ServerResponse`",
                          "desc": "Specifies the `Http2ServerResponse` class to use. Useful for extending the original `Http2ServerResponse`."
                        }
                      ],
                      "name": "options",
                      "type": "Object"
                    },
                    {
                      "textRaw": "`onRequestHandler` {Function} See [Compatibility API][] ",
                      "name": "onRequestHandler",
                      "type": "Function",
                      "desc": "See [Compatibility API][]",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "options"
                    },
                    {
                      "name": "onRequestHandler",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns a <code>net.Server</code> instance that creates and manages <code>Http2Session</code>\ninstances.</p>\n<p>Since there are no browsers known that support\n<a href=\"https://http2.github.io/faq/#does-http2-require-encryption\">unencrypted HTTP/2</a>, the use of\n<a href=\"#http2_http2_createsecureserver_options_onrequesthandler\"><code>http2.createSecureServer()</code></a> is necessary when communicating\nwith browser clients.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\n\n// Create an unencrypted HTTP/2 server.\n// Since there are no browsers known that support\n// unencrypted HTTP/2, the use of `http2.createSecureServer()`\n// is necessary when communicating with browser clients.\nconst server = http2.createServer();\n\nserver.on(&#39;stream&#39;, (stream, headers) =&gt; {\n  stream.respond({\n    &#39;content-type&#39;: &#39;text/html&#39;,\n    &#39;:status&#39;: 200\n  });\n  stream.end(&#39;&lt;h1&gt;Hello World&lt;/h1&gt;&#39;);\n});\n\nserver.listen(80);\n</code></pre>\n"
            },
            {
              "textRaw": "http2.createSecureServer(options[, onRequestHandler])",
              "type": "method",
              "name": "createSecureServer",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": [
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/17105",
                    "description": "Added the `maxOutstandingPings` option with a default limit of 10."
                  },
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/16676",
                    "description": "Added the `maxHeaderListPairs` option with a default limit of 128 header pairs."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Http2SecureServer} ",
                    "name": "return",
                    "type": "Http2SecureServer"
                  },
                  "params": [
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`allowHTTP1` {boolean} Incoming client connections that do not support HTTP/2 will be downgraded to HTTP/1.x when set to `true`. See the [`'unknownProtocol'`][] event. See [ALPN negotiation][]. **Default:** `false`. ",
                          "name": "allowHTTP1",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "Incoming client connections that do not support HTTP/2 will be downgraded to HTTP/1.x when set to `true`. See the [`'unknownProtocol'`][] event. See [ALPN negotiation][]."
                        },
                        {
                          "textRaw": "`maxDeflateDynamicTableSize` {number} Sets the maximum dynamic table size for deflating header fields. **Default:** `4Kib`. ",
                          "name": "maxDeflateDynamicTableSize",
                          "type": "number",
                          "default": "`4Kib`",
                          "desc": "Sets the maximum dynamic table size for deflating header fields."
                        },
                        {
                          "textRaw": "`maxSessionMemory`{number} Sets the maximum memory that the `Http2Session` is permitted to use. The value is expressed in terms of number of megabytes, e.g. `1` equal 1 megabyte. The minimum value allowed is `1`. This is a credit based limit, existing `Http2Stream`s may cause this limit to be exceeded, but new `Http2Stream` instances will be rejected while this limit is exceeded. The current number of `Http2Stream` sessions, the current memory use of the header compression tables, current data queued to be sent, and unacknowledged `PING` and `SETTINGS` frames are all counted towards the current limit. **Default:** `10`. ",
                          "name": "maxSessionMemory",
                          "type": "number",
                          "default": "`10`",
                          "desc": "Sets the maximum memory that the `Http2Session` is permitted to use. The value is expressed in terms of number of megabytes, e.g. `1` equal 1 megabyte. The minimum value allowed is `1`. This is a credit based limit, existing `Http2Stream`s may cause this limit to be exceeded, but new `Http2Stream` instances will be rejected while this limit is exceeded. The current number of `Http2Stream` sessions, the current memory use of the header compression tables, current data queued to be sent, and unacknowledged `PING` and `SETTINGS` frames are all counted towards the current limit."
                        },
                        {
                          "textRaw": "`maxHeaderListPairs` {number} Sets the maximum number of header entries. The minimum value is `4`. **Default:** `128`. ",
                          "name": "maxHeaderListPairs",
                          "type": "number",
                          "default": "`128`",
                          "desc": "Sets the maximum number of header entries. The minimum value is `4`."
                        },
                        {
                          "textRaw": "`maxOutstandingPings` {number} Sets the maximum number of outstanding, unacknowledged pings. **Default:** `10`. ",
                          "name": "maxOutstandingPings",
                          "type": "number",
                          "default": "`10`",
                          "desc": "Sets the maximum number of outstanding, unacknowledged pings."
                        },
                        {
                          "textRaw": "`maxSendHeaderBlockLength` {number} Sets the maximum allowed size for a serialized, compressed block of headers. Attempts to send headers that exceed this limit will result in a `'frameError'` event being emitted and the stream being closed and destroyed. ",
                          "name": "maxSendHeaderBlockLength",
                          "type": "number",
                          "desc": "Sets the maximum allowed size for a serialized, compressed block of headers. Attempts to send headers that exceed this limit will result in a `'frameError'` event being emitted and the stream being closed and destroyed."
                        },
                        {
                          "textRaw": "`paddingStrategy` {number} Identifies the strategy used for determining the  amount of padding to use for `HEADERS` and `DATA` frames. **Default:**  `http2.constants.PADDING_STRATEGY_NONE`. Value may be one of: ",
                          "options": [
                            {
                              "textRaw": "`http2.constants.PADDING_STRATEGY_NONE` - Specifies that no padding is to be applied. ",
                              "name": "http2.constants.PADDING_STRATEGY_NONE",
                              "desc": "Specifies that no padding is to be applied."
                            },
                            {
                              "textRaw": "`http2.constants.PADDING_STRATEGY_MAX` - Specifies that the maximum amount of padding, as determined by the internal implementation, is to be applied. ",
                              "name": "http2.constants.PADDING_STRATEGY_MAX",
                              "desc": "Specifies that the maximum amount of padding, as determined by the internal implementation, is to be applied."
                            },
                            {
                              "textRaw": "`http2.constants.PADDING_STRATEGY_CALLBACK` - Specifies that the user provided `options.selectPadding()` callback is to be used to determine the amount of padding. ",
                              "name": "http2.constants.PADDING_STRATEGY_CALLBACK",
                              "desc": "Specifies that the user provided `options.selectPadding()` callback is to be used to determine the amount of padding."
                            },
                            {
                              "textRaw": "`http2.constants.PADDING_STRATEGY_ALIGNED` - Will *attempt* to apply enough padding to ensure that the total frame length, including the 9-byte header, is a multiple of 8. For each frame, however, there is a maximum allowed number of padding bytes that is determined by current flow control state and settings. If this maximum is less than the calculated amount needed to ensure alignment, the maximum will be used and the total frame length will *not* necessarily be aligned at 8 bytes. ",
                              "name": "http2.constants.PADDING_STRATEGY_ALIGNED",
                              "desc": "Will *attempt* to apply enough padding to ensure that the total frame length, including the 9-byte header, is a multiple of 8. For each frame, however, there is a maximum allowed number of padding bytes that is determined by current flow control state and settings. If this maximum is less than the calculated amount needed to ensure alignment, the maximum will be used and the total frame length will *not* necessarily be aligned at 8 bytes."
                            }
                          ],
                          "name": "paddingStrategy",
                          "type": "number",
                          "default": "`http2.constants.PADDING_STRATEGY_NONE`. Value may be one of:",
                          "desc": "Identifies the strategy used for determining the  amount of padding to use for `HEADERS` and `DATA` frames."
                        },
                        {
                          "textRaw": "`peerMaxConcurrentStreams` {number} Sets the maximum number of concurrent streams for the remote peer as if a `SETTINGS` frame had been received. Will be overridden if the remote peer sets its own value for `maxConcurrentStreams`. **Default:** `100`. ",
                          "name": "peerMaxConcurrentStreams",
                          "type": "number",
                          "default": "`100`",
                          "desc": "Sets the maximum number of concurrent streams for the remote peer as if a `SETTINGS` frame had been received. Will be overridden if the remote peer sets its own value for `maxConcurrentStreams`."
                        },
                        {
                          "textRaw": "`selectPadding` {Function} When `options.paddingStrategy` is equal to `http2.constants.PADDING_STRATEGY_CALLBACK`, provides the callback function used to determine the padding. See [Using `options.selectPadding()`][]. ",
                          "name": "selectPadding",
                          "type": "Function",
                          "desc": "When `options.paddingStrategy` is equal to `http2.constants.PADDING_STRATEGY_CALLBACK`, provides the callback function used to determine the padding. See [Using `options.selectPadding()`][]."
                        },
                        {
                          "textRaw": "`settings` {HTTP/2 Settings Object} The initial settings to send to the remote peer upon connection. ",
                          "name": "settings",
                          "type": "HTTP/2 Settings Object",
                          "desc": "The initial settings to send to the remote peer upon connection."
                        },
                        {
                          "textRaw": "...: Any [`tls.createServer()`][] options can be provided. For servers, the identity options (`pfx` or `key`/`cert`) are usually required. ",
                          "name": "...",
                          "desc": "Any [`tls.createServer()`][] options can be provided. For servers, the identity options (`pfx` or `key`/`cert`) are usually required."
                        }
                      ],
                      "name": "options",
                      "type": "Object"
                    },
                    {
                      "textRaw": "`onRequestHandler` {Function} See [Compatibility API][] ",
                      "name": "onRequestHandler",
                      "type": "Function",
                      "desc": "See [Compatibility API][]",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "options"
                    },
                    {
                      "name": "onRequestHandler",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns a <code>tls.Server</code> instance that creates and manages <code>Http2Session</code>\ninstances.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\n\nconst options = {\n  key: fs.readFileSync(&#39;server-key.pem&#39;),\n  cert: fs.readFileSync(&#39;server-cert.pem&#39;)\n};\n\n// Create a secure HTTP/2 server\nconst server = http2.createSecureServer(options);\n\nserver.on(&#39;stream&#39;, (stream, headers) =&gt; {\n  stream.respond({\n    &#39;content-type&#39;: &#39;text/html&#39;,\n    &#39;:status&#39;: 200\n  });\n  stream.end(&#39;&lt;h1&gt;Hello World&lt;/h1&gt;&#39;);\n});\n\nserver.listen(80);\n</code></pre>\n"
            },
            {
              "textRaw": "http2.connect(authority[, options][, listener])",
              "type": "method",
              "name": "connect",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": [
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/17105",
                    "description": "Added the `maxOutstandingPings` option with a default limit of 10."
                  },
                  {
                    "version": "v8.9.3",
                    "pr-url": "https://github.com/nodejs/node/pull/16676",
                    "description": "Added the `maxHeaderListPairs` option with a default limit of 128 header pairs."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {ClientHttp2Session} ",
                    "name": "return",
                    "type": "ClientHttp2Session"
                  },
                  "params": [
                    {
                      "textRaw": "`authority` {string|URL} ",
                      "name": "authority",
                      "type": "string|URL"
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`maxDeflateDynamicTableSize` {number} Sets the maximum dynamic table size for deflating header fields. **Default:** `4Kib`. ",
                          "name": "maxDeflateDynamicTableSize",
                          "type": "number",
                          "default": "`4Kib`",
                          "desc": "Sets the maximum dynamic table size for deflating header fields."
                        },
                        {
                          "textRaw": "`maxSessionMemory`{number} Sets the maximum memory that the `Http2Session` is permitted to use. The value is expressed in terms of number of megabytes, e.g. `1` equal 1 megabyte. The minimum value allowed is `1`. This is a credit based limit, existing `Http2Stream`s may cause this limit to be exceeded, but new `Http2Stream` instances will be rejected while this limit is exceeded. The current number of `Http2Stream` sessions, the current memory use of the header compression tables, current data queued to be sent, and unacknowledged `PING` and `SETTINGS` frames are all counted towards the current limit. **Default:** `10`. ",
                          "name": "maxSessionMemory",
                          "type": "number",
                          "default": "`10`",
                          "desc": "Sets the maximum memory that the `Http2Session` is permitted to use. The value is expressed in terms of number of megabytes, e.g. `1` equal 1 megabyte. The minimum value allowed is `1`. This is a credit based limit, existing `Http2Stream`s may cause this limit to be exceeded, but new `Http2Stream` instances will be rejected while this limit is exceeded. The current number of `Http2Stream` sessions, the current memory use of the header compression tables, current data queued to be sent, and unacknowledged `PING` and `SETTINGS` frames are all counted towards the current limit."
                        },
                        {
                          "textRaw": "`maxHeaderListPairs` {number} Sets the maximum number of header entries. The minimum value is `1`. **Default:** `128`. ",
                          "name": "maxHeaderListPairs",
                          "type": "number",
                          "default": "`128`",
                          "desc": "Sets the maximum number of header entries. The minimum value is `1`."
                        },
                        {
                          "textRaw": "`maxOutstandingPings` {number} Sets the maximum number of outstanding, unacknowledged pings. **Default:** `10`. ",
                          "name": "maxOutstandingPings",
                          "type": "number",
                          "default": "`10`",
                          "desc": "Sets the maximum number of outstanding, unacknowledged pings."
                        },
                        {
                          "textRaw": "`maxReservedRemoteStreams` {number} Sets the maximum number of reserved push streams the client will accept at any given time. Once the current number of currently reserved push streams exceeds reaches this limit, new push streams sent by the server will be automatically rejected. ",
                          "name": "maxReservedRemoteStreams",
                          "type": "number",
                          "desc": "Sets the maximum number of reserved push streams the client will accept at any given time. Once the current number of currently reserved push streams exceeds reaches this limit, new push streams sent by the server will be automatically rejected."
                        },
                        {
                          "textRaw": "`maxSendHeaderBlockLength` {number} Sets the maximum allowed size for a serialized, compressed block of headers. Attempts to send headers that exceed this limit will result in a `'frameError'` event being emitted and the stream being closed and destroyed. ",
                          "name": "maxSendHeaderBlockLength",
                          "type": "number",
                          "desc": "Sets the maximum allowed size for a serialized, compressed block of headers. Attempts to send headers that exceed this limit will result in a `'frameError'` event being emitted and the stream being closed and destroyed."
                        },
                        {
                          "textRaw": "`paddingStrategy` {number} Identifies the strategy used for determining the  amount of padding to use for `HEADERS` and `DATA` frames. **Default:**  `http2.constants.PADDING_STRATEGY_NONE`. Value may be one of: ",
                          "options": [
                            {
                              "textRaw": "`http2.constants.PADDING_STRATEGY_NONE` - Specifies that no padding is to be applied. ",
                              "name": "http2.constants.PADDING_STRATEGY_NONE",
                              "desc": "Specifies that no padding is to be applied."
                            },
                            {
                              "textRaw": "`http2.constants.PADDING_STRATEGY_MAX` - Specifies that the maximum amount of padding, as determined by the internal implementation, is to be applied. ",
                              "name": "http2.constants.PADDING_STRATEGY_MAX",
                              "desc": "Specifies that the maximum amount of padding, as determined by the internal implementation, is to be applied."
                            },
                            {
                              "textRaw": "`http2.constants.PADDING_STRATEGY_CALLBACK` - Specifies that the user provided `options.selectPadding()` callback is to be used to determine the amount of padding. ",
                              "name": "http2.constants.PADDING_STRATEGY_CALLBACK",
                              "desc": "Specifies that the user provided `options.selectPadding()` callback is to be used to determine the amount of padding."
                            },
                            {
                              "textRaw": "`http2.constants.PADDING_STRATEGY_ALIGNED` - Will *attempt* to apply enough padding to ensure that the total frame length, including the 9-byte header, is a multiple of 8. For each frame, however, there is a maximum allowed number of padding bytes that is determined by current flow control state and settings. If this maximum is less than the calculated amount needed to ensure alignment, the maximum will be used and the total frame length will *not* necessarily be aligned at 8 bytes. ",
                              "name": "http2.constants.PADDING_STRATEGY_ALIGNED",
                              "desc": "Will *attempt* to apply enough padding to ensure that the total frame length, including the 9-byte header, is a multiple of 8. For each frame, however, there is a maximum allowed number of padding bytes that is determined by current flow control state and settings. If this maximum is less than the calculated amount needed to ensure alignment, the maximum will be used and the total frame length will *not* necessarily be aligned at 8 bytes."
                            }
                          ],
                          "name": "paddingStrategy",
                          "type": "number",
                          "default": "`http2.constants.PADDING_STRATEGY_NONE`. Value may be one of:",
                          "desc": "Identifies the strategy used for determining the  amount of padding to use for `HEADERS` and `DATA` frames."
                        },
                        {
                          "textRaw": "`peerMaxConcurrentStreams` {number} Sets the maximum number of concurrent streams for the remote peer as if a `SETTINGS` frame had been received. Will be overridden if the remote peer sets its own value for `maxConcurrentStreams`. **Default:** `100`. ",
                          "name": "peerMaxConcurrentStreams",
                          "type": "number",
                          "default": "`100`",
                          "desc": "Sets the maximum number of concurrent streams for the remote peer as if a `SETTINGS` frame had been received. Will be overridden if the remote peer sets its own value for `maxConcurrentStreams`."
                        },
                        {
                          "textRaw": "`selectPadding` {Function} When `options.paddingStrategy` is equal to `http2.constants.PADDING_STRATEGY_CALLBACK`, provides the callback function used to determine the padding. See [Using `options.selectPadding()`][]. ",
                          "name": "selectPadding",
                          "type": "Function",
                          "desc": "When `options.paddingStrategy` is equal to `http2.constants.PADDING_STRATEGY_CALLBACK`, provides the callback function used to determine the padding. See [Using `options.selectPadding()`][]."
                        },
                        {
                          "textRaw": "`settings` {HTTP/2 Settings Object} The initial settings to send to the remote peer upon connection. ",
                          "name": "settings",
                          "type": "HTTP/2 Settings Object",
                          "desc": "The initial settings to send to the remote peer upon connection."
                        },
                        {
                          "textRaw": "`createConnection` {Function} An optional callback that receives the `URL` instance passed to `connect` and the `options` object, and returns any [`Duplex`][] stream that is to be used as the connection for this session. ",
                          "name": "createConnection",
                          "type": "Function",
                          "desc": "An optional callback that receives the `URL` instance passed to `connect` and the `options` object, and returns any [`Duplex`][] stream that is to be used as the connection for this session."
                        },
                        {
                          "textRaw": "...: Any [`net.connect()`][] or [`tls.connect()`][] options can be provided. ",
                          "name": "...",
                          "desc": "Any [`net.connect()`][] or [`tls.connect()`][] options can be provided."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    },
                    {
                      "textRaw": "`listener` {Function} ",
                      "name": "listener",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "authority"
                    },
                    {
                      "name": "options",
                      "optional": true
                    },
                    {
                      "name": "listener",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns a <code>ClientHttp2Session</code> instance.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst client = http2.connect(&#39;https://localhost:1234&#39;);\n\n/* Use the client */\n\nclient.close();\n</code></pre>\n"
            },
            {
              "textRaw": "http2.getDefaultSettings()",
              "type": "method",
              "name": "getDefaultSettings",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {HTTP/2 Settings Object} ",
                    "name": "return",
                    "type": "HTTP/2 Settings Object"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns an object containing the default settings for an <code>Http2Session</code>\ninstance. This method returns a new object instance every time it is called\nso instances returned may be safely modified for use.</p>\n"
            },
            {
              "textRaw": "http2.getPackedSettings(settings)",
              "type": "method",
              "name": "getPackedSettings",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} ",
                    "name": "return",
                    "type": "Buffer"
                  },
                  "params": [
                    {
                      "textRaw": "`settings` {HTTP/2 Settings Object} ",
                      "name": "settings",
                      "type": "HTTP/2 Settings Object"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "settings"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns a <code>Buffer</code> instance containing serialized representation of the given\nHTTP/2 settings as specified in the <a href=\"https://tools.ietf.org/html/rfc7540\">HTTP/2</a> specification. This is intended\nfor use with the <code>HTTP2-Settings</code> header field.</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\n\nconst packed = http2.getPackedSettings({ enablePush: false });\n\nconsole.log(packed.toString(&#39;base64&#39;));\n// Prints: AAIAAAAA\n</code></pre>\n"
            },
            {
              "textRaw": "http2.getUnpackedSettings(buf)",
              "type": "method",
              "name": "getUnpackedSettings",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {HTTP/2 Settings Object} ",
                    "name": "return",
                    "type": "HTTP/2 Settings Object"
                  },
                  "params": [
                    {
                      "textRaw": "`buf` {Buffer|Uint8Array} The packed settings. ",
                      "name": "buf",
                      "type": "Buffer|Uint8Array",
                      "desc": "The packed settings."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buf"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns a <a href=\"#http2_settings_object\">HTTP/2 Settings Object</a> containing the deserialized settings from\nthe given <code>Buffer</code> as generated by <code>http2.getPackedSettings()</code>.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "http2.constants",
              "name": "constants",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "modules": [
                {
                  "textRaw": "Error Codes for RST_STREAM and GOAWAY",
                  "name": "error_codes_for_rst_stream_and_goaway",
                  "desc": "<p><a id=\"error_codes\"></a></p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Name</th>\n<th>Constant</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>0x00</code></td>\n<td>No Error</td>\n<td><code>http2.constants.NGHTTP2_NO_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x01</code></td>\n<td>Protocol Error</td>\n<td><code>http2.constants.NGHTTP2_PROTOCOL_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x02</code></td>\n<td>Internal Error</td>\n<td><code>http2.constants.NGHTTP2_INTERNAL_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x03</code></td>\n<td>Flow Control Error</td>\n<td><code>http2.constants.NGHTTP2_FLOW_CONTROL_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x04</code></td>\n<td>Settings Timeout</td>\n<td><code>http2.constants.NGHTTP2_SETTINGS_TIMEOUT</code></td>\n</tr>\n<tr>\n<td><code>0x05</code></td>\n<td>Stream Closed</td>\n<td><code>http2.constants.NGHTTP2_STREAM_CLOSED</code></td>\n</tr>\n<tr>\n<td><code>0x06</code></td>\n<td>Frame Size Error</td>\n<td><code>http2.constants.NGHTTP2_FRAME_SIZE_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x07</code></td>\n<td>Refused Stream</td>\n<td><code>http2.constants.NGHTTP2_REFUSED_STREAM</code></td>\n</tr>\n<tr>\n<td><code>0x08</code></td>\n<td>Cancel</td>\n<td><code>http2.constants.NGHTTP2_CANCEL</code></td>\n</tr>\n<tr>\n<td><code>0x09</code></td>\n<td>Compression Error</td>\n<td><code>http2.constants.NGHTTP2_COMPRESSION_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x0a</code></td>\n<td>Connect Error</td>\n<td><code>http2.constants.NGHTTP2_CONNECT_ERROR</code></td>\n</tr>\n<tr>\n<td><code>0x0b</code></td>\n<td>Enhance Your Calm</td>\n<td><code>http2.constants.NGHTTP2_ENHANCE_YOUR_CALM</code></td>\n</tr>\n<tr>\n<td><code>0x0c</code></td>\n<td>Inadequate Security</td>\n<td><code>http2.constants.NGHTTP2_INADEQUATE_SECURITY</code></td>\n</tr>\n<tr>\n<td><code>0x0d</code></td>\n<td>HTTP/1.1 Required</td>\n<td><code>http2.constants.NGHTTP2_HTTP_1_1_REQUIRED</code></td>\n</tr>\n</tbody>\n</table>\n<p>The <code>&#39;timeout&#39;</code> event is emitted when there is no activity on the Server for\na given number of milliseconds set using <code>http2server.setTimeout()</code>.</p>\n",
                  "type": "module",
                  "displayName": "Error Codes for RST_STREAM and GOAWAY"
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "Core API"
        },
        {
          "textRaw": "Compatibility API",
          "name": "compatibility_api",
          "desc": "<p>The Compatibility API has the goal of providing a similar developer experience\nof HTTP/1 when using HTTP/2, making it possible to develop applications\nthat support both <a href=\"http.html\">HTTP/1</a> and HTTP/2. This API targets only the\n<strong>public API</strong> of the <a href=\"http.html\">HTTP/1</a>. However many modules use internal\nmethods or state, and those <em>are not supported</em> as it is a completely\ndifferent implementation.</p>\n<p>The following example creates an HTTP/2 server using the compatibility\nAPI:</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst server = http2.createServer((req, res) =&gt; {\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);\n  res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39; });\n  res.end(&#39;ok&#39;);\n});\n</code></pre>\n<p>In order to create a mixed <a href=\"https.html\">HTTPS</a> and HTTP/2 server, refer to the\n<a href=\"#http2_alpn_negotiation\">ALPN negotiation</a> section.\nUpgrading from non-tls HTTP/1 servers is not supported.</p>\n<p>The HTTP/2 compatibility API is composed of <a href=\"\"><code>Http2ServerRequest</code></a> and\n<a href=\"\"><code>Http2ServerResponse</code></a>. They aim at API compatibility with HTTP/1, but\nthey do not hide the differences between the protocols. As an example,\nthe status message for HTTP codes is ignored.</p>\n",
          "modules": [
            {
              "textRaw": "ALPN negotiation",
              "name": "alpn_negotiation",
              "desc": "<p>ALPN negotiation allows supporting both <a href=\"https.html\">HTTPS</a> and HTTP/2 over\nthe same socket. The <code>req</code> and <code>res</code> objects can be either HTTP/1 or\nHTTP/2, and an application <strong>must</strong> restrict itself to the public API of\n<a href=\"http.html\">HTTP/1</a>, and detect if it is possible to use the more advanced\nfeatures of HTTP/2.</p>\n<p>The following example creates a server that supports both protocols:</p>\n<pre><code class=\"lang-js\">const { createSecureServer } = require(&#39;http2&#39;);\nconst { readFileSync } = require(&#39;fs&#39;);\n\nconst cert = readFileSync(&#39;./cert.pem&#39;);\nconst key = readFileSync(&#39;./key.pem&#39;);\n\nconst server = createSecureServer(\n  { cert, key, allowHTTP1: true },\n  onRequest\n).listen(4443);\n\nfunction onRequest(req, res) {\n  // detects if it is a HTTPS request or HTTP/2\n  const { socket: { alpnProtocol } } = req.httpVersion === &#39;2.0&#39; ?\n    req.stream.session : req;\n  res.writeHead(200, { &#39;content-type&#39;: &#39;application/json&#39; });\n  res.end(JSON.stringify({\n    alpnProtocol,\n    httpVersion: req.httpVersion\n  }));\n}\n</code></pre>\n<p>The <code>&#39;request&#39;</code> event works identically on both <a href=\"https.html\">HTTPS</a> and\nHTTP/2.</p>\n",
              "type": "module",
              "displayName": "ALPN negotiation"
            }
          ],
          "classes": [
            {
              "textRaw": "Class: http2.Http2ServerRequest",
              "type": "class",
              "name": "http2.Http2ServerRequest",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<p>A <code>Http2ServerRequest</code> object is created by <a href=\"#http2_class_http2server\"><code>http2.Server</code></a> or\n<a href=\"#http2_class_http2secureserver\"><code>http2.SecureServer</code></a> and passed as the first argument to the\n<a href=\"#http2_event_request\"><code>&#39;request&#39;</code></a> event. It may be used to access a request status, headers, and\ndata.</p>\n<p>It implements the <a href=\"stream.html#stream_class_stream_readable\">Readable Stream</a> interface, as well as the\nfollowing additional events, methods, and properties.</p>\n",
              "events": [
                {
                  "textRaw": "Event: 'aborted'",
                  "type": "event",
                  "name": "aborted",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;aborted&#39;</code> event is emitted whenever a <code>Http2ServerRequest</code> instance is\nabnormally aborted in mid-communication.</p>\n<p>The <code>&#39;aborted&#39;</code> event will only be emitted if the <code>Http2ServerRequest</code> writable\nside has not been ended.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'close'",
                  "type": "event",
                  "name": "close",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Indicates that the underlying <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> was closed.\nJust like <code>&#39;end&#39;</code>, this event occurs only once per response.</p>\n",
                  "params": []
                }
              ],
              "properties": [
                {
                  "textRaw": "`aborted` {boolean} ",
                  "type": "boolean",
                  "name": "aborted",
                  "meta": {
                    "added": [
                      "v10.1.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>request.aborted</code> property will be <code>true</code> if the request has\nbeen aborted.</p>\n"
                },
                {
                  "textRaw": "`headers` {Object} ",
                  "type": "Object",
                  "name": "headers",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The request/response headers object.</p>\n<p>Key-value pairs of header names and values. Header names are lower-cased.\nExample:</p>\n<pre><code class=\"lang-js\">// Prints something like:\n//\n// { &#39;user-agent&#39;: &#39;curl/7.22.0&#39;,\n//   host: &#39;127.0.0.1:8000&#39;,\n//   accept: &#39;*/*&#39; }\nconsole.log(request.headers);\n</code></pre>\n<p>See <a href=\"#http2_headers_object\">HTTP/2 Headers Object</a>.</p>\n<p>In HTTP/2, the request path, hostname, protocol, and method are represented as\nspecial headers prefixed with the <code>:</code> character (e.g. <code>&#39;:path&#39;</code>). These special\nheaders will be included in the <code>request.headers</code> object. Care must be taken not\nto inadvertently modify these special headers or errors may occur. For instance,\nremoving all headers from the request will cause errors to occur:</p>\n<pre><code class=\"lang-js\">removeAllHeaders(request.headers);\nassert(request.url);   // Fails because the :path header has been removed\n</code></pre>\n"
                },
                {
                  "textRaw": "`httpVersion` {string} ",
                  "type": "string",
                  "name": "httpVersion",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>In case of server request, the HTTP version sent by the client. In the case of\nclient response, the HTTP version of the connected-to server. Returns\n<code>&#39;2.0&#39;</code>.</p>\n<p>Also <code>message.httpVersionMajor</code> is the first integer and\n<code>message.httpVersionMinor</code> is the second.</p>\n"
                },
                {
                  "textRaw": "`method` {string} ",
                  "type": "string",
                  "name": "method",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The request method as a string. Read-only. Example:\n<code>&#39;GET&#39;</code>, <code>&#39;DELETE&#39;</code>.</p>\n"
                },
                {
                  "textRaw": "`rawHeaders` {string[]} ",
                  "type": "string[]",
                  "name": "rawHeaders",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The raw request/response headers list exactly as they were received.</p>\n<p>Note that the keys and values are in the same list. It is <em>not</em> a\nlist of tuples. So, the even-numbered offsets are key values, and the\nodd-numbered offsets are the associated values.</p>\n<p>Header names are not lowercased, and duplicates are not merged.</p>\n<pre><code class=\"lang-js\">// Prints something like:\n//\n// [ &#39;user-agent&#39;,\n//   &#39;this is invalid because there can be only one&#39;,\n//   &#39;User-Agent&#39;,\n//   &#39;curl/7.22.0&#39;,\n//   &#39;Host&#39;,\n//   &#39;127.0.0.1:8000&#39;,\n//   &#39;ACCEPT&#39;,\n//   &#39;*/*&#39; ]\nconsole.log(request.rawHeaders);\n</code></pre>\n"
                },
                {
                  "textRaw": "`rawTrailers` {string[]} ",
                  "type": "string[]",
                  "name": "rawTrailers",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The raw request/response trailer keys and values exactly as they were\nreceived. Only populated at the <code>&#39;end&#39;</code> event.</p>\n"
                },
                {
                  "textRaw": "`socket` {net.Socket|tls.TLSSocket} ",
                  "type": "net.Socket|tls.TLSSocket",
                  "name": "socket",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Returns a <code>Proxy</code> object that acts as a <code>net.Socket</code> (or <code>tls.TLSSocket</code>) but\napplies getters, setters, and methods based on HTTP/2 logic.</p>\n<p><code>destroyed</code>, <code>readable</code>, and <code>writable</code> properties will be retrieved from and\nset on <code>request.stream</code>.</p>\n<p><code>destroy</code>, <code>emit</code>, <code>end</code>, <code>on</code> and <code>once</code> methods will be called on\n<code>request.stream</code>.</p>\n<p><code>setTimeout</code> method will be called on <code>request.stream.session</code>.</p>\n<p><code>pause</code>, <code>read</code>, <code>resume</code>, and <code>write</code> will throw an error with code\n<code>ERR_HTTP2_NO_SOCKET_MANIPULATION</code>. See <a href=\"#http2_http2session_and_sockets\"><code>Http2Session</code> and Sockets</a> for\nmore information.</p>\n<p>All other interactions will be routed directly to the socket. With TLS support,\nuse <a href=\"tls.html#tls_tlssocket_getpeercertificate_detailed\"><code>request.socket.getPeerCertificate()</code></a> to obtain the client&#39;s\nauthentication details.</p>\n"
                },
                {
                  "textRaw": "`stream` {Http2Stream} ",
                  "type": "Http2Stream",
                  "name": "stream",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> object backing the request.</p>\n"
                },
                {
                  "textRaw": "`trailers` {Object} ",
                  "type": "Object",
                  "name": "trailers",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The request/response trailers object. Only populated at the <code>&#39;end&#39;</code> event.</p>\n"
                },
                {
                  "textRaw": "`url` {string} ",
                  "type": "string",
                  "name": "url",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Request URL string. This contains only the URL that is\npresent in the actual HTTP request. If the request is:</p>\n<pre><code class=\"lang-txt\">GET /status?name=ryan HTTP/1.1\\r\\n\nAccept: text/plain\\r\\n\n\\r\\n\n</code></pre>\n<p>Then <code>request.url</code> will be:</p>\n<!-- eslint-disable semi -->\n<pre><code class=\"lang-js\">&#39;/status?name=ryan&#39;\n</code></pre>\n<p>To parse the url into its parts <code>require(&#39;url&#39;).parse(request.url)</code>\ncan be used. Example:</p>\n<pre><code class=\"lang-txt\">$ node\n&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;)\nUrl {\n  protocol: null,\n  slashes: null,\n  auth: null,\n  host: null,\n  port: null,\n  hostname: null,\n  hash: null,\n  search: &#39;?name=ryan&#39;,\n  query: &#39;name=ryan&#39;,\n  pathname: &#39;/status&#39;,\n  path: &#39;/status?name=ryan&#39;,\n  href: &#39;/status?name=ryan&#39; }\n</code></pre>\n<p>To extract the parameters from the query string, the\n<code>require(&#39;querystring&#39;).parse</code> function can be used, or\n<code>true</code> can be passed as the second argument to <code>require(&#39;url&#39;).parse</code>.\nExample:</p>\n<pre><code class=\"lang-txt\">$ node\n&gt; require(&#39;url&#39;).parse(&#39;/status?name=ryan&#39;, true)\nUrl {\n  protocol: null,\n  slashes: null,\n  auth: null,\n  host: null,\n  port: null,\n  hostname: null,\n  hash: null,\n  search: &#39;?name=ryan&#39;,\n  query: { name: &#39;ryan&#39; },\n  pathname: &#39;/status&#39;,\n  path: &#39;/status?name=ryan&#39;,\n  href: &#39;/status?name=ryan&#39; }\n</code></pre>\n"
                }
              ],
              "methods": [
                {
                  "textRaw": "request.destroy([error])",
                  "type": "method",
                  "name": "destroy",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`error` {Error} ",
                          "name": "error",
                          "type": "Error",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "error",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Calls <code>destroy()</code> on the <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> that received\nthe <a href=\"#http2_class_http2_http2serverrequest\"><code>Http2ServerRequest</code></a>. If <code>error</code> is provided, an <code>&#39;error&#39;</code> event\nis emitted and <code>error</code> is passed as an argument to any listeners on the event.</p>\n<p>It does nothing if the stream was already destroyed.</p>\n"
                },
                {
                  "textRaw": "request.setTimeout(msecs, callback)",
                  "type": "method",
                  "name": "setTimeout",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {http2.Http2ServerRequest} ",
                        "name": "return",
                        "type": "http2.Http2ServerRequest"
                      },
                      "params": [
                        {
                          "textRaw": "`msecs` {number} ",
                          "name": "msecs",
                          "type": "number"
                        },
                        {
                          "textRaw": "`callback` {Function} ",
                          "name": "callback",
                          "type": "Function"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "msecs"
                        },
                        {
                          "name": "callback"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Sets the <a href=\"\"><code>Http2Stream</code></a>&#39;s timeout value to <code>msecs</code>. If a callback is\nprovided, then it is added as a listener on the <code>&#39;timeout&#39;</code> event on\nthe response object.</p>\n<p>If no <code>&#39;timeout&#39;</code> listener is added to the request, the response, or\nthe server, then <a href=\"\"><code>Http2Stream</code></a>s are destroyed when they time out. If a\nhandler is assigned to the request, the response, or the server&#39;s <code>&#39;timeout&#39;</code>\nevents, timed out sockets must be handled explicitly.</p>\n"
                }
              ]
            },
            {
              "textRaw": "Class: http2.Http2ServerResponse",
              "type": "class",
              "name": "http2.Http2ServerResponse",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<p>This object is created internally by an HTTP server — not by the user. It is\npassed as the second parameter to the <a href=\"#http2_event_request\"><code>&#39;request&#39;</code></a> event.</p>\n<p>The response implements, but does not inherit from, the <a href=\"stream.html#stream_writable_streams\">Writable Stream</a>\ninterface. This is an <a href=\"events.html\"><code>EventEmitter</code></a> with the following events:</p>\n",
              "events": [
                {
                  "textRaw": "Event: 'close'",
                  "type": "event",
                  "name": "close",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Indicates that the underlying <a href=\"\"><code>Http2Stream</code></a> was terminated before\n<a href=\"#http2_response_end_data_encoding_callback\"><code>response.end()</code></a> was called or able to flush.</p>\n",
                  "params": []
                },
                {
                  "textRaw": "Event: 'finish'",
                  "type": "event",
                  "name": "finish",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Emitted when the response has been sent. More specifically, this event is\nemitted when the last segment of the response headers and body have been\nhanded off to the HTTP/2 multiplexing for transmission over the network. It\ndoes not imply that the client has received anything yet.</p>\n<p>After this event, no more events will be emitted on the response object.</p>\n",
                  "params": []
                }
              ],
              "methods": [
                {
                  "textRaw": "response.addTrailers(headers)",
                  "type": "method",
                  "name": "addTrailers",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`headers` {Object} ",
                          "name": "headers",
                          "type": "Object"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "headers"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>This method adds HTTP trailing headers (a header but at the end of the\nmessage) to the response.</p>\n<p>Attempting to set a header field name or value that contains invalid characters\nwill result in a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p>\n"
                },
                {
                  "textRaw": "response.end([data][, encoding][, callback])",
                  "type": "method",
                  "name": "end",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": [
                      {
                        "version": "v10.0.0",
                        "pr-url": "https://github.com/nodejs/node/pull/18780",
                        "description": "This method now returns a reference to `ServerResponse`."
                      }
                    ]
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {this} ",
                        "name": "return",
                        "type": "this"
                      },
                      "params": [
                        {
                          "textRaw": "`data` {string|Buffer} ",
                          "name": "data",
                          "type": "string|Buffer",
                          "optional": true
                        },
                        {
                          "textRaw": "`encoding` {string} ",
                          "name": "encoding",
                          "type": "string",
                          "optional": true
                        },
                        {
                          "textRaw": "`callback` {Function} ",
                          "name": "callback",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "data",
                          "optional": true
                        },
                        {
                          "name": "encoding",
                          "optional": true
                        },
                        {
                          "name": "callback",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>This method signals to the server that all of the response headers and body\nhave been sent; that server should consider this message complete.\nThe method, <code>response.end()</code>, MUST be called on each response.</p>\n<p>If <code>data</code> is specified, it is equivalent to calling\n<a href=\"http.html#http_response_write_chunk_encoding_callback\"><code>response.write(data, encoding)</code></a> followed by <code>response.end(callback)</code>.</p>\n<p>If <code>callback</code> is specified, it will be called when the response stream\nis finished.</p>\n"
                },
                {
                  "textRaw": "response.getHeader(name)",
                  "type": "method",
                  "name": "getHeader",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {string} ",
                        "name": "return",
                        "type": "string"
                      },
                      "params": [
                        {
                          "textRaw": "`name` {string} ",
                          "name": "name",
                          "type": "string"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Reads out a header that has already been queued but not sent to the client.\nNote that the name is case insensitive.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const contentType = response.getHeader(&#39;content-type&#39;);\n</code></pre>\n"
                },
                {
                  "textRaw": "response.getHeaderNames()",
                  "type": "method",
                  "name": "getHeaderNames",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {string[]} ",
                        "name": "return",
                        "type": "string[]"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Returns an array containing the unique names of the current outgoing headers.\nAll header names are lowercase.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.setHeader(&#39;Foo&#39;, &#39;bar&#39;);\nresponse.setHeader(&#39;Set-Cookie&#39;, [&#39;foo=bar&#39;, &#39;bar=baz&#39;]);\n\nconst headerNames = response.getHeaderNames();\n// headerNames === [&#39;foo&#39;, &#39;set-cookie&#39;]\n</code></pre>\n"
                },
                {
                  "textRaw": "response.getHeaders()",
                  "type": "method",
                  "name": "getHeaders",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Object} ",
                        "name": "return",
                        "type": "Object"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Returns a shallow copy of the current outgoing headers. Since a shallow copy\nis used, array values may be mutated without additional calls to various\nheader-related http module methods. The keys of the returned object are the\nheader names and the values are the respective header values. All header names\nare lowercase.</p>\n<p>The object returned by the <code>response.getHeaders()</code> method <em>does not</em>\nprototypically inherit from the JavaScript <code>Object</code>. This means that typical\n<code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hasOwnProperty()</code>, and others\nare not defined and <em>will not work</em>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.setHeader(&#39;Foo&#39;, &#39;bar&#39;);\nresponse.setHeader(&#39;Set-Cookie&#39;, [&#39;foo=bar&#39;, &#39;bar=baz&#39;]);\n\nconst headers = response.getHeaders();\n// headers === { foo: &#39;bar&#39;, &#39;set-cookie&#39;: [&#39;foo=bar&#39;, &#39;bar=baz&#39;] }\n</code></pre>\n"
                },
                {
                  "textRaw": "response.hasHeader(name)",
                  "type": "method",
                  "name": "hasHeader",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {boolean} ",
                        "name": "return",
                        "type": "boolean"
                      },
                      "params": [
                        {
                          "textRaw": "`name` {string} ",
                          "name": "name",
                          "type": "string"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Returns <code>true</code> if the header identified by <code>name</code> is currently set in the\noutgoing headers. Note that the header name matching is case-insensitive.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const hasContentType = response.hasHeader(&#39;content-type&#39;);\n</code></pre>\n"
                },
                {
                  "textRaw": "response.removeHeader(name)",
                  "type": "method",
                  "name": "removeHeader",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`name` {string} ",
                          "name": "name",
                          "type": "string"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Removes a header that has been queued for implicit sending.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.removeHeader(&#39;Content-Encoding&#39;);\n</code></pre>\n"
                },
                {
                  "textRaw": "response.setHeader(name, value)",
                  "type": "method",
                  "name": "setHeader",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`name` {string} ",
                          "name": "name",
                          "type": "string"
                        },
                        {
                          "textRaw": "`value` {string|string[]} ",
                          "name": "value",
                          "type": "string|string[]"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "name"
                        },
                        {
                          "name": "value"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Sets a single header value for implicit headers. If this header already exists\nin the to-be-sent headers, its value will be replaced. Use an array of strings\nhere to send multiple headers with the same name.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n</code></pre>\n<p>or</p>\n<pre><code class=\"lang-js\">response.setHeader(&#39;Set-Cookie&#39;, [&#39;type=ninja&#39;, &#39;language=javascript&#39;]);\n</code></pre>\n<p>Attempting to set a header field name or value that contains invalid characters\nwill result in a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p>\n<p>When headers have been set with <a href=\"#http2_response_setheader_name_value\"><code>response.setHeader()</code></a>, they will be merged\nwith any headers passed to <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a>, with the headers passed\nto <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> given precedence.</p>\n<pre><code class=\"lang-js\">// returns content-type = text/plain\nconst server = http2.createServer((req, res) =&gt; {\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);\n  res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39; });\n  res.end(&#39;ok&#39;);\n});\n</code></pre>\n"
                },
                {
                  "textRaw": "response.setTimeout(msecs[, callback])",
                  "type": "method",
                  "name": "setTimeout",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {http2.Http2ServerResponse} ",
                        "name": "return",
                        "type": "http2.Http2ServerResponse"
                      },
                      "params": [
                        {
                          "textRaw": "`msecs` {number} ",
                          "name": "msecs",
                          "type": "number"
                        },
                        {
                          "textRaw": "`callback` {Function} ",
                          "name": "callback",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "msecs"
                        },
                        {
                          "name": "callback",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Sets the <a href=\"\"><code>Http2Stream</code></a>&#39;s timeout value to <code>msecs</code>. If a callback is\nprovided, then it is added as a listener on the <code>&#39;timeout&#39;</code> event on\nthe response object.</p>\n<p>If no <code>&#39;timeout&#39;</code> listener is added to the request, the response, or\nthe server, then <a href=\"\"><code>Http2Stream</code></a>s are destroyed when they time out. If a\nhandler is assigned to the request, the response, or the server&#39;s <code>&#39;timeout&#39;</code>\nevents, timed out sockets must be handled explicitly.</p>\n"
                },
                {
                  "textRaw": "response.write(chunk[, encoding][, callback])",
                  "type": "method",
                  "name": "write",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {boolean} ",
                        "name": "return",
                        "type": "boolean"
                      },
                      "params": [
                        {
                          "textRaw": "`chunk` {string|Buffer} ",
                          "name": "chunk",
                          "type": "string|Buffer"
                        },
                        {
                          "textRaw": "`encoding` {string} ",
                          "name": "encoding",
                          "type": "string",
                          "optional": true
                        },
                        {
                          "textRaw": "`callback` {Function} ",
                          "name": "callback",
                          "type": "Function",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "chunk"
                        },
                        {
                          "name": "encoding",
                          "optional": true
                        },
                        {
                          "name": "callback",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>If this method is called and <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> has not been called,\nit will switch to implicit header mode and flush the implicit headers.</p>\n<p>This sends a chunk of the response body. This method may\nbe called multiple times to provide successive parts of the body.</p>\n<p>Note that in the <code>http</code> module, the response body is omitted when the\nrequest is a HEAD request. Similarly, the <code>204</code> and <code>304</code> responses\n<em>must not</em> include a message body.</p>\n<p><code>chunk</code> can be a string or a buffer. If <code>chunk</code> is a string,\nthe second parameter specifies how to encode it into a byte stream.\nBy default the <code>encoding</code> is <code>&#39;utf8&#39;</code>. <code>callback</code> will be called when this chunk\nof data is flushed.</p>\n<p>This is the raw HTTP body and has nothing to do with higher-level multi-part\nbody encodings that may be used.</p>\n<p>The first time <a href=\"#http2_response_write_chunk_encoding_callback\"><code>response.write()</code></a> is called, it will send the buffered\nheader information and the first chunk of the body to the client. The second\ntime <a href=\"#http2_response_write_chunk_encoding_callback\"><code>response.write()</code></a> is called, Node.js assumes data will be streamed,\nand sends the new data separately. That is, the response is buffered up to the\nfirst chunk of the body.</p>\n<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel\nbuffer. Returns <code>false</code> if all or part of the data was queued in user memory.\n<code>&#39;drain&#39;</code> will be emitted when the buffer is free again.</p>\n"
                },
                {
                  "textRaw": "response.writeContinue()",
                  "type": "method",
                  "name": "writeContinue",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Sends a status <code>100 Continue</code> to the client, indicating that the request body\nshould be sent. See the <a href=\"#http2_event_checkcontinue\"><code>&#39;checkContinue&#39;</code></a> event on <code>Http2Server</code> and\n<code>Http2SecureServer</code>.</p>\n",
                  "signatures": [
                    {
                      "params": []
                    }
                  ]
                },
                {
                  "textRaw": "response.writeHead(statusCode[, statusMessage][, headers])",
                  "type": "method",
                  "name": "writeHead",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`statusCode` {number} ",
                          "name": "statusCode",
                          "type": "number"
                        },
                        {
                          "textRaw": "`statusMessage` {string} ",
                          "name": "statusMessage",
                          "type": "string",
                          "optional": true
                        },
                        {
                          "textRaw": "`headers` {Object} ",
                          "name": "headers",
                          "type": "Object",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "statusCode"
                        },
                        {
                          "name": "statusMessage",
                          "optional": true
                        },
                        {
                          "name": "headers",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Sends a response header to the request. The status code is a 3-digit HTTP\nstatus code, like <code>404</code>. The last argument, <code>headers</code>, are the response headers.</p>\n<p>For compatibility with <a href=\"http.html\">HTTP/1</a>, a human-readable <code>statusMessage</code> may be\npassed as the second argument. However, because the <code>statusMessage</code> has no\nmeaning within HTTP/2, the argument will have no effect and a process warning\nwill be emitted.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const body = &#39;hello world&#39;;\nresponse.writeHead(200, {\n  &#39;Content-Length&#39;: Buffer.byteLength(body),\n  &#39;Content-Type&#39;: &#39;text/plain&#39; });\n</code></pre>\n<p>Note that Content-Length is given in bytes not characters. The\n<code>Buffer.byteLength()</code> API may be used to determine the number of bytes in a\ngiven encoding. On outbound messages, Node.js does not check if Content-Length\nand the length of the body being transmitted are equal or not. However, when\nreceiving messages, Node.js will automatically reject messages when the\nContent-Length does not match the actual payload size.</p>\n<p>This method may be called at most one time on a message before\n<a href=\"#http2_response_end_data_encoding_callback\"><code>response.end()</code></a> is called.</p>\n<p>If <a href=\"#http2_response_write_chunk_encoding_callback\"><code>response.write()</code></a> or <a href=\"#http2_response_end_data_encoding_callback\"><code>response.end()</code></a> are called before calling\nthis, the implicit/mutable headers will be calculated and call this function.</p>\n<p>When headers have been set with <a href=\"#http2_response_setheader_name_value\"><code>response.setHeader()</code></a>, they will be merged\nwith any headers passed to <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a>, with the headers passed\nto <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> given precedence.</p>\n<pre><code class=\"lang-js\">// returns content-type = text/plain\nconst server = http2.createServer((req, res) =&gt; {\n  res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;);\n  res.setHeader(&#39;X-Foo&#39;, &#39;bar&#39;);\n  res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39; });\n  res.end(&#39;ok&#39;);\n});\n</code></pre>\n<p>Attempting to set a header field name or value that contains invalid characters\nwill result in a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> being thrown.</p>\n"
                },
                {
                  "textRaw": "response.createPushResponse(headers, callback)",
                  "type": "method",
                  "name": "createPushResponse",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Call <a href=\"#http2_http2stream_pushstream_headers_options_callback\"><code>http2stream.pushStream()</code></a> with the given headers, and wraps the\ngiven newly created <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> on <code>Http2ServerRespose</code>.</p>\n<p>The callback will be called with an error with code <code>ERR_HTTP2_STREAM_CLOSED</code>\nif the stream is closed.</p>\n",
                  "signatures": [
                    {
                      "params": [
                        {
                          "name": "headers"
                        },
                        {
                          "name": "callback"
                        }
                      ]
                    }
                  ]
                }
              ],
              "properties": [
                {
                  "textRaw": "`connection` {net.Socket|tls.TLSSocket} ",
                  "type": "net.Socket|tls.TLSSocket",
                  "name": "connection",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>See <a href=\"#http2_response_socket\"><code>response.socket</code></a>.</p>\n"
                },
                {
                  "textRaw": "`finished` {boolean} ",
                  "type": "boolean",
                  "name": "finished",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Boolean value that indicates whether the response has completed. Starts\nas <code>false</code>. After <a href=\"#http2_response_end_data_encoding_callback\"><code>response.end()</code></a> executes, the value will be <code>true</code>.</p>\n"
                },
                {
                  "textRaw": "`headersSent` {boolean} ",
                  "type": "boolean",
                  "name": "headersSent",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>True if headers were sent, false otherwise (read-only).</p>\n"
                },
                {
                  "textRaw": "`sendDate` {boolean} ",
                  "type": "boolean",
                  "name": "sendDate",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>When true, the Date header will be automatically generated and sent in\nthe response if it is not already present in the headers. Defaults to true.</p>\n<p>This should only be disabled for testing; HTTP requires the Date header\nin responses.</p>\n"
                },
                {
                  "textRaw": "`socket` {net.Socket|tls.TLSSocket} ",
                  "type": "net.Socket|tls.TLSSocket",
                  "name": "socket",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Returns a <code>Proxy</code> object that acts as a <code>net.Socket</code> (or <code>tls.TLSSocket</code>) but\napplies getters, setters, and methods based on HTTP/2 logic.</p>\n<p><code>destroyed</code>, <code>readable</code>, and <code>writable</code> properties will be retrieved from and\nset on <code>response.stream</code>.</p>\n<p><code>destroy</code>, <code>emit</code>, <code>end</code>, <code>on</code> and <code>once</code> methods will be called on\n<code>response.stream</code>.</p>\n<p><code>setTimeout</code> method will be called on <code>response.stream.session</code>.</p>\n<p><code>pause</code>, <code>read</code>, <code>resume</code>, and <code>write</code> will throw an error with code\n<code>ERR_HTTP2_NO_SOCKET_MANIPULATION</code>. See <a href=\"#http2_http2session_and_sockets\"><code>Http2Session</code> and Sockets</a> for\nmore information.</p>\n<p>All other interactions will be routed directly to the socket.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const http2 = require(&#39;http2&#39;);\nconst server = http2.createServer((req, res) =&gt; {\n  const ip = req.socket.remoteAddress;\n  const port = req.socket.remotePort;\n  res.end(`Your IP address is ${ip} and your source port is ${port}.`);\n}).listen(3000);\n</code></pre>\n"
                },
                {
                  "textRaw": "`statusCode` {number} ",
                  "type": "number",
                  "name": "statusCode",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>When using implicit headers (not calling <a href=\"#http2_response_writehead_statuscode_statusmessage_headers\"><code>response.writeHead()</code></a> explicitly),\nthis property controls the status code that will be sent to the client when\nthe headers get flushed.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">response.statusCode = 404;\n</code></pre>\n<p>After response header was sent to the client, this property indicates the\nstatus code which was sent out.</p>\n"
                },
                {
                  "textRaw": "`statusMessage` {string} ",
                  "type": "string",
                  "name": "statusMessage",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Status message is not supported by HTTP/2 (RFC7540 8.1.2.4). It returns\nan empty string.</p>\n"
                },
                {
                  "textRaw": "`stream` {Http2Stream} ",
                  "type": "Http2Stream",
                  "name": "stream",
                  "meta": {
                    "added": [
                      "v8.4.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <a href=\"#http2_class_http2stream\"><code>Http2Stream</code></a> object backing the response.</p>\n"
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "Compatibility API"
        },
        {
          "textRaw": "Collecting HTTP/2 Performance Metrics",
          "name": "collecting_http/2_performance_metrics",
          "desc": "<p>The <a href=\"perf_hooks.html\">Performance Observer</a> API can be used to collect basic performance\nmetrics for each <code>Http2Session</code> and <code>Http2Stream</code> instance.</p>\n<pre><code class=\"lang-js\">const { PerformanceObserver } = require(&#39;perf_hooks&#39;);\n\nconst obs = new PerformanceObserver((items) =&gt; {\n  const entry = items.getEntries()[0];\n  console.log(entry.entryType);  // prints &#39;http2&#39;\n  if (entry.name === &#39;Http2Session&#39;) {\n    // entry contains statistics about the Http2Session\n  } else if (entry.name === &#39;Http2Stream&#39;) {\n    // entry contains statistics about the Http2Stream\n  }\n});\nobs.observe({ entryTypes: [&#39;http2&#39;] });\n</code></pre>\n<p>The <code>entryType</code> property of the <code>PerformanceEntry</code> will be equal to <code>&#39;http2&#39;</code>.</p>\n<p>The <code>name</code> property of the <code>PerformanceEntry</code> will be equal to either\n<code>&#39;Http2Stream&#39;</code> or <code>&#39;Http2Session&#39;</code>.</p>\n<p>If <code>name</code> is equal to <code>Http2Stream</code>, the <code>PerformanceEntry</code> will contain the\nfollowing additional properties:</p>\n<ul>\n<li><code>bytesRead</code> {number} The number of <code>DATA</code> frame bytes received for this\n<code>Http2Stream</code>.</li>\n<li><code>bytesWritten</code> {number} The number of <code>DATA</code> frame bytes sent for this\n<code>Http2Stream</code>.</li>\n<li><code>id</code> {number} The identifier of the associated <code>Http2Stream</code></li>\n<li><code>timeToFirstByte</code> {number} The number of milliseconds elapsed between the\n<code>PerformanceEntry</code> <code>startTime</code> and the reception of the first <code>DATA</code> frame.</li>\n<li><code>timeToFirstByteSent</code> {number} The number of milliseconds elapsed between\nthe <code>PerformanceEntry</code> <code>startTime</code> and sending of the first <code>DATA</code> frame.</li>\n<li><code>timeToFirstHeader</code> {number} The number of milliseconds elapsed between the\n<code>PerformanceEntry</code> <code>startTime</code> and the reception of the first header.</li>\n</ul>\n<p>If <code>name</code> is equal to <code>Http2Session</code>, the <code>PerformanceEntry</code> will contain the\nfollowing additional properties:</p>\n<ul>\n<li><code>bytesRead</code> {number} The number of bytes received for this <code>Http2Session</code>.</li>\n<li><code>bytesWritten</code> {number} The number of bytes sent for this <code>Http2Session</code>.</li>\n<li><code>framesReceived</code> {number} The number of HTTP/2 frames received by the\n<code>Http2Session</code>.</li>\n<li><code>framesSent</code> {number} The number of HTTP/2 frames sent by the <code>Http2Session</code>.</li>\n<li><code>maxConcurrentStreams</code> {number} The maximum number of streams concurrently\nopen during the lifetime of the <code>Http2Session</code>.</li>\n<li><code>pingRTT</code> {number} The number of milliseconds elapsed since the transmission\nof a <code>PING</code> frame and the reception of its acknowledgment. Only present if\na <code>PING</code> frame has been sent on the <code>Http2Session</code>.</li>\n<li><code>streamAverageDuration</code> {number} The average duration (in milliseconds) for\nall <code>Http2Stream</code> instances.</li>\n<li><code>streamCount</code> {number} The number of <code>Http2Stream</code> instances processed by\nthe <code>Http2Session</code>.</li>\n<li><code>type</code> {string} Either <code>&#39;server&#39;</code> or <code>&#39;client&#39;</code> to identify the type of\n<code>Http2Session</code>.</li>\n</ul>\n<!-- [end-include:http2.md] -->\n<!-- [start-include:https.md] -->\n",
          "type": "module",
          "displayName": "Collecting HTTP/2 Performance Metrics"
        }
      ],
      "type": "module",
      "displayName": "HTTP/2"
    },
    {
      "textRaw": "HTTPS",
      "name": "https",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>HTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a\nseparate module.</p>\n",
      "classes": [
        {
          "textRaw": "Class: https.Agent",
          "type": "class",
          "name": "https.Agent",
          "meta": {
            "added": [
              "v0.4.5"
            ],
            "changes": []
          },
          "desc": "<p>An <a href=\"#https_class_https_agent\"><code>Agent</code></a> object for HTTPS similar to <a href=\"http.html#http_class_http_agent\"><code>http.Agent</code></a>. See\n<a href=\"#https_https_request_options_callback\"><code>https.request()</code></a> for more information.</p>\n"
        },
        {
          "textRaw": "Class: https.Server",
          "type": "class",
          "name": "https.Server",
          "meta": {
            "added": [
              "v0.3.4"
            ],
            "changes": []
          },
          "desc": "<p>This class is a subclass of <code>tls.Server</code> and emits events same as\n<a href=\"http.html#http_class_http_server\"><code>http.Server</code></a>. See <a href=\"http.html#http_class_http_server\"><code>http.Server</code></a> for more information.</p>\n",
          "methods": [
            {
              "textRaw": "server.close([callback])",
              "type": "method",
              "name": "close",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>See <a href=\"http.html#http_server_close_callback\"><code>server.close()</code></a> from the HTTP module for details.</p>\n"
            },
            {
              "textRaw": "server.listen()",
              "type": "method",
              "name": "listen",
              "desc": "<p>Starts the HTTPS server listening for encrypted connections.\nThis method is identical to <a href=\"net.html#net_server_listen\"><code>server.listen()</code></a> from <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a>.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "server.setTimeout([msecs][, callback])",
              "type": "method",
              "name": "setTimeout",
              "meta": {
                "added": [
                  "v0.11.2"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`msecs` {number} **Default:** `120000` (2 minutes) ",
                      "name": "msecs",
                      "type": "number",
                      "default": "`120000` (2 minutes)",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "msecs",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>See <a href=\"http.html#http_server_settimeout_msecs_callback\"><code>http.Server#setTimeout()</code></a>.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`maxHeadersCount` {number} **Default:** `2000` ",
              "type": "number",
              "name": "maxHeadersCount",
              "default": "`2000`",
              "desc": "<p>See <a href=\"http.html#http_server_maxheaderscount\"><code>http.Server#maxHeadersCount</code></a>.</p>\n"
            },
            {
              "textRaw": "`timeout` {number} **Default:** `120000` (2 minutes) ",
              "type": "number",
              "name": "timeout",
              "meta": {
                "added": [
                  "v0.11.2"
                ],
                "changes": []
              },
              "default": "`120000` (2 minutes)",
              "desc": "<p>See <a href=\"http.html#http_server_timeout\"><code>http.Server#timeout</code></a>.</p>\n"
            },
            {
              "textRaw": "`keepAliveTimeout` {number} **Default:** `5000` (5 seconds) ",
              "type": "number",
              "name": "keepAliveTimeout",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "default": "`5000` (5 seconds)",
              "desc": "<p>See <a href=\"http.html#http_server_keepalivetimeout\"><code>http.Server#keepAliveTimeout</code></a>.</p>\n"
            }
          ]
        }
      ],
      "methods": [
        {
          "textRaw": "https.createServer([options][, requestListener])",
          "type": "method",
          "name": "createServer",
          "meta": {
            "added": [
              "v0.3.4"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`options` {Object} Accepts `options` from [`tls.createServer()`][], [`tls.createSecureContext()`][] and [`http.createServer()`][]. ",
                  "name": "options",
                  "type": "Object",
                  "desc": "Accepts `options` from [`tls.createServer()`][], [`tls.createSecureContext()`][] and [`http.createServer()`][].",
                  "optional": true
                },
                {
                  "textRaw": "`requestListener` {Function} A listener to be added to the `'request'` event. ",
                  "name": "requestListener",
                  "type": "Function",
                  "desc": "A listener to be added to the `'request'` event.",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "requestListener",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Example:</p>\n<pre><code class=\"lang-js\">// curl -k https://localhost:8000/\nconst https = require(&#39;https&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;)\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n  res.writeHead(200);\n  res.end(&#39;hello world\\n&#39;);\n}).listen(8000);\n</code></pre>\n<p>Or</p>\n<pre><code class=\"lang-js\">const https = require(&#39;https&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  pfx: fs.readFileSync(&#39;test/fixtures/test_cert.pfx&#39;),\n  passphrase: &#39;sample&#39;\n};\n\nhttps.createServer(options, (req, res) =&gt; {\n  res.writeHead(200);\n  res.end(&#39;hello world\\n&#39;);\n}).listen(8000);\n</code></pre>\n"
        },
        {
          "textRaw": "https.get(options[, callback])",
          "type": "method",
          "name": "get",
          "meta": {
            "added": [
              "v0.3.6"
            ],
            "changes": [
              {
                "version": "v7.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/10638",
                "description": "The `options` parameter can be a WHATWG `URL` object."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`options` {Object | string | URL} Accepts the same `options` as [`https.request()`][], with the `method` always set to `GET`. ",
                  "name": "options",
                  "type": "Object | string | URL",
                  "desc": "Accepts the same `options` as [`https.request()`][], with the `method` always set to `GET`."
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "name": "callback",
                  "type": "Function",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Like <a href=\"http.html#http_http_get_options_callback\"><code>http.get()</code></a> but for HTTPS.</p>\n<p><code>options</code> can be an object, a string, or a <a href=\"url.html#url_class_url\"><code>URL</code></a> object. If <code>options</code> is a\nstring, it is automatically parsed with <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a>. If it is a <a href=\"url.html#url_class_url\"><code>URL</code></a>\nobject, it will be automatically converted to an ordinary <code>options</code> object.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const https = require(&#39;https&#39;);\n\nhttps.get(&#39;https://encrypted.google.com/&#39;, (res) =&gt; {\n  console.log(&#39;statusCode:&#39;, res.statusCode);\n  console.log(&#39;headers:&#39;, res.headers);\n\n  res.on(&#39;data&#39;, (d) =&gt; {\n    process.stdout.write(d);\n  });\n\n}).on(&#39;error&#39;, (e) =&gt; {\n  console.error(e);\n});\n</code></pre>\n"
        },
        {
          "textRaw": "https.request(options[, callback])",
          "type": "method",
          "name": "request",
          "meta": {
            "added": [
              "v0.3.6"
            ],
            "changes": [
              {
                "version": "v9.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/14903",
                "description": "The `options` parameter can now include `clientCertEngine`."
              },
              {
                "version": "v7.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/10638",
                "description": "The `options` parameter can be a WHATWG `URL` object."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`options` {Object | string | URL} Accepts all `options` from [`http.request()`][], with some differences in default values: ",
                  "options": [
                    {
                      "textRaw": "`protocol` **Default:** `'https:'` ",
                      "name": "protocol",
                      "default": "`'https:'`"
                    },
                    {
                      "textRaw": "`port` **Default:** `443` ",
                      "name": "port",
                      "default": "`443`"
                    },
                    {
                      "textRaw": "`agent` **Default:** `https.globalAgent` ",
                      "name": "agent",
                      "default": "`https.globalAgent`"
                    }
                  ],
                  "name": "options",
                  "type": "Object | string | URL",
                  "desc": "Accepts all `options` from [`http.request()`][], with some differences in default values:"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "name": "callback",
                  "type": "Function",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Makes a request to a secure web server.</p>\n<p>The following additional <code>options</code> from <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a> are also accepted:\n<code>ca</code>, <code>cert</code>, <code>ciphers</code>, <code>clientCertEngine</code>, <code>crl</code>, <code>dhparam</code>, <code>ecdhCurve</code>,\n<code>honorCipherOrder</code>, <code>key</code>, <code>passphrase</code>, <code>pfx</code>, <code>rejectUnauthorized</code>,\n<code>secureOptions</code>, <code>secureProtocol</code>, <code>servername</code>, <code>sessionIdContext</code>.</p>\n<p><code>options</code> can be an object, a string, or a <a href=\"url.html#url_class_url\"><code>URL</code></a> object. If <code>options</code> is a\nstring, it is automatically parsed with <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a>. If it is a <a href=\"url.html#url_class_url\"><code>URL</code></a>\nobject, it will be automatically converted to an ordinary <code>options</code> object.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const https = require(&#39;https&#39;);\n\nconst options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;\n};\n\nconst req = https.request(options, (res) =&gt; {\n  console.log(&#39;statusCode:&#39;, res.statusCode);\n  console.log(&#39;headers:&#39;, res.headers);\n\n  res.on(&#39;data&#39;, (d) =&gt; {\n    process.stdout.write(d);\n  });\n});\n\nreq.on(&#39;error&#39;, (e) =&gt; {\n  console.error(e);\n});\nreq.end();\n</code></pre>\n<p>Example using options from <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>:</p>\n<pre><code class=\"lang-js\">const options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;,\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;)\n};\noptions.agent = new https.Agent(options);\n\nconst req = https.request(options, (res) =&gt; {\n  // ...\n});\n</code></pre>\n<p>Alternatively, opt out of connection pooling by not using an <a href=\"#https_class_https_agent\"><code>Agent</code></a>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const options = {\n  hostname: &#39;encrypted.google.com&#39;,\n  port: 443,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;,\n  key: fs.readFileSync(&#39;test/fixtures/keys/agent2-key.pem&#39;),\n  cert: fs.readFileSync(&#39;test/fixtures/keys/agent2-cert.pem&#39;),\n  agent: false\n};\n\nconst req = https.request(options, (res) =&gt; {\n  // ...\n});\n</code></pre>\n<p>Example using a <a href=\"url.html#url_class_url\"><code>URL</code></a> as <code>options</code>:</p>\n<pre><code class=\"lang-js\">const options = new URL(&#39;https://abc:xyz@example.com&#39;);\n\nconst req = https.request(options, (res) =&gt; {\n  // ...\n});\n</code></pre>\n<p>Example pinning on certificate fingerprint, or the public key (similar to\n<code>pin-sha256</code>):</p>\n<pre><code class=\"lang-js\">const tls = require(&#39;tls&#39;);\nconst https = require(&#39;https&#39;);\nconst crypto = require(&#39;crypto&#39;);\n\nfunction sha256(s) {\n  return crypto.createHash(&#39;sha256&#39;).update(s).digest(&#39;base64&#39;);\n}\nconst options = {\n  hostname: &#39;github.com&#39;,\n  port: 443,\n  path: &#39;/&#39;,\n  method: &#39;GET&#39;,\n  checkServerIdentity: function(host, cert) {\n    // Make sure the certificate is issued to the host we are connected to\n    const err = tls.checkServerIdentity(host, cert);\n    if (err) {\n      return err;\n    }\n\n    // Pin the public key, similar to HPKP pin-sha25 pinning\n    const pubkey256 = &#39;pL1+qb9HTMRZJmuC/bB/ZI9d302BYrrqiVuRyW+DGrU=&#39;;\n    if (sha256(cert.pubkey) !== pubkey256) {\n      const msg = &#39;Certificate verification error: &#39; +\n        `The public key of &#39;${cert.subject.CN}&#39; ` +\n        &#39;does not match our pinned fingerprint&#39;;\n      return new Error(msg);\n    }\n\n    // Pin the exact certificate, rather then the pub key\n    const cert256 = &#39;25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:&#39; +\n      &#39;D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16&#39;;\n    if (cert.fingerprint256 !== cert256) {\n      const msg = &#39;Certificate verification error: &#39; +\n        `The certificate of &#39;${cert.subject.CN}&#39; ` +\n        &#39;does not match our pinned fingerprint&#39;;\n      return new Error(msg);\n    }\n\n    // This loop is informational only.\n    // Print the certificate and public key fingerprints of all certs in the\n    // chain. Its common to pin the public key of the issuer on the public\n    // internet, while pinning the public key of the service in sensitive\n    // environments.\n    do {\n      console.log(&#39;Subject Common Name:&#39;, cert.subject.CN);\n      console.log(&#39;  Certificate SHA256 fingerprint:&#39;, cert.fingerprint256);\n\n      hash = crypto.createHash(&#39;sha256&#39;);\n      console.log(&#39;  Public key ping-sha256:&#39;, sha256(cert.pubkey));\n\n      lastprint256 = cert.fingerprint256;\n      cert = cert.issuerCertificate;\n    } while (cert.fingerprint256 !== lastprint256);\n\n  },\n};\n\noptions.agent = new https.Agent(options);\nconst req = https.request(options, (res) =&gt; {\n  console.log(&#39;All OK. Server matched our pinned cert or public key&#39;);\n  console.log(&#39;statusCode:&#39;, res.statusCode);\n  // Print the HPKP values\n  console.log(&#39;headers:&#39;, res.headers[&#39;public-key-pins&#39;]);\n\n  res.on(&#39;data&#39;, (d) =&gt; {});\n});\n\nreq.on(&#39;error&#39;, (e) =&gt; {\n  console.error(e.message);\n});\nreq.end();\n</code></pre>\n<p>Outputs for example:</p>\n<pre><code class=\"lang-text\">Subject Common Name: github.com\n  Certificate SHA256 fingerprint: 25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16\n  Public key ping-sha256: pL1+qb9HTMRZJmuC/bB/ZI9d302BYrrqiVuRyW+DGrU=\nSubject Common Name: DigiCert SHA2 Extended Validation Server CA\n  Certificate SHA256 fingerprint: 40:3E:06:2A:26:53:05:91:13:28:5B:AF:80:A0:D4:AE:42:2C:84:8C:9F:78:FA:D0:1F:C9:4B:C5:B8:7F:EF:1A\n  Public key ping-sha256: RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\nSubject Common Name: DigiCert High Assurance EV Root CA\n  Certificate SHA256 fingerprint: 74:31:E5:F4:C3:C1:CE:46:90:77:4F:0B:61:E0:54:40:88:3B:A9:A0:1E:D0:0B:A6:AB:D7:80:6E:D3:B1:18:CF\n  Public key ping-sha256: WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\nAll OK. Server matched our pinned cert or public key\nstatusCode: 200\nheaders: max-age=0; pin-sha256=&quot;WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=&quot;; pin-sha256=&quot;RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=&quot;; pin-sha256=&quot;k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws=&quot;; pin-sha256=&quot;K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q=&quot;; pin-sha256=&quot;IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=&quot;; pin-sha256=&quot;iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0=&quot;; pin-sha256=&quot;LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A=&quot;; includeSubDomains\n</code></pre>\n<!-- [end-include:https.md] -->\n<!-- [start-include:inspector.md] -->\n"
        }
      ],
      "properties": [
        {
          "textRaw": "https.globalAgent",
          "name": "globalAgent",
          "meta": {
            "added": [
              "v0.5.9"
            ],
            "changes": []
          },
          "desc": "<p>Global instance of <a href=\"#https_class_https_agent\"><code>https.Agent</code></a> for all HTTPS client requests.</p>\n"
        }
      ],
      "type": "module",
      "displayName": "HTTPS"
    },
    {
      "textRaw": "Inspector",
      "name": "inspector",
      "introduced_in": "v8.0.0",
      "stability": 1,
      "stabilityText": "Experimental",
      "desc": "<p>The <code>inspector</code> module provides an API for interacting with the V8 inspector.</p>\n<p>It can be accessed using:</p>\n<pre><code class=\"lang-js\">const inspector = require(&#39;inspector&#39;);\n</code></pre>\n",
      "methods": [
        {
          "textRaw": "inspector.open([port[, host[, wait]]])",
          "type": "method",
          "name": "open",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`port` {number} Port to listen on for inspector connections. Optional. **Default:** what was specified on the CLI. ",
                  "name": "port",
                  "type": "number",
                  "default": "what was specified on the CLI",
                  "desc": "Port to listen on for inspector connections. Optional.",
                  "optional": true
                },
                {
                  "textRaw": "`host` {string} Host to listen on for inspector connections. Optional. **Default:** what was specified on the CLI. ",
                  "name": "host",
                  "type": "string",
                  "default": "what was specified on the CLI",
                  "desc": "Host to listen on for inspector connections. Optional.",
                  "optional": true
                },
                {
                  "textRaw": "`wait` {boolean} Block until a client has connected. Optional. **Default:** `false`. ",
                  "name": "wait",
                  "type": "boolean",
                  "default": "`false`",
                  "desc": "Block until a client has connected. Optional.",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "port",
                  "optional": true
                },
                {
                  "name": "host",
                  "optional": true
                },
                {
                  "name": "wait",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Activate inspector on host and port. Equivalent to <code>node\n--inspect=[[host:]port]</code>, but can be done programmatically after node has\nstarted.</p>\n<p>If wait is <code>true</code>, will block until a client has connected to the inspect port\nand flow control has been passed to the debugger client.</p>\n",
          "methods": [
            {
              "textRaw": "inspector.close()",
              "type": "method",
              "name": "close",
              "desc": "<p>Deactivate the inspector. Blocks until there are no active connections.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "inspector.url()",
              "type": "method",
              "name": "url",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string|undefined} ",
                    "name": "return",
                    "type": "string|undefined"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Return the URL of the active inspector, or <code>undefined</code> if there is none.</p>\n"
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: inspector.Session",
          "type": "class",
          "name": "inspector.Session",
          "desc": "<p>The <code>inspector.Session</code> is used for dispatching messages to the V8 inspector\nback-end and receiving message responses and notifications.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'inspectorNotification'",
              "type": "event",
              "name": "inspectorNotification",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted when any notification from the V8 Inspector is received.</p>\n<pre><code class=\"lang-js\">session.on(&#39;inspectorNotification&#39;, (message) =&gt; console.log(message.method));\n// Debugger.paused\n// Debugger.resumed\n</code></pre>\n<p>It is also possible to subscribe only to notifications with specific method:</p>\n"
            },
            {
              "textRaw": "Event: &lt;inspector-protocol-method&gt;",
              "type": "event",
              "name": "&lt;inspector-protocol-method&gt;",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted when an inspector notification is received that has its method field set\nto the <code>&lt;inspector-protocol-method&gt;</code> value.</p>\n<p>The following snippet installs a listener on the <a href=\"https://chromedevtools.github.io/devtools-protocol/v8/Debugger#event-paused\"><code>&#39;Debugger.paused&#39;</code></a>\nevent, and prints the reason for program suspension whenever program\nexecution is suspended (through breakpoints, for example):</p>\n<pre><code class=\"lang-js\">session.on(&#39;Debugger.paused&#39;, ({ params }) =&gt; {\n  console.log(params.hitBreakpoints);\n});\n// [ &#39;/the/file/that/has/the/breakpoint.js:11:0&#39; ]\n</code></pre>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "session.connect()",
              "type": "method",
              "name": "connect",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Connects a session to the inspector back-end. An exception will be thrown\nif there is already a connected session established either through the API or by\na front-end connected to the Inspector WebSocket port.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "session.post(method[, params][, callback])",
              "type": "method",
              "name": "post",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`method` {string} ",
                      "name": "method",
                      "type": "string"
                    },
                    {
                      "textRaw": "`params` {Object} ",
                      "name": "params",
                      "type": "Object",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "method"
                    },
                    {
                      "name": "params",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Posts a message to the inspector back-end. <code>callback</code> will be notified when\na response is received. <code>callback</code> is a function that accepts two optional\narguments - error and message-specific result.</p>\n<pre><code class=\"lang-js\">session.post(&#39;Runtime.evaluate&#39;, { expression: &#39;2 + 2&#39; },\n             (error, { result }) =&gt; console.log(result));\n// Output: { type: &#39;number&#39;, value: 4, description: &#39;4&#39; }\n</code></pre>\n<p>The latest version of the V8 inspector protocol is published on the\n<a href=\"https://chromedevtools.github.io/devtools-protocol/v8/\">Chrome DevTools Protocol Viewer</a>.</p>\n<p>Node inspector supports all the Chrome DevTools Protocol domains declared\nby V8. Chrome DevTools Protocol domain provides an interface for interacting\nwith one of the runtime agents used to inspect the application state and listen\nto the run-time events.</p>\n"
            },
            {
              "textRaw": "session.disconnect()",
              "type": "method",
              "name": "disconnect",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Immediately close the session. All pending message callbacks will be called\nwith an error. <a href=\"#inspector_session_connect\"><code>session.connect()</code></a> will need to be called to be able to send\nmessages again. Reconnected session will lose all inspector state, such as\nenabled agents or configured breakpoints.</p>\n<h2>Example usage</h2>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ],
          "modules": [
            {
              "textRaw": "CPU Profiler",
              "name": "cpu_profiler",
              "desc": "<p>Apart from the debugger, various V8 Profilers are available through the DevTools\nprotocol. Here&#39;s a simple example showing how to use the <a href=\"https://chromedevtools.github.io/devtools-protocol/v8/Profiler\">CPU profiler</a>:</p>\n<pre><code class=\"lang-js\">const inspector = require(&#39;inspector&#39;);\nconst fs = require(&#39;fs&#39;);\nconst session = new inspector.Session();\nsession.connect();\n\nsession.post(&#39;Profiler.enable&#39;, () =&gt; {\n  session.post(&#39;Profiler.start&#39;, () =&gt; {\n    // invoke business logic under measurement here...\n\n    // some time later...\n    session.post(&#39;Profiler.stop&#39;, (err, { profile }) =&gt; {\n      // write profile to disk, upload, etc.\n      if (!err) {\n        fs.writeFileSync(&#39;./profile.cpuprofile&#39;, JSON.stringify(profile));\n      }\n    });\n  });\n});\n</code></pre>\n<!-- [end-include:inspector.md] -->\n<!-- [start-include:intl.md] -->\n",
              "type": "module",
              "displayName": "CPU Profiler"
            }
          ],
          "signatures": [
            {
              "params": [],
              "desc": "<p>Create a new instance of the <code>inspector.Session</code> class. The inspector session\nneeds to be connected through <a href=\"#inspector_session_connect\"><code>session.connect()</code></a> before the messages\ncan be dispatched to the inspector backend.</p>\n<p><code>inspector.Session</code> is an <a href=\"events.html\"><code>EventEmitter</code></a> with the following events:</p>\n"
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Inspector"
    },
    {
      "textRaw": "Modules",
      "name": "module",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>In the Node.js module system, each file is treated as a separate module. For\nexample, consider a file named <code>foo.js</code>:</p>\n<pre><code class=\"lang-js\">const circle = require(&#39;./circle.js&#39;);\nconsole.log(`The area of a circle of radius 4 is ${circle.area(4)}`);\n</code></pre>\n<p>On the first line, <code>foo.js</code> loads the module <code>circle.js</code> that is in the same\ndirectory as <code>foo.js</code>.</p>\n<p>Here are the contents of <code>circle.js</code>:</p>\n<pre><code class=\"lang-js\">const { PI } = Math;\n\nexports.area = (r) =&gt; PI * r ** 2;\n\nexports.circumference = (r) =&gt; 2 * PI * r;\n</code></pre>\n<p>The module <code>circle.js</code> has exported the functions <code>area()</code> and\n<code>circumference()</code>. Functions and objects are added to the root of a module\nby specifying additional properties on the special <code>exports</code> object.</p>\n<p>Variables local to the module will be private, because the module is wrapped\nin a function by Node.js (see <a href=\"#modules_the_module_wrapper\">module wrapper</a>).\nIn this example, the variable <code>PI</code> is private to <code>circle.js</code>.</p>\n<p>The <code>module.exports</code> property can be assigned a new value (such as a function\nor object).</p>\n<p>Below, <code>bar.js</code> makes use of the <code>square</code> module, which exports a Square class:</p>\n<pre><code class=\"lang-js\">const Square = require(&#39;./square.js&#39;);\nconst mySquare = new Square(2);\nconsole.log(`The area of mySquare is ${mySquare.area()}`);\n</code></pre>\n<p>The <code>square</code> module is defined in <code>square.js</code>:</p>\n<pre><code class=\"lang-js\">// assigning to exports will not modify module, must use module.exports\nmodule.exports = class Square {\n  constructor(width) {\n    this.width = width;\n  }\n\n  area() {\n    return this.width ** 2;\n  }\n};\n</code></pre>\n<p>The module system is implemented in the <code>require(&#39;module&#39;)</code> module.</p>\n",
      "miscs": [
        {
          "textRaw": "Accessing the main module",
          "name": "Accessing the main module",
          "type": "misc",
          "desc": "<p>When a file is run directly from Node.js, <code>require.main</code> is set to its\n<code>module</code>. That means that it is possible to determine whether a file has been\nrun directly by testing <code>require.main === module</code>.</p>\n<p>For a file <code>foo.js</code>, this will be <code>true</code> if run via <code>node foo.js</code>, but\n<code>false</code> if run by <code>require(&#39;./foo&#39;)</code>.</p>\n<p>Because <code>module</code> provides a <code>filename</code> property (normally equivalent to\n<code>__filename</code>), the entry point of the current application can be obtained\nby checking <code>require.main.filename</code>.</p>\n"
        },
        {
          "textRaw": "Addenda: Package Manager Tips",
          "name": "Addenda: Package Manager Tips",
          "type": "misc",
          "desc": "<p>The semantics of Node.js&#39;s <code>require()</code> function were designed to be general\nenough to support a number of reasonable directory structures. Package manager\nprograms such as <code>dpkg</code>, <code>rpm</code>, and <code>npm</code> will hopefully find it possible to\nbuild native packages from Node.js modules without modification.</p>\n<p>Below we give a suggested directory structure that could work:</p>\n<p>Let&#39;s say that we wanted to have the folder at\n<code>/usr/lib/node/&lt;some-package&gt;/&lt;some-version&gt;</code> hold the contents of a\nspecific version of a package.</p>\n<p>Packages can depend on one another. In order to install package <code>foo</code>, it\nmay be necessary to install a specific version of package <code>bar</code>. The <code>bar</code>\npackage may itself have dependencies, and in some cases, these may even collide\nor form cyclic dependencies.</p>\n<p>Since Node.js looks up the <code>realpath</code> of any modules it loads (that is,\nresolves symlinks), and then looks for their dependencies in the <code>node_modules</code>\nfolders as described <a href=\"#modules_loading_from_node_modules_folders\">here</a>, this\nsituation is very simple to resolve with the following architecture:</p>\n<ul>\n<li><code>/usr/lib/node/foo/1.2.3/</code> - Contents of the <code>foo</code> package, version 1.2.3.</li>\n<li><code>/usr/lib/node/bar/4.3.2/</code> - Contents of the <code>bar</code> package that <code>foo</code>\ndepends on.</li>\n<li><code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> - Symbolic link to\n<code>/usr/lib/node/bar/4.3.2/</code>.</li>\n<li><code>/usr/lib/node/bar/4.3.2/node_modules/*</code> - Symbolic links to the packages\nthat <code>bar</code> depends on.</li>\n</ul>\n<p>Thus, even if a cycle is encountered, or if there are dependency\nconflicts, every module will be able to get a version of its dependency\nthat it can use.</p>\n<p>When the code in the <code>foo</code> package does <code>require(&#39;bar&#39;)</code>, it will get the\nversion that is symlinked into <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code>.\nThen, when the code in the <code>bar</code> package calls <code>require(&#39;quux&#39;)</code>, it&#39;ll get\nthe version that is symlinked into\n<code>/usr/lib/node/bar/4.3.2/node_modules/quux</code>.</p>\n<p>Furthermore, to make the module lookup process even more optimal, rather\nthan putting packages directly in <code>/usr/lib/node</code>, we could put them in\n<code>/usr/lib/node_modules/&lt;name&gt;/&lt;version&gt;</code>. Then Node.js will not bother\nlooking for missing dependencies in <code>/usr/node_modules</code> or <code>/node_modules</code>.</p>\n<p>In order to make modules available to the Node.js REPL, it might be useful to\nalso add the <code>/usr/lib/node_modules</code> folder to the <code>$NODE_PATH</code> environment\nvariable. Since the module lookups using <code>node_modules</code> folders are all\nrelative, and based on the real path of the files making the calls to\n<code>require()</code>, the packages themselves can be anywhere.</p>\n"
        },
        {
          "textRaw": "All Together...",
          "name": "All Together...",
          "type": "misc",
          "desc": "<p>To get the exact filename that will be loaded when <code>require()</code> is called, use\nthe <code>require.resolve()</code> function.</p>\n<p>Putting together all of the above, here is the high-level algorithm\nin pseudocode of what <code>require.resolve()</code> does:</p>\n<pre><code class=\"lang-txt\">require(X) from module at path Y\n1. If X is a core module,\n   a. return the core module\n   b. STOP\n2. If X begins with &#39;/&#39;\n   a. set Y to be the filesystem root\n3. If X begins with &#39;./&#39; or &#39;/&#39; or &#39;../&#39;\n   a. LOAD_AS_FILE(Y + X)\n   b. LOAD_AS_DIRECTORY(Y + X)\n4. LOAD_NODE_MODULES(X, dirname(Y))\n5. THROW &quot;not found&quot;\n\nLOAD_AS_FILE(X)\n1. If X is a file, load X as JavaScript text.  STOP\n2. If X.js is a file, load X.js as JavaScript text.  STOP\n3. If X.json is a file, parse X.json to a JavaScript Object.  STOP\n4. If X.node is a file, load X.node as binary addon.  STOP\n\nLOAD_INDEX(X)\n1. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\n2. If X/index.json is a file, parse X/index.json to a JavaScript object. STOP\n3. If X/index.node is a file, load X/index.node as binary addon.  STOP\n\nLOAD_AS_DIRECTORY(X)\n1. If X/package.json is a file,\n   a. Parse X/package.json, and look for &quot;main&quot; field.\n   b. let M = X + (json main field)\n   c. LOAD_AS_FILE(M)\n   d. LOAD_INDEX(M)\n2. LOAD_INDEX(X)\n\nLOAD_NODE_MODULES(X, START)\n1. let DIRS=NODE_MODULES_PATHS(START)\n2. for each DIR in DIRS:\n   a. LOAD_AS_FILE(DIR/X)\n   b. LOAD_AS_DIRECTORY(DIR/X)\n\nNODE_MODULES_PATHS(START)\n1. let PARTS = path split(START)\n2. let I = count of PARTS - 1\n3. let DIRS = []\n4. while I &gt;= 0,\n   a. if PARTS[I] = &quot;node_modules&quot; CONTINUE\n   b. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)\n   c. DIRS = DIRS + DIR\n   d. let I = I - 1\n5. return DIRS\n</code></pre>\n"
        },
        {
          "textRaw": "Caching",
          "name": "Caching",
          "type": "misc",
          "desc": "<p>Modules are cached after the first time they are loaded. This means\n(among other things) that every call to <code>require(&#39;foo&#39;)</code> will get\nexactly the same object returned, if it would resolve to the same file.</p>\n<p>Multiple calls to <code>require(&#39;foo&#39;)</code> may not cause the module code to be\nexecuted multiple times.  This is an important feature. With it,\n&quot;partially done&quot; objects can be returned, thus allowing transitive\ndependencies to be loaded even when they would cause cycles.</p>\n<p>To have a module execute code multiple times, export a function, and call\nthat function.</p>\n",
          "miscs": [
            {
              "textRaw": "Module Caching Caveats",
              "name": "Module Caching Caveats",
              "type": "misc",
              "desc": "<p>Modules are cached based on their resolved filename. Since modules may\nresolve to a different filename based on the location of the calling\nmodule (loading from <code>node_modules</code> folders), it is not a <em>guarantee</em>\nthat <code>require(&#39;foo&#39;)</code> will always return the exact same object, if it\nwould resolve to different files.</p>\n<p>Additionally, on case-insensitive file systems or operating systems, different\nresolved filenames can point to the same file, but the cache will still treat\nthem as different modules and will reload the file multiple times. For example,\n<code>require(&#39;./foo&#39;)</code> and <code>require(&#39;./FOO&#39;)</code> return two different objects,\nirrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Core Modules",
          "name": "Core Modules",
          "type": "misc",
          "desc": "<p>Node.js has several modules compiled into the binary. These modules are\ndescribed in greater detail elsewhere in this documentation.</p>\n<p>The core modules are defined within Node.js&#39;s source and are located in the\n<code>lib/</code> folder.</p>\n<p>Core modules are always preferentially loaded if their identifier is\npassed to <code>require()</code>. For instance, <code>require(&#39;http&#39;)</code> will always\nreturn the built in HTTP module, even if there is a file by that name.</p>\n"
        },
        {
          "textRaw": "Cycles",
          "name": "Cycles",
          "type": "misc",
          "desc": "<p>When there are circular <code>require()</code> calls, a module might not have finished\nexecuting when it is returned.</p>\n<p>Consider this situation:</p>\n<p><code>a.js</code>:</p>\n<pre><code class=\"lang-js\">console.log(&#39;a starting&#39;);\nexports.done = false;\nconst b = require(&#39;./b.js&#39;);\nconsole.log(&#39;in a, b.done = %j&#39;, b.done);\nexports.done = true;\nconsole.log(&#39;a done&#39;);\n</code></pre>\n<p><code>b.js</code>:</p>\n<pre><code class=\"lang-js\">console.log(&#39;b starting&#39;);\nexports.done = false;\nconst a = require(&#39;./a.js&#39;);\nconsole.log(&#39;in b, a.done = %j&#39;, a.done);\nexports.done = true;\nconsole.log(&#39;b done&#39;);\n</code></pre>\n<p><code>main.js</code>:</p>\n<pre><code class=\"lang-js\">console.log(&#39;main starting&#39;);\nconst a = require(&#39;./a.js&#39;);\nconst b = require(&#39;./b.js&#39;);\nconsole.log(&#39;in main, a.done = %j, b.done = %j&#39;, a.done, b.done);\n</code></pre>\n<p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that\npoint, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an infinite\nloop, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the\n<code>b.js</code> module. <code>b.js</code> then finishes loading, and its <code>exports</code> object is\nprovided to the <code>a.js</code> module.</p>\n<p>By the time <code>main.js</code> has loaded both modules, they&#39;re both finished.\nThe output of this program would thus be:</p>\n<pre><code class=\"lang-txt\">$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\n</code></pre>\n<p>Careful planning is required to allow cyclic module dependencies to work\ncorrectly within an application.</p>\n"
        },
        {
          "textRaw": "File Modules",
          "name": "File Modules",
          "type": "misc",
          "desc": "<p>If the exact filename is not found, then Node.js will attempt to load the\nrequired filename with the added extensions: <code>.js</code>, <code>.json</code>, and finally\n<code>.node</code>.</p>\n<p><code>.js</code> files are interpreted as JavaScript text files, and <code>.json</code> files are\nparsed as JSON text files. <code>.node</code> files are interpreted as compiled addon\nmodules loaded with <code>dlopen</code>.</p>\n<p>A required module prefixed with <code>&#39;/&#39;</code> is an absolute path to the file. For\nexample, <code>require(&#39;/home/marco/foo.js&#39;)</code> will load the file at\n<code>/home/marco/foo.js</code>.</p>\n<p>A required module prefixed with <code>&#39;./&#39;</code> is relative to the file calling\n<code>require()</code>. That is, <code>circle.js</code> must be in the same directory as <code>foo.js</code> for\n<code>require(&#39;./circle&#39;)</code> to find it.</p>\n<p>Without a leading <code>&#39;/&#39;</code>, <code>&#39;./&#39;</code>, or <code>&#39;../&#39;</code> to indicate a file, the module must\neither be a core module or is loaded from a <code>node_modules</code> folder.</p>\n<p>If the given path does not exist, <code>require()</code> will throw an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> with its\n<code>code</code> property set to <code>&#39;MODULE_NOT_FOUND&#39;</code>.</p>\n"
        },
        {
          "textRaw": "Folders as Modules",
          "name": "Folders as Modules",
          "type": "misc",
          "desc": "<p>It is convenient to organize programs and libraries into self-contained\ndirectories, and then provide a single entry point to that library.\nThere are three ways in which a folder may be passed to <code>require()</code> as\nan argument.</p>\n<p>The first is to create a <code>package.json</code> file in the root of the folder,\nwhich specifies a <code>main</code> module. An example <code>package.json</code> file might\nlook like this:</p>\n<pre><code class=\"lang-json\">{ &quot;name&quot; : &quot;some-library&quot;,\n  &quot;main&quot; : &quot;./lib/some-library.js&quot; }\n</code></pre>\n<p>If this was in a folder at <code>./some-library</code>, then\n<code>require(&#39;./some-library&#39;)</code> would attempt to load\n<code>./some-library/lib/some-library.js</code>.</p>\n<p>This is the extent of Node.js&#39;s awareness of <code>package.json</code> files.</p>\n<p>If the file specified by the <code>&#39;main&#39;</code> entry of <code>package.json</code> is missing and\ncan not be resolved, Node.js will report the entire module as missing with the\ndefault error:</p>\n<pre><code class=\"lang-txt\">Error: Cannot find module &#39;some-library&#39;\n</code></pre>\n<p>If there is no <code>package.json</code> file present in the directory, then Node.js\nwill attempt to load an <code>index.js</code> or <code>index.node</code> file out of that\ndirectory. For example, if there was no <code>package.json</code> file in the above\nexample, then <code>require(&#39;./some-library&#39;)</code> would attempt to load:</p>\n<ul>\n<li><code>./some-library/index.js</code></li>\n<li><code>./some-library/index.node</code></li>\n</ul>\n"
        },
        {
          "textRaw": "Loading from `node_modules` Folders",
          "name": "Loading from `node_modules` Folders",
          "type": "misc",
          "desc": "<p>If the module identifier passed to <code>require()</code> is not a\n<a href=\"#modules_core_modules\">core</a> module, and does not begin with <code>&#39;/&#39;</code>, <code>&#39;../&#39;</code>, or\n<code>&#39;./&#39;</code>, then Node.js starts at the parent directory of the current module, and\nadds <code>/node_modules</code>, and attempts to load the module from that location. Node\nwill not append <code>node_modules</code> to a path already ending in <code>node_modules</code>.</p>\n<p>If it is not found there, then it moves to the parent directory, and so\non, until the root of the file system is reached.</p>\n<p>For example, if the file at <code>&#39;/home/ry/projects/foo.js&#39;</code> called\n<code>require(&#39;bar.js&#39;)</code>, then Node.js would look in the following locations, in\nthis order:</p>\n<ul>\n<li><code>/home/ry/projects/node_modules/bar.js</code></li>\n<li><code>/home/ry/node_modules/bar.js</code></li>\n<li><code>/home/node_modules/bar.js</code></li>\n<li><code>/node_modules/bar.js</code></li>\n</ul>\n<p>This allows programs to localize their dependencies, so that they do not\nclash.</p>\n<p>It is possible to require specific files or sub modules distributed with a\nmodule by including a path suffix after the module name. For instance\n<code>require(&#39;example-module/path/to/file&#39;)</code> would resolve <code>path/to/file</code>\nrelative to where <code>example-module</code> is located. The suffixed path follows the\nsame module resolution semantics.</p>\n"
        },
        {
          "textRaw": "Loading from the global folders",
          "name": "Loading from the global folders",
          "type": "misc",
          "desc": "<p>If the <code>NODE_PATH</code> environment variable is set to a colon-delimited list\nof absolute paths, then Node.js will search those paths for modules if they\nare not found elsewhere.</p>\n<p>On Windows, <code>NODE_PATH</code> is delimited by semicolons (<code>;</code>) instead of colons.</p>\n<p><code>NODE_PATH</code> was originally created to support loading modules from\nvarying paths before the current <a href=\"#modules_all_together\">module resolution</a> algorithm was frozen.</p>\n<p><code>NODE_PATH</code> is still supported, but is less necessary now that the Node.js\necosystem has settled on a convention for locating dependent modules.\nSometimes deployments that rely on <code>NODE_PATH</code> show surprising behavior\nwhen people are unaware that <code>NODE_PATH</code> must be set. Sometimes a\nmodule&#39;s dependencies change, causing a different version (or even a\ndifferent module) to be loaded as the <code>NODE_PATH</code> is searched.</p>\n<p>Additionally, Node.js will search in the following locations:</p>\n<ul>\n<li>1: <code>$HOME/.node_modules</code></li>\n<li>2: <code>$HOME/.node_libraries</code></li>\n<li>3: <code>$PREFIX/lib/node</code></li>\n</ul>\n<p>Where <code>$HOME</code> is the user&#39;s home directory, and <code>$PREFIX</code> is Node.js&#39;s\nconfigured <code>node_prefix</code>.</p>\n<p>These are mostly for historic reasons.</p>\n<p>It is strongly encouraged to place dependencies in the local <code>node_modules</code>\nfolder. These will be loaded faster, and more reliably.</p>\n"
        },
        {
          "textRaw": "The module wrapper",
          "name": "The module wrapper",
          "type": "misc",
          "desc": "<p>Before a module&#39;s code is executed, Node.js will wrap it with a function\nwrapper that looks like the following:</p>\n<pre><code class=\"lang-js\">(function(exports, require, module, __filename, __dirname) {\n// Module code actually lives in here\n});\n</code></pre>\n<p>By doing this, Node.js achieves a few things:</p>\n<ul>\n<li>It keeps top-level variables (defined with <code>var</code>, <code>const</code> or <code>let</code>) scoped to\nthe module rather than the global object.</li>\n<li>It helps to provide some global-looking variables that are actually specific\nto the module, such as:<ul>\n<li>The <code>module</code> and <code>exports</code> objects that the implementor can use to export\nvalues from the module.</li>\n<li>The convenience variables <code>__filename</code> and <code>__dirname</code>, containing the\nmodule&#39;s absolute filename and directory path.</li>\n</ul>\n</li>\n</ul>\n"
        }
      ],
      "modules": [
        {
          "textRaw": "The module scope",
          "name": "the_module_scope",
          "vars": [
            {
              "textRaw": "\\_\\_dirname",
              "name": "\\_\\_dirname",
              "meta": {
                "added": [
                  "v0.1.27"
                ],
                "changes": []
              },
              "type": "var",
              "desc": "<ul>\n<li>{string}</li>\n</ul>\n<p>The directory name of the current module. This is the same as the\n<a href=\"path.html#path_path_dirname_path\"><code>path.dirname()</code></a> of the <a href=\"#modules_filename\"><code>__filename</code></a>.</p>\n<p>Example: running <code>node example.js</code> from <code>/Users/mjr</code></p>\n<pre><code class=\"lang-js\">console.log(__dirname);\n// Prints: /Users/mjr\nconsole.log(path.dirname(__filename));\n// Prints: /Users/mjr\n</code></pre>\n"
            },
            {
              "textRaw": "\\_\\_filename",
              "name": "\\_\\_filename",
              "meta": {
                "added": [
                  "v0.0.1"
                ],
                "changes": []
              },
              "type": "var",
              "desc": "<ul>\n<li>{string}</li>\n</ul>\n<p>The file name of the current module. This is the resolved absolute path of the\ncurrent module file.</p>\n<p>For a main program this is not necessarily the same as the file name used in the\ncommand line.</p>\n<p>See <a href=\"#modules_dirname\"><code>__dirname</code></a> for the directory name of the current module.</p>\n<p>Examples:</p>\n<p>Running <code>node example.js</code> from <code>/Users/mjr</code></p>\n<pre><code class=\"lang-js\">console.log(__filename);\n// Prints: /Users/mjr/example.js\nconsole.log(__dirname);\n// Prints: /Users/mjr\n</code></pre>\n<p>Given two modules: <code>a</code> and <code>b</code>, where <code>b</code> is a dependency of\n<code>a</code> and there is a directory structure of:</p>\n<ul>\n<li><code>/Users/mjr/app/a.js</code></li>\n<li><code>/Users/mjr/app/node_modules/b/b.js</code></li>\n</ul>\n<p>References to <code>__filename</code> within <code>b.js</code> will return\n<code>/Users/mjr/app/node_modules/b/b.js</code> while references to <code>__filename</code> within\n<code>a.js</code> will return <code>/Users/mjr/app/a.js</code>.</p>\n"
            },
            {
              "textRaw": "exports",
              "name": "exports",
              "meta": {
                "added": [
                  "v0.1.12"
                ],
                "changes": []
              },
              "type": "var",
              "desc": "<p>A reference to the <code>module.exports</code> that is shorter to type.\nSee the section about the <a href=\"#modules_exports_shortcut\">exports shortcut</a> for details on when to use\n<code>exports</code> and when to use <code>module.exports</code>.</p>\n"
            },
            {
              "textRaw": "module",
              "name": "module",
              "meta": {
                "added": [
                  "v0.1.16"
                ],
                "changes": []
              },
              "type": "var",
              "desc": "<ul>\n<li>{Object}</li>\n</ul>\n<p>A reference to the current module, see the section about the\n<a href=\"#modules_the_module_object\"><code>module</code> object</a>. In particular, <code>module.exports</code> is used for defining what\na module exports and makes available through <code>require()</code>.</p>\n"
            },
            {
              "textRaw": "require()",
              "type": "var",
              "name": "require",
              "meta": {
                "added": [
                  "v0.1.13"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>{Function}</li>\n</ul>\n<p>To require modules.</p>\n",
              "properties": [
                {
                  "textRaw": "`cache` {Object} ",
                  "type": "Object",
                  "name": "cache",
                  "meta": {
                    "added": [
                      "v0.3.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Modules are cached in this object when they are required. By deleting a key\nvalue from this object, the next <code>require</code> will reload the module. Note that\nthis does not apply to <a href=\"addons.html\">native addons</a>, for which reloading will result in an\nerror.</p>\n"
                },
                {
                  "textRaw": "`extensions` {Object} ",
                  "type": "Object",
                  "name": "extensions",
                  "meta": {
                    "added": [
                      "v0.3.0"
                    ],
                    "deprecated": [
                      "v0.10.6"
                    ],
                    "changes": []
                  },
                  "stability": 0,
                  "stabilityText": "Deprecated",
                  "desc": "<p>Instruct <code>require</code> on how to handle certain file extensions.</p>\n<p>Process files with the extension <code>.sjs</code> as <code>.js</code>:</p>\n<pre><code class=\"lang-js\">require.extensions[&#39;.sjs&#39;] = require.extensions[&#39;.js&#39;];\n</code></pre>\n<p><strong>Deprecated</strong> In the past, this list has been used to load\nnon-JavaScript modules into Node.js by compiling them on-demand.\nHowever, in practice, there are much better ways to do this, such as\nloading modules via some other Node.js program, or compiling them to\nJavaScript ahead of time.</p>\n<p>Since the module system is locked, this feature will probably never go\naway. However, it may have subtle bugs and complexities that are best\nleft untouched.</p>\n<p>Note that the number of file system operations that the module system\nhas to perform in order to resolve a <code>require(...)</code> statement to a\nfilename scales linearly with the number of registered extensions.</p>\n<p>In other words, adding extensions slows down the module loader and\nshould be discouraged.</p>\n"
                },
                {
                  "textRaw": "`main` {Object} ",
                  "type": "Object",
                  "name": "main",
                  "meta": {
                    "added": [
                      "v0.1.17"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>Module</code> object representing the entry script loaded when the Node.js\nprocess launched.\nSee <a href=\"#modules_accessing_the_main_module\">&quot;Accessing the main module&quot;</a>.</p>\n<p>In <code>entry.js</code> script:</p>\n<pre><code class=\"lang-js\">console.log(require.main);\n</code></pre>\n<pre><code class=\"lang-sh\">node entry.js\n</code></pre>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">Module {\n  id: &#39;.&#39;,\n  exports: {},\n  parent: null,\n  filename: &#39;/absolute/path/to/entry.js&#39;,\n  loaded: false,\n  children: [],\n  paths:\n   [ &#39;/absolute/path/to/node_modules&#39;,\n     &#39;/absolute/path/node_modules&#39;,\n     &#39;/absolute/node_modules&#39;,\n     &#39;/node_modules&#39; ] }\n</code></pre>\n"
                }
              ],
              "methods": [
                {
                  "textRaw": "require.resolve(request[, options])",
                  "type": "method",
                  "name": "resolve",
                  "meta": {
                    "added": [
                      "v0.3.0"
                    ],
                    "changes": [
                      {
                        "version": "v8.9.0",
                        "pr-url": "https://github.com/nodejs/node/pull/16397",
                        "description": "The `paths` option is now supported."
                      }
                    ]
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {string} ",
                        "name": "return",
                        "type": "string"
                      },
                      "params": [
                        {
                          "textRaw": "`request` {string} The module path to resolve. ",
                          "name": "request",
                          "type": "string",
                          "desc": "The module path to resolve."
                        },
                        {
                          "textRaw": "`options` {Object} ",
                          "options": [
                            {
                              "textRaw": "`paths` {string[]} Paths to resolve module location from. If present, these paths are used instead of the default resolution paths. Note that each of these paths is used as a starting point for the module resolution algorithm, meaning that the `node_modules` hierarchy is checked from this location. ",
                              "name": "paths",
                              "type": "string[]",
                              "desc": "Paths to resolve module location from. If present, these paths are used instead of the default resolution paths. Note that each of these paths is used as a starting point for the module resolution algorithm, meaning that the `node_modules` hierarchy is checked from this location."
                            }
                          ],
                          "name": "options",
                          "type": "Object",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "request"
                        },
                        {
                          "name": "options",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Use the internal <code>require()</code> machinery to look up the location of a module,\nbut rather than loading the module, just return the resolved filename.</p>\n"
                },
                {
                  "textRaw": "require.resolve.paths(request)",
                  "type": "method",
                  "name": "paths",
                  "meta": {
                    "added": [
                      "v8.9.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {string[]|null} ",
                        "name": "return",
                        "type": "string[]|null"
                      },
                      "params": [
                        {
                          "textRaw": "`request` {string} The module path whose lookup paths are being retrieved. ",
                          "name": "request",
                          "type": "string",
                          "desc": "The module path whose lookup paths are being retrieved."
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "request"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Returns an array containing the paths searched during resolution of <code>request</code> or\n<code>null</code> if the <code>request</code> string references a core module, for example <code>http</code> or\n<code>fs</code>.</p>\n"
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "The module scope"
        },
        {
          "textRaw": "The `Module` Object",
          "name": "the_`module`_object",
          "meta": {
            "added": [
              "v0.3.7"
            ],
            "changes": []
          },
          "desc": "<ul>\n<li>{Object}</li>\n</ul>\n<p>Provides general utility methods when interacting with instances of\n<code>Module</code> — the <code>module</code> variable often seen in file modules. Accessed\nvia <code>require(&#39;module&#39;)</code>.</p>\n",
          "properties": [
            {
              "textRaw": "`builtinModules` {string[]} ",
              "type": "string[]",
              "name": "builtinModules",
              "meta": {
                "added": [
                  "v9.3.0"
                ],
                "changes": []
              },
              "desc": "<p>A list of the names of all modules provided by Node.js. Can be used to verify\nif a module is maintained by a third party or not.</p>\n<p>Note that <code>module</code> in this context isn&#39;t the same object that&#39;s provided\nby the <a href=\"#modules_the_module_wrapper\">module wrapper</a>. To access it, require the <code>Module</code> module:</p>\n<pre><code class=\"lang-js\">const builtin = require(&#39;module&#39;).builtinModules;\n</code></pre>\n<!-- [end-include:modules.md] -->\n<!-- [start-include:net.md] -->\n"
            }
          ],
          "type": "module",
          "displayName": "The `Module` Object"
        }
      ],
      "vars": [
        {
          "textRaw": "The `module` Object",
          "name": "module",
          "meta": {
            "added": [
              "v0.1.16"
            ],
            "changes": []
          },
          "type": "var",
          "desc": "<ul>\n<li>{Object}</li>\n</ul>\n<p>In each module, the <code>module</code> free variable is a reference to the object\nrepresenting the current module. For convenience, <code>module.exports</code> is\nalso accessible via the <code>exports</code> module-global. <code>module</code> is not actually\na global but rather local to each module.</p>\n",
          "properties": [
            {
              "textRaw": "`children` {module[]} ",
              "type": "module[]",
              "name": "children",
              "meta": {
                "added": [
                  "v0.1.16"
                ],
                "changes": []
              },
              "desc": "<p>The module objects required by this one.</p>\n"
            },
            {
              "textRaw": "`exports` {Object} ",
              "type": "Object",
              "name": "exports",
              "meta": {
                "added": [
                  "v0.1.16"
                ],
                "changes": []
              },
              "desc": "<p>The <code>module.exports</code> object is created by the <code>Module</code> system. Sometimes this is\nnot acceptable; many want their module to be an instance of some class. To do\nthis, assign the desired export object to <code>module.exports</code>. Note that assigning\nthe desired object to <code>exports</code> will simply rebind the local <code>exports</code> variable,\nwhich is probably not what is desired.</p>\n<p>For example suppose we were making a module called <code>a.js</code>:</p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\n\nmodule.exports = new EventEmitter();\n\n// Do some work, and after some time emit\n// the &#39;ready&#39; event from the module itself.\nsetTimeout(() =&gt; {\n  module.exports.emit(&#39;ready&#39;);\n}, 1000);\n</code></pre>\n<p>Then in another file we could do:</p>\n<pre><code class=\"lang-js\">const a = require(&#39;./a&#39;);\na.on(&#39;ready&#39;, () =&gt; {\n  console.log(&#39;module &quot;a&quot; is ready&#39;);\n});\n</code></pre>\n<p>Note that assignment to <code>module.exports</code> must be done immediately. It cannot be\ndone in any callbacks. This does not work:</p>\n<p><code>x.js</code>:</p>\n<pre><code class=\"lang-js\">setTimeout(() =&gt; {\n  module.exports = { a: &#39;hello&#39; };\n}, 0);\n</code></pre>\n<p><code>y.js</code>:</p>\n<pre><code class=\"lang-js\">const x = require(&#39;./x&#39;);\nconsole.log(x.a);\n</code></pre>\n",
              "modules": [
                {
                  "textRaw": "exports shortcut",
                  "name": "exports_shortcut",
                  "meta": {
                    "added": [
                      "v0.1.16"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>exports</code> variable is available within a module&#39;s file-level scope, and is\nassigned the value of <code>module.exports</code> before the module is evaluated.</p>\n<p>It allows a shortcut, so that <code>module.exports.f = ...</code> can be written more\nsuccinctly as <code>exports.f = ...</code>. However, be aware that like any variable, if a\nnew value is assigned to <code>exports</code>, it is no longer bound to <code>module.exports</code>:</p>\n<pre><code class=\"lang-js\">module.exports.hello = true; // Exported from require of module\nexports = { hello: false };  // Not exported, only available in the module\n</code></pre>\n<p>When the <code>module.exports</code> property is being completely replaced by a new\nobject, it is common to also reassign <code>exports</code>:</p>\n<!-- eslint-disable func-name-matching -->\n<pre><code class=\"lang-js\">module.exports = exports = function Constructor() {\n  // ... etc.\n};\n</code></pre>\n<p>To illustrate the behavior, imagine this hypothetical implementation of\n<code>require()</code>, which is quite similar to what is actually done by <code>require()</code>:</p>\n<pre><code class=\"lang-js\">function require(/* ... */) {\n  const module = { exports: {} };\n  ((module, exports) =&gt; {\n    // Module code here. In this example, define a function.\n    function someFunc() {}\n    exports = someFunc;\n    // At this point, exports is no longer a shortcut to module.exports, and\n    // this module will still export an empty default object.\n    module.exports = someFunc;\n    // At this point, the module will now export someFunc, instead of the\n    // default object.\n  })(module, module.exports);\n  return module.exports;\n}\n</code></pre>\n",
                  "type": "module",
                  "displayName": "exports shortcut"
                }
              ]
            },
            {
              "textRaw": "`filename` {string} ",
              "type": "string",
              "name": "filename",
              "meta": {
                "added": [
                  "v0.1.16"
                ],
                "changes": []
              },
              "desc": "<p>The fully resolved filename to the module.</p>\n"
            },
            {
              "textRaw": "`id` {string} ",
              "type": "string",
              "name": "id",
              "meta": {
                "added": [
                  "v0.1.16"
                ],
                "changes": []
              },
              "desc": "<p>The identifier for the module. Typically this is the fully resolved\nfilename.</p>\n"
            },
            {
              "textRaw": "`loaded` {boolean} ",
              "type": "boolean",
              "name": "loaded",
              "meta": {
                "added": [
                  "v0.1.16"
                ],
                "changes": []
              },
              "desc": "<p>Whether or not the module is done loading, or is in the process of\nloading.</p>\n"
            },
            {
              "textRaw": "`parent` {module} ",
              "type": "module",
              "name": "parent",
              "meta": {
                "added": [
                  "v0.1.16"
                ],
                "changes": []
              },
              "desc": "<p>The module that first required this one.</p>\n"
            },
            {
              "textRaw": "`paths` {string[]} ",
              "type": "string[]",
              "name": "paths",
              "meta": {
                "added": [
                  "v0.4.0"
                ],
                "changes": []
              },
              "desc": "<p>The search paths for the module.</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "module.require(id)",
              "type": "method",
              "name": "require",
              "meta": {
                "added": [
                  "v0.5.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} `module.exports` from the resolved module ",
                    "name": "return",
                    "type": "Object",
                    "desc": "`module.exports` from the resolved module"
                  },
                  "params": [
                    {
                      "textRaw": "`id` {string} ",
                      "name": "id",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "id"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>module.require</code> method provides a way to load a module as if\n<code>require()</code> was called from the original module.</p>\n<p>In order to do this, it is necessary to get a reference to the <code>module</code> object.\nSince <code>require()</code> returns the <code>module.exports</code>, and the <code>module</code> is typically\n<em>only</em> available within a specific module&#39;s code, it must be explicitly exported\nin order to be used.</p>\n"
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "module"
    },
    {
      "textRaw": "Net",
      "name": "net",
      "introduced_in": "v0.10.0",
      "desc": "<!--lint disable maximum-line-length-->\n<blockquote>\n<p>Stability: 2 - Stable</p>\n</blockquote>\n<p>The <code>net</code> module provides an asynchronous network API for creating stream-based\nTCP or <a href=\"#net_ipc_support\">IPC</a> servers (<a href=\"#net_net_createserver_options_connectionlistener\"><code>net.createServer()</code></a>) and clients\n(<a href=\"#net_net_createconnection\"><code>net.createConnection()</code></a>).</p>\n<p>It can be accessed using:</p>\n<pre><code class=\"lang-js\">const net = require(&#39;net&#39;);\n</code></pre>\n",
      "modules": [
        {
          "textRaw": "IPC Support",
          "name": "ipc_support",
          "desc": "<p>The <code>net</code> module supports IPC with named pipes on Windows, and UNIX domain\nsockets on other operating systems.</p>\n",
          "modules": [
            {
              "textRaw": "Identifying paths for IPC connections",
              "name": "identifying_paths_for_ipc_connections",
              "desc": "<p><a href=\"#net_net_connect\"><code>net.connect()</code></a>, <a href=\"#net_net_createconnection\"><code>net.createConnection()</code></a>, <a href=\"net.html#net_server_listen\"><code>server.listen()</code></a> and\n<a href=\"#net_socket_connect\"><code>socket.connect()</code></a> take a <code>path</code> parameter to identify IPC endpoints.</p>\n<p>On UNIX, the local domain is also known as the UNIX domain. The path is a\nfilesystem pathname. It gets truncated to <code>sizeof(sockaddr_un.sun_path) - 1</code>,\nwhich varies on different operating system between 91 and 107 bytes.\nThe typical values are 107 on Linux and 103 on macOS. The path is\nsubject to the same naming conventions and permissions checks as would be done\non file creation. If the UNIX domain socket (that is visible as a file system\npath) is created and used in conjunction with one of Node.js&#39; API abstractions\nsuch as <a href=\"#net_net_createserver_options_connectionlistener\"><code>net.createServer()</code></a>, it will be unlinked as part of\n<a href=\"#net_server_close_callback\"><code>server.close()</code></a>. On the other hand, if it is created and used outside of\nthese abstractions, the user will need to manually remove it. The same applies\nwhen the path was created by a Node.js API but the program crashes abruptly.\nIn short, a UNIX domain socket once successfully created will be visible in the\nfilesystem, and will persist until unlinked.</p>\n<p>On Windows, the local domain is implemented using a named pipe. The path <em>must</em>\nrefer to an entry in <code>\\\\?\\pipe\\</code> or <code>\\\\.\\pipe\\</code>. Any characters are permitted,\nbut the latter may do some processing of pipe names, such as resolving <code>..</code>\nsequences. Despite how it might look, the pipe namespace is flat. Pipes will\n<em>not persist</em>. They are removed when the last reference to them is closed.\nUnlike UNIX domain sockets, Windows will close and remove the pipe when the\nowning process exits.</p>\n<p>JavaScript string escaping requires paths to be specified with extra backslash\nescaping such as:</p>\n<pre><code class=\"lang-js\">net.createServer().listen(\n  path.join(&#39;\\\\\\\\?\\\\pipe&#39;, process.cwd(), &#39;myctl&#39;));\n</code></pre>\n",
              "type": "module",
              "displayName": "Identifying paths for IPC connections"
            }
          ],
          "type": "module",
          "displayName": "IPC Support"
        }
      ],
      "classes": [
        {
          "textRaw": "Class: net.Server",
          "type": "class",
          "name": "net.Server",
          "meta": {
            "added": [
              "v0.1.90"
            ],
            "changes": []
          },
          "desc": "<p>This class is used to create a TCP or <a href=\"#net_ipc_support\">IPC</a> server.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "meta": {
                "added": [
                  "v0.5.0"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the server closes. Note that if connections exist, this\nevent is not emitted until all connections are ended.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'connection'",
              "type": "event",
              "name": "connection",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted when a new connection is made. <code>socket</code> is an instance of\n<code>net.Socket</code>.</p>\n"
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted when an error occurs. Unlike <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>, the <a href=\"#dgram_event_close\"><code>&#39;close&#39;</code></a>\nevent will <strong>not</strong> be emitted directly following this event unless\n<a href=\"#net_server_close_callback\"><code>server.close()</code></a> is manually called. See the example in discussion of\n<a href=\"net.html#net_server_listen\"><code>server.listen()</code></a>.</p>\n"
            },
            {
              "textRaw": "Event: 'listening'",
              "type": "event",
              "name": "listening",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the server has been bound after calling <a href=\"net.html#net_server_listen\"><code>server.listen()</code></a>.</p>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "server.address()",
              "type": "method",
              "name": "address",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "name": "return",
                    "type": "Object"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns the bound <code>address</code>, the address <code>family</code> name, and <code>port</code> of the server\nas reported by the operating system if listening on an IP socket\n(useful to find which port was assigned when getting an OS-assigned address):\n<code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code>.</p>\n<p>For a server listening on a pipe or UNIX domain socket, the name is returned\nas a string.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const server = net.createServer((socket) =&gt; {\n  socket.end(&#39;goodbye\\n&#39;);\n}).on(&#39;error&#39;, (err) =&gt; {\n  // handle errors here\n  throw err;\n});\n\n// grab an arbitrary unused port.\nserver.listen(() =&gt; {\n  console.log(&#39;opened server on&#39;, server.address());\n});\n</code></pre>\n<p>Don&#39;t call <code>server.address()</code> until the <code>&#39;listening&#39;</code> event has been emitted.</p>\n"
            },
            {
              "textRaw": "server.close([callback])",
              "type": "method",
              "name": "close",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Server} ",
                    "name": "return",
                    "type": "net.Server"
                  },
                  "params": [
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Stops the server from accepting new connections and keeps existing\nconnections. This function is asynchronous, the server is finally closed\nwhen all connections are ended and the server emits a <a href=\"#dgram_event_close\"><code>&#39;close&#39;</code></a> event.\nThe optional <code>callback</code> will be called once the <code>&#39;close&#39;</code> event occurs. Unlike\nthat event, it will be called with an <code>Error</code> as its only argument if the server\nwas not open when it was closed.</p>\n"
            },
            {
              "textRaw": "server.getConnections(callback)",
              "type": "method",
              "name": "getConnections",
              "meta": {
                "added": [
                  "v0.9.7"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Server} ",
                    "name": "return",
                    "type": "net.Server"
                  },
                  "params": [
                    {
                      "name": "callback"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>Asynchronously get the number of concurrent connections on the server. Works\nwhen sockets were sent to forks.</p>\n<p>Callback should take two arguments <code>err</code> and <code>count</code>.</p>\n"
            },
            {
              "textRaw": "server.listen()",
              "type": "method",
              "name": "listen",
              "desc": "<p>Start a server listening for connections. A <code>net.Server</code> can be a TCP or\nan <a href=\"#net_ipc_support\">IPC</a> server depending on what it listens to.</p>\n<p>Possible signatures:</p>\n<ul>\n<li><a href=\"#net_server_listen_handle_backlog_callback\"><code>server.listen(handle[, backlog][, callback])</code></a></li>\n<li><a href=\"#net_server_listen_options_callback\"><code>server.listen(options[, callback])</code></a></li>\n<li><a href=\"#net_server_listen_path_backlog_callback\"><code>server.listen(path[, backlog][, callback])</code></a>\nfor <a href=\"#net_ipc_support\">IPC</a> servers</li>\n<li><a href=\"#net_server_listen_port_host_backlog_callback\">\n<code>server.listen([port[, host[, backlog]]][, callback])</code></a>\nfor TCP servers</li>\n</ul>\n<p>This function is asynchronous. When the server starts listening, the\n<a href=\"#net_event_listening\"><code>&#39;listening&#39;</code></a> event will be emitted. The last parameter <code>callback</code>\nwill be added as a listener for the <a href=\"#net_event_listening\"><code>&#39;listening&#39;</code></a> event.</p>\n<p>All <code>listen()</code> methods can take a <code>backlog</code> parameter to specify the maximum\nlength of the queue of pending connections. The actual length will be determined\nby the OS through sysctl settings such as <code>tcp_max_syn_backlog</code> and <code>somaxconn</code>\non Linux. The default value of this parameter is 511 (not 512).</p>\n<p>All <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> are set to <code>SO_REUSEADDR</code> (See <a href=\"http://man7.org/linux/man-pages/man7/socket.7.html\">socket(7)</a> for details).</p>\n<p>The <code>server.listen()</code> method can be called again if and only if there was an\nerror during the first <code>server.listen()</code> call or <code>server.close()</code> has been\ncalled. Otherwise, an <code>ERR_SERVER_ALREADY_LISTEN</code> error will be thrown.</p>\n<p>One of the most common errors raised when listening is <code>EADDRINUSE</code>.\nThis happens when another server is already listening on the requested\n<code>port</code> / <code>path</code> / <code>handle</code>. One way to handle this would be to retry\nafter a certain amount of time:</p>\n<pre><code class=\"lang-js\">server.on(&#39;error&#39;, (e) =&gt; {\n  if (e.code === &#39;EADDRINUSE&#39;) {\n    console.log(&#39;Address in use, retrying...&#39;);\n    setTimeout(() =&gt; {\n      server.close();\n      server.listen(PORT, HOST);\n    }, 1000);\n  }\n});\n</code></pre>\n",
              "methods": [
                {
                  "textRaw": "server.listen(handle[, backlog][, callback])",
                  "type": "method",
                  "name": "listen",
                  "meta": {
                    "added": [
                      "v0.5.10"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {net.Server} ",
                        "name": "return",
                        "type": "net.Server"
                      },
                      "params": [
                        {
                          "textRaw": "`handle` {Object} ",
                          "name": "handle",
                          "type": "Object"
                        },
                        {
                          "textRaw": "`backlog` {number} Common parameter of [`server.listen()`][] functions ",
                          "name": "backlog",
                          "type": "number",
                          "desc": "Common parameter of [`server.listen()`][] functions",
                          "optional": true
                        },
                        {
                          "textRaw": "`callback` {Function} Common parameter of [`server.listen()`][] functions ",
                          "name": "callback",
                          "type": "Function",
                          "desc": "Common parameter of [`server.listen()`][] functions",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "handle"
                        },
                        {
                          "name": "backlog",
                          "optional": true
                        },
                        {
                          "name": "callback",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Start a server listening for connections on a given <code>handle</code> that has\nalready been bound to a port, a UNIX domain socket, or a Windows named pipe.</p>\n<p>The <code>handle</code> object can be either a server, a socket (anything with an\nunderlying <code>_handle</code> member), or an object with an <code>fd</code> member that is a\nvalid file descriptor.</p>\n<p>Listening on a file descriptor is not supported on Windows.</p>\n"
                },
                {
                  "textRaw": "server.listen(options[, callback])",
                  "type": "method",
                  "name": "listen",
                  "meta": {
                    "added": [
                      "v0.11.14"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {net.Server} ",
                        "name": "return",
                        "type": "net.Server"
                      },
                      "params": [
                        {
                          "textRaw": "`options` {Object} Required. Supports the following properties: ",
                          "options": [
                            {
                              "textRaw": "`port` {number} ",
                              "name": "port",
                              "type": "number"
                            },
                            {
                              "textRaw": "`host` {string} ",
                              "name": "host",
                              "type": "string"
                            },
                            {
                              "textRaw": "`path` {string} Will be ignored if `port` is specified. See [Identifying paths for IPC connections][]. ",
                              "name": "path",
                              "type": "string",
                              "desc": "Will be ignored if `port` is specified. See [Identifying paths for IPC connections][]."
                            },
                            {
                              "textRaw": "`backlog` {number} Common parameter of [`server.listen()`][] functions. ",
                              "name": "backlog",
                              "type": "number",
                              "desc": "Common parameter of [`server.listen()`][] functions."
                            },
                            {
                              "textRaw": "`exclusive` {boolean} **Default:** `false` ",
                              "name": "exclusive",
                              "type": "boolean",
                              "default": "`false`"
                            }
                          ],
                          "name": "options",
                          "type": "Object",
                          "desc": "Required. Supports the following properties:"
                        },
                        {
                          "textRaw": "`callback` {Function} Common parameter of [`server.listen()`][] functions. ",
                          "name": "callback",
                          "type": "Function",
                          "desc": "Common parameter of [`server.listen()`][] functions.",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "options"
                        },
                        {
                          "name": "callback",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>If <code>port</code> is specified, it behaves the same as\n<a href=\"#net_server_listen_port_host_backlog_callback\">\n<code>server.listen([port[, host[, backlog]]][, callback])</code></a>.\nOtherwise, if <code>path</code> is specified, it behaves the same as\n<a href=\"#net_server_listen_path_backlog_callback\"><code>server.listen(path[, backlog][, callback])</code></a>.\nIf none of them is specified, an error will be thrown.</p>\n<p>If <code>exclusive</code> is <code>false</code> (default), then cluster workers will use the same\nunderlying handle, allowing connection handling duties to be shared. When\n<code>exclusive</code> is <code>true</code>, the handle is not shared, and attempted port sharing\nresults in an error. An example which listens on an exclusive port is\nshown below.</p>\n<pre><code class=\"lang-js\">server.listen({\n  host: &#39;localhost&#39;,\n  port: 80,\n  exclusive: true\n});\n</code></pre>\n"
                },
                {
                  "textRaw": "server.listen(path[, backlog][, callback])",
                  "type": "method",
                  "name": "listen",
                  "meta": {
                    "added": [
                      "v0.1.90"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {net.Server} ",
                        "name": "return",
                        "type": "net.Server"
                      },
                      "params": [
                        {
                          "textRaw": "`path` {string} Path the server should listen to. See [Identifying paths for IPC connections][]. ",
                          "name": "path",
                          "type": "string",
                          "desc": "Path the server should listen to. See [Identifying paths for IPC connections][]."
                        },
                        {
                          "textRaw": "`backlog` {number} Common parameter of [`server.listen()`][] functions. ",
                          "name": "backlog",
                          "type": "number",
                          "desc": "Common parameter of [`server.listen()`][] functions.",
                          "optional": true
                        },
                        {
                          "textRaw": "`callback` {Function} Common parameter of [`server.listen()`][] functions. ",
                          "name": "callback",
                          "type": "Function",
                          "desc": "Common parameter of [`server.listen()`][] functions.",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "path"
                        },
                        {
                          "name": "backlog",
                          "optional": true
                        },
                        {
                          "name": "callback",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Start an <a href=\"#net_ipc_support\">IPC</a> server listening for connections on the given <code>path</code>.</p>\n"
                },
                {
                  "textRaw": "server.listen([port[, host[, backlog]]][, callback])",
                  "type": "method",
                  "name": "listen",
                  "meta": {
                    "added": [
                      "v0.1.90"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {net.Server} ",
                        "name": "return",
                        "type": "net.Server"
                      },
                      "params": [
                        {
                          "textRaw": "`port` {number} ",
                          "name": "port",
                          "type": "number",
                          "optional": true
                        },
                        {
                          "textRaw": "`host` {string} ",
                          "name": "host",
                          "type": "string",
                          "optional": true
                        },
                        {
                          "textRaw": "`backlog` {number} Common parameter of [`server.listen()`][] functions. ",
                          "name": "backlog",
                          "type": "number",
                          "desc": "Common parameter of [`server.listen()`][] functions.",
                          "optional": true
                        },
                        {
                          "textRaw": "`callback` {Function} Common parameter of [`server.listen()`][] functions. ",
                          "name": "callback",
                          "type": "Function",
                          "desc": "Common parameter of [`server.listen()`][] functions.",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "port",
                          "optional": true
                        },
                        {
                          "name": "host",
                          "optional": true
                        },
                        {
                          "name": "backlog",
                          "optional": true
                        },
                        {
                          "name": "callback",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Start a TCP server listening for connections on the given <code>port</code> and <code>host</code>.</p>\n<p>If <code>port</code> is omitted or is 0, the operating system will assign an arbitrary\nunused port, which can be retrieved by using <code>server.address().port</code>\nafter the <a href=\"#net_event_listening\"><code>&#39;listening&#39;</code></a> event has been emitted.</p>\n<p>If <code>host</code> is omitted, the server will accept connections on the\n<a href=\"https://en.wikipedia.org/wiki/IPv6_address#Unspecified_address\">unspecified IPv6 address</a> (<code>::</code>) when IPv6 is available, or the\n<a href=\"https://en.wikipedia.org/wiki/0.0.0.0\">unspecified IPv4 address</a> (<code>0.0.0.0</code>) otherwise.</p>\n<p>In most operating systems, listening to the <a href=\"https://en.wikipedia.org/wiki/IPv6_address#Unspecified_address\">unspecified IPv6 address</a> (<code>::</code>)\nmay cause the <code>net.Server</code> to also listen on the <a href=\"https://en.wikipedia.org/wiki/0.0.0.0\">unspecified IPv4 address</a>\n(<code>0.0.0.0</code>).</p>\n"
                }
              ],
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "server.ref()",
              "type": "method",
              "name": "ref",
              "meta": {
                "added": [
                  "v0.9.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Server} ",
                    "name": "return",
                    "type": "net.Server"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Opposite of <code>unref()</code>, calling <code>ref()</code> on a previously <code>unref</code>ed server will\n<em>not</em> let the program exit if it&#39;s the only server left (the default behavior).\nIf the server is <code>ref</code>ed calling <code>ref()</code> again will have no effect.</p>\n"
            },
            {
              "textRaw": "server.unref()",
              "type": "method",
              "name": "unref",
              "meta": {
                "added": [
                  "v0.9.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Server} ",
                    "name": "return",
                    "type": "net.Server"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Calling <code>unref()</code> on a server will allow the program to exit if this is the only\nactive server in the event system. If the server is already <code>unref</code>ed calling\n<code>unref()</code> again will have no effect.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "server.connections",
              "name": "connections",
              "meta": {
                "added": [
                  "v0.2.0"
                ],
                "deprecated": [
                  "v0.9.7"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`server.getConnections()`][] instead.",
              "desc": "<p>The number of concurrent connections on the server.</p>\n<p>This becomes <code>null</code> when sending a socket to a child with\n<a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>. To poll forks and get current number of active\nconnections use asynchronous <a href=\"net.html#net_server_getconnections_callback\"><code>server.getConnections()</code></a> instead.</p>\n"
            },
            {
              "textRaw": "`listening` {boolean} Indicates whether or not the server is listening for connections. ",
              "type": "boolean",
              "name": "listening",
              "meta": {
                "added": [
                  "v5.7.0"
                ],
                "changes": []
              },
              "desc": "Indicates whether or not the server is listening for connections."
            },
            {
              "textRaw": "server.maxConnections",
              "name": "maxConnections",
              "meta": {
                "added": [
                  "v0.2.0"
                ],
                "changes": []
              },
              "desc": "<p>Set this property to reject connections when the server&#39;s connection count gets\nhigh.</p>\n<p>It is not recommended to use this option once a socket has been sent to a child\nwith <a href=\"child_process.html#child_process_child_process_fork_modulepath_args_options\"><code>child_process.fork()</code></a>.</p>\n"
            }
          ],
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {net.Server} ",
                "name": "return",
                "type": "net.Server"
              },
              "params": [
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "connectionListener",
                  "optional": true
                }
              ],
              "desc": "<p>See <a href=\"#net_net_createserver_options_connectionlistener\"><code>net.createServer([options][, connectionListener])</code></a>.</p>\n<p><code>net.Server</code> is an <a href=\"events.html\"><code>EventEmitter</code></a> with the following events:</p>\n"
            },
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "connectionListener",
                  "optional": true
                }
              ],
              "desc": "<p>See <a href=\"#net_net_createserver_options_connectionlistener\"><code>net.createServer([options][, connectionListener])</code></a>.</p>\n<p><code>net.Server</code> is an <a href=\"events.html\"><code>EventEmitter</code></a> with the following events:</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: net.Socket",
          "type": "class",
          "name": "net.Socket",
          "meta": {
            "added": [
              "v0.3.4"
            ],
            "changes": []
          },
          "desc": "<p>This class is an abstraction of a TCP socket or a streaming <a href=\"#net_ipc_support\">IPC</a> endpoint\n(uses named pipes on Windows, and UNIX domain sockets otherwise). A\n<code>net.Socket</code> is also a <a href=\"stream.html#stream_class_stream_duplex\">duplex stream</a>, so it can be both readable and\nwritable, and it is also an <a href=\"events.html\"><code>EventEmitter</code></a>.</p>\n<p>A <code>net.Socket</code> can be created by the user and used directly to interact with\na server. For example, it is returned by <a href=\"#net_net_createconnection\"><code>net.createConnection()</code></a>,\nso the user can use it to talk to the server.</p>\n<p>It can also be created by Node.js and passed to the user when a connection\nis received. For example, it is passed to the listeners of a\n<a href=\"#net_event_connection\"><code>&#39;connection&#39;</code></a> event emitted on a <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a>, so the user can use\nit to interact with the client.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted once the socket is fully closed. The argument <code>hadError</code> is a boolean\nwhich says if the socket was closed due to a transmission error.</p>\n"
            },
            {
              "textRaw": "Event: 'connect'",
              "type": "event",
              "name": "connect",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when a socket connection is successfully established.\nSee <a href=\"#net_net_createconnection\"><code>net.createConnection()</code></a>.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'data'",
              "type": "event",
              "name": "data",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted when data is received. The argument <code>data</code> will be a <code>Buffer</code> or\n<code>String</code>. Encoding of data is set by <a href=\"#net_socket_setencoding_encoding\"><code>socket.setEncoding()</code></a>.</p>\n<p>Note that the <strong>data will be lost</strong> if there is no listener when a <code>Socket</code>\nemits a <code>&#39;data&#39;</code> event.</p>\n"
            },
            {
              "textRaw": "Event: 'drain'",
              "type": "event",
              "name": "drain",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the write buffer becomes empty. Can be used to throttle uploads.</p>\n<p>See also: the return values of <code>socket.write()</code>.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'end'",
              "type": "event",
              "name": "end",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when the other end of the socket sends a FIN packet, thus ending the\nreadable side of the socket.</p>\n<p>By default (<code>allowHalfOpen</code> is <code>false</code>) the socket will send a FIN packet\nback and destroy its file descriptor once it has written out its pending\nwrite queue. However, if <code>allowHalfOpen</code> is set to <code>true</code>, the socket will\nnot automatically <a href=\"#net_socket_end_data_encoding\"><code>end()</code></a> its writable side, allowing the\nuser to write arbitrary amounts of data. The user must call\n<a href=\"#net_socket_end_data_encoding\"><code>end()</code></a> explicitly to close the connection (i.e. sending a\nFIN packet back).</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>Emitted when an error occurs. The <code>&#39;close&#39;</code> event will be called directly\nfollowing this event.</p>\n"
            },
            {
              "textRaw": "Event: 'lookup'",
              "type": "event",
              "name": "lookup",
              "meta": {
                "added": [
                  "v0.11.3"
                ],
                "changes": [
                  {
                    "version": "v5.10.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5598",
                    "description": "The `host` parameter is supported now."
                  }
                ]
              },
              "desc": "<p>Emitted after resolving the hostname but before connecting.\nNot applicable to UNIX sockets.</p>\n<ul>\n<li><code>err</code> {Error|null} The error object. See <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>.</li>\n<li><code>address</code> {string} The IP address.</li>\n<li><code>family</code> {string|null} The address type. See <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>.</li>\n<li><code>host</code> {string} The hostname.</li>\n</ul>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'ready'",
              "type": "event",
              "name": "ready",
              "meta": {
                "added": [
                  "v9.11.0"
                ],
                "changes": []
              },
              "desc": "<p>Emitted when a socket is ready to be used.</p>\n<p>Triggered immediately after <code>&#39;connect&#39;</code>.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'timeout'",
              "type": "event",
              "name": "timeout",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "desc": "<p>Emitted if the socket times out from inactivity. This is only to notify that\nthe socket has been idle. The user must manually close the connection.</p>\n<p>See also: <a href=\"#net_socket_settimeout_timeout_callback\"><code>socket.setTimeout()</code></a>.</p>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "socket.address()",
              "type": "method",
              "name": "address",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "name": "return",
                    "type": "Object"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns the bound <code>address</code>, the address <code>family</code> name and <code>port</code> of the\nsocket as reported by the operating system:\n<code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code></p>\n"
            },
            {
              "textRaw": "socket.connect()",
              "type": "method",
              "name": "connect",
              "desc": "<p>Initiate a connection on a given socket.</p>\n<p>Possible signatures:</p>\n<ul>\n<li><a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect(options[, connectListener])</code></a></li>\n<li><a href=\"#net_socket_connect_path_connectlistener\"><code>socket.connect(path[, connectListener])</code></a>\nfor <a href=\"#net_ipc_support\">IPC</a> connections.</li>\n<li><a href=\"#net_socket_connect_port_host_connectlistener\"><code>socket.connect(port[, host][, connectListener])</code></a>\nfor TCP connections.</li>\n<li>Returns: {net.Socket} The socket itself.</li>\n</ul>\n<p>This function is asynchronous. When the connection is established, the\n<a href=\"#net_event_connect\"><code>&#39;connect&#39;</code></a> event will be emitted. If there is a problem connecting,\ninstead of a <a href=\"#net_event_connect\"><code>&#39;connect&#39;</code></a> event, an <a href=\"#net_event_error_1\"><code>&#39;error&#39;</code></a> event will be emitted with\nthe error passed to the <a href=\"#net_event_error_1\"><code>&#39;error&#39;</code></a> listener.\nThe last parameter <code>connectListener</code>, if supplied, will be added as a listener\nfor the <a href=\"#net_event_connect\"><code>&#39;connect&#39;</code></a> event <strong>once</strong>.</p>\n",
              "methods": [
                {
                  "textRaw": "socket.connect(options[, connectListener])",
                  "type": "method",
                  "name": "connect",
                  "meta": {
                    "added": [
                      "v0.1.90"
                    ],
                    "changes": [
                      {
                        "version": "v6.0.0",
                        "pr-url": "https://github.com/nodejs/node/pull/6021",
                        "description": "The `hints` option defaults to `0` in all cases now. Previously, in the absence of the `family` option it would default to `dns.ADDRCONFIG | dns.V4MAPPED`."
                      },
                      {
                        "version": "v5.11.0",
                        "pr-url": "https://github.com/nodejs/node/pull/6000",
                        "description": "The `hints` option is supported now."
                      }
                    ]
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {net.Socket} The socket itself. ",
                        "name": "return",
                        "type": "net.Socket",
                        "desc": "The socket itself."
                      },
                      "params": [
                        {
                          "textRaw": "`options` {Object} ",
                          "name": "options",
                          "type": "Object"
                        },
                        {
                          "textRaw": "`connectListener` {Function} Common parameter of [`socket.connect()`][] methods. Will be added as a listener for the [`'connect'`][] event once. ",
                          "name": "connectListener",
                          "type": "Function",
                          "desc": "Common parameter of [`socket.connect()`][] methods. Will be added as a listener for the [`'connect'`][] event once.",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "options"
                        },
                        {
                          "name": "connectListener",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Initiate a connection on a given socket. Normally this method is not needed,\nthe socket should be created and opened with <a href=\"#net_net_createconnection\"><code>net.createConnection()</code></a>. Use\nthis only when implementing a custom Socket.</p>\n<p>For TCP connections, available <code>options</code> are:</p>\n<ul>\n<li><code>port</code> {number} Required. Port the socket should connect to.</li>\n<li><code>host</code> {string} Host the socket should connect to. <strong>Default:</strong> <code>&#39;localhost&#39;</code>.</li>\n<li><code>localAddress</code> {string} Local address the socket should connect from.</li>\n<li><code>localPort</code> {number} Local port the socket should connect from.</li>\n<li><code>family</code> {number}: Version of IP stack, can be either <code>4</code> or <code>6</code>.\n<strong>Default:</strong> <code>4</code>.</li>\n<li><code>hints</code> {number} Optional <a href=\"dns.html#dns_supported_getaddrinfo_flags\"><code>dns.lookup()</code> hints</a>.</li>\n<li><code>lookup</code> {Function} Custom lookup function. <strong>Default:</strong> <a href=\"dns.html#dns_dns_lookup_hostname_options_callback\"><code>dns.lookup()</code></a>.</li>\n</ul>\n<p>For <a href=\"#net_ipc_support\">IPC</a> connections, available <code>options</code> are:</p>\n<ul>\n<li><code>path</code> {string} Required. Path the client should connect to.\nSee <a href=\"#net_identifying_paths_for_ipc_connections\">Identifying paths for IPC connections</a>. If provided, the TCP-specific\noptions above are ignored.</li>\n</ul>\n"
                },
                {
                  "textRaw": "socket.connect(path[, connectListener])",
                  "type": "method",
                  "name": "connect",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {net.Socket} The socket itself. ",
                        "name": "return",
                        "type": "net.Socket",
                        "desc": "The socket itself."
                      },
                      "params": [
                        {
                          "textRaw": "`path` {string} Path the client should connect to. See [Identifying paths for IPC connections][]. ",
                          "name": "path",
                          "type": "string",
                          "desc": "Path the client should connect to. See [Identifying paths for IPC connections][]."
                        },
                        {
                          "textRaw": "`connectListener` {Function} Common parameter of [`socket.connect()`][] methods. Will be added as a listener for the [`'connect'`][] event once. ",
                          "name": "connectListener",
                          "type": "Function",
                          "desc": "Common parameter of [`socket.connect()`][] methods. Will be added as a listener for the [`'connect'`][] event once.",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "path"
                        },
                        {
                          "name": "connectListener",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Initiate an <a href=\"#net_ipc_support\">IPC</a> connection on the given socket.</p>\n<p>Alias to\n<a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect(options[, connectListener])</code></a>\ncalled with <code>{ path: path }</code> as <code>options</code>.</p>\n"
                },
                {
                  "textRaw": "socket.connect(port[, host][, connectListener])",
                  "type": "method",
                  "name": "connect",
                  "meta": {
                    "added": [
                      "v0.1.90"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {net.Socket} The socket itself. ",
                        "name": "return",
                        "type": "net.Socket",
                        "desc": "The socket itself."
                      },
                      "params": [
                        {
                          "textRaw": "`port` {number} Port the client should connect to. ",
                          "name": "port",
                          "type": "number",
                          "desc": "Port the client should connect to."
                        },
                        {
                          "textRaw": "`host` {string} Host the client should connect to. ",
                          "name": "host",
                          "type": "string",
                          "desc": "Host the client should connect to.",
                          "optional": true
                        },
                        {
                          "textRaw": "`connectListener` {Function} Common parameter of [`socket.connect()`][] methods. Will be added as a listener for the [`'connect'`][] event once. ",
                          "name": "connectListener",
                          "type": "Function",
                          "desc": "Common parameter of [`socket.connect()`][] methods. Will be added as a listener for the [`'connect'`][] event once.",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "port"
                        },
                        {
                          "name": "host",
                          "optional": true
                        },
                        {
                          "name": "connectListener",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Initiate a TCP connection on the given socket.</p>\n<p>Alias to\n<a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect(options[, connectListener])</code></a>\ncalled with <code>{port: port, host: host}</code> as <code>options</code>.</p>\n"
                }
              ],
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "socket.destroy([exception])",
              "type": "method",
              "name": "destroy",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} ",
                    "name": "return",
                    "type": "net.Socket"
                  },
                  "params": [
                    {
                      "name": "exception",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "exception",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Ensures that no more I/O activity happens on this socket. Only necessary in\ncase of errors (parse error or so).</p>\n<p>If <code>exception</code> is specified, an <a href=\"#net_event_error_1\"><code>&#39;error&#39;</code></a> event will be emitted and any\nlisteners for that event will receive <code>exception</code> as an argument.</p>\n"
            },
            {
              "textRaw": "socket.end([data][, encoding])",
              "type": "method",
              "name": "end",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} The socket itself. ",
                    "name": "return",
                    "type": "net.Socket",
                    "desc": "The socket itself."
                  },
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Half-closes the socket. i.e., it sends a FIN packet. It is possible the\nserver will still send some data.</p>\n<p>If <code>data</code> is specified, it is equivalent to calling\n<code>socket.write(data, encoding)</code> followed by <a href=\"#net_socket_end_data_encoding\"><code>socket.end()</code></a>.</p>\n"
            },
            {
              "textRaw": "socket.pause()",
              "type": "method",
              "name": "pause",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} The socket itself. ",
                    "name": "return",
                    "type": "net.Socket",
                    "desc": "The socket itself."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Pauses the reading of data. That is, <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> events will not be emitted.\nUseful to throttle back an upload.</p>\n"
            },
            {
              "textRaw": "socket.ref()",
              "type": "method",
              "name": "ref",
              "meta": {
                "added": [
                  "v0.9.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} The socket itself. ",
                    "name": "return",
                    "type": "net.Socket",
                    "desc": "The socket itself."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Opposite of <code>unref()</code>, calling <code>ref()</code> on a previously <code>unref</code>ed socket will\n<em>not</em> let the program exit if it&#39;s the only socket left (the default behavior).\nIf the socket is <code>ref</code>ed calling <code>ref</code> again will have no effect.</p>\n"
            },
            {
              "textRaw": "socket.resume()",
              "type": "method",
              "name": "resume",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} The socket itself. ",
                    "name": "return",
                    "type": "net.Socket",
                    "desc": "The socket itself."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Resumes reading after a call to <a href=\"#net_socket_pause\"><code>socket.pause()</code></a>.</p>\n"
            },
            {
              "textRaw": "socket.setEncoding([encoding])",
              "type": "method",
              "name": "setEncoding",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} The socket itself. ",
                    "name": "return",
                    "type": "net.Socket",
                    "desc": "The socket itself."
                  },
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Set the encoding for the socket as a <a href=\"stream.html#stream_class_stream_readable\">Readable Stream</a>. See\n<a href=\"stream.html#stream_readable_setencoding_encoding\"><code>readable.setEncoding()</code></a> for more information.</p>\n"
            },
            {
              "textRaw": "socket.setKeepAlive([enable][, initialDelay])",
              "type": "method",
              "name": "setKeepAlive",
              "meta": {
                "added": [
                  "v0.1.92"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} The socket itself. ",
                    "name": "return",
                    "type": "net.Socket",
                    "desc": "The socket itself."
                  },
                  "params": [
                    {
                      "textRaw": "`enable` {boolean} **Default:** `false` ",
                      "name": "enable",
                      "type": "boolean",
                      "default": "`false`",
                      "optional": true
                    },
                    {
                      "textRaw": "`initialDelay` {number} **Default:** `0` ",
                      "name": "initialDelay",
                      "type": "number",
                      "default": "`0`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "enable",
                      "optional": true
                    },
                    {
                      "name": "initialDelay",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Enable/disable keep-alive functionality, and optionally set the initial\ndelay before the first keepalive probe is sent on an idle socket.</p>\n<p>Set <code>initialDelay</code> (in milliseconds) to set the delay between the last\ndata packet received and the first keepalive probe. Setting <code>0</code> for\n<code>initialDelay</code> will leave the value unchanged from the default\n(or previous) setting.</p>\n"
            },
            {
              "textRaw": "socket.setNoDelay([noDelay])",
              "type": "method",
              "name": "setNoDelay",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} The socket itself. ",
                    "name": "return",
                    "type": "net.Socket",
                    "desc": "The socket itself."
                  },
                  "params": [
                    {
                      "textRaw": "`noDelay` {boolean} **Default:** `true` ",
                      "name": "noDelay",
                      "type": "boolean",
                      "default": "`true`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "noDelay",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Disables the Nagle algorithm. By default TCP connections use the Nagle\nalgorithm, they buffer data before sending it off. Setting <code>true</code> for\n<code>noDelay</code> will immediately fire off data each time <code>socket.write()</code> is called.</p>\n"
            },
            {
              "textRaw": "socket.setTimeout(timeout[, callback])",
              "type": "method",
              "name": "setTimeout",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} The socket itself. ",
                    "name": "return",
                    "type": "net.Socket",
                    "desc": "The socket itself."
                  },
                  "params": [
                    {
                      "name": "timeout"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "timeout"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Sets the socket to timeout after <code>timeout</code> milliseconds of inactivity on\nthe socket. By default <code>net.Socket</code> do not have a timeout.</p>\n<p>When an idle timeout is triggered the socket will receive a <a href=\"#net_event_timeout\"><code>&#39;timeout&#39;</code></a>\nevent but the connection will not be severed. The user must manually call\n<a href=\"#net_socket_end_data_encoding\"><code>socket.end()</code></a> or <a href=\"#net_socket_destroy_exception\"><code>socket.destroy()</code></a> to end the connection.</p>\n<pre><code class=\"lang-js\">socket.setTimeout(3000);\nsocket.on(&#39;timeout&#39;, () =&gt; {\n  console.log(&#39;socket timeout&#39;);\n  socket.end();\n});\n</code></pre>\n<p>If <code>timeout</code> is 0, then the existing idle timeout is disabled.</p>\n<p>The optional <code>callback</code> parameter will be added as a one-time listener for the\n<a href=\"#net_event_timeout\"><code>&#39;timeout&#39;</code></a> event.</p>\n"
            },
            {
              "textRaw": "socket.unref()",
              "type": "method",
              "name": "unref",
              "meta": {
                "added": [
                  "v0.9.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} The socket itself. ",
                    "name": "return",
                    "type": "net.Socket",
                    "desc": "The socket itself."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Calling <code>unref()</code> on a socket will allow the program to exit if this is the only\nactive socket in the event system. If the socket is already <code>unref</code>ed calling\n<code>unref()</code> again will have no effect.</p>\n"
            },
            {
              "textRaw": "socket.write(data[, encoding][, callback])",
              "type": "method",
              "name": "write",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`data` {string|Buffer|Uint8Array} ",
                      "name": "data",
                      "type": "string|Buffer|Uint8Array"
                    },
                    {
                      "textRaw": "`encoding` {string} Only used when data is `string`. **Default:** `utf8`. ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`utf8`",
                      "desc": "Only used when data is `string`.",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Sends data on the socket. The second parameter specifies the encoding in the\ncase of a string — it defaults to UTF8 encoding.</p>\n<p>Returns <code>true</code> if the entire data was flushed successfully to the kernel\nbuffer. Returns <code>false</code> if all or part of the data was queued in user memory.\n<a href=\"#stream_event_drain\"><code>&#39;drain&#39;</code></a> will be emitted when the buffer is again free.</p>\n<p>The optional <code>callback</code> parameter will be executed when the data is finally\nwritten out - this may not be immediately.</p>\n<p>See <code>Writable</code> stream <a href=\"stream.html#stream_writable_write_chunk_encoding_callback\"><code>write()</code></a> method for more\ninformation.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "socket.bufferSize",
              "name": "bufferSize",
              "meta": {
                "added": [
                  "v0.3.8"
                ],
                "changes": []
              },
              "desc": "<p><code>net.Socket</code> has the property that <code>socket.write()</code> always works. This is to\nhelp users get up and running quickly. The computer cannot always keep up\nwith the amount of data that is written to a socket - the network connection\nsimply might be too slow. Node.js will internally queue up the data written to a\nsocket and send it out over the wire when it is possible. (Internally it is\npolling on the socket&#39;s file descriptor for being writable).</p>\n<p>The consequence of this internal buffering is that memory may grow. This\nproperty shows the number of characters currently buffered to be written.\n(Number of characters is approximately equal to the number of bytes to be\nwritten, but the buffer may contain strings, and the strings are lazily\nencoded, so the exact number of bytes is not known.)</p>\n<p>Users who experience large or growing <code>bufferSize</code> should attempt to\n&quot;throttle&quot; the data flows in their program with\n<a href=\"#net_socket_pause\"><code>socket.pause()</code></a> and <a href=\"#net_socket_resume\"><code>socket.resume()</code></a>.</p>\n"
            },
            {
              "textRaw": "socket.bytesRead",
              "name": "bytesRead",
              "meta": {
                "added": [
                  "v0.5.3"
                ],
                "changes": []
              },
              "desc": "<p>The amount of received bytes.</p>\n"
            },
            {
              "textRaw": "socket.bytesWritten",
              "name": "bytesWritten",
              "meta": {
                "added": [
                  "v0.5.3"
                ],
                "changes": []
              },
              "desc": "<p>The amount of bytes sent.</p>\n"
            },
            {
              "textRaw": "socket.connecting",
              "name": "connecting",
              "meta": {
                "added": [
                  "v6.1.0"
                ],
                "changes": []
              },
              "desc": "<p>If <code>true</code> -\n<a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect(options[, connectListener])</code></a>\nwas called and haven&#39;t yet finished. Will be set to <code>false</code> before emitting\n<code>&#39;connect&#39;</code> event and/or calling\n<a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect(options[, connectListener])</code></a>&#39;s\ncallback.</p>\n"
            },
            {
              "textRaw": "`destroyed` {boolean} Indicates if the connection is destroyed or not. Once a connection is destroyed no further data can be transferred using it. ",
              "type": "boolean",
              "name": "destroyed",
              "desc": "Indicates if the connection is destroyed or not. Once a connection is destroyed no further data can be transferred using it.",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} The socket itself. ",
                    "name": "return",
                    "type": "net.Socket",
                    "desc": "The socket itself."
                  },
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data",
                      "optional": true
                    },
                    {
                      "name": "encoding",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "socket.localAddress",
              "name": "localAddress",
              "meta": {
                "added": [
                  "v0.9.6"
                ],
                "changes": []
              },
              "desc": "<p>The string representation of the local IP address the remote client is\nconnecting on. For example, in a server listening on <code>&#39;0.0.0.0&#39;</code>, if a client\nconnects on <code>&#39;192.168.1.1&#39;</code>, the value of <code>socket.localAddress</code> would be\n<code>&#39;192.168.1.1&#39;</code>.</p>\n"
            },
            {
              "textRaw": "socket.localPort",
              "name": "localPort",
              "meta": {
                "added": [
                  "v0.9.6"
                ],
                "changes": []
              },
              "desc": "<p>The numeric representation of the local port. For example,\n<code>80</code> or <code>21</code>.</p>\n"
            },
            {
              "textRaw": "socket.remoteAddress",
              "name": "remoteAddress",
              "meta": {
                "added": [
                  "v0.5.10"
                ],
                "changes": []
              },
              "desc": "<p>The string representation of the remote IP address. For example,\n<code>&#39;74.125.127.100&#39;</code> or <code>&#39;2001:4860:a005::68&#39;</code>. Value may be <code>undefined</code> if\nthe socket is destroyed (for example, if the client disconnected).</p>\n"
            },
            {
              "textRaw": "socket.remoteFamily",
              "name": "remoteFamily",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": []
              },
              "desc": "<p>The string representation of the remote IP family. <code>&#39;IPv4&#39;</code> or <code>&#39;IPv6&#39;</code>.</p>\n"
            },
            {
              "textRaw": "socket.remotePort",
              "name": "remotePort",
              "meta": {
                "added": [
                  "v0.5.10"
                ],
                "changes": []
              },
              "desc": "<p>The numeric representation of the remote port. For example,\n<code>80</code> or <code>21</code>.</p>\n"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ],
              "desc": "<p>Creates a new socket object.</p>\n<ul>\n<li><code>options</code> {Object} Available options are:<ul>\n<li><code>fd</code> {number} If specified, wrap around an existing socket with\nthe given file descriptor, otherwise a new socket will be created.</li>\n<li><code>allowHalfOpen</code> {boolean} Indicates whether half-opened TCP connections\nare allowed. See <a href=\"#net_net_createserver_options_connectionlistener\"><code>net.createServer()</code></a> and the <a href=\"#stream_event_end\"><code>&#39;end&#39;</code></a> event\nfor details. <strong>Default:</strong> <code>false</code>.</li>\n<li><code>readable</code> {boolean} Allow reads on the socket when an <code>fd</code> is passed,\notherwise ignored. <strong>Default:</strong> <code>false</code>.</li>\n<li><code>writable</code> {boolean} Allow writes on the socket when an <code>fd</code> is passed,\notherwise ignored. <strong>Default:</strong> <code>false</code>.</li>\n</ul>\n</li>\n<li>Returns: {net.Socket}</li>\n</ul>\n<p>The newly created socket can be either a TCP socket or a streaming <a href=\"#net_ipc_support\">IPC</a>\nendpoint, depending on what it <a href=\"#net_socket_connect\"><code>connect()</code></a> to.</p>\n"
            }
          ]
        }
      ],
      "methods": [
        {
          "textRaw": "net.connect()",
          "type": "method",
          "name": "connect",
          "desc": "<p>Aliases to\n<a href=\"#net_net_createconnection\"><code>net.createConnection()</code></a>.</p>\n<p>Possible signatures:</p>\n<ul>\n<li><a href=\"#net_net_connect_options_connectlistener\"><code>net.connect(options[, connectListener])</code></a></li>\n<li><a href=\"#net_net_connect_path_connectlistener\"><code>net.connect(path[, connectListener])</code></a> for <a href=\"#net_ipc_support\">IPC</a>\nconnections.</li>\n<li><a href=\"#net_net_connect_port_host_connectlistener\"><code>net.connect(port[, host][, connectListener])</code></a>\nfor TCP connections.</li>\n</ul>\n",
          "methods": [
            {
              "textRaw": "net.connect(options[, connectListener])",
              "type": "method",
              "name": "connect",
              "meta": {
                "added": [
                  "v0.7.0"
                ],
                "changes": []
              },
              "desc": "<p>Alias to\n<a href=\"#net_net_createconnection_options_connectlistener\"><code>net.createConnection(options[, connectListener])</code></a>.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "options"
                    },
                    {
                      "name": "connectListener",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "net.connect(path[, connectListener])",
              "type": "method",
              "name": "connect",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "desc": "<p>Alias to\n<a href=\"#net_net_createconnection_path_connectlistener\"><code>net.createConnection(path[, connectListener])</code></a>.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "connectListener",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "net.connect(port[, host][, connectListener])",
              "type": "method",
              "name": "connect",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "desc": "<p>Alias to\n<a href=\"#net_net_createconnection_port_host_connectlistener\"><code>net.createConnection(port[, host][, connectListener])</code></a>.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "port"
                    },
                    {
                      "name": "host",
                      "optional": true
                    },
                    {
                      "name": "connectListener",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ],
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "net.createConnection()",
          "type": "method",
          "name": "createConnection",
          "desc": "<p>A factory function, which creates a new <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>,\nimmediately initiates connection with <a href=\"#net_socket_connect\"><code>socket.connect()</code></a>,\nthen returns the <code>net.Socket</code> that starts the connection.</p>\n<p>When the connection is established, a <a href=\"#net_event_connect\"><code>&#39;connect&#39;</code></a> event will be emitted\non the returned socket. The last parameter <code>connectListener</code>, if supplied,\nwill be added as a listener for the <a href=\"#net_event_connect\"><code>&#39;connect&#39;</code></a> event <strong>once</strong>.</p>\n<p>Possible signatures:</p>\n<ul>\n<li><a href=\"#net_net_createconnection_options_connectlistener\"><code>net.createConnection(options[, connectListener])</code></a></li>\n<li><a href=\"#net_net_createconnection_path_connectlistener\"><code>net.createConnection(path[, connectListener])</code></a>\nfor <a href=\"#net_ipc_support\">IPC</a> connections.</li>\n<li><a href=\"#net_net_createconnection_port_host_connectlistener\"><code>net.createConnection(port[, host][, connectListener])</code></a>\nfor TCP connections.</li>\n</ul>\n<p>The <a href=\"#net_net_connect\"><code>net.connect()</code></a> function is an alias to this function.</p>\n",
          "methods": [
            {
              "textRaw": "net.createConnection(options[, connectListener])",
              "type": "method",
              "name": "createConnection",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} The newly created socket used to start the connection. ",
                    "name": "return",
                    "type": "net.Socket",
                    "desc": "The newly created socket used to start the connection."
                  },
                  "params": [
                    {
                      "textRaw": "`options` {Object} Required. Will be passed to both the [`new net.Socket([options])`][`new net.Socket(options)`] call and the [`socket.connect(options[, connectListener])`][`socket.connect(options)`] method. ",
                      "name": "options",
                      "type": "Object",
                      "desc": "Required. Will be passed to both the [`new net.Socket([options])`][`new net.Socket(options)`] call and the [`socket.connect(options[, connectListener])`][`socket.connect(options)`] method."
                    },
                    {
                      "textRaw": "`connectListener` {Function} Common parameter of the [`net.createConnection()`][] functions. If supplied, will be added as a listener for the [`'connect'`][] event on the returned socket once. ",
                      "name": "connectListener",
                      "type": "Function",
                      "desc": "Common parameter of the [`net.createConnection()`][] functions. If supplied, will be added as a listener for the [`'connect'`][] event on the returned socket once.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "options"
                    },
                    {
                      "name": "connectListener",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>For available options, see\n<a href=\"#net_new_net_socket_options\"><code>new net.Socket([options])</code></a>\nand <a href=\"#net_socket_connect_options_connectlistener\"><code>socket.connect(options[, connectListener])</code></a>.</p>\n<p>Additional options:</p>\n<ul>\n<li><code>timeout</code> {number} If set, will be used to call\n<a href=\"#net_socket_settimeout_timeout_callback\"><code>socket.setTimeout(timeout)</code></a> after the socket is created, but before\nit starts the connection.</li>\n</ul>\n<p>Following is an example of a client of the echo server described\nin the <a href=\"#net_net_createserver_options_connectionlistener\"><code>net.createServer()</code></a> section:</p>\n<pre><code class=\"lang-js\">const net = require(&#39;net&#39;);\nconst client = net.createConnection({ port: 8124 }, () =&gt; {\n  // &#39;connect&#39; listener\n  console.log(&#39;connected to server!&#39;);\n  client.write(&#39;world!\\r\\n&#39;);\n});\nclient.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data.toString());\n  client.end();\n});\nclient.on(&#39;end&#39;, () =&gt; {\n  console.log(&#39;disconnected from server&#39;);\n});\n</code></pre>\n<p>To connect on the socket <code>/tmp/echo.sock</code> the second line would just be\nchanged to:</p>\n<pre><code class=\"lang-js\">const client = net.createConnection({ path: &#39;/tmp/echo.sock&#39; });\n</code></pre>\n"
            },
            {
              "textRaw": "net.createConnection(path[, connectListener])",
              "type": "method",
              "name": "createConnection",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} The newly created socket used to start the connection. ",
                    "name": "return",
                    "type": "net.Socket",
                    "desc": "The newly created socket used to start the connection."
                  },
                  "params": [
                    {
                      "textRaw": "`path` {string} Path the socket should connect to. Will be passed to [`socket.connect(path[, connectListener])`][`socket.connect(path)`]. See [Identifying paths for IPC connections][]. ",
                      "name": "path",
                      "type": "string",
                      "desc": "Path the socket should connect to. Will be passed to [`socket.connect(path[, connectListener])`][`socket.connect(path)`]. See [Identifying paths for IPC connections][]."
                    },
                    {
                      "textRaw": "`connectListener` {Function} Common parameter of the [`net.createConnection()`][] functions, an \"once\" listener for the `'connect'` event on the initiating socket. Will be passed to [`socket.connect(path[, connectListener])`][`socket.connect(path)`]. ",
                      "name": "connectListener",
                      "type": "Function",
                      "desc": "Common parameter of the [`net.createConnection()`][] functions, an \"once\" listener for the `'connect'` event on the initiating socket. Will be passed to [`socket.connect(path[, connectListener])`][`socket.connect(path)`].",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "path"
                    },
                    {
                      "name": "connectListener",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Initiates an <a href=\"#net_ipc_support\">IPC</a> connection.</p>\n<p>This function creates a new <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> with all options set to default,\nimmediately initiates connection with\n<a href=\"#net_socket_connect_path_connectlistener\"><code>socket.connect(path[, connectListener])</code></a>,\nthen returns the <code>net.Socket</code> that starts the connection.</p>\n"
            },
            {
              "textRaw": "net.createConnection(port[, host][, connectListener])",
              "type": "method",
              "name": "createConnection",
              "meta": {
                "added": [
                  "v0.1.90"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {net.Socket} The newly created socket used to start the connection. ",
                    "name": "return",
                    "type": "net.Socket",
                    "desc": "The newly created socket used to start the connection."
                  },
                  "params": [
                    {
                      "textRaw": "`port` {number} Port the socket should connect to. Will be passed to [`socket.connect(port[, host][, connectListener])`][`socket.connect(port, host)`]. ",
                      "name": "port",
                      "type": "number",
                      "desc": "Port the socket should connect to. Will be passed to [`socket.connect(port[, host][, connectListener])`][`socket.connect(port, host)`]."
                    },
                    {
                      "textRaw": "`host` {string} Host the socket should connect to. Will be passed to [`socket.connect(port[, host][, connectListener])`][`socket.connect(port, host)`].  **Default:** `'localhost'`. ",
                      "name": "host",
                      "type": "string",
                      "default": "`'localhost'`",
                      "desc": "Host the socket should connect to. Will be passed to [`socket.connect(port[, host][, connectListener])`][`socket.connect(port, host)`].",
                      "optional": true
                    },
                    {
                      "textRaw": "`connectListener` {Function} Common parameter of the [`net.createConnection()`][] functions, an \"once\" listener for the `'connect'` event on the initiating socket. Will be passed to [`socket.connect(path[, connectListener])`][`socket.connect(port, host)`]. ",
                      "name": "connectListener",
                      "type": "Function",
                      "desc": "Common parameter of the [`net.createConnection()`][] functions, an \"once\" listener for the `'connect'` event on the initiating socket. Will be passed to [`socket.connect(path[, connectListener])`][`socket.connect(port, host)`].",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "port"
                    },
                    {
                      "name": "host",
                      "optional": true
                    },
                    {
                      "name": "connectListener",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Initiates a TCP connection.</p>\n<p>This function creates a new <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> with all options set to default,\nimmediately initiates connection with\n<a href=\"#net_socket_connect_port_host_connectlistener\"><code>socket.connect(port[, host][, connectListener])</code></a>,\nthen returns the <code>net.Socket</code> that starts the connection.</p>\n"
            }
          ],
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "net.createServer([options][, connectionListener])",
          "type": "method",
          "name": "createServer",
          "meta": {
            "added": [
              "v0.5.0"
            ],
            "changes": []
          },
          "desc": "<p>Creates a new TCP or <a href=\"#net_ipc_support\">IPC</a> server.</p>\n<ul>\n<li><code>options</code> {Object}<ul>\n<li><code>allowHalfOpen</code> {boolean} Indicates whether half-opened TCP\nconnections are allowed. <strong>Default:</strong> <code>false</code>.</li>\n<li><code>pauseOnConnect</code> {boolean} Indicates whether the socket should be\npaused on incoming connections. <strong>Default:</strong> <code>false</code>.</li>\n</ul>\n</li>\n<li><code>connectionListener</code> {Function} Automatically set as a listener for the\n<a href=\"#net_event_connection\"><code>&#39;connection&#39;</code></a> event.</li>\n<li>Returns: {net.Server}</li>\n</ul>\n<p>If <code>allowHalfOpen</code> is set to <code>true</code>, when the other end of the socket\nsends a FIN packet, the server will only send a FIN packet back when\n<a href=\"#net_socket_end_data_encoding\"><code>socket.end()</code></a> is explicitly called, until then the connection is\nhalf-closed (non-readable but still writable). See <a href=\"#stream_event_end\"><code>&#39;end&#39;</code></a> event\nand <a href=\"https://tools.ietf.org/html/rfc1122\">RFC 1122</a> (section 4.2.2.13) for more information.</p>\n<p>If <code>pauseOnConnect</code> is set to <code>true</code>, then the socket associated with each\nincoming connection will be paused, and no data will be read from its handle.\nThis allows connections to be passed between processes without any data being\nread by the original process. To begin reading data from a paused socket, call\n<a href=\"#net_socket_resume\"><code>socket.resume()</code></a>.</p>\n<p>The server can be a TCP server or an <a href=\"#net_ipc_support\">IPC</a> server, depending on what it\n<a href=\"net.html#net_server_listen\"><code>listen()</code></a> to.</p>\n<p>Here is an example of an TCP echo server which listens for connections\non port 8124:</p>\n<pre><code class=\"lang-js\">const net = require(&#39;net&#39;);\nconst server = net.createServer((c) =&gt; {\n  // &#39;connection&#39; listener\n  console.log(&#39;client connected&#39;);\n  c.on(&#39;end&#39;, () =&gt; {\n    console.log(&#39;client disconnected&#39;);\n  });\n  c.write(&#39;hello\\r\\n&#39;);\n  c.pipe(c);\n});\nserver.on(&#39;error&#39;, (err) =&gt; {\n  throw err;\n});\nserver.listen(8124, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n</code></pre>\n<p>Test this by using <code>telnet</code>:</p>\n<pre><code class=\"lang-console\">$ telnet localhost 8124\n</code></pre>\n<p>To listen on the socket <code>/tmp/echo.sock</code> the third line from the last would\njust be changed to:</p>\n<pre><code class=\"lang-js\">server.listen(&#39;/tmp/echo.sock&#39;, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n</code></pre>\n<p>Use <code>nc</code> to connect to a UNIX domain socket server:</p>\n<pre><code class=\"lang-console\">$ nc -U /tmp/echo.sock\n</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "connectionListener",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "net.isIP(input)",
          "type": "method",
          "name": "isIP",
          "meta": {
            "added": [
              "v0.3.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {integer} ",
                "name": "return",
                "type": "integer"
              },
              "params": [
                {
                  "name": "input"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "input"
                }
              ]
            }
          ],
          "desc": "<p>Tests if input is an IP address. Returns <code>0</code> for invalid strings,\nreturns <code>4</code> for IP version 4 addresses, and returns <code>6</code> for IP version 6\naddresses.</p>\n"
        },
        {
          "textRaw": "net.isIPv4(input)",
          "type": "method",
          "name": "isIPv4",
          "meta": {
            "added": [
              "v0.3.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {boolean} ",
                "name": "return",
                "type": "boolean"
              },
              "params": [
                {
                  "name": "input"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "input"
                }
              ]
            }
          ],
          "desc": "<p>Returns <code>true</code> if input is a version 4 IP address, otherwise returns <code>false</code>.</p>\n"
        },
        {
          "textRaw": "net.isIPv6(input)",
          "type": "method",
          "name": "isIPv6",
          "meta": {
            "added": [
              "v0.3.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {boolean} ",
                "name": "return",
                "type": "boolean"
              },
              "params": [
                {
                  "name": "input"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "input"
                }
              ]
            }
          ],
          "desc": "<p>Returns <code>true</code> if input is a version 6 IP address, otherwise returns <code>false</code>.</p>\n<!-- [end-include:net.md] -->\n<!-- [start-include:os.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "Net"
    },
    {
      "textRaw": "OS",
      "name": "os",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>os</code> module provides a number of operating system-related utility methods.\nIt can be accessed using:</p>\n<pre><code class=\"lang-js\">const os = require(&#39;os&#39;);\n</code></pre>\n",
      "properties": [
        {
          "textRaw": "`EOL` {string} ",
          "type": "string",
          "name": "EOL",
          "meta": {
            "added": [
              "v0.7.8"
            ],
            "changes": []
          },
          "desc": "<p>A string constant defining the operating system-specific end-of-line marker:</p>\n<ul>\n<li><code>\\n</code> on POSIX</li>\n<li><code>\\r\\n</code> on Windows</li>\n</ul>\n"
        },
        {
          "textRaw": "`constants` {Object} ",
          "type": "Object",
          "name": "constants",
          "meta": {
            "added": [
              "v6.3.0"
            ],
            "changes": []
          },
          "desc": "<p>Returns an object containing commonly used operating system specific constants\nfor error codes, process signals, and so on. The specific constants currently\ndefined are described in <a href=\"#os_os_constants_1\">OS Constants</a>.</p>\n"
        }
      ],
      "methods": [
        {
          "textRaw": "os.arch()",
          "type": "method",
          "name": "arch",
          "meta": {
            "added": [
              "v0.5.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.arch()</code> method returns a string identifying the operating system CPU\narchitecture for which the Node.js binary was compiled.</p>\n<p>The current possible values are: <code>&#39;arm&#39;</code>, <code>&#39;arm64&#39;</code>, <code>&#39;ia32&#39;</code>, <code>&#39;mips&#39;</code>,\n<code>&#39;mipsel&#39;</code>, <code>&#39;ppc&#39;</code>, <code>&#39;ppc64&#39;</code>, <code>&#39;s390&#39;</code>, <code>&#39;s390x&#39;</code>, <code>&#39;x32&#39;</code>, and <code>&#39;x64&#39;</code>.</p>\n<p>Equivalent to <a href=\"process.html#process_process_arch\"><code>process.arch</code></a>.</p>\n"
        },
        {
          "textRaw": "os.cpus()",
          "type": "method",
          "name": "cpus",
          "meta": {
            "added": [
              "v0.3.3"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Object[]} ",
                "name": "return",
                "type": "Object[]"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.cpus()</code> method returns an array of objects containing information about\neach logical CPU core.</p>\n<p>The properties included on each object include:</p>\n<ul>\n<li><code>model</code> {string}</li>\n<li><code>speed</code> {number} (in MHz)</li>\n<li><code>times</code> {Object}<ul>\n<li><code>user</code> {number} The number of milliseconds the CPU has spent in user mode.</li>\n<li><code>nice</code> {number} The number of milliseconds the CPU has spent in nice mode.</li>\n<li><code>sys</code> {number} The number of milliseconds the CPU has spent in sys mode.</li>\n<li><code>idle</code> {number} The number of milliseconds the CPU has spent in idle mode.</li>\n<li><code>irq</code> {number} The number of milliseconds the CPU has spent in irq mode.</li>\n</ul>\n</li>\n</ul>\n<!-- eslint-disable semi -->\n<pre><code class=\"lang-js\">[\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 252020,\n      nice: 0,\n      sys: 30340,\n      idle: 1070356870,\n      irq: 0\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 306960,\n      nice: 0,\n      sys: 26980,\n      idle: 1071569080,\n      irq: 0\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 248450,\n      nice: 0,\n      sys: 21750,\n      idle: 1070919370,\n      irq: 0\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 256880,\n      nice: 0,\n      sys: 19430,\n      idle: 1070905480,\n      irq: 20\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 511580,\n      nice: 20,\n      sys: 40900,\n      idle: 1070842510,\n      irq: 0\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 291660,\n      nice: 0,\n      sys: 34360,\n      idle: 1070888000,\n      irq: 10\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 308260,\n      nice: 0,\n      sys: 55410,\n      idle: 1071129970,\n      irq: 880\n    }\n  },\n  {\n    model: &#39;Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz&#39;,\n    speed: 2926,\n    times: {\n      user: 266450,\n      nice: 1480,\n      sys: 34920,\n      idle: 1072572010,\n      irq: 30\n    }\n  }\n]\n</code></pre>\n<p>Because <code>nice</code> values are UNIX-specific, on Windows the <code>nice</code> values of all\nprocessors are always 0.</p>\n"
        },
        {
          "textRaw": "os.endianness()",
          "type": "method",
          "name": "endianness",
          "meta": {
            "added": [
              "v0.9.4"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.endianness()</code> method returns a string identifying the endianness of the\nCPU <em>for which the Node.js binary was compiled</em>.</p>\n<p>Possible values are:</p>\n<ul>\n<li><code>&#39;BE&#39;</code> for big endian</li>\n<li><code>&#39;LE&#39;</code> for little endian.</li>\n</ul>\n"
        },
        {
          "textRaw": "os.freemem()",
          "type": "method",
          "name": "freemem",
          "meta": {
            "added": [
              "v0.3.3"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {integer} ",
                "name": "return",
                "type": "integer"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.freemem()</code> method returns the amount of free system memory in bytes as\nan integer.</p>\n"
        },
        {
          "textRaw": "os.homedir()",
          "type": "method",
          "name": "homedir",
          "meta": {
            "added": [
              "v2.3.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.homedir()</code> method returns the home directory of the current user as a\nstring.</p>\n"
        },
        {
          "textRaw": "os.hostname()",
          "type": "method",
          "name": "hostname",
          "meta": {
            "added": [
              "v0.3.3"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.hostname()</code> method returns the hostname of the operating system as a\nstring.</p>\n"
        },
        {
          "textRaw": "os.loadavg()",
          "type": "method",
          "name": "loadavg",
          "meta": {
            "added": [
              "v0.3.3"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {number[]} ",
                "name": "return",
                "type": "number[]"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.loadavg()</code> method returns an array containing the 1, 5, and 15 minute\nload averages.</p>\n<p>The load average is a measure of system activity, calculated by the operating\nsystem and expressed as a fractional number. As a rule of thumb, the load\naverage should ideally be less than the number of logical CPUs in the system.</p>\n<p>The load average is a UNIX-specific concept with no real equivalent on\nWindows platforms. On Windows, the return value is always <code>[0, 0, 0]</code>.</p>\n"
        },
        {
          "textRaw": "os.networkInterfaces()",
          "type": "method",
          "name": "networkInterfaces",
          "meta": {
            "added": [
              "v0.6.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Object} ",
                "name": "return",
                "type": "Object"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.networkInterfaces()</code> method returns an object containing only network\ninterfaces that have been assigned a network address.</p>\n<p>Each key on the returned object identifies a network interface. The associated\nvalue is an array of objects that each describe an assigned network address.</p>\n<p>The properties available on the assigned network address object include:</p>\n<ul>\n<li><code>address</code> {string} The assigned IPv4 or IPv6 address</li>\n<li><code>netmask</code> {string} The IPv4 or IPv6 network mask</li>\n<li><code>family</code> {string} Either <code>IPv4</code> or <code>IPv6</code></li>\n<li><code>mac</code> {string} The MAC address of the network interface</li>\n<li><code>internal</code> {boolean} <code>true</code> if the network interface is a loopback or\nsimilar interface that is not remotely accessible; otherwise <code>false</code></li>\n<li><code>scopeid</code> {number} The numeric IPv6 scope ID (only specified when <code>family</code>\nis <code>IPv6</code>)</li>\n<li><code>cidr</code> {string} The assigned IPv4 or IPv6 address with the routing prefix\nin CIDR notation. If the <code>netmask</code> is invalid, this property is set\nto <code>null</code>.</li>\n</ul>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  lo: [\n    {\n      address: &#39;127.0.0.1&#39;,\n      netmask: &#39;255.0.0.0&#39;,\n      family: &#39;IPv4&#39;,\n      mac: &#39;00:00:00:00:00:00&#39;,\n      internal: true,\n      cidr: &#39;127.0.0.1/8&#39;\n    },\n    {\n      address: &#39;::1&#39;,\n      netmask: &#39;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&#39;,\n      family: &#39;IPv6&#39;,\n      mac: &#39;00:00:00:00:00:00&#39;,\n      internal: true,\n      cidr: &#39;::1/128&#39;\n    }\n  ],\n  eth0: [\n    {\n      address: &#39;192.168.1.108&#39;,\n      netmask: &#39;255.255.255.0&#39;,\n      family: &#39;IPv4&#39;,\n      mac: &#39;01:02:03:0a:0b:0c&#39;,\n      internal: false,\n      cidr: &#39;192.168.1.108/24&#39;\n    },\n    {\n      address: &#39;fe80::a00:27ff:fe4e:66a1&#39;,\n      netmask: &#39;ffff:ffff:ffff:ffff::&#39;,\n      family: &#39;IPv6&#39;,\n      mac: &#39;01:02:03:0a:0b:0c&#39;,\n      internal: false,\n      cidr: &#39;fe80::a00:27ff:fe4e:66a1/64&#39;\n    }\n  ]\n}\n</code></pre>\n"
        },
        {
          "textRaw": "os.platform()",
          "type": "method",
          "name": "platform",
          "meta": {
            "added": [
              "v0.5.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.platform()</code> method returns a string identifying the operating system\nplatform as set during compile time of Node.js.</p>\n<p>Currently possible values are:</p>\n<ul>\n<li><code>&#39;aix&#39;</code></li>\n<li><code>&#39;darwin&#39;</code></li>\n<li><code>&#39;freebsd&#39;</code></li>\n<li><code>&#39;linux&#39;</code></li>\n<li><code>&#39;openbsd&#39;</code></li>\n<li><code>&#39;sunos&#39;</code></li>\n<li><code>&#39;win32&#39;</code></li>\n</ul>\n<p>Equivalent to <a href=\"process.html#process_process_platform\"><code>process.platform</code></a>.</p>\n<p>The value <code>&#39;android&#39;</code> may also be returned if the Node.js is built on the\nAndroid operating system. However, Android support in Node.js is considered\n<a href=\"https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os\">to be experimental</a> at this time.</p>\n"
        },
        {
          "textRaw": "os.release()",
          "type": "method",
          "name": "release",
          "meta": {
            "added": [
              "v0.3.3"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.release()</code> method returns a string identifying the operating system\nrelease.</p>\n<p>On POSIX systems, the operating system release is determined by calling\n<a href=\"https://linux.die.net/man/3/uname\">uname(3)</a>. On Windows, <code>GetVersionExW()</code> is used. Please see\n<a href=\"https://en.wikipedia.org/wiki/Uname#Examples\">https://en.wikipedia.org/wiki/Uname#Examples</a> for more information.</p>\n"
        },
        {
          "textRaw": "os.tmpdir()",
          "type": "method",
          "name": "tmpdir",
          "meta": {
            "added": [
              "v0.9.9"
            ],
            "changes": [
              {
                "version": "v2.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/747",
                "description": "This function is now cross-platform consistent and no longer returns a path with a trailing slash on any platform"
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.tmpdir()</code> method returns a string specifying the operating system&#39;s\ndefault directory for temporary files.</p>\n"
        },
        {
          "textRaw": "os.totalmem()",
          "type": "method",
          "name": "totalmem",
          "meta": {
            "added": [
              "v0.3.3"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {integer} ",
                "name": "return",
                "type": "integer"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.totalmem()</code> method returns the total amount of system memory in bytes\nas an integer.</p>\n"
        },
        {
          "textRaw": "os.type()",
          "type": "method",
          "name": "type",
          "meta": {
            "added": [
              "v0.3.3"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.type()</code> method returns a string identifying the operating system name\nas returned by <a href=\"https://linux.die.net/man/3/uname\">uname(3)</a>. For example <code>&#39;Linux&#39;</code> on Linux, <code>&#39;Darwin&#39;</code> on macOS\nand <code>&#39;Windows_NT&#39;</code> on Windows.</p>\n<p>Please see <a href=\"https://en.wikipedia.org/wiki/Uname#Examples\">https://en.wikipedia.org/wiki/Uname#Examples</a> for additional\ninformation about the output of running <a href=\"https://linux.die.net/man/3/uname\">uname(3)</a> on various operating\nsystems.</p>\n"
        },
        {
          "textRaw": "os.uptime()",
          "type": "method",
          "name": "uptime",
          "meta": {
            "added": [
              "v0.3.3"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/20129",
                "description": "The result of this function no longer contains a fraction component on Windows."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {integer} ",
                "name": "return",
                "type": "integer"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>os.uptime()</code> method returns the system uptime in number of seconds.</p>\n"
        },
        {
          "textRaw": "os.userInfo([options])",
          "type": "method",
          "name": "userInfo",
          "meta": {
            "added": [
              "v6.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Object} ",
                "name": "return",
                "type": "Object"
              },
              "params": [
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`encoding` {string} Character encoding used to interpret resulting strings. If `encoding` is set to `'buffer'`, the `username`, `shell`, and `homedir` values will be `Buffer` instances. **Default:** `'utf8'`. ",
                      "name": "encoding",
                      "type": "string",
                      "default": "`'utf8'`",
                      "desc": "Character encoding used to interpret resulting strings. If `encoding` is set to `'buffer'`, the `username`, `shell`, and `homedir` values will be `Buffer` instances."
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>os.userInfo()</code> method returns information about the currently effective\nuser — on POSIX platforms, this is typically a subset of the password file. The\nreturned object includes the <code>username</code>, <code>uid</code>, <code>gid</code>, <code>shell</code>, and <code>homedir</code>.\nOn Windows, the <code>uid</code> and <code>gid</code> fields are <code>-1</code>, and <code>shell</code> is <code>null</code>.</p>\n<p>The value of <code>homedir</code> returned by <code>os.userInfo()</code> is provided by the operating\nsystem. This differs from the result of <code>os.homedir()</code>, which queries several\nenvironment variables for the home directory before falling back to the\noperating system response.</p>\n"
        }
      ],
      "modules": [
        {
          "textRaw": "OS Constants",
          "name": "os_constants",
          "desc": "<p>The following constants are exported by <code>os.constants</code>.</p>\n<p>Not all constants will be available on every operating system.</p>\n",
          "modules": [
            {
              "textRaw": "Signal Constants",
              "name": "signal_constants",
              "meta": {
                "changes": [
                  {
                    "version": "v5.11.0",
                    "pr-url": "https://github.com/nodejs/node/pull/6093",
                    "description": "Added support for `SIGINFO`."
                  }
                ]
              },
              "desc": "<p>The following signal constants are exported by <code>os.constants.signals</code>:</p>\n<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>SIGHUP</code></td>\n    <td>Sent to indicate when a controlling terminal is closed or a parent\n    process exits.</td>\n  </tr>\n  <tr>\n    <td><code>SIGINT</code></td>\n    <td>Sent to indicate when a user wishes to interrupt a process\n    (<code>(Ctrl+C)</code>).</td>\n  </tr>\n  <tr>\n    <td><code>SIGQUIT</code></td>\n    <td>Sent to indicate when a user wishes to terminate a process and perform a\n    core dump.</td>\n  </tr>\n  <tr>\n    <td><code>SIGILL</code></td>\n    <td>Sent to a process to notify that it has attempted to perform an illegal,\n    malformed, unknown, or privileged instruction.</td>\n  </tr>\n  <tr>\n    <td><code>SIGTRAP</code></td>\n    <td>Sent to a process when an exception has occurred.</td>\n  </tr>\n  <tr>\n    <td><code>SIGABRT</code></td>\n    <td>Sent to a process to request that it abort.</td>\n  </tr>\n  <tr>\n    <td><code>SIGIOT</code></td>\n    <td>Synonym for <code>SIGABRT</code></td>\n  </tr>\n  <tr>\n    <td><code>SIGBUS</code></td>\n    <td>Sent to a process to notify that it has caused a bus error.</td>\n  </tr>\n  <tr>\n    <td><code>SIGFPE</code></td>\n    <td>Sent to a process to notify that it has performed an illegal arithmetic\n    operation.</td>\n  </tr>\n  <tr>\n    <td><code>SIGKILL</code></td>\n    <td>Sent to a process to terminate it immediately.</td>\n  </tr>\n  <tr>\n    <td><code>SIGUSR1</code> <code>SIGUSR2</code></td>\n    <td>Sent to a process to identify user-defined conditions.</td>\n  </tr>\n  <tr>\n    <td><code>SIGSEGV</code></td>\n    <td>Sent to a process to notify of a segmentation fault.</td>\n  </tr>\n  <tr>\n    <td><code>SIGPIPE</code></td>\n    <td>Sent to a process when it has attempted to write to a disconnected\n    pipe.</td>\n  </tr>\n  <tr>\n    <td><code>SIGALRM</code></td>\n    <td>Sent to a process when a system timer elapses.</td>\n  </tr>\n  <tr>\n    <td><code>SIGTERM</code></td>\n    <td>Sent to a process to request termination.</td>\n  </tr>\n  <tr>\n    <td><code>SIGCHLD</code></td>\n    <td>Sent to a process when a child process terminates.</td>\n  </tr>\n  <tr>\n    <td><code>SIGSTKFLT</code></td>\n    <td>Sent to a process to indicate a stack fault on a coprocessor.</td>\n  </tr>\n  <tr>\n    <td><code>SIGCONT</code></td>\n    <td>Sent to instruct the operating system to continue a paused process.</td>\n  </tr>\n  <tr>\n    <td><code>SIGSTOP</code></td>\n    <td>Sent to instruct the operating system to halt a process.</td>\n  </tr>\n  <tr>\n    <td><code>SIGTSTP</code></td>\n    <td>Sent to a process to request it to stop.</td>\n  </tr>\n  <tr>\n    <td><code>SIGBREAK</code></td>\n    <td>Sent to indicate when a user wishes to interrupt a process.</td>\n  </tr>\n  <tr>\n    <td><code>SIGTTIN</code></td>\n    <td>Sent to a process when it reads from the TTY while in the\n    background.</td>\n  </tr>\n  <tr>\n    <td><code>SIGTTOU</code></td>\n    <td>Sent to a process when it writes to the TTY while in the\n    background.</td>\n  </tr>\n  <tr>\n    <td><code>SIGURG</code></td>\n    <td>Sent to a process when a socket has urgent data to read.</td>\n  </tr>\n  <tr>\n    <td><code>SIGXCPU</code></td>\n    <td>Sent to a process when it has exceeded its limit on CPU usage.</td>\n  </tr>\n  <tr>\n    <td><code>SIGXFSZ</code></td>\n    <td>Sent to a process when it grows a file larger than the maximum\n    allowed.</td>\n  </tr>\n  <tr>\n    <td><code>SIGVTALRM</code></td>\n    <td>Sent to a process when a virtual timer has elapsed.</td>\n  </tr>\n  <tr>\n    <td><code>SIGPROF</code></td>\n    <td>Sent to a process when a system timer has elapsed.</td>\n  </tr>\n  <tr>\n    <td><code>SIGWINCH</code></td>\n    <td>Sent to a process when the controlling terminal has changed its\n    size.</td>\n  </tr>\n  <tr>\n    <td><code>SIGIO</code></td>\n    <td>Sent to a process when I/O is available.</td>\n  </tr>\n  <tr>\n    <td><code>SIGPOLL</code></td>\n    <td>Synonym for <code>SIGIO</code></td>\n  </tr>\n  <tr>\n    <td><code>SIGLOST</code></td>\n    <td>Sent to a process when a file lock has been lost.</td>\n  </tr>\n  <tr>\n    <td><code>SIGPWR</code></td>\n    <td>Sent to a process to notify of a power failure.</td>\n  </tr>\n  <tr>\n    <td><code>SIGINFO</code></td>\n    <td>Synonym for <code>SIGPWR</code></td>\n  </tr>\n  <tr>\n    <td><code>SIGSYS</code></td>\n    <td>Sent to a process to notify of a bad argument.</td>\n  </tr>\n  <tr>\n    <td><code>SIGUNUSED</code></td>\n    <td>Synonym for <code>SIGSYS</code></td>\n  </tr>\n</table>\n\n",
              "type": "module",
              "displayName": "Signal Constants"
            },
            {
              "textRaw": "Error Constants",
              "name": "error_constants",
              "desc": "<p>The following error constants are exported by <code>os.constants.errno</code>:</p>\n",
              "modules": [
                {
                  "textRaw": "POSIX Error Constants",
                  "name": "posix_error_constants",
                  "desc": "<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>E2BIG</code></td>\n    <td>Indicates that the list of arguments is longer than expected.</td>\n  </tr>\n  <tr>\n    <td><code>EACCES</code></td>\n    <td>Indicates that the operation did not have sufficient permissions.</td>\n  </tr>\n  <tr>\n    <td><code>EADDRINUSE</code></td>\n    <td>Indicates that the network address is already in use.</td>\n  </tr>\n  <tr>\n    <td><code>EADDRNOTAVAIL</code></td>\n    <td>Indicates that the network address is currently unavailable for\n    use.</td>\n  </tr>\n  <tr>\n    <td><code>EAFNOSUPPORT</code></td>\n    <td>Indicates that the network address family is not supported.</td>\n  </tr>\n  <tr>\n    <td><code>EAGAIN</code></td>\n    <td>Indicates that there is currently no data available and to try the\n    operation again later.</td>\n  </tr>\n  <tr>\n    <td><code>EALREADY</code></td>\n    <td>Indicates that the socket already has a pending connection in\n    progress.</td>\n  </tr>\n  <tr>\n    <td><code>EBADF</code></td>\n    <td>Indicates that a file descriptor is not valid.</td>\n  </tr>\n  <tr>\n    <td><code>EBADMSG</code></td>\n    <td>Indicates an invalid data message.</td>\n  </tr>\n  <tr>\n    <td><code>EBUSY</code></td>\n    <td>Indicates that a device or resource is busy.</td>\n  </tr>\n  <tr>\n    <td><code>ECANCELED</code></td>\n    <td>Indicates that an operation was canceled.</td>\n  </tr>\n  <tr>\n    <td><code>ECHILD</code></td>\n    <td>Indicates that there are no child processes.</td>\n  </tr>\n  <tr>\n    <td><code>ECONNABORTED</code></td>\n    <td>Indicates that the network connection has been aborted.</td>\n  </tr>\n  <tr>\n    <td><code>ECONNREFUSED</code></td>\n    <td>Indicates that the network connection has been refused.</td>\n  </tr>\n  <tr>\n    <td><code>ECONNRESET</code></td>\n    <td>Indicates that the network connection has been reset.</td>\n  </tr>\n  <tr>\n    <td><code>EDEADLK</code></td>\n    <td>Indicates that a resource deadlock has been avoided.</td>\n  </tr>\n  <tr>\n    <td><code>EDESTADDRREQ</code></td>\n    <td>Indicates that a destination address is required.</td>\n  </tr>\n  <tr>\n    <td><code>EDOM</code></td>\n    <td>Indicates that an argument is out of the domain of the function.</td>\n  </tr>\n  <tr>\n    <td><code>EDQUOT</code></td>\n    <td>Indicates that the disk quota has been exceeded.</td>\n  </tr>\n  <tr>\n    <td><code>EEXIST</code></td>\n    <td>Indicates that the file already exists.</td>\n  </tr>\n  <tr>\n    <td><code>EFAULT</code></td>\n    <td>Indicates an invalid pointer address.</td>\n  </tr>\n  <tr>\n    <td><code>EFBIG</code></td>\n    <td>Indicates that the file is too large.</td>\n  </tr>\n  <tr>\n    <td><code>EHOSTUNREACH</code></td>\n    <td>Indicates that the host is unreachable.</td>\n  </tr>\n  <tr>\n    <td><code>EIDRM</code></td>\n    <td>Indicates that the identifier has been removed.</td>\n  </tr>\n  <tr>\n    <td><code>EILSEQ</code></td>\n    <td>Indicates an illegal byte sequence.</td>\n  </tr>\n  <tr>\n    <td><code>EINPROGRESS</code></td>\n    <td>Indicates that an operation is already in progress.</td>\n  </tr>\n  <tr>\n    <td><code>EINTR</code></td>\n    <td>Indicates that a function call was interrupted.</td>\n  </tr>\n  <tr>\n    <td><code>EINVAL</code></td>\n    <td>Indicates that an invalid argument was provided.</td>\n  </tr>\n  <tr>\n    <td><code>EIO</code></td>\n    <td>Indicates an otherwise unspecified I/O error.</td>\n  </tr>\n  <tr>\n    <td><code>EISCONN</code></td>\n    <td>Indicates that the socket is connected.</td>\n  </tr>\n  <tr>\n    <td><code>EISDIR</code></td>\n    <td>Indicates that the path is a directory.</td>\n  </tr>\n  <tr>\n    <td><code>ELOOP</code></td>\n    <td>Indicates too many levels of symbolic links in a path.</td>\n  </tr>\n  <tr>\n    <td><code>EMFILE</code></td>\n    <td>Indicates that there are too many open files.</td>\n  </tr>\n  <tr>\n    <td><code>EMLINK</code></td>\n    <td>Indicates that there are too many hard links to a file.</td>\n  </tr>\n  <tr>\n    <td><code>EMSGSIZE</code></td>\n    <td>Indicates that the provided message is too long.</td>\n  </tr>\n  <tr>\n    <td><code>EMULTIHOP</code></td>\n    <td>Indicates that a multihop was attempted.</td>\n  </tr>\n  <tr>\n    <td><code>ENAMETOOLONG</code></td>\n    <td>Indicates that the filename is too long.</td>\n  </tr>\n  <tr>\n    <td><code>ENETDOWN</code></td>\n    <td>Indicates that the network is down.</td>\n  </tr>\n  <tr>\n    <td><code>ENETRESET</code></td>\n    <td>Indicates that the connection has been aborted by the network.</td>\n  </tr>\n  <tr>\n    <td><code>ENETUNREACH</code></td>\n    <td>Indicates that the network is unreachable.</td>\n  </tr>\n  <tr>\n    <td><code>ENFILE</code></td>\n    <td>Indicates too many open files in the system.</td>\n  </tr>\n  <tr>\n    <td><code>ENOBUFS</code></td>\n    <td>Indicates that no buffer space is available.</td>\n  </tr>\n  <tr>\n    <td><code>ENODATA</code></td>\n    <td>Indicates that no message is available on the stream head read\n    queue.</td>\n  </tr>\n  <tr>\n    <td><code>ENODEV</code></td>\n    <td>Indicates that there is no such device.</td>\n  </tr>\n  <tr>\n    <td><code>ENOENT</code></td>\n    <td>Indicates that there is no such file or directory.</td>\n  </tr>\n  <tr>\n    <td><code>ENOEXEC</code></td>\n    <td>Indicates an exec format error.</td>\n  </tr>\n  <tr>\n    <td><code>ENOLCK</code></td>\n    <td>Indicates that there are no locks available.</td>\n  </tr>\n  <tr>\n    <td><code>ENOLINK</code></td>\n    <td>Indications that a link has been severed.</td>\n  </tr>\n  <tr>\n    <td><code>ENOMEM</code></td>\n    <td>Indicates that there is not enough space.</td>\n  </tr>\n  <tr>\n    <td><code>ENOMSG</code></td>\n    <td>Indicates that there is no message of the desired type.</td>\n  </tr>\n  <tr>\n    <td><code>ENOPROTOOPT</code></td>\n    <td>Indicates that a given protocol is not available.</td>\n  </tr>\n  <tr>\n    <td><code>ENOSPC</code></td>\n    <td>Indicates that there is no space available on the device.</td>\n  </tr>\n  <tr>\n    <td><code>ENOSR</code></td>\n    <td>Indicates that there are no stream resources available.</td>\n  </tr>\n  <tr>\n    <td><code>ENOSTR</code></td>\n    <td>Indicates that a given resource is not a stream.</td>\n  </tr>\n  <tr>\n    <td><code>ENOSYS</code></td>\n    <td>Indicates that a function has not been implemented.</td>\n  </tr>\n  <tr>\n    <td><code>ENOTCONN</code></td>\n    <td>Indicates that the socket is not connected.</td>\n  </tr>\n  <tr>\n    <td><code>ENOTDIR</code></td>\n    <td>Indicates that the path is not a directory.</td>\n  </tr>\n  <tr>\n    <td><code>ENOTEMPTY</code></td>\n    <td>Indicates that the directory is not empty.</td>\n  </tr>\n  <tr>\n    <td><code>ENOTSOCK</code></td>\n    <td>Indicates that the given item is not a socket.</td>\n  </tr>\n  <tr>\n    <td><code>ENOTSUP</code></td>\n    <td>Indicates that a given operation is not supported.</td>\n  </tr>\n  <tr>\n    <td><code>ENOTTY</code></td>\n    <td>Indicates an inappropriate I/O control operation.</td>\n  </tr>\n  <tr>\n    <td><code>ENXIO</code></td>\n    <td>Indicates no such device or address.</td>\n  </tr>\n  <tr>\n    <td><code>EOPNOTSUPP</code></td>\n    <td>Indicates that an operation is not supported on the socket.\n    Note that while <code>ENOTSUP</code> and <code>EOPNOTSUPP</code> have the same value on Linux,\n    according to POSIX.1 these error values should be distinct.)</td>\n  </tr>\n  <tr>\n    <td><code>EOVERFLOW</code></td>\n    <td>Indicates that a value is too large to be stored in a given data\n    type.</td>\n  </tr>\n  <tr>\n    <td><code>EPERM</code></td>\n    <td>Indicates that the operation is not permitted.</td>\n  </tr>\n  <tr>\n    <td><code>EPIPE</code></td>\n    <td>Indicates a broken pipe.</td>\n  </tr>\n  <tr>\n    <td><code>EPROTO</code></td>\n    <td>Indicates a protocol error.</td>\n  </tr>\n  <tr>\n    <td><code>EPROTONOSUPPORT</code></td>\n    <td>Indicates that a protocol is not supported.</td>\n  </tr>\n  <tr>\n    <td><code>EPROTOTYPE</code></td>\n    <td>Indicates the wrong type of protocol for a socket.</td>\n  </tr>\n  <tr>\n    <td><code>ERANGE</code></td>\n    <td>Indicates that the results are too large.</td>\n  </tr>\n  <tr>\n    <td><code>EROFS</code></td>\n    <td>Indicates that the file system is read only.</td>\n  </tr>\n  <tr>\n    <td><code>ESPIPE</code></td>\n    <td>Indicates an invalid seek operation.</td>\n  </tr>\n  <tr>\n    <td><code>ESRCH</code></td>\n    <td>Indicates that there is no such process.</td>\n  </tr>\n  <tr>\n    <td><code>ESTALE</code></td>\n    <td>Indicates that the file handle is stale.</td>\n  </tr>\n  <tr>\n    <td><code>ETIME</code></td>\n    <td>Indicates an expired timer.</td>\n  </tr>\n  <tr>\n    <td><code>ETIMEDOUT</code></td>\n    <td>Indicates that the connection timed out.</td>\n  </tr>\n  <tr>\n    <td><code>ETXTBSY</code></td>\n    <td>Indicates that a text file is busy.</td>\n  </tr>\n  <tr>\n    <td><code>EWOULDBLOCK</code></td>\n    <td>Indicates that the operation would block.</td>\n  </tr>\n  <tr>\n    <td><code>EXDEV</code></td>\n    <td>Indicates an improper link.\n  </tr>\n</table>\n\n",
                  "type": "module",
                  "displayName": "POSIX Error Constants"
                },
                {
                  "textRaw": "Windows Specific Error Constants",
                  "name": "windows_specific_error_constants",
                  "desc": "<p>The following error codes are specific to the Windows operating system:</p>\n<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>WSAEINTR</code></td>\n    <td>Indicates an interrupted function call.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEBADF</code></td>\n    <td>Indicates an invalid file handle.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEACCES</code></td>\n    <td>Indicates insufficient permissions to complete the operation.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEFAULT</code></td>\n    <td>Indicates an invalid pointer address.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEINVAL</code></td>\n    <td>Indicates that an invalid argument was passed.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEMFILE</code></td>\n    <td>Indicates that there are too many open files.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEWOULDBLOCK</code></td>\n    <td>Indicates that a resource is temporarily unavailable.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEINPROGRESS</code></td>\n    <td>Indicates that an operation is currently in progress.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEALREADY</code></td>\n    <td>Indicates that an operation is already in progress.</td>\n  </tr>\n  <tr>\n    <td><code>WSAENOTSOCK</code></td>\n    <td>Indicates that the resource is not a socket.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEDESTADDRREQ</code></td>\n    <td>Indicates that a destination address is required.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEMSGSIZE</code></td>\n    <td>Indicates that the message size is too long.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEPROTOTYPE</code></td>\n    <td>Indicates the wrong protocol type for the socket.</td>\n  </tr>\n  <tr>\n    <td><code>WSAENOPROTOOPT</code></td>\n    <td>Indicates a bad protocol option.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEPROTONOSUPPORT</code></td>\n    <td>Indicates that the protocol is not supported.</td>\n  </tr>\n  <tr>\n    <td><code>WSAESOCKTNOSUPPORT</code></td>\n    <td>Indicates that the socket type is not supported.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEOPNOTSUPP</code></td>\n    <td>Indicates that the operation is not supported.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEPFNOSUPPORT</code></td>\n    <td>Indicates that the protocol family is not supported.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEAFNOSUPPORT</code></td>\n    <td>Indicates that the address family is not supported.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEADDRINUSE</code></td>\n    <td>Indicates that the network address is already in use.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEADDRNOTAVAIL</code></td>\n    <td>Indicates that the network address is not available.</td>\n  </tr>\n  <tr>\n    <td><code>WSAENETDOWN</code></td>\n    <td>Indicates that the network is down.</td>\n  </tr>\n  <tr>\n    <td><code>WSAENETUNREACH</code></td>\n    <td>Indicates that the network is unreachable.</td>\n  </tr>\n  <tr>\n    <td><code>WSAENETRESET</code></td>\n    <td>Indicates that the network connection has been reset.</td>\n  </tr>\n  <tr>\n    <td><code>WSAECONNABORTED</code></td>\n    <td>Indicates that the connection has been aborted.</td>\n  </tr>\n  <tr>\n    <td><code>WSAECONNRESET</code></td>\n    <td>Indicates that the connection has been reset by the peer.</td>\n  </tr>\n  <tr>\n    <td><code>WSAENOBUFS</code></td>\n    <td>Indicates that there is no buffer space available.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEISCONN</code></td>\n    <td>Indicates that the socket is already connected.</td>\n  </tr>\n  <tr>\n    <td><code>WSAENOTCONN</code></td>\n    <td>Indicates that the socket is not connected.</td>\n  </tr>\n  <tr>\n    <td><code>WSAESHUTDOWN</code></td>\n    <td>Indicates that data cannot be sent after the socket has been\n    shutdown.</td>\n  </tr>\n  <tr>\n    <td><code>WSAETOOMANYREFS</code></td>\n    <td>Indicates that there are too many references.</td>\n  </tr>\n  <tr>\n    <td><code>WSAETIMEDOUT</code></td>\n    <td>Indicates that the connection has timed out.</td>\n  </tr>\n  <tr>\n    <td><code>WSAECONNREFUSED</code></td>\n    <td>Indicates that the connection has been refused.</td>\n  </tr>\n  <tr>\n    <td><code>WSAELOOP</code></td>\n    <td>Indicates that a name cannot be translated.</td>\n  </tr>\n  <tr>\n    <td><code>WSAENAMETOOLONG</code></td>\n    <td>Indicates that a name was too long.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEHOSTDOWN</code></td>\n    <td>Indicates that a network host is down.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEHOSTUNREACH</code></td>\n    <td>Indicates that there is no route to a network host.</td>\n  </tr>\n  <tr>\n    <td><code>WSAENOTEMPTY</code></td>\n    <td>Indicates that the directory is not empty.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEPROCLIM</code></td>\n    <td>Indicates that there are too many processes.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEUSERS</code></td>\n    <td>Indicates that the user quota has been exceeded.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEDQUOT</code></td>\n    <td>Indicates that the disk quota has been exceeded.</td>\n  </tr>\n  <tr>\n    <td><code>WSAESTALE</code></td>\n    <td>Indicates a stale file handle reference.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEREMOTE</code></td>\n    <td>Indicates that the item is remote.</td>\n  </tr>\n  <tr>\n    <td><code>WSASYSNOTREADY</code></td>\n    <td>Indicates that the network subsystem is not ready.</td>\n  </tr>\n  <tr>\n    <td><code>WSAVERNOTSUPPORTED</code></td>\n    <td>Indicates that the <code>winsock.dll</code> version is out of range.</td>\n  </tr>\n  <tr>\n    <td><code>WSANOTINITIALISED</code></td>\n    <td>Indicates that successful WSAStartup has not yet been performed.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEDISCON</code></td>\n    <td>Indicates that a graceful shutdown is in progress.</td>\n  </tr>\n  <tr>\n    <td><code>WSAENOMORE</code></td>\n    <td>Indicates that there are no more results.</td>\n  </tr>\n  <tr>\n    <td><code>WSAECANCELLED</code></td>\n    <td>Indicates that an operation has been canceled.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEINVALIDPROCTABLE</code></td>\n    <td>Indicates that the procedure call table is invalid.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEINVALIDPROVIDER</code></td>\n    <td>Indicates an invalid service provider.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEPROVIDERFAILEDINIT</code></td>\n    <td>Indicates that the service provider failed to initialized.</td>\n  </tr>\n  <tr>\n    <td><code>WSASYSCALLFAILURE</code></td>\n    <td>Indicates a system call failure.</td>\n  </tr>\n  <tr>\n    <td><code>WSASERVICE_NOT_FOUND</code></td>\n    <td>Indicates that a service was not found.</td>\n  </tr>\n  <tr>\n    <td><code>WSATYPE_NOT_FOUND</code></td>\n    <td>Indicates that a class type was not found.</td>\n  </tr>\n  <tr>\n    <td><code>WSA_E_NO_MORE</code></td>\n    <td>Indicates that there are no more results.</td>\n  </tr>\n  <tr>\n    <td><code>WSA_E_CANCELLED</code></td>\n    <td>Indicates that the call was canceled.</td>\n  </tr>\n  <tr>\n    <td><code>WSAEREFUSED</code></td>\n    <td>Indicates that a database query was refused.</td>\n  </tr>\n</table>\n\n",
                  "type": "module",
                  "displayName": "Windows Specific Error Constants"
                }
              ],
              "type": "module",
              "displayName": "Error Constants"
            },
            {
              "textRaw": "dlopen Constants",
              "name": "dlopen_constants",
              "desc": "<p>If available on the operating system, the following constants\nare exported in <code>os.constants.dlopen</code>. See dlopen(3) for detailed\ninformation.</p>\n<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>RTLD_LAZY</code></td>\n    <td>Perform lazy binding. Node.js sets this flag by default.</td>\n  </tr>\n  <tr>\n    <td><code>RTLD_NOW</code></td>\n    <td>Resolve all undefined symbols in the library before dlopen(3)\n    returns.</td>\n  </tr>\n  <tr>\n    <td><code>RTLD_GLOBAL</code></td>\n    <td>Symbols defined by the library will be made available for symbol\n    resolution of subsequently loaded libraries.</td>\n  </tr>\n  <tr>\n    <td><code>RTLD_LOCAL</code></td>\n    <td>The converse of <code>RTLD_GLOBAL</code>. This is the default behavior if neither\n    flag is specified.</td>\n  </tr>\n  <tr>\n    <td><code>RTLD_DEEPBIND</code></td>\n    <td>Make a self-contained library use its own symbols in preference to\n    symbols from previously loaded libraries.</td>\n  </tr>\n</table>\n\n",
              "type": "module",
              "displayName": "dlopen Constants"
            },
            {
              "textRaw": "libuv Constants",
              "name": "libuv_constants",
              "desc": "<table>\n  <tr>\n    <th>Constant</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>UV_UDP_REUSEADDR</code></td>\n    <td></td>\n  </tr>\n</table>\n\n<!-- [end-include:os.md] -->\n<!-- [start-include:path.md] -->\n",
              "type": "module",
              "displayName": "libuv Constants"
            }
          ],
          "type": "module",
          "displayName": "OS Constants"
        }
      ],
      "type": "module",
      "displayName": "OS"
    },
    {
      "textRaw": "Path",
      "name": "path",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>path</code> module provides utilities for working with file and directory paths.\nIt can be accessed using:</p>\n<pre><code class=\"lang-js\">const path = require(&#39;path&#39;);\n</code></pre>\n",
      "modules": [
        {
          "textRaw": "Windows vs. POSIX",
          "name": "windows_vs._posix",
          "desc": "<p>The default operation of the <code>path</code> module varies based on the operating system\non which a Node.js application is running. Specifically, when running on a\nWindows operating system, the <code>path</code> module will assume that Windows-style\npaths are being used.</p>\n<p>For example, using the <code>path.basename()</code> function with the Windows file path\n<code>C:\\temp\\myfile.html</code>, will yield different results when running on POSIX than\nwhen run on Windows:</p>\n<p>On POSIX:</p>\n<pre><code class=\"lang-js\">path.basename(&#39;C:\\\\temp\\\\myfile.html&#39;);\n// Returns: &#39;C:\\\\temp\\\\myfile.html&#39;\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">path.basename(&#39;C:\\\\temp\\\\myfile.html&#39;);\n// Returns: &#39;myfile.html&#39;\n</code></pre>\n<p>To achieve consistent results when working with Windows file paths on any\noperating system, use <a href=\"#path_path_win32\"><code>path.win32</code></a>:</p>\n<p>On POSIX and Windows:</p>\n<pre><code class=\"lang-js\">path.win32.basename(&#39;C:\\\\temp\\\\myfile.html&#39;);\n// Returns: &#39;myfile.html&#39;\n</code></pre>\n<p>To achieve consistent results when working with POSIX file paths on any\noperating system, use <a href=\"#path_path_posix\"><code>path.posix</code></a>:</p>\n<p>On POSIX and Windows:</p>\n<pre><code class=\"lang-js\">path.posix.basename(&#39;/tmp/myfile.html&#39;);\n// Returns: &#39;myfile.html&#39;\n</code></pre>\n<p><em>Note:</em> On Windows Node.js follows the concept of per-drive working directory.\nThis behavior can be observed when using a drive path without a backslash. For\nexample <code>path.resolve(&#39;c:\\\\&#39;)</code> can potentially return a different result than\n<code>path.resolve(&#39;c:&#39;)</code>. For more information, see\n<a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247.aspx#fully_qualified_vs._relative_paths\">this MSDN page</a>.</p>\n",
          "type": "module",
          "displayName": "Windows vs. POSIX"
        }
      ],
      "methods": [
        {
          "textRaw": "path.basename(path[, ext])",
          "type": "method",
          "name": "basename",
          "meta": {
            "added": [
              "v0.1.25"
            ],
            "changes": [
              {
                "version": "v6.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/5348",
                "description": "Passing a non-string as the `path` argument will throw now."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": [
                {
                  "textRaw": "`path` {string} ",
                  "name": "path",
                  "type": "string"
                },
                {
                  "textRaw": "`ext` {string} An optional file extension ",
                  "name": "ext",
                  "type": "string",
                  "desc": "An optional file extension",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "ext",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>path.basename()</code> methods returns the last portion of a <code>path</code>, similar to\nthe Unix <code>basename</code> command. Trailing directory separators are ignored, see\n<a href=\"#path_path_sep\"><code>path.sep</code></a>.</p>\n<pre><code class=\"lang-js\">path.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;);\n// Returns: &#39;quux.html&#39;\n\npath.basename(&#39;/foo/bar/baz/asdf/quux.html&#39;, &#39;.html&#39;);\n// Returns: &#39;quux&#39;\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string or if <code>ext</code> is given\nand is not a string.</p>\n"
        },
        {
          "textRaw": "path.dirname(path)",
          "type": "method",
          "name": "dirname",
          "meta": {
            "added": [
              "v0.1.16"
            ],
            "changes": [
              {
                "version": "v6.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/5348",
                "description": "Passing a non-string as the `path` argument will throw now."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": [
                {
                  "textRaw": "`path` {string} ",
                  "name": "path",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>The <code>path.dirname()</code> method returns the directory name of a <code>path</code>, similar to\nthe Unix <code>dirname</code> command. Trailing directory separators are ignored, see\n<a href=\"#path_path_sep\"><code>path.sep</code></a>.</p>\n<pre><code class=\"lang-js\">path.dirname(&#39;/foo/bar/baz/asdf/quux&#39;);\n// Returns: &#39;/foo/bar/baz/asdf&#39;\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>\n"
        },
        {
          "textRaw": "path.extname(path)",
          "type": "method",
          "name": "extname",
          "meta": {
            "added": [
              "v0.1.25"
            ],
            "changes": [
              {
                "version": "v6.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/5348",
                "description": "Passing a non-string as the `path` argument will throw now."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": [
                {
                  "textRaw": "`path` {string} ",
                  "name": "path",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>The <code>path.extname()</code> method returns the extension of the <code>path</code>, from the last\noccurrence of the <code>.</code> (period) character to end of string in the last portion of\nthe <code>path</code>. If there is no <code>.</code> in the last portion of the <code>path</code>, or if the\nfirst character of the basename of <code>path</code> (see <code>path.basename()</code>) is <code>.</code>, then\nan empty string is returned.</p>\n<pre><code class=\"lang-js\">path.extname(&#39;index.html&#39;);\n// Returns: &#39;.html&#39;\n\npath.extname(&#39;index.coffee.md&#39;);\n// Returns: &#39;.md&#39;\n\npath.extname(&#39;index.&#39;);\n// Returns: &#39;.&#39;\n\npath.extname(&#39;index&#39;);\n// Returns: &#39;&#39;\n\npath.extname(&#39;.index&#39;);\n// Returns: &#39;&#39;\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>\n"
        },
        {
          "textRaw": "path.format(pathObject)",
          "type": "method",
          "name": "format",
          "meta": {
            "added": [
              "v0.11.15"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": [
                {
                  "textRaw": "`pathObject` {Object} ",
                  "options": [
                    {
                      "textRaw": "`dir` {string} ",
                      "name": "dir",
                      "type": "string"
                    },
                    {
                      "textRaw": "`root` {string} ",
                      "name": "root",
                      "type": "string"
                    },
                    {
                      "textRaw": "`base` {string} ",
                      "name": "base",
                      "type": "string"
                    },
                    {
                      "textRaw": "`name` {string} ",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "textRaw": "`ext` {string} ",
                      "name": "ext",
                      "type": "string"
                    }
                  ],
                  "name": "pathObject",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "pathObject"
                }
              ]
            }
          ],
          "desc": "<p>The <code>path.format()</code> method returns a path string from an object. This is the\nopposite of <a href=\"#path_path_parse_path\"><code>path.parse()</code></a>.</p>\n<p>When providing properties to the <code>pathObject</code> remember that there are\ncombinations where one property has priority over another:</p>\n<ul>\n<li><code>pathObject.root</code> is ignored if <code>pathObject.dir</code> is provided</li>\n<li><code>pathObject.ext</code> and <code>pathObject.name</code> are ignored if <code>pathObject.base</code> exists</li>\n</ul>\n<p>For example, on POSIX:</p>\n<pre><code class=\"lang-js\">// If `dir`, `root` and `base` are provided,\n// `${dir}${path.sep}${base}`\n// will be returned. `root` is ignored.\npath.format({\n  root: &#39;/ignored&#39;,\n  dir: &#39;/home/user/dir&#39;,\n  base: &#39;file.txt&#39;\n});\n// Returns: &#39;/home/user/dir/file.txt&#39;\n\n// `root` will be used if `dir` is not specified.\n// If only `root` is provided or `dir` is equal to `root` then the\n// platform separator will not be included. `ext` will be ignored.\npath.format({\n  root: &#39;/&#39;,\n  base: &#39;file.txt&#39;,\n  ext: &#39;ignored&#39;\n});\n// Returns: &#39;/file.txt&#39;\n\n// `name` + `ext` will be used if `base` is not specified.\npath.format({\n  root: &#39;/&#39;,\n  name: &#39;file&#39;,\n  ext: &#39;.txt&#39;\n});\n// Returns: &#39;/file.txt&#39;\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">path.format({\n  dir: &#39;C:\\\\path\\\\dir&#39;,\n  base: &#39;file.txt&#39;\n});\n// Returns: &#39;C:\\\\path\\\\dir\\\\file.txt&#39;\n</code></pre>\n"
        },
        {
          "textRaw": "path.isAbsolute(path)",
          "type": "method",
          "name": "isAbsolute",
          "meta": {
            "added": [
              "v0.11.2"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {boolean} ",
                "name": "return",
                "type": "boolean"
              },
              "params": [
                {
                  "textRaw": "`path` {string} ",
                  "name": "path",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>The <code>path.isAbsolute()</code> method determines if <code>path</code> is an absolute path.</p>\n<p>If the given <code>path</code> is a zero-length string, <code>false</code> will be returned.</p>\n<p>For example on POSIX:</p>\n<pre><code class=\"lang-js\">path.isAbsolute(&#39;/foo/bar&#39;); // true\npath.isAbsolute(&#39;/baz/..&#39;);  // true\npath.isAbsolute(&#39;qux/&#39;);     // false\npath.isAbsolute(&#39;.&#39;);        // false\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">path.isAbsolute(&#39;//server&#39;);    // true\npath.isAbsolute(&#39;\\\\\\\\server&#39;);  // true\npath.isAbsolute(&#39;C:/foo/..&#39;);   // true\npath.isAbsolute(&#39;C:\\\\foo\\\\..&#39;); // true\npath.isAbsolute(&#39;bar\\\\baz&#39;);    // false\npath.isAbsolute(&#39;bar/baz&#39;);     // false\npath.isAbsolute(&#39;.&#39;);           // false\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>\n"
        },
        {
          "textRaw": "path.join([...paths])",
          "type": "method",
          "name": "join",
          "meta": {
            "added": [
              "v0.1.16"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": [
                {
                  "textRaw": "`...paths` {string} A sequence of path segments ",
                  "name": "...paths",
                  "type": "string",
                  "desc": "A sequence of path segments",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "...paths",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>path.join()</code> method joins all given <code>path</code> segments together using the\nplatform specific separator as a delimiter, then normalizes the resulting path.</p>\n<p>Zero-length <code>path</code> segments are ignored. If the joined path string is a\nzero-length string then <code>&#39;.&#39;</code> will be returned, representing the current\nworking directory.</p>\n<pre><code class=\"lang-js\">path.join(&#39;/foo&#39;, &#39;bar&#39;, &#39;baz/asdf&#39;, &#39;quux&#39;, &#39;..&#39;);\n// Returns: &#39;/foo/bar/baz/asdf&#39;\n\npath.join(&#39;foo&#39;, {}, &#39;bar&#39;);\n// throws &#39;TypeError: Path must be a string. Received {}&#39;\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if any of the path segments is not a string.</p>\n"
        },
        {
          "textRaw": "path.normalize(path)",
          "type": "method",
          "name": "normalize",
          "meta": {
            "added": [
              "v0.1.23"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": [
                {
                  "textRaw": "`path` {string} ",
                  "name": "path",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>The <code>path.normalize()</code> method normalizes the given <code>path</code>, resolving <code>&#39;..&#39;</code> and\n<code>&#39;.&#39;</code> segments.</p>\n<p>When multiple, sequential path segment separation characters are found (e.g.\n<code>/</code> on POSIX and either <code>\\</code> or <code>/</code> on Windows), they are replaced by a single\ninstance of the platform specific path segment separator (<code>/</code> on POSIX and\n<code>\\</code> on Windows). Trailing separators are preserved.</p>\n<p>If the <code>path</code> is a zero-length string, <code>&#39;.&#39;</code> is returned, representing the\ncurrent working directory.</p>\n<p>For example on POSIX:</p>\n<pre><code class=\"lang-js\">path.normalize(&#39;/foo/bar//baz/asdf/quux/..&#39;);\n// Returns: &#39;/foo/bar/baz/asdf&#39;\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">path.normalize(&#39;C:\\\\temp\\\\\\\\foo\\\\bar\\\\..\\\\&#39;);\n// Returns: &#39;C:\\\\temp\\\\foo\\\\&#39;\n</code></pre>\n<p>Since Windows recognizes multiple path separators, both separators will be\nreplaced by instances of the Windows preferred separator (<code>\\</code>):</p>\n<pre><code class=\"lang-js\">path.win32.normalize(&#39;C:////temp\\\\\\\\/\\\\/\\\\/foo/bar&#39;);\n// Returns: &#39;C:\\\\temp\\\\foo\\\\bar&#39;\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>\n"
        },
        {
          "textRaw": "path.parse(path)",
          "type": "method",
          "name": "parse",
          "meta": {
            "added": [
              "v0.11.15"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Object} ",
                "name": "return",
                "type": "Object"
              },
              "params": [
                {
                  "textRaw": "`path` {string} ",
                  "name": "path",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>The <code>path.parse()</code> method returns an object whose properties represent\nsignificant elements of the <code>path</code>. Trailing directory separators are ignored,\nsee <a href=\"#path_path_sep\"><code>path.sep</code></a>.</p>\n<p>The returned object will have the following properties:</p>\n<ul>\n<li><code>dir</code> {string}</li>\n<li><code>root</code> {string}</li>\n<li><code>base</code> {string}</li>\n<li><code>name</code> {string}</li>\n<li><code>ext</code> {string}</li>\n</ul>\n<p>For example on POSIX:</p>\n<pre><code class=\"lang-js\">path.parse(&#39;/home/user/dir/file.txt&#39;);\n// Returns:\n// { root: &#39;/&#39;,\n//   dir: &#39;/home/user/dir&#39;,\n//   base: &#39;file.txt&#39;,\n//   ext: &#39;.txt&#39;,\n//   name: &#39;file&#39; }\n</code></pre>\n<pre><code class=\"lang-text\">┌─────────────────────┬────────────┐\n│          dir        │    base    │\n├──────┬              ├──────┬─────┤\n│ root │              │ name │ ext │\n&quot;  /    home/user/dir / file  .txt &quot;\n└──────┴──────────────┴──────┴─────┘\n(all spaces in the &quot;&quot; line should be ignored — they are purely for formatting)\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">path.parse(&#39;C:\\\\path\\\\dir\\\\file.txt&#39;);\n// Returns:\n// { root: &#39;C:\\\\&#39;,\n//   dir: &#39;C:\\\\path\\\\dir&#39;,\n//   base: &#39;file.txt&#39;,\n//   ext: &#39;.txt&#39;,\n//   name: &#39;file&#39; }\n</code></pre>\n<pre><code class=\"lang-text\">┌─────────────────────┬────────────┐\n│          dir        │    base    │\n├──────┬              ├──────┬─────┤\n│ root │              │ name │ ext │\n&quot; C:\\      path\\dir   \\ file  .txt &quot;\n└──────┴──────────────┴──────┴─────┘\n(all spaces in the &quot;&quot; line should be ignored — they are purely for formatting)\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if <code>path</code> is not a string.</p>\n"
        },
        {
          "textRaw": "path.relative(from, to)",
          "type": "method",
          "name": "relative",
          "meta": {
            "added": [
              "v0.5.0"
            ],
            "changes": [
              {
                "version": "v6.8.0",
                "pr-url": "https://github.com/nodejs/node/pull/8523",
                "description": "On Windows, the leading slashes for UNC paths are now included in the return value."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": [
                {
                  "textRaw": "`from` {string} ",
                  "name": "from",
                  "type": "string"
                },
                {
                  "textRaw": "`to` {string} ",
                  "name": "to",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "from"
                },
                {
                  "name": "to"
                }
              ]
            }
          ],
          "desc": "<p>The <code>path.relative()</code> method returns the relative path from <code>from</code> to <code>to</code> based\non the current working directory. If <code>from</code> and <code>to</code> each resolve to the same\npath (after calling <code>path.resolve()</code> on each), a zero-length string is returned.</p>\n<p>If a zero-length string is passed as <code>from</code> or <code>to</code>, the current working\ndirectory will be used instead of the zero-length strings.</p>\n<p>For example on POSIX:</p>\n<pre><code class=\"lang-js\">path.relative(&#39;/data/orandea/test/aaa&#39;, &#39;/data/orandea/impl/bbb&#39;);\n// Returns: &#39;../../impl/bbb&#39;\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">path.relative(&#39;C:\\\\orandea\\\\test\\\\aaa&#39;, &#39;C:\\\\orandea\\\\impl\\\\bbb&#39;);\n// Returns: &#39;..\\\\..\\\\impl\\\\bbb&#39;\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if either <code>from</code> or <code>to</code> is not a string.</p>\n"
        },
        {
          "textRaw": "path.resolve([...paths])",
          "type": "method",
          "name": "resolve",
          "meta": {
            "added": [
              "v0.3.4"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": [
                {
                  "textRaw": "`...paths` {string} A sequence of paths or path segments ",
                  "name": "...paths",
                  "type": "string",
                  "desc": "A sequence of paths or path segments",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "...paths",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>path.resolve()</code> method resolves a sequence of paths or path segments into\nan absolute path.</p>\n<p>The given sequence of paths is processed from right to left, with each\nsubsequent <code>path</code> prepended until an absolute path is constructed.\nFor instance, given the sequence of path segments: <code>/foo</code>, <code>/bar</code>, <code>baz</code>,\ncalling <code>path.resolve(&#39;/foo&#39;, &#39;/bar&#39;, &#39;baz&#39;)</code> would return <code>/bar/baz</code>.</p>\n<p>If after processing all given <code>path</code> segments an absolute path has not yet\nbeen generated, the current working directory is used.</p>\n<p>The resulting path is normalized and trailing slashes are removed unless the\npath is resolved to the root directory.</p>\n<p>Zero-length <code>path</code> segments are ignored.</p>\n<p>If no <code>path</code> segments are passed, <code>path.resolve()</code> will return the absolute path\nof the current working directory.</p>\n<pre><code class=\"lang-js\">path.resolve(&#39;/foo/bar&#39;, &#39;./baz&#39;);\n// Returns: &#39;/foo/bar/baz&#39;\n\npath.resolve(&#39;/foo/bar&#39;, &#39;/tmp/file/&#39;);\n// Returns: &#39;/tmp/file&#39;\n\npath.resolve(&#39;wwwroot&#39;, &#39;static_files/png/&#39;, &#39;../gif/image.gif&#39;);\n// if the current working directory is /home/myself/node,\n// this returns &#39;/home/myself/node/wwwroot/static_files/gif/image.gif&#39;\n</code></pre>\n<p>A <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> is thrown if any of the arguments is not a string.</p>\n"
        },
        {
          "textRaw": "path.toNamespacedPath(path)",
          "type": "method",
          "name": "toNamespacedPath",
          "meta": {
            "added": [
              "v9.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": [
                {
                  "textRaw": "`path` {string} ",
                  "name": "path",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>On Windows systems only, returns an equivalent <a href=\"https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces\">namespace-prefixed path</a> for\nthe given <code>path</code>. If <code>path</code> is not a string, <code>path</code> will be returned without\nmodifications.</p>\n<p>This method is meaningful only on Windows system. On posix systems, the\nmethod is non-operational and always returns <code>path</code> without modifications.</p>\n"
        }
      ],
      "properties": [
        {
          "textRaw": "`delimiter` {string} ",
          "type": "string",
          "name": "delimiter",
          "meta": {
            "added": [
              "v0.9.3"
            ],
            "changes": []
          },
          "desc": "<p>Provides the platform-specific path delimiter:</p>\n<ul>\n<li><code>;</code> for Windows</li>\n<li><code>:</code> for POSIX</li>\n</ul>\n<p>For example, on POSIX:</p>\n<pre><code class=\"lang-js\">console.log(process.env.PATH);\n// Prints: &#39;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;\n\nprocess.env.PATH.split(path.delimiter);\n// Returns: [&#39;/usr/bin&#39;, &#39;/bin&#39;, &#39;/usr/sbin&#39;, &#39;/sbin&#39;, &#39;/usr/local/bin&#39;]\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">console.log(process.env.PATH);\n// Prints: &#39;C:\\Windows\\system32;C:\\Windows;C:\\Program Files\\node\\&#39;\n\nprocess.env.PATH.split(path.delimiter);\n// Returns [&#39;C:\\\\Windows\\\\system32&#39;, &#39;C:\\\\Windows&#39;, &#39;C:\\\\Program Files\\\\node\\\\&#39;]\n</code></pre>\n"
        },
        {
          "textRaw": "`posix` {Object} ",
          "type": "Object",
          "name": "posix",
          "meta": {
            "added": [
              "v0.11.15"
            ],
            "changes": []
          },
          "desc": "<p>The <code>path.posix</code> property provides access to POSIX specific implementations\nof the <code>path</code> methods.</p>\n"
        },
        {
          "textRaw": "`sep` {string} ",
          "type": "string",
          "name": "sep",
          "meta": {
            "added": [
              "v0.7.9"
            ],
            "changes": []
          },
          "desc": "<p>Provides the platform-specific path segment separator:</p>\n<ul>\n<li><code>\\</code> on Windows</li>\n<li><code>/</code> on POSIX</li>\n</ul>\n<p>For example on POSIX:</p>\n<pre><code class=\"lang-js\">&#39;foo/bar/baz&#39;.split(path.sep);\n// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]\n</code></pre>\n<p>On Windows:</p>\n<pre><code class=\"lang-js\">&#39;foo\\\\bar\\\\baz&#39;.split(path.sep);\n// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]\n</code></pre>\n<p>On Windows, both the forward slash (<code>/</code>) and backward slash (<code>\\</code>) are accepted\nas path segment separators; however, the <code>path</code> methods only add backward\nslashes (<code>\\</code>).</p>\n"
        },
        {
          "textRaw": "`win32` {Object} ",
          "type": "Object",
          "name": "win32",
          "meta": {
            "added": [
              "v0.11.15"
            ],
            "changes": []
          },
          "desc": "<p>The <code>path.win32</code> property provides access to Windows-specific implementations\nof the <code>path</code> methods.</p>\n<!-- [end-include:path.md] -->\n<!-- [start-include:perf_hooks.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "Path"
    },
    {
      "textRaw": "Performance Timing API",
      "name": "performance_timing_api",
      "introduced_in": "v8.5.0",
      "stability": 1,
      "stabilityText": "Experimental",
      "desc": "<p>The Performance Timing API provides an implementation of the\n<a href=\"https://w3c.github.io/performance-timeline/\">W3C Performance Timeline</a> specification. The purpose of the API\nis to support collection of high resolution performance metrics.\nThis is the same Performance API as implemented in modern Web browsers.</p>\n<pre><code class=\"lang-js\">const { PerformanceObserver, performance } = require(&#39;perf_hooks&#39;);\n\nconst obs = new PerformanceObserver((items) =&gt; {\n  console.log(items.getEntries()[0].duration);\n  performance.clearMarks();\n});\nobs.observe({ entryTypes: [&#39;measure&#39;] });\n\nperformance.mark(&#39;A&#39;);\ndoSomeLongRunningProcess(() =&gt; {\n  performance.mark(&#39;B&#39;);\n  performance.measure(&#39;A to B&#39;, &#39;A&#39;, &#39;B&#39;);\n});\n</code></pre>\n",
      "classes": [
        {
          "textRaw": "Class: Performance",
          "type": "class",
          "name": "Performance",
          "meta": {
            "added": [
              "v8.5.0"
            ],
            "changes": []
          },
          "methods": [
            {
              "textRaw": "performance.clearMarks([name])",
              "type": "method",
              "name": "clearMarks",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`name` {string} ",
                      "name": "name",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "name",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>If <code>name</code> is not provided, removes all <code>PerformanceMark</code> objects from the\nPerformance Timeline. If <code>name</code> is provided, removes only the named mark.</p>\n"
            },
            {
              "textRaw": "performance.mark([name])",
              "type": "method",
              "name": "mark",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`name` {string} ",
                      "name": "name",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "name",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a new <code>PerformanceMark</code> entry in the Performance Timeline. A\n<code>PerformanceMark</code> is a subclass of <code>PerformanceEntry</code> whose\n<code>performanceEntry.entryType</code> is always <code>&#39;mark&#39;</code>, and whose\n<code>performanceEntry.duration</code> is always <code>0</code>. Performance marks are used\nto mark specific significant moments in the Performance Timeline.</p>\n"
            },
            {
              "textRaw": "performance.measure(name, startMark, endMark)",
              "type": "method",
              "name": "measure",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`name` {string} ",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "textRaw": "`startMark` {string} ",
                      "name": "startMark",
                      "type": "string"
                    },
                    {
                      "textRaw": "`endMark` {string} ",
                      "name": "endMark",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "name"
                    },
                    {
                      "name": "startMark"
                    },
                    {
                      "name": "endMark"
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a new <code>PerformanceMeasure</code> entry in the Performance Timeline. A\n<code>PerformanceMeasure</code> is a subclass of <code>PerformanceEntry</code> whose\n<code>performanceEntry.entryType</code> is always <code>&#39;measure&#39;</code>, and whose\n<code>performanceEntry.duration</code> measures the number of milliseconds elapsed since\n<code>startMark</code> and <code>endMark</code>.</p>\n<p>The <code>startMark</code> argument may identify any <em>existing</em> <code>PerformanceMark</code> in the\nPerformance Timeline, or <em>may</em> identify any of the timestamp properties\nprovided by the <code>PerformanceNodeTiming</code> class. If the named <code>startMark</code> does\nnot exist, then <code>startMark</code> is set to <a href=\"https://w3c.github.io/hr-time/#dom-performance-timeorigin\"><code>timeOrigin</code></a> by default.</p>\n<p>The <code>endMark</code> argument must identify any <em>existing</em> <code>PerformanceMark</code> in the\nPerformance Timeline or any of the timestamp properties provided by the\n<code>PerformanceNodeTiming</code> class. If the named <code>endMark</code> does not exist, an\nerror will be thrown.</p>\n"
            },
            {
              "textRaw": "performance.now()",
              "type": "method",
              "name": "now",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {number} ",
                    "name": "return",
                    "type": "number"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns the current high resolution millisecond timestamp, where 0 represents\nthe start of the current <code>node</code> process.</p>\n"
            },
            {
              "textRaw": "performance.timerify(fn)",
              "type": "method",
              "name": "timerify",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`fn` {Function} ",
                      "name": "fn",
                      "type": "Function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "fn"
                    }
                  ]
                }
              ],
              "desc": "<p>Wraps a function within a new function that measures the running time of the\nwrapped function. A <code>PerformanceObserver</code> must be subscribed to the <code>&#39;function&#39;</code>\nevent type in order for the timing details to be accessed.</p>\n<pre><code class=\"lang-js\">const {\n  performance,\n  PerformanceObserver\n} = require(&#39;perf_hooks&#39;);\n\nfunction someFunction() {\n  console.log(&#39;hello world&#39;);\n}\n\nconst wrapped = performance.timerify(someFunction);\n\nconst obs = new PerformanceObserver((list) =&gt; {\n  console.log(list.getEntries()[0].duration);\n  obs.disconnect();\n});\nobs.observe({ entryTypes: [&#39;function&#39;] });\n\n// A performance timeline entry will be created\nwrapped();\n</code></pre>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`nodeTiming` {PerformanceNodeTiming} ",
              "type": "PerformanceNodeTiming",
              "name": "nodeTiming",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>An instance of the <code>PerformanceNodeTiming</code> class that provides performance\nmetrics for specific Node.js operational milestones.</p>\n"
            },
            {
              "textRaw": "`timeOrigin` {number} ",
              "type": "number",
              "name": "timeOrigin",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The <a href=\"https://w3c.github.io/hr-time/#dom-performance-timeorigin\"><code>timeOrigin</code></a> specifies the high resolution millisecond timestamp at\nwhich the current <code>node</code> process began, measured in Unix time.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: PerformanceEntry",
          "type": "class",
          "name": "PerformanceEntry",
          "meta": {
            "added": [
              "v8.5.0"
            ],
            "changes": []
          },
          "properties": [
            {
              "textRaw": "`duration` {number} ",
              "type": "number",
              "name": "duration",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The total number of milliseconds elapsed for this entry. This value will not\nbe meaningful for all Performance Entry types.</p>\n"
            },
            {
              "textRaw": "`name` {string} ",
              "type": "string",
              "name": "name",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The name of the performance entry.</p>\n"
            },
            {
              "textRaw": "`startTime` {number} ",
              "type": "number",
              "name": "startTime",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp marking the starting time of the\nPerformance Entry.</p>\n"
            },
            {
              "textRaw": "`entryType` {string} ",
              "type": "string",
              "name": "entryType",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The type of the performance entry. Currently it may be one of: <code>&#39;node&#39;</code>,\n<code>&#39;mark&#39;</code>, <code>&#39;measure&#39;</code>, <code>&#39;gc&#39;</code>, <code>&#39;function&#39;</code>, or <code>&#39;http2&#39;</code>.</p>\n"
            },
            {
              "textRaw": "`kind` {number} ",
              "type": "number",
              "name": "kind",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>When <code>performanceEntry.entryType</code> is equal to <code>&#39;gc&#39;</code>, the <code>performance.kind</code>\nproperty identifies the type of garbage collection operation that occurred.\nThe value may be one of:</p>\n<ul>\n<li><code>perf_hooks.constants.NODE_PERFORMANCE_GC_MAJOR</code></li>\n<li><code>perf_hooks.constants.NODE_PERFORMANCE_GC_MINOR</code></li>\n<li><code>perf_hooks.constants.NODE_PERFORMANCE_GC_INCREMENTAL</code></li>\n<li><code>perf_hooks.constants.NODE_PERFORMANCE_GC_WEAKCB</code></li>\n</ul>\n"
            }
          ]
        },
        {
          "textRaw": "Class: PerformanceNodeTiming extends PerformanceEntry",
          "type": "class",
          "name": "PerformanceNodeTiming",
          "meta": {
            "added": [
              "v8.5.0"
            ],
            "changes": []
          },
          "desc": "<p>Provides timing details for Node.js itself.</p>\n",
          "properties": [
            {
              "textRaw": "`bootstrapComplete` {number} ",
              "type": "number",
              "name": "bootstrapComplete",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp at which the Node.js process\ncompleted bootstrapping. If bootstrapping has not yet finished, the property\nhas the value of -1.</p>\n"
            },
            {
              "textRaw": "`clusterSetupEnd` {number} ",
              "type": "number",
              "name": "clusterSetupEnd",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp at which cluster processing ended. If\ncluster processing has not yet ended, the property has the value of -1.</p>\n"
            },
            {
              "textRaw": "`clusterSetupStart` {number} ",
              "type": "number",
              "name": "clusterSetupStart",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp at which cluster processing started.\nIf cluster processing has not yet started, the property has the value of -1.</p>\n"
            },
            {
              "textRaw": "`loopExit` {number} ",
              "type": "number",
              "name": "loopExit",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp at which the Node.js event loop\nexited. If the event loop has not yet exited, the property has the value of -1.\nIt can only have a value of not -1 in a handler of the <a href=\"#process_event_exit\"><code>&#39;exit&#39;</code></a> event.</p>\n"
            },
            {
              "textRaw": "`loopStart` {number} ",
              "type": "number",
              "name": "loopStart",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp at which the Node.js event loop\nstarted. If the event loop has not yet started (e.g., in the first tick of the\nmain script), the property has the value of -1.</p>\n"
            },
            {
              "textRaw": "`moduleLoadEnd` {number} ",
              "type": "number",
              "name": "moduleLoadEnd",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp at which main module load ended.</p>\n"
            },
            {
              "textRaw": "`moduleLoadStart` {number} ",
              "type": "number",
              "name": "moduleLoadStart",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp at which main module load started.</p>\n"
            },
            {
              "textRaw": "`nodeStart` {number} ",
              "type": "number",
              "name": "nodeStart",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp at which the Node.js process was\ninitialized.</p>\n"
            },
            {
              "textRaw": "`preloadModuleLoadEnd` {number} ",
              "type": "number",
              "name": "preloadModuleLoadEnd",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp at which preload module load ended.</p>\n"
            },
            {
              "textRaw": "`preloadModuleLoadStart` {number} ",
              "type": "number",
              "name": "preloadModuleLoadStart",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp at which preload module load started.</p>\n"
            },
            {
              "textRaw": "`thirdPartyMainEnd` {number} ",
              "type": "number",
              "name": "thirdPartyMainEnd",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp at which third_party_main\nprocessing ended. If third_party_main processing has not yet ended, the\nproperty has the value of -1.</p>\n"
            },
            {
              "textRaw": "`thirdPartyMainStart` {number} ",
              "type": "number",
              "name": "thirdPartyMainStart",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp at which third_party_main\nprocessing started. If third_party_main processing has not yet started, the\nproperty has the value of -1.</p>\n"
            },
            {
              "textRaw": "`v8Start` {number} ",
              "type": "number",
              "name": "v8Start",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>The high resolution millisecond timestamp at which the V8 platform was\ninitialized.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: PerformanceObserver",
          "type": "class",
          "name": "PerformanceObserver",
          "methods": [
            {
              "textRaw": "performanceObserver.disconnect()",
              "type": "method",
              "name": "disconnect",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "desc": "<p>Disconnects the <code>PerformanceObserver</code> instance from all notifications.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "performanceObserver.observe(options)",
              "type": "method",
              "name": "observe",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`entryTypes` {string[]} An array of strings identifying the types of `PerformanceEntry` instances the observer is interested in. If not provided an error will be thrown. ",
                          "name": "entryTypes",
                          "type": "string[]",
                          "desc": "An array of strings identifying the types of `PerformanceEntry` instances the observer is interested in. If not provided an error will be thrown."
                        },
                        {
                          "textRaw": "`buffered` {boolean} If true, the notification callback will be called using `setImmediate()` and multiple `PerformanceEntry` instance notifications will be buffered internally. If `false`, notifications will be immediate and synchronous. **Default:** `false`. ",
                          "name": "buffered",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "If true, the notification callback will be called using `setImmediate()` and multiple `PerformanceEntry` instance notifications will be buffered internally. If `false`, notifications will be immediate and synchronous."
                        }
                      ],
                      "name": "options",
                      "type": "Object"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "options"
                    }
                  ]
                }
              ],
              "desc": "<p>Subscribes the <code>PerformanceObserver</code> instance to notifications of new\n<code>PerformanceEntry</code> instances identified by <code>options.entryTypes</code>.</p>\n<p>When <code>options.buffered</code> is <code>false</code>, the <code>callback</code> will be invoked once for\nevery <code>PerformanceEntry</code> instance:</p>\n<pre><code class=\"lang-js\">const {\n  performance,\n  PerformanceObserver\n} = require(&#39;perf_hooks&#39;);\n\nconst obs = new PerformanceObserver((list, observer) =&gt; {\n  // called three times synchronously. list contains one item\n});\nobs.observe({ entryTypes: [&#39;mark&#39;] });\n\nfor (let n = 0; n &lt; 3; n++)\n  performance.mark(`test${n}`);\n</code></pre>\n<pre><code class=\"lang-js\">const {\n  performance,\n  PerformanceObserver\n} = require(&#39;perf_hooks&#39;);\n\nconst obs = new PerformanceObserver((list, observer) =&gt; {\n  // called once. list contains three items\n});\nobs.observe({ entryTypes: [&#39;mark&#39;], buffered: true });\n\nfor (let n = 0; n &lt; 3; n++)\n  performance.mark(`test${n}`);\n</code></pre>\n"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`callback` {Function} ",
                  "options": [
                    {
                      "textRaw": "`list` {PerformanceObserverEntryList} ",
                      "name": "list",
                      "type": "PerformanceObserverEntryList"
                    },
                    {
                      "textRaw": "`observer` {PerformanceObserver} ",
                      "name": "observer",
                      "type": "PerformanceObserver"
                    }
                  ],
                  "name": "callback",
                  "type": "Function"
                }
              ],
              "desc": "<p><code>PerformanceObserver</code> objects provide notifications when new\n<code>PerformanceEntry</code> instances have been added to the Performance Timeline.</p>\n<pre><code class=\"lang-js\">const {\n  performance,\n  PerformanceObserver\n} = require(&#39;perf_hooks&#39;);\n\nconst obs = new PerformanceObserver((list, observer) =&gt; {\n  console.log(list.getEntries());\n  observer.disconnect();\n});\nobs.observe({ entryTypes: [&#39;mark&#39;], buffered: true });\n\nperformance.mark(&#39;test&#39;);\n</code></pre>\n<p>Because <code>PerformanceObserver</code> instances introduce their own additional\nperformance overhead, instances should not be left subscribed to notifications\nindefinitely. Users should disconnect observers as soon as they are no\nlonger needed.</p>\n<p>The <code>callback</code> is invoked when a <code>PerformanceObserver</code> is\nnotified about new <code>PerformanceEntry</code> instances. The callback receives a\n<code>PerformanceObserverEntryList</code> instance and a reference to the\n<code>PerformanceObserver</code>.</p>\n"
            },
            {
              "params": [
                {
                  "name": "callback"
                }
              ],
              "desc": "<p><code>PerformanceObserver</code> objects provide notifications when new\n<code>PerformanceEntry</code> instances have been added to the Performance Timeline.</p>\n<pre><code class=\"lang-js\">const {\n  performance,\n  PerformanceObserver\n} = require(&#39;perf_hooks&#39;);\n\nconst obs = new PerformanceObserver((list, observer) =&gt; {\n  console.log(list.getEntries());\n  observer.disconnect();\n});\nobs.observe({ entryTypes: [&#39;mark&#39;], buffered: true });\n\nperformance.mark(&#39;test&#39;);\n</code></pre>\n<p>Because <code>PerformanceObserver</code> instances introduce their own additional\nperformance overhead, instances should not be left subscribed to notifications\nindefinitely. Users should disconnect observers as soon as they are no\nlonger needed.</p>\n<p>The <code>callback</code> is invoked when a <code>PerformanceObserver</code> is\nnotified about new <code>PerformanceEntry</code> instances. The callback receives a\n<code>PerformanceObserverEntryList</code> instance and a reference to the\n<code>PerformanceObserver</code>.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: PerformanceObserverEntryList",
          "type": "class",
          "name": "PerformanceObserverEntryList",
          "meta": {
            "added": [
              "v8.5.0"
            ],
            "changes": []
          },
          "desc": "<p>The <code>PerformanceObserverEntryList</code> class is used to provide access to the\n<code>PerformanceEntry</code> instances passed to a <code>PerformanceObserver</code>.</p>\n",
          "methods": [
            {
              "textRaw": "performanceObserverEntryList.getEntries()",
              "type": "method",
              "name": "getEntries",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {PerformanceEntry[]} ",
                    "name": "return",
                    "type": "PerformanceEntry[]"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns a list of <code>PerformanceEntry</code> objects in chronological order\nwith respect to <code>performanceEntry.startTime</code>.</p>\n"
            },
            {
              "textRaw": "performanceObserverEntryList.getEntriesByName(name[, type])",
              "type": "method",
              "name": "getEntriesByName",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {PerformanceEntry[]} ",
                    "name": "return",
                    "type": "PerformanceEntry[]"
                  },
                  "params": [
                    {
                      "textRaw": "`name` {string} ",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "textRaw": "`type` {string} ",
                      "name": "type",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "name"
                    },
                    {
                      "name": "type",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns a list of <code>PerformanceEntry</code> objects in chronological order\nwith respect to <code>performanceEntry.startTime</code> whose <code>performanceEntry.name</code> is\nequal to <code>name</code>, and optionally, whose <code>performanceEntry.entryType</code> is equal to\n<code>type</code>.</p>\n"
            },
            {
              "textRaw": "performanceObserverEntryList.getEntriesByType(type)",
              "type": "method",
              "name": "getEntriesByType",
              "meta": {
                "added": [
                  "v8.5.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {PerformanceEntry[]} ",
                    "name": "return",
                    "type": "PerformanceEntry[]"
                  },
                  "params": [
                    {
                      "textRaw": "`type` {string} ",
                      "name": "type",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "type"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns a list of <code>PerformanceEntry</code> objects in chronological order\nwith respect to <code>performanceEntry.startTime</code> whose <code>performanceEntry.entryType</code>\nis equal to <code>type</code>.</p>\n<h2>Examples</h2>\n"
            }
          ],
          "modules": [
            {
              "textRaw": "Measuring the duration of async operations",
              "name": "measuring_the_duration_of_async_operations",
              "desc": "<p>The following example uses the <a href=\"async_hooks.html\">Async Hooks</a> and Performance APIs to measure\nthe actual duration of a Timeout operation (including the amount of time it\nto execute the callback).</p>\n<pre><code class=\"lang-js\">&#39;use strict&#39;;\nconst async_hooks = require(&#39;async_hooks&#39;);\nconst {\n  performance,\n  PerformanceObserver\n} = require(&#39;perf_hooks&#39;);\n\nconst set = new Set();\nconst hook = async_hooks.createHook({\n  init(id, type) {\n    if (type === &#39;Timeout&#39;) {\n      performance.mark(`Timeout-${id}-Init`);\n      set.add(id);\n    }\n  },\n  destroy(id) {\n    if (set.has(id)) {\n      set.delete(id);\n      performance.mark(`Timeout-${id}-Destroy`);\n      performance.measure(`Timeout-${id}`,\n                          `Timeout-${id}-Init`,\n                          `Timeout-${id}-Destroy`);\n    }\n  }\n});\nhook.enable();\n\nconst obs = new PerformanceObserver((list, observer) =&gt; {\n  console.log(list.getEntries()[0]);\n  performance.clearMarks();\n  observer.disconnect();\n});\nobs.observe({ entryTypes: [&#39;measure&#39;], buffered: true });\n\nsetTimeout(() =&gt; {}, 1000);\n</code></pre>\n",
              "type": "module",
              "displayName": "Measuring the duration of async operations"
            },
            {
              "textRaw": "Measuring how long it takes to load dependencies",
              "name": "measuring_how_long_it_takes_to_load_dependencies",
              "desc": "<p>The following example measures the duration of <code>require()</code> operations to load\ndependencies:</p>\n<!-- eslint-disable no-global-assign -->\n<pre><code class=\"lang-js\">&#39;use strict&#39;;\nconst {\n  performance,\n  PerformanceObserver\n} = require(&#39;perf_hooks&#39;);\nconst mod = require(&#39;module&#39;);\n\n// Monkey patch the require function\nmod.Module.prototype.require =\n  performance.timerify(mod.Module.prototype.require);\nrequire = performance.timerify(require);\n\n// Activate the observer\nconst obs = new PerformanceObserver((list) =&gt; {\n  const entries = list.getEntries();\n  entries.forEach((entry) =&gt; {\n    console.log(`require(&#39;${entry[0]}&#39;)`, entry.duration);\n  });\n  obs.disconnect();\n});\nobs.observe({ entryTypes: [&#39;function&#39;], buffered: true });\n\nrequire(&#39;some-module&#39;);\n</code></pre>\n<!-- [end-include:perf_hooks.md] -->\n<!-- [start-include:process.md] -->\n",
              "type": "module",
              "displayName": "Measuring how long it takes to load dependencies"
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Performance Timing API"
    },
    {
      "textRaw": "Punycode",
      "name": "punycode",
      "meta": {
        "changes": [
          {
            "version": "v7.0.0",
            "pr-url": "https://github.com/nodejs/node/pull/7941",
            "description": "Accessing this module will now emit a deprecation warning."
          }
        ]
      },
      "introduced_in": "v0.10.0",
      "stability": 0,
      "stabilityText": "Deprecated",
      "desc": "<p><strong>The version of the punycode module bundled in Node.js is being deprecated</strong>.\nIn a future major version of Node.js this module will be removed. Users\ncurrently depending on the <code>punycode</code> module should switch to using the\nuserland-provided <a href=\"https://mths.be/punycode\">Punycode.js</a> module instead.</p>\n<p>The <code>punycode</code> module is a bundled version of the <a href=\"https://mths.be/punycode\">Punycode.js</a> module. It\ncan be accessed using:</p>\n<pre><code class=\"lang-js\">const punycode = require(&#39;punycode&#39;);\n</code></pre>\n<p><a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a> is a character encoding scheme defined by RFC 3492 that is\nprimarily intended for use in Internationalized Domain Names. Because host\nnames in URLs are limited to ASCII characters only, Domain Names that contain\nnon-ASCII characters must be converted into ASCII using the Punycode scheme.\nFor instance, the Japanese character that translates into the English word,\n<code>&#39;example&#39;</code> is <code>&#39;例&#39;</code>. The Internationalized Domain Name, <code>&#39;例.com&#39;</code> (equivalent\nto <code>&#39;example.com&#39;</code>) is represented by Punycode as the ASCII string\n<code>&#39;xn--fsq.com&#39;</code>.</p>\n<p>The <code>punycode</code> module provides a simple implementation of the Punycode standard.</p>\n<p>The <code>punycode</code> module is a third-party dependency used by Node.js and\nmade available to developers as a convenience. Fixes or other modifications to\nthe module must be directed to the <a href=\"https://mths.be/punycode\">Punycode.js</a> project.</p>\n",
      "methods": [
        {
          "textRaw": "punycode.decode(string)",
          "type": "method",
          "name": "decode",
          "meta": {
            "added": [
              "v0.5.1"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`string` {string} ",
                  "name": "string",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "string"
                }
              ]
            }
          ],
          "desc": "<p>The <code>punycode.decode()</code> method converts a <a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a> string of ASCII-only\ncharacters to the equivalent string of Unicode codepoints.</p>\n<pre><code class=\"lang-js\">punycode.decode(&#39;maana-pta&#39;); // &#39;mañana&#39;\npunycode.decode(&#39;--dqo34k&#39;); // &#39;☃-⌘&#39;\n</code></pre>\n"
        },
        {
          "textRaw": "punycode.encode(string)",
          "type": "method",
          "name": "encode",
          "meta": {
            "added": [
              "v0.5.1"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`string` {string} ",
                  "name": "string",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "string"
                }
              ]
            }
          ],
          "desc": "<p>The <code>punycode.encode()</code> method converts a string of Unicode codepoints to a\n<a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a> string of ASCII-only characters.</p>\n<pre><code class=\"lang-js\">punycode.encode(&#39;mañana&#39;); // &#39;maana-pta&#39;\npunycode.encode(&#39;☃-⌘&#39;); // &#39;--dqo34k&#39;\n</code></pre>\n"
        },
        {
          "textRaw": "punycode.toASCII(domain)",
          "type": "method",
          "name": "toASCII",
          "meta": {
            "added": [
              "v0.6.1"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`domain` {string} ",
                  "name": "domain",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "domain"
                }
              ]
            }
          ],
          "desc": "<p>The <code>punycode.toASCII()</code> method converts a Unicode string representing an\nInternationalized Domain Name to <a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a>. Only the non-ASCII parts of the\ndomain name will be converted. Calling <code>punycode.toASCII()</code> on a string that\nalready only contains ASCII characters will have no effect.</p>\n<pre><code class=\"lang-js\">// encode domain names\npunycode.toASCII(&#39;mañana.com&#39;);  // &#39;xn--maana-pta.com&#39;\npunycode.toASCII(&#39;☃-⌘.com&#39;);   // &#39;xn----dqo34k.com&#39;\npunycode.toASCII(&#39;example.com&#39;); // &#39;example.com&#39;\n</code></pre>\n"
        },
        {
          "textRaw": "punycode.toUnicode(domain)",
          "type": "method",
          "name": "toUnicode",
          "meta": {
            "added": [
              "v0.6.1"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`domain` {string} ",
                  "name": "domain",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "domain"
                }
              ]
            }
          ],
          "desc": "<p>The <code>punycode.toUnicode()</code> method converts a string representing a domain name\ncontaining <a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a> encoded characters into Unicode. Only the <a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a>\nencoded parts of the domain name are be converted.</p>\n<pre><code class=\"lang-js\">// decode domain names\npunycode.toUnicode(&#39;xn--maana-pta.com&#39;); // &#39;mañana.com&#39;\npunycode.toUnicode(&#39;xn----dqo34k.com&#39;);  // &#39;☃-⌘.com&#39;\npunycode.toUnicode(&#39;example.com&#39;);       // &#39;example.com&#39;\n</code></pre>\n"
        }
      ],
      "properties": [
        {
          "textRaw": "punycode.ucs2",
          "name": "ucs2",
          "meta": {
            "added": [
              "v0.7.0"
            ],
            "changes": []
          },
          "methods": [
            {
              "textRaw": "punycode.ucs2.decode(string)",
              "type": "method",
              "name": "decode",
              "meta": {
                "added": [
                  "v0.7.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`string` {string} ",
                      "name": "string",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "string"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>punycode.ucs2.decode()</code> method returns an array containing the numeric\ncodepoint values of each Unicode symbol in the string.</p>\n<pre><code class=\"lang-js\">punycode.ucs2.decode(&#39;abc&#39;); // [0x61, 0x62, 0x63]\n// surrogate pair for U+1D306 tetragram for centre:\npunycode.ucs2.decode(&#39;\\uD834\\uDF06&#39;); // [0x1D306]\n</code></pre>\n"
            },
            {
              "textRaw": "punycode.ucs2.encode(codePoints)",
              "type": "method",
              "name": "encode",
              "meta": {
                "added": [
                  "v0.7.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`codePoints` {integer[]} ",
                      "name": "codePoints",
                      "type": "integer[]"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "codePoints"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>punycode.ucs2.encode()</code> method returns a string based on an array of\nnumeric code point values.</p>\n<pre><code class=\"lang-js\">punycode.ucs2.encode([0x61, 0x62, 0x63]); // &#39;abc&#39;\npunycode.ucs2.encode([0x1D306]); // &#39;\\uD834\\uDF06&#39;\n</code></pre>\n"
            }
          ]
        },
        {
          "textRaw": "`version` {string} ",
          "type": "string",
          "name": "version",
          "meta": {
            "added": [
              "v0.6.1"
            ],
            "changes": []
          },
          "desc": "<p>Returns a string identifying the current <a href=\"https://mths.be/punycode\">Punycode.js</a> version number.</p>\n<!-- [end-include:punycode.md] -->\n<!-- [start-include:querystring.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "Punycode"
    },
    {
      "textRaw": "Query String",
      "name": "querystring",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>querystring</code> module provides utilities for parsing and formatting URL\nquery strings. It can be accessed using:</p>\n<pre><code class=\"lang-js\">const querystring = require(&#39;querystring&#39;);\n</code></pre>\n",
      "methods": [
        {
          "textRaw": "querystring.escape(str)",
          "type": "method",
          "name": "escape",
          "meta": {
            "added": [
              "v0.1.25"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`str` {string} ",
                  "name": "str",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "str"
                }
              ]
            }
          ],
          "desc": "<p>The <code>querystring.escape()</code> method performs URL percent-encoding on the given\n<code>str</code> in a manner that is optimized for the specific requirements of URL\nquery strings.</p>\n<p>The <code>querystring.escape()</code> method is used by <code>querystring.stringify()</code> and is\ngenerally not expected to be used directly. It is exported primarily to allow\napplication code to provide a replacement percent-encoding implementation if\nnecessary by assigning <code>querystring.escape</code> to an alternative function.</p>\n"
        },
        {
          "textRaw": "querystring.parse(str[, sep[, eq[, options]]])",
          "type": "method",
          "name": "parse",
          "meta": {
            "added": [
              "v0.1.25"
            ],
            "changes": [
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/10967",
                "description": "Multiple empty entries are now parsed correctly (e.g. `&=&=`)."
              },
              {
                "version": "v6.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/6055",
                "description": "The returned object no longer inherits from `Object.prototype`."
              },
              {
                "version": "v6.0.0, v4.2.4",
                "pr-url": "https://github.com/nodejs/node/pull/3807",
                "description": "The `eq` parameter may now have a length of more than `1`."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`str` {string} The URL query string to parse ",
                  "name": "str",
                  "type": "string",
                  "desc": "The URL query string to parse"
                },
                {
                  "textRaw": "`sep` {string} The substring used to delimit key and value pairs in the query string. **Default:** `'&'`. ",
                  "name": "sep",
                  "type": "string",
                  "default": "`'&'`",
                  "desc": "The substring used to delimit key and value pairs in the query string.",
                  "optional": true
                },
                {
                  "textRaw": "`eq` {string}. The substring used to delimit keys and values in the query string. **Default:** `'='`. ",
                  "name": "eq",
                  "type": "string",
                  "default": "`'='`",
                  "desc": ". The substring used to delimit keys and values in the query string.",
                  "optional": true
                },
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`decodeURIComponent` {Function} The function to use when decoding percent-encoded characters in the query string. **Default:** `querystring.unescape()`. ",
                      "name": "decodeURIComponent",
                      "type": "Function",
                      "default": "`querystring.unescape()`",
                      "desc": "The function to use when decoding percent-encoded characters in the query string."
                    },
                    {
                      "textRaw": "`maxKeys` {number} Specifies the maximum number of keys to parse. Specify `0` to remove key counting limitations. **Default:** `1000`. ",
                      "name": "maxKeys",
                      "type": "number",
                      "default": "`1000`",
                      "desc": "Specifies the maximum number of keys to parse. Specify `0` to remove key counting limitations."
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "str"
                },
                {
                  "name": "sep",
                  "optional": true
                },
                {
                  "name": "eq",
                  "optional": true
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>querystring.parse()</code> method parses a URL query string (<code>str</code>) into a\ncollection of key and value pairs.</p>\n<p>For example, the query string <code>&#39;foo=bar&amp;abc=xyz&amp;abc=123&#39;</code> is parsed into:</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  foo: &#39;bar&#39;,\n  abc: [&#39;xyz&#39;, &#39;123&#39;]\n}\n</code></pre>\n<p>The object returned by the <code>querystring.parse()</code> method <em>does not</em>\nprototypically inherit from the JavaScript <code>Object</code>. This means that typical\n<code>Object</code> methods such as <code>obj.toString()</code>, <code>obj.hasOwnProperty()</code>, and others\nare not defined and <em>will not work</em>.</p>\n<p>By default, percent-encoded characters within the query string will be assumed\nto use UTF-8 encoding. If an alternative character encoding is used, then an\nalternative <code>decodeURIComponent</code> option will need to be specified as illustrated\nin the following example:</p>\n<pre><code class=\"lang-js\">// Assuming gbkDecodeURIComponent function already exists...\n\nquerystring.parse(&#39;w=%D6%D0%CE%C4&amp;foo=bar&#39;, null, null,\n                  { decodeURIComponent: gbkDecodeURIComponent });\n</code></pre>\n"
        },
        {
          "textRaw": "querystring.stringify(obj[, sep[, eq[, options]]])",
          "type": "method",
          "name": "stringify",
          "meta": {
            "added": [
              "v0.1.25"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`obj` {Object} The object to serialize into a URL query string ",
                  "name": "obj",
                  "type": "Object",
                  "desc": "The object to serialize into a URL query string"
                },
                {
                  "textRaw": "`sep` {string} The substring used to delimit key and value pairs in the query string. **Default:** `'&'`. ",
                  "name": "sep",
                  "type": "string",
                  "default": "`'&'`",
                  "desc": "The substring used to delimit key and value pairs in the query string.",
                  "optional": true
                },
                {
                  "textRaw": "`eq` {string}. The substring used to delimit keys and values in the query string. **Default:** `'='`. ",
                  "name": "eq",
                  "type": "string",
                  "default": "`'='`",
                  "desc": ". The substring used to delimit keys and values in the query string.",
                  "optional": true
                },
                {
                  "textRaw": "`options` ",
                  "options": [
                    {
                      "textRaw": "`encodeURIComponent` {Function} The function to use when converting URL-unsafe characters to percent-encoding in the query string. **Default:** `querystring.escape()`. ",
                      "name": "encodeURIComponent",
                      "type": "Function",
                      "default": "`querystring.escape()`",
                      "desc": "The function to use when converting URL-unsafe characters to percent-encoding in the query string."
                    }
                  ],
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "obj"
                },
                {
                  "name": "sep",
                  "optional": true
                },
                {
                  "name": "eq",
                  "optional": true
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>querystring.stringify()</code> method produces a URL query string from a\ngiven <code>obj</code> by iterating through the object&#39;s &quot;own properties&quot;.</p>\n<p>It serializes the following types of values passed in <code>obj</code>:\n{string|number|boolean|string[]|number[]|boolean[]}\nAny other input values will be coerced to empty strings.</p>\n<pre><code class=\"lang-js\">querystring.stringify({ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; });\n// returns &#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;\n\nquerystring.stringify({ foo: &#39;bar&#39;, baz: &#39;qux&#39; }, &#39;;&#39;, &#39;:&#39;);\n// returns &#39;foo:bar;baz:qux&#39;\n</code></pre>\n<p>By default, characters requiring percent-encoding within the query string will\nbe encoded as UTF-8. If an alternative encoding is required, then an alternative\n<code>encodeURIComponent</code> option will need to be specified as illustrated in the\nfollowing example:</p>\n<pre><code class=\"lang-js\">// Assuming gbkEncodeURIComponent function already exists,\n\nquerystring.stringify({ w: &#39;中文&#39;, foo: &#39;bar&#39; }, null, null,\n                      { encodeURIComponent: gbkEncodeURIComponent });\n</code></pre>\n"
        },
        {
          "textRaw": "querystring.unescape(str)",
          "type": "method",
          "name": "unescape",
          "meta": {
            "added": [
              "v0.1.25"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`str` {string} ",
                  "name": "str",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "str"
                }
              ]
            }
          ],
          "desc": "<p>The <code>querystring.unescape()</code> method performs decoding of URL percent-encoded\ncharacters on the given <code>str</code>.</p>\n<p>The <code>querystring.unescape()</code> method is used by <code>querystring.parse()</code> and is\ngenerally not expected to be used directly. It is exported primarily to allow\napplication code to provide a replacement decoding implementation if\nnecessary by assigning <code>querystring.unescape</code> to an alternative function.</p>\n<p>By default, the <code>querystring.unescape()</code> method will attempt to use the\nJavaScript built-in <code>decodeURIComponent()</code> method to decode. If that fails,\na safer equivalent that does not throw on malformed URLs will be used.</p>\n<!-- [end-include:querystring.md] -->\n<!-- [start-include:readline.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "querystring"
    },
    {
      "textRaw": "Readline",
      "name": "readline",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>readline</code> module provides an interface for reading data from a <a href=\"stream.html#stream_readable_streams\">Readable</a>\nstream (such as <a href=\"process.html#process_process_stdin\"><code>process.stdin</code></a>) one line at a time. It can be accessed using:</p>\n<pre><code class=\"lang-js\">const readline = require(&#39;readline&#39;);\n</code></pre>\n<p>The following simple example illustrates the basic use of the <code>readline</code> module.</p>\n<pre><code class=\"lang-js\">const readline = require(&#39;readline&#39;);\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nrl.question(&#39;What do you think of Node.js? &#39;, (answer) =&gt; {\n  // TODO: Log the answer in a database\n  console.log(`Thank you for your valuable feedback: ${answer}`);\n\n  rl.close();\n});\n</code></pre>\n<p>Once this code is invoked, the Node.js application will not terminate until the\n<code>readline.Interface</code> is closed because the interface waits for data to be\nreceived on the <code>input</code> stream.</p>\n",
      "classes": [
        {
          "textRaw": "Class: Interface",
          "type": "class",
          "name": "Interface",
          "meta": {
            "added": [
              "v0.1.104"
            ],
            "changes": []
          },
          "desc": "<p>Instances of the <code>readline.Interface</code> class are constructed using the\n<code>readline.createInterface()</code> method. Every instance is associated with a\nsingle <code>input</code> <a href=\"stream.html#stream_readable_streams\">Readable</a> stream and a single <code>output</code> <a href=\"stream.html#stream_writable_streams\">Writable</a> stream.\nThe <code>output</code> stream is used to print prompts for user input that arrives on,\nand is read from, the <code>input</code> stream.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "meta": {
                "added": [
                  "v0.1.98"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;close&#39;</code> event is emitted when one of the following occur:</p>\n<ul>\n<li>The <code>rl.close()</code> method is called and the <code>readline.Interface</code> instance has\nrelinquished control over the <code>input</code> and <code>output</code> streams;</li>\n<li>The <code>input</code> stream receives its <code>&#39;end&#39;</code> event;</li>\n<li>The <code>input</code> stream receives <code>&lt;ctrl&gt;-D</code> to signal end-of-transmission (EOT);</li>\n<li>The <code>input</code> stream receives <code>&lt;ctrl&gt;-C</code> to signal <code>SIGINT</code> and there is no\n<code>&#39;SIGINT&#39;</code> event listener registered on the <code>readline.Interface</code> instance.</li>\n</ul>\n<p>The listener function is called without passing any arguments.</p>\n<p>The <code>readline.Interface</code> instance is finished once the <code>&#39;close&#39;</code> event is\nemitted.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'line'",
              "type": "event",
              "name": "line",
              "meta": {
                "added": [
                  "v0.1.98"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;line&#39;</code> event is emitted whenever the <code>input</code> stream receives an\nend-of-line input (<code>\\n</code>, <code>\\r</code>, or <code>\\r\\n</code>). This usually occurs when the user\npresses the <code>&lt;Enter&gt;</code>, or <code>&lt;Return&gt;</code> keys.</p>\n<p>The listener function is called with a string containing the single line of\nreceived input.</p>\n<pre><code class=\"lang-js\">rl.on(&#39;line&#39;, (input) =&gt; {\n  console.log(`Received: ${input}`);\n});\n</code></pre>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'pause'",
              "type": "event",
              "name": "pause",
              "meta": {
                "added": [
                  "v0.7.5"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;pause&#39;</code> event is emitted when one of the following occur:</p>\n<ul>\n<li>The <code>input</code> stream is paused.</li>\n<li>The <code>input</code> stream is not paused and receives the <code>&#39;SIGCONT&#39;</code> event. (See\nevents <a href=\"readline.html#readline_event_sigtstp\"><code>&#39;SIGTSTP&#39;</code></a> and <a href=\"readline.html#readline_event_sigcont\"><code>&#39;SIGCONT&#39;</code></a>.)</li>\n</ul>\n<p>The listener function is called without passing any arguments.</p>\n<pre><code class=\"lang-js\">rl.on(&#39;pause&#39;, () =&gt; {\n  console.log(&#39;Readline paused.&#39;);\n});\n</code></pre>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'resume'",
              "type": "event",
              "name": "resume",
              "meta": {
                "added": [
                  "v0.7.5"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;resume&#39;</code> event is emitted whenever the <code>input</code> stream is resumed.</p>\n<p>The listener function is called without passing any arguments.</p>\n<pre><code class=\"lang-js\">rl.on(&#39;resume&#39;, () =&gt; {\n  console.log(&#39;Readline resumed.&#39;);\n});\n</code></pre>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'SIGCONT'",
              "type": "event",
              "name": "SIGCONT",
              "meta": {
                "added": [
                  "v0.7.5"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;SIGCONT&#39;</code> event is emitted when a Node.js process previously moved into\nthe background using <code>&lt;ctrl&gt;-Z</code> (i.e. <code>SIGTSTP</code>) is then brought back to the\nforeground using fg(1p).</p>\n<p>If the <code>input</code> stream was paused <em>before</em> the <code>SIGTSTP</code> request, this event will\nnot be emitted.</p>\n<p>The listener function is invoked without passing any arguments.</p>\n<pre><code class=\"lang-js\">rl.on(&#39;SIGCONT&#39;, () =&gt; {\n  // `prompt` will automatically resume the stream\n  rl.prompt();\n});\n</code></pre>\n<p>The <code>&#39;SIGCONT&#39;</code> event is <em>not</em> supported on Windows.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'SIGINT'",
              "type": "event",
              "name": "SIGINT",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;SIGINT&#39;</code> event is emitted whenever the <code>input</code> stream receives a\n<code>&lt;ctrl&gt;-C</code> input, known typically as <code>SIGINT</code>. If there are no <code>&#39;SIGINT&#39;</code> event\nlisteners registered when the <code>input</code> stream receives a <code>SIGINT</code>, the <code>&#39;pause&#39;</code>\nevent will be emitted.</p>\n<p>The listener function is invoked without passing any arguments.</p>\n<pre><code class=\"lang-js\">rl.on(&#39;SIGINT&#39;, () =&gt; {\n  rl.question(&#39;Are you sure you want to exit? &#39;, (answer) =&gt; {\n    if (answer.match(/^y(es)?$/i)) rl.pause();\n  });\n});\n</code></pre>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'SIGTSTP'",
              "type": "event",
              "name": "SIGTSTP",
              "meta": {
                "added": [
                  "v0.7.5"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;SIGTSTP&#39;</code> event is emitted when the <code>input</code> stream receives a <code>&lt;ctrl&gt;-Z</code>\ninput, typically known as <code>SIGTSTP</code>. If there are no <code>&#39;SIGTSTP&#39;</code> event listeners\nregistered when the <code>input</code> stream receives a <code>SIGTSTP</code>, the Node.js process\nwill be sent to the background.</p>\n<p>When the program is resumed using fg(1p), the <code>&#39;pause&#39;</code> and <code>&#39;SIGCONT&#39;</code> events\nwill be emitted. These can be used to resume the <code>input</code> stream.</p>\n<p>The <code>&#39;pause&#39;</code> and <code>&#39;SIGCONT&#39;</code> events will not be emitted if the <code>input</code> was\npaused before the process was sent to the background.</p>\n<p>The listener function is invoked without passing any arguments.</p>\n<pre><code class=\"lang-js\">rl.on(&#39;SIGTSTP&#39;, () =&gt; {\n  // This will override SIGTSTP and prevent the program from going to the\n  // background.\n  console.log(&#39;Caught SIGTSTP.&#39;);\n});\n</code></pre>\n<p>The <code>&#39;SIGTSTP&#39;</code> event is <em>not</em> supported on Windows.</p>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "rl.close()",
              "type": "method",
              "name": "close",
              "meta": {
                "added": [
                  "v0.1.98"
                ],
                "changes": []
              },
              "desc": "<p>The <code>rl.close()</code> method closes the <code>readline.Interface</code> instance and\nrelinquishes control over the <code>input</code> and <code>output</code> streams. When called,\nthe <code>&#39;close&#39;</code> event will be emitted.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "rl.pause()",
              "type": "method",
              "name": "pause",
              "meta": {
                "added": [
                  "v0.3.4"
                ],
                "changes": []
              },
              "desc": "<p>The <code>rl.pause()</code> method pauses the <code>input</code> stream, allowing it to be resumed\nlater if necessary.</p>\n<p>Calling <code>rl.pause()</code> does not immediately pause other events (including\n<code>&#39;line&#39;</code>) from being emitted by the <code>readline.Interface</code> instance.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "rl.prompt([preserveCursor])",
              "type": "method",
              "name": "prompt",
              "meta": {
                "added": [
                  "v0.1.98"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`preserveCursor` {boolean} If `true`, prevents the cursor placement from being reset to `0`. ",
                      "name": "preserveCursor",
                      "type": "boolean",
                      "desc": "If `true`, prevents the cursor placement from being reset to `0`.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "preserveCursor",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>rl.prompt()</code> method writes the <code>readline.Interface</code> instances configured\n<code>prompt</code> to a new line in <code>output</code> in order to provide a user with a new\nlocation at which to provide input.</p>\n<p>When called, <code>rl.prompt()</code> will resume the <code>input</code> stream if it has been\npaused.</p>\n<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\n<code>undefined</code> the prompt is not written.</p>\n"
            },
            {
              "textRaw": "rl.question(query, callback)",
              "type": "method",
              "name": "question",
              "meta": {
                "added": [
                  "v0.3.3"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`query` {string} A statement or query to write to `output`, prepended to the prompt. ",
                      "name": "query",
                      "type": "string",
                      "desc": "A statement or query to write to `output`, prepended to the prompt."
                    },
                    {
                      "textRaw": "`callback` {Function} A callback function that is invoked with the user's input in response to the `query`. ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "A callback function that is invoked with the user's input in response to the `query`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "query"
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>rl.question()</code> method displays the <code>query</code> by writing it to the <code>output</code>,\nwaits for user input to be provided on <code>input</code>, then invokes the <code>callback</code>\nfunction passing the provided input as the first argument.</p>\n<p>When called, <code>rl.question()</code> will resume the <code>input</code> stream if it has been\npaused.</p>\n<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\n<code>undefined</code> the <code>query</code> is not written.</p>\n<p>Example usage:</p>\n<pre><code class=\"lang-js\">rl.question(&#39;What is your favorite food? &#39;, (answer) =&gt; {\n  console.log(`Oh, so your favorite food is ${answer}`);\n});\n</code></pre>\n<p>The <code>callback</code> function passed to <code>rl.question()</code> does not follow the typical\npattern of accepting an <code>Error</code> object or <code>null</code> as the first argument.\nThe <code>callback</code> is called with the provided answer as the only argument.</p>\n"
            },
            {
              "textRaw": "rl.resume()",
              "type": "method",
              "name": "resume",
              "meta": {
                "added": [
                  "v0.3.4"
                ],
                "changes": []
              },
              "desc": "<p>The <code>rl.resume()</code> method resumes the <code>input</code> stream if it has been paused.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "rl.setPrompt(prompt)",
              "type": "method",
              "name": "setPrompt",
              "meta": {
                "added": [
                  "v0.1.98"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`prompt` {string} ",
                      "name": "prompt",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "prompt"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>rl.setPrompt()</code> method sets the prompt that will be written to <code>output</code>\nwhenever <code>rl.prompt()</code> is called.</p>\n"
            },
            {
              "textRaw": "rl.write(data[, key])",
              "type": "method",
              "name": "write",
              "meta": {
                "added": [
                  "v0.1.98"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`data` {string} ",
                      "name": "data",
                      "type": "string"
                    },
                    {
                      "textRaw": "`key` {Object} ",
                      "options": [
                        {
                          "textRaw": "`ctrl` {boolean} `true` to indicate the `<ctrl>` key. ",
                          "name": "ctrl",
                          "type": "boolean",
                          "desc": "`true` to indicate the `<ctrl>` key."
                        },
                        {
                          "textRaw": "`meta` {boolean} `true` to indicate the `<Meta>` key. ",
                          "name": "meta",
                          "type": "boolean",
                          "desc": "`true` to indicate the `<Meta>` key."
                        },
                        {
                          "textRaw": "`shift` {boolean} `true` to indicate the `<Shift>` key. ",
                          "name": "shift",
                          "type": "boolean",
                          "desc": "`true` to indicate the `<Shift>` key."
                        },
                        {
                          "textRaw": "`name` {string} The name of the a key. ",
                          "name": "name",
                          "type": "string",
                          "desc": "The name of the a key."
                        }
                      ],
                      "name": "key",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "data"
                    },
                    {
                      "name": "key",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>rl.write()</code> method will write either <code>data</code> or a key sequence identified\nby <code>key</code> to the <code>output</code>. The <code>key</code> argument is supported only if <code>output</code> is\na <a href=\"tty.html\">TTY</a> text terminal.</p>\n<p>If <code>key</code> is specified, <code>data</code> is ignored.</p>\n<p>When called, <code>rl.write()</code> will resume the <code>input</code> stream if it has been\npaused.</p>\n<p>If the <code>readline.Interface</code> was created with <code>output</code> set to <code>null</code> or\n<code>undefined</code> the <code>data</code> and <code>key</code> are not written.</p>\n<pre><code class=\"lang-js\">rl.write(&#39;Delete this!&#39;);\n// Simulate Ctrl+u to delete the line written previously\nrl.write(null, { ctrl: true, name: &#39;u&#39; });\n</code></pre>\n<p>The <code>rl.write()</code> method will write the data to the <code>readline</code> <code>Interface</code>&#39;s\n<code>input</code> <em>as if it were provided by the user</em>.</p>\n"
            }
          ]
        }
      ],
      "methods": [
        {
          "textRaw": "readline.clearLine(stream, dir)",
          "type": "method",
          "name": "clearLine",
          "meta": {
            "added": [
              "v0.7.7"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`stream` {stream.Writable} ",
                  "name": "stream",
                  "type": "stream.Writable"
                },
                {
                  "textRaw": "`dir` {number} ",
                  "options": [
                    {
                      "textRaw": "`-1` - to the left from cursor ",
                      "name": "-1",
                      "desc": "to the left from cursor"
                    },
                    {
                      "textRaw": "`1` - to the right from cursor ",
                      "name": "1",
                      "desc": "to the right from cursor"
                    },
                    {
                      "textRaw": "`0` - the entire line ",
                      "name": "0",
                      "desc": "the entire line"
                    }
                  ],
                  "name": "dir",
                  "type": "number"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "stream"
                },
                {
                  "name": "dir"
                }
              ]
            }
          ],
          "desc": "<p>The <code>readline.clearLine()</code> method clears current line of given <a href=\"tty.html\">TTY</a> stream\nin a specified direction identified by <code>dir</code>.</p>\n"
        },
        {
          "textRaw": "readline.clearScreenDown(stream)",
          "type": "method",
          "name": "clearScreenDown",
          "meta": {
            "added": [
              "v0.7.7"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`stream` {stream.Writable} ",
                  "name": "stream",
                  "type": "stream.Writable"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "stream"
                }
              ]
            }
          ],
          "desc": "<p>The <code>readline.clearScreenDown()</code> method clears the given <a href=\"tty.html\">TTY</a> stream from\nthe current position of the cursor down.</p>\n"
        },
        {
          "textRaw": "readline.createInterface(options)",
          "type": "method",
          "name": "createInterface",
          "meta": {
            "added": [
              "v0.1.98"
            ],
            "changes": [
              {
                "version": "v8.3.0, 6.11.4",
                "pr-url": "https://github.com/nodejs/node/pull/13497",
                "description": "Remove max limit of `crlfDelay` option."
              },
              {
                "version": "v6.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/8109",
                "description": "The `crlfDelay` option is supported now."
              },
              {
                "version": "v6.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/7125",
                "description": "The `prompt` option is supported now."
              },
              {
                "version": "v6.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/6352",
                "description": "The `historySize` option can be `0` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`input` {stream.Readable} The [Readable][] stream to listen to. This option is *required*. ",
                      "name": "input",
                      "type": "stream.Readable",
                      "desc": "The [Readable][] stream to listen to. This option is *required*."
                    },
                    {
                      "textRaw": "`output` {stream.Writable} The [Writable][] stream to write readline data to. ",
                      "name": "output",
                      "type": "stream.Writable",
                      "desc": "The [Writable][] stream to write readline data to."
                    },
                    {
                      "textRaw": "`completer` {Function} An optional function used for Tab autocompletion. ",
                      "name": "completer",
                      "type": "Function",
                      "desc": "An optional function used for Tab autocompletion."
                    },
                    {
                      "textRaw": "`terminal` {boolean} `true` if the `input` and `output` streams should be treated like a TTY, and have ANSI/VT100 escape codes written to it. **Default:** checking `isTTY` on the `output` stream upon instantiation. ",
                      "name": "terminal",
                      "type": "boolean",
                      "default": "checking `isTTY` on the `output` stream upon instantiation",
                      "desc": "`true` if the `input` and `output` streams should be treated like a TTY, and have ANSI/VT100 escape codes written to it."
                    },
                    {
                      "textRaw": "`historySize` {number} Maximum number of history lines retained. To disable the history set this value to `0`. This option makes sense only if `terminal` is set to `true` by the user or by an internal `output` check, otherwise the history caching mechanism is not initialized at all. **Default:** `30`. ",
                      "name": "historySize",
                      "type": "number",
                      "default": "`30`",
                      "desc": "Maximum number of history lines retained. To disable the history set this value to `0`. This option makes sense only if `terminal` is set to `true` by the user or by an internal `output` check, otherwise the history caching mechanism is not initialized at all."
                    },
                    {
                      "textRaw": "`prompt` {string} The prompt string to use. **Default:** `'> '`. ",
                      "name": "prompt",
                      "type": "string",
                      "default": "`'> '`",
                      "desc": "The prompt string to use."
                    },
                    {
                      "textRaw": "`crlfDelay` {number} If the delay between `\\r` and `\\n` exceeds `crlfDelay` milliseconds, both `\\r` and `\\n` will be treated as separate end-of-line input. `crlfDelay` will be coerced to a number no less than `100`. It can be set to `Infinity`, in which case `\\r` followed by `\\n` will always be considered a single newline (which may be reasonable for [reading files][] with `\\r\\n` line delimiter). **Default:** `100`. ",
                      "name": "crlfDelay",
                      "type": "number",
                      "default": "`100`",
                      "desc": "If the delay between `\\r` and `\\n` exceeds `crlfDelay` milliseconds, both `\\r` and `\\n` will be treated as separate end-of-line input. `crlfDelay` will be coerced to a number no less than `100`. It can be set to `Infinity`, in which case `\\r` followed by `\\n` will always be considered a single newline (which may be reasonable for [reading files][] with `\\r\\n` line delimiter)."
                    },
                    {
                      "textRaw": "`removeHistoryDuplicates` {boolean} If `true`, when a new input line added to the history list duplicates an older one, this removes the older line from the list. **Default:** `false`. ",
                      "name": "removeHistoryDuplicates",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "If `true`, when a new input line added to the history list duplicates an older one, this removes the older line from the list."
                    }
                  ],
                  "name": "options",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "options"
                }
              ]
            }
          ],
          "desc": "<p>The <code>readline.createInterface()</code> method creates a new <code>readline.Interface</code>\ninstance.</p>\n<pre><code class=\"lang-js\">const readline = require(&#39;readline&#39;);\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n</code></pre>\n<p>Once the <code>readline.Interface</code> instance is created, the most common case is to\nlisten for the <code>&#39;line&#39;</code> event:</p>\n<pre><code class=\"lang-js\">rl.on(&#39;line&#39;, (line) =&gt; {\n  console.log(`Received: ${line}`);\n});\n</code></pre>\n<p>If <code>terminal</code> is <code>true</code> for this instance then the <code>output</code> stream will get\nthe best compatibility if it defines an <code>output.columns</code> property and emits\na <code>&#39;resize&#39;</code> event on the <code>output</code> if or when the columns ever change\n(<a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> does this automatically when it is a TTY).</p>\n",
          "modules": [
            {
              "textRaw": "Use of the `completer` Function",
              "name": "use_of_the_`completer`_function",
              "desc": "<p>The <code>completer</code> function takes the current line entered by the user\nas an argument, and returns an <code>Array</code> with 2 entries:</p>\n<ul>\n<li>An <code>Array</code> with matching entries for the completion.</li>\n<li>The substring that was used for the matching.</li>\n</ul>\n<p>For instance: <code>[[substr1, substr2, ...], originalsubstring]</code>.</p>\n<pre><code class=\"lang-js\">function completer(line) {\n  const completions = &#39;.help .error .exit .quit .q&#39;.split(&#39; &#39;);\n  const hits = completions.filter((c) =&gt; c.startsWith(line));\n  // show all completions if none found\n  return [hits.length ? hits : completions, line];\n}\n</code></pre>\n<p>The <code>completer</code> function can be called asynchronously if it accepts two\narguments:</p>\n<pre><code class=\"lang-js\">function completer(linePartial, callback) {\n  callback(null, [[&#39;123&#39;], linePartial]);\n}\n</code></pre>\n",
              "type": "module",
              "displayName": "Use of the `completer` Function"
            }
          ]
        },
        {
          "textRaw": "readline.cursorTo(stream, x, y)",
          "type": "method",
          "name": "cursorTo",
          "meta": {
            "added": [
              "v0.7.7"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`stream` {stream.Writable} ",
                  "name": "stream",
                  "type": "stream.Writable"
                },
                {
                  "textRaw": "`x` {number} ",
                  "name": "x",
                  "type": "number"
                },
                {
                  "textRaw": "`y` {number} ",
                  "name": "y",
                  "type": "number"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "stream"
                },
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ]
            }
          ],
          "desc": "<p>The <code>readline.cursorTo()</code> method moves cursor to the specified position in a\ngiven <a href=\"tty.html\">TTY</a> <code>stream</code>.</p>\n"
        },
        {
          "textRaw": "readline.emitKeypressEvents(stream[, interface])",
          "type": "method",
          "name": "emitKeypressEvents",
          "meta": {
            "added": [
              "v0.7.7"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`stream` {stream.Readable} ",
                  "name": "stream",
                  "type": "stream.Readable"
                },
                {
                  "textRaw": "`interface` {readline.Interface} ",
                  "name": "interface",
                  "type": "readline.Interface",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "stream"
                },
                {
                  "name": "interface",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>readline.emitKeypressEvents()</code> method causes the given <a href=\"stream.html#stream_readable_streams\">Readable</a>\nstream to begin emitting <code>&#39;keypress&#39;</code> events corresponding to received input.</p>\n<p>Optionally, <code>interface</code> specifies a <code>readline.Interface</code> instance for which\nautocompletion is disabled when copy-pasted input is detected.</p>\n<p>If the <code>stream</code> is a <a href=\"tty.html\">TTY</a>, then it must be in raw mode.</p>\n<p>This is automatically called by any readline instance on its <code>input</code> if the\n<code>input</code> is a terminal. Closing the <code>readline</code> instance does not stop\nthe <code>input</code> from emitting <code>&#39;keypress&#39;</code> events.</p>\n<pre><code class=\"lang-js\">readline.emitKeypressEvents(process.stdin);\nif (process.stdin.isTTY)\n  process.stdin.setRawMode(true);\n</code></pre>\n"
        },
        {
          "textRaw": "readline.moveCursor(stream, dx, dy)",
          "type": "method",
          "name": "moveCursor",
          "meta": {
            "added": [
              "v0.7.7"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`stream` {stream.Writable} ",
                  "name": "stream",
                  "type": "stream.Writable"
                },
                {
                  "textRaw": "`dx` {number} ",
                  "name": "dx",
                  "type": "number"
                },
                {
                  "textRaw": "`dy` {number} ",
                  "name": "dy",
                  "type": "number"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "stream"
                },
                {
                  "name": "dx"
                },
                {
                  "name": "dy"
                }
              ]
            }
          ],
          "desc": "<p>The <code>readline.moveCursor()</code> method moves the cursor <em>relative</em> to its current\nposition in a given <a href=\"tty.html\">TTY</a> <code>stream</code>.</p>\n<h2>Example: Tiny CLI</h2>\n<p>The following example illustrates the use of <code>readline.Interface</code> class to\nimplement a small command-line interface:</p>\n<pre><code class=\"lang-js\">const readline = require(&#39;readline&#39;);\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n  prompt: &#39;OHAI&gt; &#39;\n});\n\nrl.prompt();\n\nrl.on(&#39;line&#39;, (line) =&gt; {\n  switch (line.trim()) {\n    case &#39;hello&#39;:\n      console.log(&#39;world!&#39;);\n      break;\n    default:\n      console.log(`Say what? I might have heard &#39;${line.trim()}&#39;`);\n      break;\n  }\n  rl.prompt();\n}).on(&#39;close&#39;, () =&gt; {\n  console.log(&#39;Have a great day!&#39;);\n  process.exit(0);\n});\n</code></pre>\n<h2>Example: Read File Stream Line-by-Line</h2>\n<p>A common use case for <code>readline</code> is to consume input from a filesystem\n<a href=\"stream.html#stream_readable_streams\">Readable</a> stream one line at a time, as illustrated in the following\nexample:</p>\n<pre><code class=\"lang-js\">const readline = require(&#39;readline&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst rl = readline.createInterface({\n  input: fs.createReadStream(&#39;sample.txt&#39;),\n  crlfDelay: Infinity\n});\n\nrl.on(&#39;line&#39;, (line) =&gt; {\n  console.log(`Line from file: ${line}`);\n});\n</code></pre>\n<!-- [end-include:readline.md] -->\n<!-- [start-include:repl.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "Readline"
    },
    {
      "textRaw": "REPL",
      "name": "repl",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>repl</code> module provides a Read-Eval-Print-Loop (REPL) implementation that\nis available both as a standalone program or includible in other applications.\nIt can be accessed using:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\n</code></pre>\n",
      "modules": [
        {
          "textRaw": "Design and Features",
          "name": "design_and_features",
          "desc": "<p>The <code>repl</code> module exports the <code>repl.REPLServer</code> class. While running, instances\nof <code>repl.REPLServer</code> will accept individual lines of user input, evaluate those\naccording to a user-defined evaluation function, then output the result. Input\nand output may be from <code>stdin</code> and <code>stdout</code>, respectively, or may be connected\nto any Node.js <a href=\"stream.html#stream_stream\">stream</a>.</p>\n<p>Instances of <code>repl.REPLServer</code> support automatic completion of inputs,\nsimplistic Emacs-style line editing, multi-line inputs, ANSI-styled output,\nsaving and restoring current REPL session state, error recovery, and\ncustomizable evaluation functions.</p>\n",
          "modules": [
            {
              "textRaw": "Commands and Special Keys",
              "name": "commands_and_special_keys",
              "desc": "<p>The following special commands are supported by all REPL instances:</p>\n<ul>\n<li><code>.break</code> - When in the process of inputting a multi-line expression, entering\nthe <code>.break</code> command (or pressing the <code>&lt;ctrl&gt;-C</code> key combination) will abort\nfurther input or processing of that expression.</li>\n<li><code>.clear</code> - Resets the REPL <code>context</code> to an empty object and clears any\nmulti-line expression currently being input.</li>\n<li><code>.exit</code> - Close the I/O stream, causing the REPL to exit.</li>\n<li><code>.help</code> - Show this list of special commands.</li>\n<li><code>.save</code> - Save the current REPL session to a file:\n<code>&gt; .save ./file/to/save.js</code></li>\n<li><code>.load</code> - Load a file into the current REPL session.\n<code>&gt; .load ./file/to/load.js</code></li>\n<li><code>.editor</code> - Enter editor mode (<code>&lt;ctrl&gt;-D</code> to finish, <code>&lt;ctrl&gt;-C</code> to cancel).</li>\n</ul>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">&gt; .editor\n// Entering editor mode (^D to finish, ^C to cancel)\nfunction welcome(name) {\n  return `Hello ${name}!`;\n}\n\nwelcome(&#39;Node.js User&#39;);\n\n// ^D\n&#39;Hello Node.js User!&#39;\n&gt;\n</code></pre>\n<p>The following key combinations in the REPL have these special effects:</p>\n<ul>\n<li><code>&lt;ctrl&gt;-C</code> - When pressed once, has the same effect as the <code>.break</code> command.\nWhen pressed twice on a blank line, has the same effect as the <code>.exit</code>\ncommand.</li>\n<li><code>&lt;ctrl&gt;-D</code> - Has the same effect as the <code>.exit</code> command.</li>\n<li><code>&lt;tab&gt;</code> - When pressed on a blank line, displays global and local (scope)\nvariables. When pressed while entering other input, displays relevant\nautocompletion options.</li>\n</ul>\n",
              "type": "module",
              "displayName": "Commands and Special Keys"
            },
            {
              "textRaw": "Default Evaluation",
              "name": "default_evaluation",
              "desc": "<p>By default, all instances of <code>repl.REPLServer</code> use an evaluation function that\nevaluates JavaScript expressions and provides access to Node.js&#39; built-in\nmodules. This default behavior can be overridden by passing in an alternative\nevaluation function when the <code>repl.REPLServer</code> instance is created.</p>\n",
              "modules": [
                {
                  "textRaw": "JavaScript Expressions",
                  "name": "javascript_expressions",
                  "desc": "<p>The default evaluator supports direct evaluation of JavaScript expressions:</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">&gt; 1 + 1\n2\n&gt; const m = 2\nundefined\n&gt; m + 1\n3\n</code></pre>\n<p>Unless otherwise scoped within blocks or functions, variables declared\neither implicitly or using the <code>const</code>, <code>let</code>, or <code>var</code> keywords\nare declared at the global scope.</p>\n",
                  "type": "module",
                  "displayName": "JavaScript Expressions"
                },
                {
                  "textRaw": "Global and Local Scope",
                  "name": "global_and_local_scope",
                  "desc": "<p>The default evaluator provides access to any variables that exist in the global\nscope. It is possible to expose a variable to the REPL explicitly by assigning\nit to the <code>context</code> object associated with each <code>REPLServer</code>:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\nconst msg = &#39;message&#39;;\n\nrepl.start(&#39;&gt; &#39;).context.m = msg;\n</code></pre>\n<p>Properties in the <code>context</code> object appear as local within the REPL:</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">$ node repl_test.js\n&gt; m\n&#39;message&#39;\n</code></pre>\n<p>Context properties are not read-only by default. To specify read-only globals,\ncontext properties must be defined using <code>Object.defineProperty()</code>:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\nconst msg = &#39;message&#39;;\n\nconst r = repl.start(&#39;&gt; &#39;);\nObject.defineProperty(r.context, &#39;m&#39;, {\n  configurable: false,\n  enumerable: true,\n  value: msg\n});\n</code></pre>\n",
                  "type": "module",
                  "displayName": "Global and Local Scope"
                },
                {
                  "textRaw": "Accessing Core Node.js Modules",
                  "name": "accessing_core_node.js_modules",
                  "desc": "<p>The default evaluator will automatically load Node.js core modules into the\nREPL environment when used. For instance, unless otherwise declared as a\nglobal or scoped variable, the input <code>fs</code> will be evaluated on-demand as\n<code>global.fs = require(&#39;fs&#39;)</code>.</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">&gt; fs.createReadStream(&#39;./some/file&#39;);\n</code></pre>\n",
                  "type": "module",
                  "displayName": "Accessing Core Node.js Modules"
                },
                {
                  "textRaw": "Global Uncaught Exceptions",
                  "name": "global_uncaught_exceptions",
                  "desc": "<p>The REPL uses the <a href=\"domain.html\"><code>domain</code></a> module to catch all uncaught exceptions for that\nREPL session.</p>\n<p>This use of the <a href=\"domain.html\"><code>domain</code></a> module in the REPL has these side effects:</p>\n<ul>\n<li>Uncaught exceptions do not emit the <a href=\"process.html#process_event_uncaughtexception\"><code>&#39;uncaughtException&#39;</code></a> event.</li>\n<li>Trying to use <a href=\"process.html#process_process_setuncaughtexceptioncapturecallback_fn\"><code>process.setUncaughtExceptionCaptureCallback()</code></a> throws\nan <a href=\"errors.html#errors_err_domain_cannot_set_uncaught_exception_capture\"><code>ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE</code></a> error.</li>\n</ul>\n",
                  "type": "module",
                  "displayName": "Global Uncaught Exceptions"
                },
                {
                  "textRaw": "Assignment of the `_` (underscore) variable",
                  "name": "assignment_of_the_`_`_(underscore)_variable",
                  "meta": {
                    "changes": [
                      {
                        "version": "v9.8.0",
                        "pr-url": "https://github.com/nodejs/node/pull/18919",
                        "description": "Added `_error` support."
                      }
                    ]
                  },
                  "desc": "<p>The default evaluator will, by default, assign the result of the most recently\nevaluated expression to the special variable <code>_</code> (underscore).\nExplicitly setting <code>_</code> to a value will disable this behavior.</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">&gt; [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]\n[ &#39;a&#39;, &#39;b&#39;, &#39;c&#39; ]\n&gt; _.length\n3\n&gt; _ += 1\nExpression assignment to _ now disabled.\n4\n&gt; 1 + 1\n2\n&gt; _\n4\n</code></pre>\n<p>Similarly, <code>_error</code> will refer to the last seen error, if there was any.\nExplicitly setting <code>_error</code> to a value will disable this behavior.</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">&gt; throw new Error(&#39;foo&#39;);\nError: foo\n&gt; _error.message\n&#39;foo&#39;\n</code></pre>\n",
                  "type": "module",
                  "displayName": "Assignment of the `_` (underscore) variable"
                },
                {
                  "textRaw": "`await` keyword",
                  "name": "`await`_keyword",
                  "desc": "<p>With the <a href=\"cli.html#cli_experimental_repl_await\"><code>--experimental-repl-await</code></a> command line option specified,\nexperimental support for the <code>await</code> keyword is enabled.</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">&gt; await Promise.resolve(123)\n123\n&gt; await Promise.reject(new Error(&#39;REPL await&#39;))\nError: REPL await\n    at repl:1:45\n&gt; const timeout = util.promisify(setTimeout);\nundefined\n&gt; const old = Date.now(); await timeout(1000); console.log(Date.now() - old);\n1002\nundefined\n</code></pre>\n",
                  "type": "module",
                  "displayName": "`await` keyword"
                }
              ],
              "type": "module",
              "displayName": "Default Evaluation"
            },
            {
              "textRaw": "Custom Evaluation Functions",
              "name": "custom_evaluation_functions",
              "desc": "<p>When a new <code>repl.REPLServer</code> is created, a custom evaluation function may be\nprovided. This can be used, for instance, to implement fully customized REPL\napplications.</p>\n<p>The following illustrates a hypothetical example of a REPL that performs\ntranslation of text from one language to another:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\nconst { Translator } = require(&#39;translator&#39;);\n\nconst myTranslator = new Translator(&#39;en&#39;, &#39;fr&#39;);\n\nfunction myEval(cmd, context, filename, callback) {\n  callback(null, myTranslator.translate(cmd));\n}\n\nrepl.start({ prompt: &#39;&gt; &#39;, eval: myEval });\n</code></pre>\n",
              "modules": [
                {
                  "textRaw": "Recoverable Errors",
                  "name": "recoverable_errors",
                  "desc": "<p>As a user is typing input into the REPL prompt, pressing the <code>&lt;enter&gt;</code> key will\nsend the current line of input to the <code>eval</code> function. In order to support\nmulti-line input, the eval function can return an instance of <code>repl.Recoverable</code>\nto the provided callback function:</p>\n<pre><code class=\"lang-js\">function myEval(cmd, context, filename, callback) {\n  let result;\n  try {\n    result = vm.runInThisContext(cmd);\n  } catch (e) {\n    if (isRecoverableError(e)) {\n      return callback(new repl.Recoverable(e));\n    }\n  }\n  callback(null, result);\n}\n\nfunction isRecoverableError(error) {\n  if (error.name === &#39;SyntaxError&#39;) {\n    return /^(Unexpected end of input|Unexpected token)/.test(error.message);\n  }\n  return false;\n}\n</code></pre>\n",
                  "type": "module",
                  "displayName": "Recoverable Errors"
                }
              ],
              "type": "module",
              "displayName": "Custom Evaluation Functions"
            },
            {
              "textRaw": "Customizing REPL Output",
              "name": "customizing_repl_output",
              "desc": "<p>By default, <code>repl.REPLServer</code> instances format output using the\n<a href=\"#util_util_inspect_object_options\"><code>util.inspect()</code></a> method before writing the output to the provided <code>Writable</code>\nstream (<code>process.stdout</code> by default). The <code>useColors</code> boolean option can be\nspecified at construction to instruct the default writer to use ANSI style\ncodes to colorize the output from the <code>util.inspect()</code> method.</p>\n<p>It is possible to fully customize the output of a <code>repl.REPLServer</code> instance\nby passing a new function in using the <code>writer</code> option on construction. The\nfollowing example, for instance, simply converts any input text to upper case:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\n\nconst r = repl.start({ prompt: &#39;&gt; &#39;, eval: myEval, writer: myWriter });\n\nfunction myEval(cmd, context, filename, callback) {\n  callback(null, cmd);\n}\n\nfunction myWriter(output) {\n  return output.toUpperCase();\n}\n</code></pre>\n",
              "type": "module",
              "displayName": "Customizing REPL Output"
            }
          ],
          "type": "module",
          "displayName": "Design and Features"
        },
        {
          "textRaw": "The Node.js REPL",
          "name": "the_node.js_repl",
          "desc": "<p>Node.js itself uses the <code>repl</code> module to provide its own interactive interface\nfor executing JavaScript. This can be used by executing the Node.js binary\nwithout passing any arguments (or by passing the <code>-i</code> argument):</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">$ node\n&gt; const a = [1, 2, 3];\nundefined\n&gt; a\n[ 1, 2, 3 ]\n&gt; a.forEach((v) =&gt; {\n...   console.log(v);\n...   });\n1\n2\n3\n</code></pre>\n",
          "modules": [
            {
              "textRaw": "Environment Variable Options",
              "name": "environment_variable_options",
              "desc": "<p>Various behaviors of the Node.js REPL can be customized using the following\nenvironment variables:</p>\n<ul>\n<li><code>NODE_REPL_HISTORY</code> - When a valid path is given, persistent REPL history\nwill be saved to the specified file rather than <code>.node_repl_history</code> in the\nuser&#39;s home directory. Setting this value to <code>&#39;&#39;</code> will disable persistent\nREPL history. Whitespace will be trimmed from the value.</li>\n<li><code>NODE_REPL_HISTORY_SIZE</code> - Controls how many lines of history will be\npersisted if history is available. Must be a positive number.\n<strong>Default:</strong> <code>1000</code>.</li>\n<li><code>NODE_REPL_MODE</code> - May be either <code>&#39;sloppy&#39;</code> or <code>&#39;strict&#39;</code>. <strong>Default:</strong>\n<code>&#39;sloppy&#39;</code>, which will allow non-strict mode code to be run.</li>\n</ul>\n",
              "type": "module",
              "displayName": "Environment Variable Options"
            },
            {
              "textRaw": "Persistent History",
              "name": "persistent_history",
              "desc": "<p>By default, the Node.js REPL will persist history between <code>node</code> REPL sessions\nby saving inputs to a <code>.node_repl_history</code> file located in the user&#39;s home\ndirectory. This can be disabled by setting the environment variable\n<code>NODE_REPL_HISTORY=&#39;&#39;</code>.</p>\n",
              "type": "module",
              "displayName": "Persistent History"
            },
            {
              "textRaw": "Using the Node.js REPL with advanced line-editors",
              "name": "using_the_node.js_repl_with_advanced_line-editors",
              "desc": "<p>For advanced line-editors, start Node.js with the environment variable\n<code>NODE_NO_READLINE=1</code>. This will start the main and debugger REPL in canonical\nterminal settings, which will allow use with <code>rlwrap</code>.</p>\n<p>For example, the following can be added to a <code>.bashrc</code> file:</p>\n<pre><code class=\"lang-text\">alias node=&quot;env NODE_NO_READLINE=1 rlwrap node&quot;\n</code></pre>\n",
              "type": "module",
              "displayName": "Using the Node.js REPL with advanced line-editors"
            },
            {
              "textRaw": "Starting multiple REPL instances against a single running instance",
              "name": "starting_multiple_repl_instances_against_a_single_running_instance",
              "desc": "<p>It is possible to create and run multiple REPL instances against a single\nrunning instance of Node.js that share a single <code>global</code> object but have\nseparate I/O interfaces.</p>\n<p>The following example, for instance, provides separate REPLs on <code>stdin</code>, a Unix\nsocket, and a TCP socket:</p>\n<pre><code class=\"lang-js\">const net = require(&#39;net&#39;);\nconst repl = require(&#39;repl&#39;);\nlet connections = 0;\n\nrepl.start({\n  prompt: &#39;Node.js via stdin&gt; &#39;,\n  input: process.stdin,\n  output: process.stdout\n});\n\nnet.createServer((socket) =&gt; {\n  connections += 1;\n  repl.start({\n    prompt: &#39;Node.js via Unix socket&gt; &#39;,\n    input: socket,\n    output: socket\n  }).on(&#39;exit&#39;, () =&gt; {\n    socket.end();\n  });\n}).listen(&#39;/tmp/node-repl-sock&#39;);\n\nnet.createServer((socket) =&gt; {\n  connections += 1;\n  repl.start({\n    prompt: &#39;Node.js via TCP socket&gt; &#39;,\n    input: socket,\n    output: socket\n  }).on(&#39;exit&#39;, () =&gt; {\n    socket.end();\n  });\n}).listen(5001);\n</code></pre>\n<p>Running this application from the command line will start a REPL on stdin.\nOther REPL clients may connect through the Unix socket or TCP socket. <code>telnet</code>,\nfor instance, is useful for connecting to TCP sockets, while <code>socat</code> can be used\nto connect to both Unix and TCP sockets.</p>\n<p>By starting a REPL from a Unix socket-based server instead of stdin, it is\npossible to connect to a long-running Node.js process without restarting it.</p>\n<p>For an example of running a &quot;full-featured&quot; (<code>terminal</code>) REPL over\na <code>net.Server</code> and <code>net.Socket</code> instance, see:\n<a href=\"https://gist.github.com/2209310\">https://gist.github.com/2209310</a>.</p>\n<p>For an example of running a REPL instance over <a href=\"https://curl.haxx.se/docs/manpage.html\">curl(1)</a>, see:\n<a href=\"https://gist.github.com/2053342\">https://gist.github.com/2053342</a>.</p>\n<!-- [end-include:repl.md] -->\n<!-- [start-include:stream.md] -->\n",
              "type": "module",
              "displayName": "Starting multiple REPL instances against a single running instance"
            }
          ],
          "type": "module",
          "displayName": "The Node.js REPL"
        }
      ],
      "classes": [
        {
          "textRaw": "Class: REPLServer",
          "type": "class",
          "name": "REPLServer",
          "meta": {
            "added": [
              "v0.1.91"
            ],
            "changes": []
          },
          "desc": "<p>The <code>repl.REPLServer</code> class inherits from the <a href=\"readline.html#readline_class_interface\"><code>readline.Interface</code></a> class.\nInstances of <code>repl.REPLServer</code> are created using the <code>repl.start()</code> method and\n<em>should not</em> be created directly using the JavaScript <code>new</code> keyword.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'exit'",
              "type": "event",
              "name": "exit",
              "meta": {
                "added": [
                  "v0.7.7"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;exit&#39;</code> event is emitted when the REPL is exited either by receiving the\n<code>.exit</code> command as input, the user pressing <code>&lt;ctrl&gt;-C</code> twice to signal <code>SIGINT</code>,\nor by pressing <code>&lt;ctrl&gt;-D</code> to signal <code>&#39;end&#39;</code> on the input stream. The listener\ncallback is invoked without any arguments.</p>\n<pre><code class=\"lang-js\">replServer.on(&#39;exit&#39;, () =&gt; {\n  console.log(&#39;Received &quot;exit&quot; event from repl!&#39;);\n  process.exit();\n});\n</code></pre>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'reset'",
              "type": "event",
              "name": "reset",
              "meta": {
                "added": [
                  "v0.11.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;reset&#39;</code> event is emitted when the REPL&#39;s context is reset. This occurs\nwhenever the <code>.clear</code> command is received as input <em>unless</em> the REPL is using\nthe default evaluator and the <code>repl.REPLServer</code> instance was created with the\n<code>useGlobal</code> option set to <code>true</code>. The listener callback will be called with a\nreference to the <code>context</code> object as the only argument.</p>\n<p>This can be used primarily to re-initialize REPL context to some pre-defined\nstate as illustrated in the following simple example:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\n\nfunction initializeContext(context) {\n  context.m = &#39;test&#39;;\n}\n\nconst r = repl.start({ prompt: &#39;&gt; &#39; });\ninitializeContext(r.context);\n\nr.on(&#39;reset&#39;, initializeContext);\n</code></pre>\n<p>When this code is executed, the global <code>&#39;m&#39;</code> variable can be modified but then\nreset to its initial value using the <code>.clear</code> command:</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">$ ./node example.js\n&gt; m\n&#39;test&#39;\n&gt; m = 1\n1\n&gt; m\n1\n&gt; .clear\nClearing context...\n&gt; m\n&#39;test&#39;\n&gt;\n</code></pre>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "replServer.defineCommand(keyword, cmd)",
              "type": "method",
              "name": "defineCommand",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`keyword` {string} The command keyword (*without* a leading `.` character). ",
                      "name": "keyword",
                      "type": "string",
                      "desc": "The command keyword (*without* a leading `.` character)."
                    },
                    {
                      "textRaw": "`cmd` {Object|Function} The function to invoke when the command is processed. ",
                      "name": "cmd",
                      "type": "Object|Function",
                      "desc": "The function to invoke when the command is processed."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "keyword"
                    },
                    {
                      "name": "cmd"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>replServer.defineCommand()</code> method is used to add new <code>.</code>-prefixed commands\nto the REPL instance. Such commands are invoked by typing a <code>.</code> followed by the\n<code>keyword</code>. The <code>cmd</code> is either a <code>Function</code> or an <code>Object</code> with the following\nproperties:</p>\n<ul>\n<li><code>help</code> {string} Help text to be displayed when <code>.help</code> is entered (Optional).</li>\n<li><code>action</code> {Function} The function to execute, optionally accepting a single\nstring argument.</li>\n</ul>\n<p>The following example shows two new commands added to the REPL instance:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\n\nconst replServer = repl.start({ prompt: &#39;&gt; &#39; });\nreplServer.defineCommand(&#39;sayhello&#39;, {\n  help: &#39;Say hello&#39;,\n  action(name) {\n    this.clearBufferedCommand();\n    console.log(`Hello, ${name}!`);\n    this.displayPrompt();\n  }\n});\nreplServer.defineCommand(&#39;saybye&#39;, function saybye() {\n  console.log(&#39;Goodbye!&#39;);\n  this.close();\n});\n</code></pre>\n<p>The new commands can then be used from within the REPL instance:</p>\n<pre><code class=\"lang-txt\">&gt; .sayhello Node.js User\nHello, Node.js User!\n&gt; .saybye\nGoodbye!\n</code></pre>\n"
            },
            {
              "textRaw": "replServer.displayPrompt([preserveCursor])",
              "type": "method",
              "name": "displayPrompt",
              "meta": {
                "added": [
                  "v0.1.91"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`preserveCursor` {boolean} ",
                      "name": "preserveCursor",
                      "type": "boolean",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "preserveCursor",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>replServer.displayPrompt()</code> method readies the REPL instance for input\nfrom the user, printing the configured <code>prompt</code> to a new line in the <code>output</code>\nand resuming the <code>input</code> to accept new input.</p>\n<p>When multi-line input is being entered, an ellipsis is printed rather than the\n&#39;prompt&#39;.</p>\n<p>When <code>preserveCursor</code> is <code>true</code>, the cursor placement will not be reset to <code>0</code>.</p>\n<p>The <code>replServer.displayPrompt</code> method is primarily intended to be called from\nwithin the action function for commands registered using the\n<code>replServer.defineCommand()</code> method.</p>\n"
            },
            {
              "textRaw": "replServer.clearBufferedCommand()",
              "type": "method",
              "name": "clearBufferedCommand",
              "meta": {
                "added": [
                  "v9.0.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>replServer.clearBufferedCommand()</code> method clears any command that has been\nbuffered but not yet executed. This method is primarily intended to be\ncalled from within the action function for commands registered using the\n<code>replServer.defineCommand()</code> method.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "replServer.parseREPLKeyword(keyword, [rest])",
              "type": "method",
              "name": "parseREPLKeyword",
              "meta": {
                "added": [
                  "v0.8.9"
                ],
                "deprecated": [
                  "v9.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`keyword` {string} the potential keyword to parse and execute ",
                      "name": "keyword",
                      "type": "string",
                      "desc": "the potential keyword to parse and execute"
                    },
                    {
                      "textRaw": "`rest` {any} any parameters to the keyword command ",
                      "name": "rest",
                      "type": "any",
                      "desc": "any parameters to the keyword command",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "keyword"
                    },
                    {
                      "name": "rest",
                      "optional": true
                    }
                  ]
                }
              ],
              "stability": 0,
              "stabilityText": "Deprecated.",
              "desc": "<p>An internal method used to parse and execute <code>REPLServer</code> keywords.\nReturns <code>true</code> if <code>keyword</code> is a valid keyword, otherwise <code>false</code>.</p>\n"
            }
          ]
        }
      ],
      "methods": [
        {
          "textRaw": "repl.start([options])",
          "type": "method",
          "name": "start",
          "meta": {
            "added": [
              "v0.1.91"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/v10.0.0",
                "description": "The `REPL_MAGIC_MODE` `replMode` was removed."
              },
              {
                "version": "v5.8.0",
                "pr-url": "https://github.com/nodejs/node/pull/5388",
                "description": "The `options` parameter is optional now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`options` {Object|string} ",
                  "options": [
                    {
                      "textRaw": "`prompt` {string} The input prompt to display. **Default:** `'> '` (with a trailing space). ",
                      "name": "prompt",
                      "type": "string",
                      "default": "`'> '` (with a trailing space)",
                      "desc": "The input prompt to display."
                    },
                    {
                      "textRaw": "`input` {stream.Readable} The `Readable` stream from which REPL input will be read. **Default:** `process.stdin`. ",
                      "name": "input",
                      "type": "stream.Readable",
                      "default": "`process.stdin`",
                      "desc": "The `Readable` stream from which REPL input will be read."
                    },
                    {
                      "textRaw": "`output` {stream.Writable} The `Writable` stream to which REPL output will be written. **Default:** `process.stdout`. ",
                      "name": "output",
                      "type": "stream.Writable",
                      "default": "`process.stdout`",
                      "desc": "The `Writable` stream to which REPL output will be written."
                    },
                    {
                      "textRaw": "`terminal` {boolean} If `true`, specifies that the `output` should be treated as a TTY terminal, and have ANSI/VT100 escape codes written to it. **Default:** checking the value of the `isTTY` property on the `output` stream upon instantiation. ",
                      "name": "terminal",
                      "type": "boolean",
                      "default": "checking the value of the `isTTY` property on the `output` stream upon instantiation",
                      "desc": "If `true`, specifies that the `output` should be treated as a TTY terminal, and have ANSI/VT100 escape codes written to it."
                    },
                    {
                      "textRaw": "`eval` {Function} The function to be used when evaluating each given line of input. **Default:** an async wrapper for the JavaScript `eval()` function. An `eval` function can error with `repl.Recoverable` to indicate the input was incomplete and prompt for additional lines. ",
                      "name": "eval",
                      "type": "Function",
                      "default": "an async wrapper for the JavaScript `eval()` function. An `eval` function can error with `repl.Recoverable` to indicate the input was incomplete and prompt for additional lines",
                      "desc": "The function to be used when evaluating each given line of input."
                    },
                    {
                      "textRaw": "`useColors` {boolean} If `true`, specifies that the default `writer` function should include ANSI color styling to REPL output. If a custom `writer` function is provided then this has no effect. **Default:** the  REPL instances `terminal` value. ",
                      "name": "useColors",
                      "type": "boolean",
                      "default": "the  REPL instances `terminal` value",
                      "desc": "If `true`, specifies that the default `writer` function should include ANSI color styling to REPL output. If a custom `writer` function is provided then this has no effect."
                    },
                    {
                      "textRaw": "`useGlobal` {boolean} If `true`, specifies that the default evaluation  function will use the JavaScript `global` as the context as opposed to  creating a new separate context for the REPL instance. The node CLI REPL  sets this value to `true`. **Default:** `false`. ",
                      "name": "useGlobal",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "If `true`, specifies that the default evaluation  function will use the JavaScript `global` as the context as opposed to  creating a new separate context for the REPL instance. The node CLI REPL  sets this value to `true`."
                    },
                    {
                      "textRaw": "`ignoreUndefined` {boolean} If `true`, specifies that the default writer  will not output the return value of a command if it evaluates to  `undefined`. **Default:** `false`. ",
                      "name": "ignoreUndefined",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "If `true`, specifies that the default writer  will not output the return value of a command if it evaluates to  `undefined`."
                    },
                    {
                      "textRaw": "`writer` {Function} The function to invoke to format the output of each  command before writing to `output`. **Default:** [`util.inspect()`][]. ",
                      "name": "writer",
                      "type": "Function",
                      "default": "[`util.inspect()`][]",
                      "desc": "The function to invoke to format the output of each  command before writing to `output`."
                    },
                    {
                      "textRaw": "`completer` {Function} An optional function used for custom Tab auto  completion. See [`readline.InterfaceCompleter`][] for an example. ",
                      "name": "completer",
                      "type": "Function",
                      "desc": "An optional function used for custom Tab auto  completion. See [`readline.InterfaceCompleter`][] for an example."
                    },
                    {
                      "textRaw": "`replMode` {symbol} A flag that specifies whether the default evaluator executes all JavaScript commands in strict mode or default (sloppy) mode. Acceptable values are: ",
                      "options": [
                        {
                          "textRaw": "`repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode. ",
                          "name": "repl.REPL_MODE_SLOPPY",
                          "desc": "evaluates expressions in sloppy mode."
                        },
                        {
                          "textRaw": "`repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to prefacing every repl statement with `'use strict'`. ",
                          "name": "repl.REPL_MODE_STRICT",
                          "desc": "evaluates expressions in strict mode. This is equivalent to prefacing every repl statement with `'use strict'`."
                        }
                      ],
                      "name": "replMode",
                      "type": "symbol",
                      "desc": "A flag that specifies whether the default evaluator executes all JavaScript commands in strict mode or default (sloppy) mode. Acceptable values are:"
                    },
                    {
                      "textRaw": "`breakEvalOnSigint` - Stop evaluating the current piece of code when `SIGINT` is received, i.e. `Ctrl+C` is pressed. This cannot be used together with a custom `eval` function. **Default:** `false`. ",
                      "name": "breakEvalOnSigint",
                      "default": "`false`",
                      "desc": "Stop evaluating the current piece of code when `SIGINT` is received, i.e. `Ctrl+C` is pressed. This cannot be used together with a custom `eval` function."
                    }
                  ],
                  "name": "options",
                  "type": "Object|string",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>repl.start()</code> method creates and starts a <code>repl.REPLServer</code> instance.</p>\n<p>If <code>options</code> is a string, then it specifies the input prompt:</p>\n<pre><code class=\"lang-js\">const repl = require(&#39;repl&#39;);\n\n// a Unix style prompt\nrepl.start(&#39;$ &#39;);\n</code></pre>\n"
        }
      ],
      "type": "module",
      "displayName": "REPL"
    },
    {
      "textRaw": "Stream",
      "name": "stream",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>A stream is an abstract interface for working with streaming data in Node.js.\nThe <code>stream</code> module provides a base API that makes it easy to build objects\nthat implement the stream interface.</p>\n<p>There are many stream objects provided by Node.js. For instance, a\n<a href=\"http.html#http_class_http_incomingmessage\">request to an HTTP server</a> and <a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a>\nare both stream instances.</p>\n<p>Streams can be readable, writable, or both. All streams are instances of\n<a href=\"events.html\"><code>EventEmitter</code></a>.</p>\n<p>The <code>stream</code> module can be accessed using:</p>\n<pre><code class=\"lang-js\">const stream = require(&#39;stream&#39;);\n</code></pre>\n<p>While it is important to understand how streams work, the <code>stream</code> module itself\nis most useful for developers that are creating new types of stream instances.\nDevelopers who are primarily <em>consuming</em> stream objects will rarely need to use\nthe <code>stream</code> module directly.</p>\n",
      "modules": [
        {
          "textRaw": "Organization of this Document",
          "name": "organization_of_this_document",
          "desc": "<p>This document is divided into two primary sections with a third section for\nadditional notes. The first section explains the elements of the stream API that\nare required to <em>use</em> streams within an application. The second section explains\nthe elements of the API that are required to <em>implement</em> new types of streams.</p>\n",
          "type": "module",
          "displayName": "Organization of this Document"
        },
        {
          "textRaw": "Types of Streams",
          "name": "types_of_streams",
          "desc": "<p>There are four fundamental stream types within Node.js:</p>\n<ul>\n<li><a href=\"#stream_class_stream_readable\"><code>Readable</code></a> - streams from which data can be read (for example\n<a href=\"fs.html#fs_fs_createreadstream_path_options\"><code>fs.createReadStream()</code></a>).</li>\n<li><a href=\"#stream_class_stream_writable\"><code>Writable</code></a> - streams to which data can be written (for example\n<a href=\"fs.html#fs_fs_createwritestream_path_options\"><code>fs.createWriteStream()</code></a>).</li>\n<li><a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a> - streams that are both <code>Readable</code> and <code>Writable</code> (for example\n<a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a>).</li>\n<li><a href=\"#stream_class_stream_transform\"><code>Transform</code></a> - <code>Duplex</code> streams that can modify or transform the data as it\nis written and read (for example <a href=\"zlib.html#zlib_zlib_createdeflate_options\"><code>zlib.createDeflate()</code></a>).</li>\n</ul>\n<p>Additionally this module includes the utility functions <a href=\"#stream_stream_pipeline_streams_callback\">pipeline</a> and\n<a href=\"#stream_stream_finished_stream_callback\">finished</a>.</p>\n",
          "modules": [
            {
              "textRaw": "Object Mode",
              "name": "object_mode",
              "desc": "<p>All streams created by Node.js APIs operate exclusively on strings and <code>Buffer</code>\n(or <code>Uint8Array</code>) objects. It is possible, however, for stream implementations\nto work with other types of JavaScript values (with the exception of <code>null</code>,\nwhich serves a special purpose within streams). Such streams are considered to\noperate in &quot;object mode&quot;.</p>\n<p>Stream instances are switched into object mode using the <code>objectMode</code> option\nwhen the stream is created. Attempting to switch an existing stream into\nobject mode is not safe.</p>\n",
              "type": "module",
              "displayName": "Object Mode"
            }
          ],
          "miscs": [
            {
              "textRaw": "Buffering",
              "name": "Buffering",
              "type": "misc",
              "desc": "<p>Both <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> and <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> streams will store data in an internal\nbuffer that can be retrieved using <code>writable.writableBuffer</code> or\n<code>readable.readableBuffer</code>, respectively.</p>\n<p>The amount of data potentially buffered depends on the <code>highWaterMark</code> option\npassed into the streams constructor. For normal streams, the <code>highWaterMark</code>\noption specifies a <a href=\"#stream_highwatermark_discrepancy_after_calling_readable_setencoding\">total number of bytes</a>. For streams operating\nin object mode, the <code>highWaterMark</code> specifies a total number of objects.</p>\n<p>Data is buffered in <code>Readable</code> streams when the implementation calls\n<a href=\"#stream_readable_push_chunk_encoding\"><code>stream.push(chunk)</code></a>. If the consumer of the Stream does not\ncall <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a>, the data will sit in the internal\nqueue until it is consumed.</p>\n<p>Once the total size of the internal read buffer reaches the threshold specified\nby <code>highWaterMark</code>, the stream will temporarily stop reading data from the\nunderlying resource until the data currently buffered can be consumed (that is,\nthe stream will stop calling the internal <code>readable._read()</code> method that is\nused to fill the read buffer).</p>\n<p>Data is buffered in <code>Writable</code> streams when the\n<a href=\"#stream_writable_write_chunk_encoding_callback\"><code>writable.write(chunk)</code></a> method is called repeatedly. While the\ntotal size of the internal write buffer is below the threshold set by\n<code>highWaterMark</code>, calls to <code>writable.write()</code> will return <code>true</code>. Once\nthe size of the internal buffer reaches or exceeds the <code>highWaterMark</code>, <code>false</code>\nwill be returned.</p>\n<p>A key goal of the <code>stream</code> API, particularly the <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> method,\nis to limit the buffering of data to acceptable levels such that sources and\ndestinations of differing speeds will not overwhelm the available memory.</p>\n<p>Because <a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a> and <a href=\"#stream_class_stream_transform\"><code>Transform</code></a> streams are both <code>Readable</code> and\n<code>Writable</code>, each maintain <em>two</em> separate internal buffers used for reading and\nwriting, allowing each side to operate independently of the other while\nmaintaining an appropriate and efficient flow of data. For example,\n<a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> instances are <a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a> streams whose <code>Readable</code> side allows\nconsumption of data received <em>from</em> the socket and whose <code>Writable</code> side allows\nwriting data <em>to</em> the socket. Because data may be written to the socket at a\nfaster or slower rate than data is received, it is important for each side to\noperate (and buffer) independently of the other.</p>\n"
            }
          ],
          "type": "module",
          "displayName": "Types of Streams"
        }
      ],
      "methods": [
        {
          "textRaw": "stream.finished(stream, callback)",
          "type": "method",
          "name": "finished",
          "meta": {
            "added": [
              "v10.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`stream` {Stream} A readable and/or writable stream. ",
                  "name": "stream",
                  "type": "Stream",
                  "desc": "A readable and/or writable stream."
                },
                {
                  "textRaw": "`callback` {Function} A callback function that takes an optional error argument. ",
                  "name": "callback",
                  "type": "Function",
                  "desc": "A callback function that takes an optional error argument."
                }
              ]
            },
            {
              "params": [
                {
                  "name": "stream"
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>A function to get notified when a stream is no longer readable, writable\nor has experienced an error or a premature close event.</p>\n<pre><code class=\"lang-js\">const { finished } = require(&#39;stream&#39;);\n\nconst rs = fs.createReadStream(&#39;archive.tar&#39;);\n\nfinished(rs, (err) =&gt; {\n  if (err) {\n    console.error(&#39;Stream failed&#39;, err);\n  } else {\n    console.log(&#39;Stream is done reading&#39;);\n  }\n});\n\nrs.resume(); // drain the stream\n</code></pre>\n<p>Especially useful in error handling scenarios where a stream is destroyed\nprematurely (like an aborted HTTP request), and will not emit <code>&#39;end&#39;</code>\nor <code>&#39;finish&#39;</code>.</p>\n<p>The <code>finished</code> API is promisify&#39;able as well;</p>\n<pre><code class=\"lang-js\">const finished = util.promisify(stream.finished);\n\nconst rs = fs.createReadStream(&#39;archive.tar&#39;);\n\nasync function run() {\n  await finished(rs);\n  console.log(&#39;Stream is done reading&#39;);\n}\n\nrun().catch(console.error);\nrs.resume(); // drain the stream\n</code></pre>\n"
        },
        {
          "textRaw": "stream.pipeline(...streams[, callback])",
          "type": "method",
          "name": "pipeline",
          "meta": {
            "added": [
              "v10.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`...streams` {Stream} Two or more streams to pipe between. ",
                  "name": "...streams",
                  "type": "Stream",
                  "desc": "Two or more streams to pipe between."
                },
                {
                  "textRaw": "`callback` {Function} A callback function that takes an optional error argument. ",
                  "name": "callback",
                  "type": "Function",
                  "desc": "A callback function that takes an optional error argument.",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "...streams"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>A module method to pipe between streams forwarding errors and properly cleaning\nup and provide a callback when the pipeline is complete.</p>\n<pre><code class=\"lang-js\">const { pipeline } = require(&#39;stream&#39;);\nconst fs = require(&#39;fs&#39;);\nconst zlib = require(&#39;zlib&#39;);\n\n// Use the pipeline API to easily pipe a series of streams\n// together and get notified when the pipeline is fully done.\n\n// A pipeline to gzip a potentially huge tar file efficiently:\n\npipeline(\n  fs.createReadStream(&#39;archive.tar&#39;),\n  zlib.createGzip(),\n  fs.createWriteStream(&#39;archive.tar.gz&#39;),\n  (err) =&gt; {\n    if (err) {\n      console.error(&#39;Pipeline failed&#39;, err);\n    } else {\n      console.log(&#39;Pipeline succeeded&#39;);\n    }\n  }\n);\n</code></pre>\n<p>The <code>pipeline</code> API is promisify&#39;able as well:</p>\n<pre><code class=\"lang-js\">const pipeline = util.promisify(stream.pipeline);\n\nasync function run() {\n  await pipeline(\n    fs.createReadStream(&#39;archive.tar&#39;),\n    zlib.createGzip(),\n    fs.createWriteStream(&#39;archive.tar.gz&#39;)\n  );\n  console.log(&#39;Pipeline succeeded&#39;);\n}\n\nrun().catch(console.error);\n</code></pre>\n"
        }
      ],
      "miscs": [
        {
          "textRaw": "API for Stream Consumers",
          "name": "API for Stream Consumers",
          "type": "misc",
          "desc": "<p>Almost all Node.js applications, no matter how simple, use streams in some\nmanner. The following is an example of using streams in a Node.js application\nthat implements an HTTP server:</p>\n<pre><code class=\"lang-js\">const http = require(&#39;http&#39;);\n\nconst server = http.createServer((req, res) =&gt; {\n  // req is an http.IncomingMessage, which is a Readable Stream\n  // res is an http.ServerResponse, which is a Writable Stream\n\n  let body = &#39;&#39;;\n  // Get the data as utf8 strings.\n  // If an encoding is not set, Buffer objects will be received.\n  req.setEncoding(&#39;utf8&#39;);\n\n  // Readable streams emit &#39;data&#39; events once a listener is added\n  req.on(&#39;data&#39;, (chunk) =&gt; {\n    body += chunk;\n  });\n\n  // the &#39;end&#39; event indicates that the entire body has been received\n  req.on(&#39;end&#39;, () =&gt; {\n    try {\n      const data = JSON.parse(body);\n      // write back something interesting to the user:\n      res.write(typeof data);\n      res.end();\n    } catch (er) {\n      // uh oh! bad json!\n      res.statusCode = 400;\n      return res.end(`error: ${er.message}`);\n    }\n  });\n});\n\nserver.listen(1337);\n\n// $ curl localhost:1337 -d &quot;{}&quot;\n// object\n// $ curl localhost:1337 -d &quot;\\&quot;foo\\&quot;&quot;\n// string\n// $ curl localhost:1337 -d &quot;not json&quot;\n// error: Unexpected token o in JSON at position 1\n</code></pre>\n<p><a href=\"#stream_class_stream_writable\"><code>Writable</code></a> streams (such as <code>res</code> in the example) expose methods such as\n<code>write()</code> and <code>end()</code> that are used to write data onto the stream.</p>\n<p><a href=\"#stream_class_stream_readable\"><code>Readable</code></a> streams use the <a href=\"events.html\"><code>EventEmitter</code></a> API for notifying application\ncode when data is available to be read off the stream. That available data can\nbe read from the stream in multiple ways.</p>\n<p>Both <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> and <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> streams use the <a href=\"events.html\"><code>EventEmitter</code></a> API in\nvarious ways to communicate the current state of the stream.</p>\n<p><a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a> and <a href=\"#stream_class_stream_transform\"><code>Transform</code></a> streams are both <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> and\n<a href=\"#stream_class_stream_readable\"><code>Readable</code></a>.</p>\n<p>Applications that are either writing data to or consuming data from a stream\nare not required to implement the stream interfaces directly and will generally\nhave no reason to call <code>require(&#39;stream&#39;)</code>.</p>\n<p>Developers wishing to implement new types of streams should refer to the\nsection <a href=\"#stream_api_for_stream_implementers\">API for Stream Implementers</a>.</p>\n",
          "miscs": [
            {
              "textRaw": "Writable Streams",
              "name": "writable_streams",
              "desc": "<p>Writable streams are an abstraction for a <em>destination</em> to which data is\nwritten.</p>\n<p>Examples of <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> streams include:</p>\n<ul>\n<li><a href=\"http.html#http_class_http_clientrequest\">HTTP requests, on the client</a></li>\n<li><a href=\"http.html#http_class_http_serverresponse\">HTTP responses, on the server</a></li>\n<li><a href=\"fs.html#fs_class_fs_writestream\">fs write streams</a></li>\n<li><a href=\"zlib.html\">zlib streams</a></li>\n<li><a href=\"crypto.html\">crypto streams</a></li>\n<li><a href=\"net.html#net_class_net_socket\">TCP sockets</a></li>\n<li><a href=\"child_process.html#child_process_subprocess_stdin\">child process stdin</a></li>\n<li><a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a>, <a href=\"process.html#process_process_stderr\"><code>process.stderr</code></a></li>\n</ul>\n<p>Some of these examples are actually <a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a> streams that implement the\n<a href=\"#stream_class_stream_writable\"><code>Writable</code></a> interface.</p>\n<p>All <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> streams implement the interface defined by the\n<code>stream.Writable</code> class.</p>\n<p>While specific instances of <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> streams may differ in various ways,\nall <code>Writable</code> streams follow the same fundamental usage pattern as illustrated\nin the example below:</p>\n<pre><code class=\"lang-js\">const myStream = getWritableStreamSomehow();\nmyStream.write(&#39;some data&#39;);\nmyStream.write(&#39;some more data&#39;);\nmyStream.end(&#39;done writing data&#39;);\n</code></pre>\n",
              "classes": [
                {
                  "textRaw": "Class: stream.Writable",
                  "type": "class",
                  "name": "stream.Writable",
                  "meta": {
                    "added": [
                      "v0.9.4"
                    ],
                    "changes": []
                  },
                  "events": [
                    {
                      "textRaw": "Event: 'close'",
                      "type": "event",
                      "name": "close",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "desc": "<p>The <code>&#39;close&#39;</code> event is emitted when the stream and any of its underlying\nresources (a file descriptor, for example) have been closed. The event indicates\nthat no more events will be emitted, and no further computation will occur.</p>\n<p>Not all <code>Writable</code> streams will emit the <code>&#39;close&#39;</code> event.</p>\n",
                      "params": []
                    },
                    {
                      "textRaw": "Event: 'drain'",
                      "type": "event",
                      "name": "drain",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "desc": "<p>If a call to <a href=\"#stream_writable_write_chunk_encoding_callback\"><code>stream.write(chunk)</code></a> returns <code>false</code>, the\n<code>&#39;drain&#39;</code> event will be emitted when it is appropriate to resume writing data\nto the stream.</p>\n<pre><code class=\"lang-js\">// Write the data to the supplied writable stream one million times.\n// Be attentive to back-pressure.\nfunction writeOneMillionTimes(writer, data, encoding, callback) {\n  let i = 1000000;\n  write();\n  function write() {\n    let ok = true;\n    do {\n      i--;\n      if (i === 0) {\n        // last time!\n        writer.write(data, encoding, callback);\n      } else {\n        // see if we should continue, or wait\n        // don&#39;t pass the callback, because we&#39;re not done yet.\n        ok = writer.write(data, encoding);\n      }\n    } while (i &gt; 0 &amp;&amp; ok);\n    if (i &gt; 0) {\n      // had to stop early!\n      // write some more once it drains\n      writer.once(&#39;drain&#39;, write);\n    }\n  }\n}\n</code></pre>\n",
                      "params": []
                    },
                    {
                      "textRaw": "Event: 'error'",
                      "type": "event",
                      "name": "error",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "params": [],
                      "desc": "<p>The <code>&#39;error&#39;</code> event is emitted if an error occurred while writing or piping\ndata. The listener callback is passed a single <code>Error</code> argument when called.</p>\n<p>The stream is not closed when the <code>&#39;error&#39;</code> event is emitted.</p>\n"
                    },
                    {
                      "textRaw": "Event: 'finish'",
                      "type": "event",
                      "name": "finish",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "desc": "<p>The <code>&#39;finish&#39;</code> event is emitted after the <a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> method\nhas been called, and all data has been flushed to the underlying system.</p>\n<pre><code class=\"lang-js\">const writer = getWritableStreamSomehow();\nfor (let i = 0; i &lt; 100; i++) {\n  writer.write(`hello, #${i}!\\n`);\n}\nwriter.end(&#39;This is the end\\n&#39;);\nwriter.on(&#39;finish&#39;, () =&gt; {\n  console.error(&#39;All writes are now complete.&#39;);\n});\n</code></pre>\n",
                      "params": []
                    },
                    {
                      "textRaw": "Event: 'pipe'",
                      "type": "event",
                      "name": "pipe",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "params": [],
                      "desc": "<p>The <code>&#39;pipe&#39;</code> event is emitted when the <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> method is called on\na readable stream, adding this writable to its set of destinations.</p>\n<pre><code class=\"lang-js\">const writer = getWritableStreamSomehow();\nconst reader = getReadableStreamSomehow();\nwriter.on(&#39;pipe&#39;, (src) =&gt; {\n  console.error(&#39;something is piping into the writer&#39;);\n  assert.equal(src, reader);\n});\nreader.pipe(writer);\n</code></pre>\n"
                    },
                    {
                      "textRaw": "Event: 'unpipe'",
                      "type": "event",
                      "name": "unpipe",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "params": [],
                      "desc": "<p>The <code>&#39;unpipe&#39;</code> event is emitted when the <a href=\"#stream_readable_unpipe_destination\"><code>stream.unpipe()</code></a> method is called\non a <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> stream, removing this <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> from its set of\ndestinations.</p>\n<p>This is also emitted in case this <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> stream emits an error when a\n<a href=\"#stream_class_stream_readable\"><code>Readable</code></a> stream pipes into it.</p>\n<pre><code class=\"lang-js\">const writer = getWritableStreamSomehow();\nconst reader = getReadableStreamSomehow();\nwriter.on(&#39;unpipe&#39;, (src) =&gt; {\n  console.error(&#39;Something has stopped piping into the writer.&#39;);\n  assert.equal(src, reader);\n});\nreader.pipe(writer);\nreader.unpipe(writer);\n</code></pre>\n"
                    }
                  ],
                  "methods": [
                    {
                      "textRaw": "writable.cork()",
                      "type": "method",
                      "name": "cork",
                      "meta": {
                        "added": [
                          "v0.11.2"
                        ],
                        "changes": []
                      },
                      "desc": "<p>The <code>writable.cork()</code> method forces all written data to be buffered in memory.\nThe buffered data will be flushed when either the <a href=\"#stream_writable_uncork\"><code>stream.uncork()</code></a> or\n<a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> methods are called.</p>\n<p>The primary intent of <code>writable.cork()</code> is to avoid a situation where writing\nmany small chunks of data to a stream do not cause a backup in the internal\nbuffer that would have an adverse impact on performance. In such situations,\nimplementations that implement the <code>writable._writev()</code> method can perform\nbuffered writes in a more optimized manner.</p>\n<p>See also: <a href=\"#stream_writable_uncork\"><code>writable.uncork()</code></a>.</p>\n",
                      "signatures": [
                        {
                          "params": []
                        }
                      ]
                    },
                    {
                      "textRaw": "writable.destroy([error])",
                      "type": "method",
                      "name": "destroy",
                      "meta": {
                        "added": [
                          "v8.0.0"
                        ],
                        "changes": []
                      },
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {this} ",
                            "name": "return",
                            "type": "this"
                          },
                          "params": [
                            {
                              "name": "error",
                              "optional": true
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "error",
                              "optional": true
                            }
                          ]
                        }
                      ],
                      "desc": "<p>Destroy the stream, and emit the passed <code>&#39;error&#39;</code> and a <code>&#39;close&#39;</code> event.\nAfter this call, the writable stream has ended and subsequent calls\nto <code>write()</code> / <code>end()</code> will give an <code>ERR_STREAM_DESTROYED</code> error.\nImplementors should not override this method,\nbut instead implement <a href=\"#stream_writable_destroy_err_callback\"><code>writable._destroy()</code></a>.</p>\n"
                    },
                    {
                      "textRaw": "writable.end([chunk][, encoding][, callback])",
                      "type": "method",
                      "name": "end",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": [
                          {
                            "version": "v10.0.0",
                            "pr-url": "https://github.com/nodejs/node/pull/18780",
                            "description": "This method now returns a reference to `writable`."
                          },
                          {
                            "version": "v8.0.0",
                            "pr-url": "https://github.com/nodejs/node/pull/11608",
                            "description": "The `chunk` argument can now be a `Uint8Array` instance."
                          }
                        ]
                      },
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {this} ",
                            "name": "return",
                            "type": "this"
                          },
                          "params": [
                            {
                              "textRaw": "`chunk` {string|Buffer|Uint8Array|any} Optional data to write. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any JavaScript value other than `null`. ",
                              "name": "chunk",
                              "type": "string|Buffer|Uint8Array|any",
                              "desc": "Optional data to write. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any JavaScript value other than `null`.",
                              "optional": true
                            },
                            {
                              "textRaw": "`encoding` {string} The encoding, if `chunk` is a string ",
                              "name": "encoding",
                              "type": "string",
                              "desc": "The encoding, if `chunk` is a string",
                              "optional": true
                            },
                            {
                              "textRaw": "`callback` {Function} Optional callback for when the stream is finished ",
                              "name": "callback",
                              "type": "Function",
                              "desc": "Optional callback for when the stream is finished",
                              "optional": true
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "chunk",
                              "optional": true
                            },
                            {
                              "name": "encoding",
                              "optional": true
                            },
                            {
                              "name": "callback",
                              "optional": true
                            }
                          ]
                        }
                      ],
                      "desc": "<p>Calling the <code>writable.end()</code> method signals that no more data will be written\nto the <a href=\"#stream_class_stream_writable\"><code>Writable</code></a>. The optional <code>chunk</code> and <code>encoding</code> arguments allow one\nfinal additional chunk of data to be written immediately before closing the\nstream. If provided, the optional <code>callback</code> function is attached as a listener\nfor the <a href=\"#stream_event_finish\"><code>&#39;finish&#39;</code></a> event.</p>\n<p>Calling the <a href=\"#stream_writable_write_chunk_encoding_callback\"><code>stream.write()</code></a> method after calling\n<a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> will raise an error.</p>\n<pre><code class=\"lang-js\">// write &#39;hello, &#39; and then end with &#39;world!&#39;\nconst fs = require(&#39;fs&#39;);\nconst file = fs.createWriteStream(&#39;example.txt&#39;);\nfile.write(&#39;hello, &#39;);\nfile.end(&#39;world!&#39;);\n// writing more now is not allowed!\n</code></pre>\n"
                    },
                    {
                      "textRaw": "writable.setDefaultEncoding(encoding)",
                      "type": "method",
                      "name": "setDefaultEncoding",
                      "meta": {
                        "added": [
                          "v0.11.15"
                        ],
                        "changes": [
                          {
                            "version": "v6.1.0",
                            "pr-url": "https://github.com/nodejs/node/pull/5040",
                            "description": "This method now returns a reference to `writable`."
                          }
                        ]
                      },
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {this} ",
                            "name": "return",
                            "type": "this"
                          },
                          "params": [
                            {
                              "textRaw": "`encoding` {string} The new default encoding ",
                              "name": "encoding",
                              "type": "string",
                              "desc": "The new default encoding"
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "encoding"
                            }
                          ]
                        }
                      ],
                      "desc": "<p>The <code>writable.setDefaultEncoding()</code> method sets the default <code>encoding</code> for a\n<a href=\"#stream_class_stream_writable\"><code>Writable</code></a> stream.</p>\n"
                    },
                    {
                      "textRaw": "writable.uncork()",
                      "type": "method",
                      "name": "uncork",
                      "meta": {
                        "added": [
                          "v0.11.2"
                        ],
                        "changes": []
                      },
                      "desc": "<p>The <code>writable.uncork()</code> method flushes all data buffered since\n<a href=\"#stream_writable_cork\"><code>stream.cork()</code></a> was called.</p>\n<p>When using <a href=\"#stream_writable_cork\"><code>writable.cork()</code></a> and <code>writable.uncork()</code> to manage the buffering\nof writes to a stream, it is recommended that calls to <code>writable.uncork()</code> be\ndeferred using <code>process.nextTick()</code>. Doing so allows batching of all\n<code>writable.write()</code> calls that occur within a given Node.js event loop phase.</p>\n<pre><code class=\"lang-js\">stream.cork();\nstream.write(&#39;some &#39;);\nstream.write(&#39;data &#39;);\nprocess.nextTick(() =&gt; stream.uncork());\n</code></pre>\n<p>If the <a href=\"#stream_writable_cork\"><code>writable.cork()</code></a> method is called multiple times on a stream, the\nsame number of calls to <code>writable.uncork()</code> must be called to flush the buffered\ndata.</p>\n<pre><code class=\"lang-js\">stream.cork();\nstream.write(&#39;some &#39;);\nstream.cork();\nstream.write(&#39;data &#39;);\nprocess.nextTick(() =&gt; {\n  stream.uncork();\n  // The data will not be flushed until uncork() is called a second time.\n  stream.uncork();\n});\n</code></pre>\n<p>See also: <a href=\"#stream_writable_cork\"><code>writable.cork()</code></a>.</p>\n",
                      "signatures": [
                        {
                          "params": []
                        }
                      ]
                    },
                    {
                      "textRaw": "writable.write(chunk[, encoding][, callback])",
                      "type": "method",
                      "name": "write",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": [
                          {
                            "version": "v8.0.0",
                            "pr-url": "https://github.com/nodejs/node/pull/11608",
                            "description": "The `chunk` argument can now be a `Uint8Array` instance."
                          },
                          {
                            "version": "v6.0.0",
                            "pr-url": "https://github.com/nodejs/node/pull/6170",
                            "description": "Passing `null` as the `chunk` parameter will always be considered invalid now, even in object mode."
                          }
                        ]
                      },
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {boolean} `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`. ",
                            "name": "return",
                            "type": "boolean",
                            "desc": "`false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`."
                          },
                          "params": [
                            {
                              "textRaw": "`chunk` {string|Buffer|Uint8Array|any} Optional data to write. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any JavaScript value other than `null`. ",
                              "name": "chunk",
                              "type": "string|Buffer|Uint8Array|any",
                              "desc": "Optional data to write. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any JavaScript value other than `null`."
                            },
                            {
                              "textRaw": "`encoding` {string} The encoding, if `chunk` is a string ",
                              "name": "encoding",
                              "type": "string",
                              "desc": "The encoding, if `chunk` is a string",
                              "optional": true
                            },
                            {
                              "textRaw": "`callback` {Function} Callback for when this chunk of data is flushed ",
                              "name": "callback",
                              "type": "Function",
                              "desc": "Callback for when this chunk of data is flushed",
                              "optional": true
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "chunk"
                            },
                            {
                              "name": "encoding",
                              "optional": true
                            },
                            {
                              "name": "callback",
                              "optional": true
                            }
                          ]
                        }
                      ],
                      "desc": "<p>The <code>writable.write()</code> method writes some data to the stream, and calls the\nsupplied <code>callback</code> once the data has been fully handled. If an error\noccurs, the <code>callback</code> <em>may or may not</em> be called with the error as its\nfirst argument. To reliably detect write errors, add a listener for the\n<code>&#39;error&#39;</code> event.</p>\n<p>The return value is <code>true</code> if the internal buffer is less than the\n<code>highWaterMark</code> configured when the stream was created after admitting <code>chunk</code>.\nIf <code>false</code> is returned, further attempts to write data to the stream should\nstop until the <a href=\"#stream_event_drain\"><code>&#39;drain&#39;</code></a> event is emitted.</p>\n<p>While a stream is not draining, calls to <code>write()</code> will buffer <code>chunk</code>, and\nreturn false. Once all currently buffered chunks are drained (accepted for\ndelivery by the operating system), the <code>&#39;drain&#39;</code> event will be emitted.\nIt is recommended that once <code>write()</code> returns false, no more chunks be written\nuntil the <code>&#39;drain&#39;</code> event is emitted. While calling <code>write()</code> on a stream that\nis not draining is allowed, Node.js will buffer all written chunks until\nmaximum memory usage occurs, at which point it will abort unconditionally.\nEven before it aborts, high memory usage will cause poor garbage collector\nperformance and high RSS (which is not typically released back to the system,\neven after the memory is no longer required). Since TCP sockets may never\ndrain if the remote peer does not read the data, writing a socket that is\nnot draining may lead to a remotely exploitable vulnerability.</p>\n<p>Writing data while the stream is not draining is particularly\nproblematic for a <a href=\"#stream_class_stream_transform\"><code>Transform</code></a>, because the <code>Transform</code> streams are paused\nby default until they are piped or an <code>&#39;data&#39;</code> or <code>&#39;readable&#39;</code> event handler\nis added.</p>\n<p>If the data to be written can be generated or fetched on demand, it is\nrecommended to encapsulate the logic into a <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> and use\n<a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a>. However, if calling <code>write()</code> is preferred, it is\npossible to respect backpressure and avoid memory issues using the\n<a href=\"#stream_event_drain\"><code>&#39;drain&#39;</code></a> event:</p>\n<pre><code class=\"lang-js\">function write(data, cb) {\n  if (!stream.write(data)) {\n    stream.once(&#39;drain&#39;, cb);\n  } else {\n    process.nextTick(cb);\n  }\n}\n\n// Wait for cb to be called before doing any other write.\nwrite(&#39;hello&#39;, () =&gt; {\n  console.log(&#39;write completed, do more writes now&#39;);\n});\n</code></pre>\n<p>A <code>Writable</code> stream in object mode will always ignore the <code>encoding</code> argument.</p>\n"
                    }
                  ],
                  "properties": [
                    {
                      "textRaw": "`writableHighWaterMark` {number} ",
                      "type": "number",
                      "name": "writableHighWaterMark",
                      "meta": {
                        "added": [
                          "v9.3.0"
                        ],
                        "changes": []
                      },
                      "desc": "<p>Return the value of <code>highWaterMark</code> passed when constructing this\n<code>Writable</code>.</p>\n"
                    },
                    {
                      "textRaw": "writable.writableLength",
                      "name": "writableLength",
                      "meta": {
                        "added": [
                          "v9.4.0"
                        ],
                        "changes": []
                      },
                      "desc": "<p>This property contains the number of bytes (or objects) in the queue\nready to be written. The value provides introspection data regarding\nthe status of the <code>highWaterMark</code>.</p>\n"
                    }
                  ]
                }
              ],
              "type": "misc",
              "displayName": "Writable Streams"
            },
            {
              "textRaw": "Readable Streams",
              "name": "readable_streams",
              "desc": "<p>Readable streams are an abstraction for a <em>source</em> from which data is\nconsumed.</p>\n<p>Examples of <code>Readable</code> streams include:</p>\n<ul>\n<li><a href=\"http.html#http_class_http_incomingmessage\">HTTP responses, on the client</a></li>\n<li><a href=\"http.html#http_class_http_incomingmessage\">HTTP requests, on the server</a></li>\n<li><a href=\"fs.html#fs_class_fs_readstream\">fs read streams</a></li>\n<li><a href=\"zlib.html\">zlib streams</a></li>\n<li><a href=\"crypto.html\">crypto streams</a></li>\n<li><a href=\"net.html#net_class_net_socket\">TCP sockets</a></li>\n<li><a href=\"child_process.html#child_process_subprocess_stdout\">child process stdout and stderr</a></li>\n<li><a href=\"process.html#process_process_stdin\"><code>process.stdin</code></a></li>\n</ul>\n<p>All <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> streams implement the interface defined by the\n<code>stream.Readable</code> class.</p>\n",
              "modules": [
                {
                  "textRaw": "Two Modes",
                  "name": "two_modes",
                  "desc": "<p><code>Readable</code> streams effectively operate in one of two modes: flowing and paused.</p>\n<p>When in flowing mode, data is read from the underlying system automatically\nand provided to an application as quickly as possible using events via the\n<a href=\"events.html\"><code>EventEmitter</code></a> interface.</p>\n<p>In paused mode, the <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> method must be called\nexplicitly to read chunks of data from the stream.</p>\n<p>All <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> streams begin in paused mode but can be switched to flowing\nmode in one of the following ways:</p>\n<ul>\n<li>Adding a <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> event handler.</li>\n<li>Calling the <a href=\"#stream_readable_resume\"><code>stream.resume()</code></a> method.</li>\n<li>Calling the <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> method to send the data to a <a href=\"#stream_class_stream_writable\"><code>Writable</code></a>.</li>\n</ul>\n<p>The <code>Readable</code> can switch back to paused mode using one of the following:</p>\n<ul>\n<li>If there are no pipe destinations, by calling the\n<a href=\"#stream_readable_pause\"><code>stream.pause()</code></a> method.</li>\n<li>If there are pipe destinations, by removing all pipe destinations.\nMultiple pipe destinations may be removed by calling the\n<a href=\"#stream_readable_unpipe_destination\"><code>stream.unpipe()</code></a> method.</li>\n</ul>\n<p>The important concept to remember is that a <code>Readable</code> will not generate data\nuntil a mechanism for either consuming or ignoring that data is provided. If\nthe consuming mechanism is disabled or taken away, the <code>Readable</code> will <em>attempt</em>\nto stop generating the data.</p>\n<p>For backwards compatibility reasons, removing <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> event handlers will\n<strong>not</strong> automatically pause the stream. Also, if there are piped destinations,\nthen calling <a href=\"#stream_readable_pause\"><code>stream.pause()</code></a> will not guarantee that the\nstream will <em>remain</em> paused once those destinations drain and ask for more data.</p>\n<p>If a <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> is switched into flowing mode and there are no consumers\navailable to handle the data, that data will be lost. This can occur, for\ninstance, when the <code>readable.resume()</code> method is called without a listener\nattached to the <code>&#39;data&#39;</code> event, or when a <code>&#39;data&#39;</code> event handler is removed\nfrom the stream.</p>\n",
                  "type": "module",
                  "displayName": "Two Modes"
                },
                {
                  "textRaw": "Three States",
                  "name": "three_states",
                  "desc": "<p>The &quot;two modes&quot; of operation for a <code>Readable</code> stream are a simplified\nabstraction for the more complicated internal state management that is happening\nwithin the <code>Readable</code> stream implementation.</p>\n<p>Specifically, at any given point in time, every <code>Readable</code> is in one of three\npossible states:</p>\n<ul>\n<li><code>readable.readableFlowing = null</code></li>\n<li><code>readable.readableFlowing = false</code></li>\n<li><code>readable.readableFlowing = true</code></li>\n</ul>\n<p>When <code>readable.readableFlowing</code> is <code>null</code>, no mechanism for consuming the\nstreams data is provided so the stream will not generate its data. While in this\nstate, attaching a listener for the <code>&#39;data&#39;</code> event, calling the\n<code>readable.pipe()</code> method, or calling the <code>readable.resume()</code> method will switch\n<code>readable.readableFlowing</code> to <code>true</code>, causing the <code>Readable</code> to begin\nactively emitting events as data is generated.</p>\n<p>Calling <code>readable.pause()</code>, <code>readable.unpipe()</code>, or receiving &quot;back pressure&quot;\nwill cause the <code>readable.readableFlowing</code> to be set as <code>false</code>,\ntemporarily halting the flowing of events but <em>not</em> halting the generation of\ndata. While in this state, attaching a listener for the <code>&#39;data&#39;</code> event\nwould not cause <code>readable.readableFlowing</code> to switch to <code>true</code>.</p>\n<pre><code class=\"lang-js\">const { PassThrough, Writable } = require(&#39;stream&#39;);\nconst pass = new PassThrough();\nconst writable = new Writable();\n\npass.pipe(writable);\npass.unpipe(writable);\n// readableFlowing is now false\n\npass.on(&#39;data&#39;, (chunk) =&gt; { console.log(chunk.toString()); });\npass.write(&#39;ok&#39;); // will not emit &#39;data&#39;\npass.resume(); // must be called to make &#39;data&#39; being emitted\n</code></pre>\n<p>While <code>readable.readableFlowing</code> is <code>false</code>, data may be accumulating\nwithin the streams internal buffer.</p>\n",
                  "type": "module",
                  "displayName": "Three States"
                },
                {
                  "textRaw": "Choose One",
                  "name": "choose_one",
                  "desc": "<p>The <code>Readable</code> stream API evolved across multiple Node.js versions and provides\nmultiple methods of consuming stream data. In general, developers should choose\n<em>one</em> of the methods of consuming data and <em>should never</em> use multiple methods\nto consume data from a single stream.</p>\n<p>Use of the <code>readable.pipe()</code> method is recommended for most users as it has been\nimplemented to provide the easiest way of consuming stream data. Developers that\nrequire more fine-grained control over the transfer and generation of data can\nuse the <a href=\"events.html\"><code>EventEmitter</code></a> and <code>readable.pause()</code>/<code>readable.resume()</code> APIs.</p>\n",
                  "type": "module",
                  "displayName": "Choose One"
                }
              ],
              "classes": [
                {
                  "textRaw": "Class: stream.Readable",
                  "type": "class",
                  "name": "stream.Readable",
                  "meta": {
                    "added": [
                      "v0.9.4"
                    ],
                    "changes": []
                  },
                  "events": [
                    {
                      "textRaw": "Event: 'close'",
                      "type": "event",
                      "name": "close",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "desc": "<p>The <code>&#39;close&#39;</code> event is emitted when the stream and any of its underlying\nresources (a file descriptor, for example) have been closed. The event indicates\nthat no more events will be emitted, and no further computation will occur.</p>\n<p>Not all <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> streams will emit the <code>&#39;close&#39;</code> event.</p>\n",
                      "params": []
                    },
                    {
                      "textRaw": "Event: 'data'",
                      "type": "event",
                      "name": "data",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "params": [],
                      "desc": "<p>The <code>&#39;data&#39;</code> event is emitted whenever the stream is relinquishing ownership of\na chunk of data to a consumer. This may occur whenever the stream is switched\nin flowing mode by calling <code>readable.pipe()</code>, <code>readable.resume()</code>, or by\nattaching a listener callback to the <code>&#39;data&#39;</code> event. The <code>&#39;data&#39;</code> event will\nalso be emitted whenever the <code>readable.read()</code> method is called and a chunk of\ndata is available to be returned.</p>\n<p>Attaching a <code>&#39;data&#39;</code> event listener to a stream that has not been explicitly\npaused will switch the stream into flowing mode. Data will then be passed as\nsoon as it is available.</p>\n<p>The listener callback will be passed the chunk of data as a string if a default\nencoding has been specified for the stream using the\n<code>readable.setEncoding()</code> method; otherwise the data will be passed as a\n<code>Buffer</code>.</p>\n<pre><code class=\"lang-js\">const readable = getReadableStreamSomehow();\nreadable.on(&#39;data&#39;, (chunk) =&gt; {\n  console.log(`Received ${chunk.length} bytes of data.`);\n});\n</code></pre>\n"
                    },
                    {
                      "textRaw": "Event: 'end'",
                      "type": "event",
                      "name": "end",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "desc": "<p>The <code>&#39;end&#39;</code> event is emitted when there is no more data to be consumed from\nthe stream.</p>\n<p>The <code>&#39;end&#39;</code> event <strong>will not be emitted</strong> unless the data is completely\nconsumed. This can be accomplished by switching the stream into flowing mode,\nor by calling <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> repeatedly until all data has been\nconsumed.</p>\n<pre><code class=\"lang-js\">const readable = getReadableStreamSomehow();\nreadable.on(&#39;data&#39;, (chunk) =&gt; {\n  console.log(`Received ${chunk.length} bytes of data.`);\n});\nreadable.on(&#39;end&#39;, () =&gt; {\n  console.log(&#39;There will be no more data.&#39;);\n});\n</code></pre>\n",
                      "params": []
                    },
                    {
                      "textRaw": "Event: 'error'",
                      "type": "event",
                      "name": "error",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "params": [],
                      "desc": "<p>The <code>&#39;error&#39;</code> event may be emitted by a <code>Readable</code> implementation at any time.\nTypically, this may occur if the underlying stream is unable to generate data\ndue to an underlying internal failure, or when a stream implementation attempts\nto push an invalid chunk of data.</p>\n<p>The listener callback will be passed a single <code>Error</code> object.</p>\n"
                    },
                    {
                      "textRaw": "Event: 'readable'",
                      "type": "event",
                      "name": "readable",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": [
                          {
                            "version": "v10.0.0",
                            "pr-url": "https://github.com/nodejs/node/pull/17979",
                            "description": "The `'readable'` is always emitted in the next tick after `.push()` is called\n"
                          },
                          {
                            "version": "v10.0.0",
                            "pr-url": "https://github.com/nodejs/node/pull/18994",
                            "description": "Using `'readable'` requires calling `.read()`."
                          }
                        ]
                      },
                      "desc": "<p>The <code>&#39;readable&#39;</code> event is emitted when there is data available to be read from\nthe stream. In some cases, attaching a listener for the <code>&#39;readable&#39;</code> event will\ncause some amount of data to be read into an internal buffer.</p>\n<pre><code class=\"lang-javascript\">const readable = getReadableStreamSomehow();\nreadable.on(&#39;readable&#39;, function() {\n  // there is some data to read now\n  let data;\n\n  while (data = this.read()) {\n    console.log(data);\n  }\n});\n</code></pre>\n<p>The <code>&#39;readable&#39;</code> event will also be emitted once the end of the stream data\nhas been reached but before the <code>&#39;end&#39;</code> event is emitted.</p>\n<p>Effectively, the <code>&#39;readable&#39;</code> event indicates that the stream has new\ninformation: either new data is available or the end of the stream has been\nreached. In the former case, <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> will return the\navailable data. In the latter case, <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> will return\n<code>null</code>. For instance, in the following example, <code>foo.txt</code> is an empty file:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst rr = fs.createReadStream(&#39;foo.txt&#39;);\nrr.on(&#39;readable&#39;, () =&gt; {\n  console.log(`readable: ${rr.read()}`);\n});\nrr.on(&#39;end&#39;, () =&gt; {\n  console.log(&#39;end&#39;);\n});\n</code></pre>\n<p>The output of running this script is:</p>\n<pre><code class=\"lang-txt\">$ node test.js\nreadable: null\nend\n</code></pre>\n<p>In general, the <code>readable.pipe()</code> and <code>&#39;data&#39;</code> event mechanisms are easier to\nunderstand than the <code>&#39;readable&#39;</code> event. However, handling <code>&#39;readable&#39;</code> might\nresult in increased throughput.</p>\n<p>If both <code>&#39;readable&#39;</code> and <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a>  are used at the same time, <code>&#39;readable&#39;</code>\ntakes precedence in controlling the flow, i.e. <code>&#39;data&#39;</code> will be emitted\nonly when <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> is called.</p>\n",
                      "params": []
                    }
                  ],
                  "methods": [
                    {
                      "textRaw": "readable.destroy([error])",
                      "type": "method",
                      "name": "destroy",
                      "meta": {
                        "added": [
                          "v8.0.0"
                        ],
                        "changes": []
                      },
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {this} ",
                            "name": "return",
                            "type": "this"
                          },
                          "params": [
                            {
                              "textRaw": "`error` {Error} Error which will be passed as payload in `'error'` event ",
                              "name": "error",
                              "type": "Error",
                              "desc": "Error which will be passed as payload in `'error'` event",
                              "optional": true
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "error",
                              "optional": true
                            }
                          ]
                        }
                      ],
                      "desc": "<p>Destroy the stream, and emit <code>&#39;error&#39;</code> and <code>&#39;close&#39;</code>. After this call, the\nreadable stream will release any internal resources and subsequent calls\nto <code>push()</code> will be ignored.\nImplementors should not override this method, but instead implement\n<a href=\"#stream_readable_destroy_err_callback\"><code>readable._destroy()</code></a>.</p>\n"
                    },
                    {
                      "textRaw": "readable.isPaused()",
                      "type": "method",
                      "name": "isPaused",
                      "meta": {
                        "added": [
                          "v0.11.14"
                        ],
                        "changes": []
                      },
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {boolean} ",
                            "name": "return",
                            "type": "boolean"
                          },
                          "params": []
                        },
                        {
                          "params": []
                        }
                      ],
                      "desc": "<p>The <code>readable.isPaused()</code> method returns the current operating state of the\n<code>Readable</code>. This is used primarily by the mechanism that underlies the\n<code>readable.pipe()</code> method. In most typical cases, there will be no reason to\nuse this method directly.</p>\n<pre><code class=\"lang-js\">const readable = new stream.Readable();\n\nreadable.isPaused(); // === false\nreadable.pause();\nreadable.isPaused(); // === true\nreadable.resume();\nreadable.isPaused(); // === false\n</code></pre>\n"
                    },
                    {
                      "textRaw": "readable.pause()",
                      "type": "method",
                      "name": "pause",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {this} ",
                            "name": "return",
                            "type": "this"
                          },
                          "params": []
                        },
                        {
                          "params": []
                        }
                      ],
                      "desc": "<p>The <code>readable.pause()</code> method will cause a stream in flowing mode to stop\nemitting <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> events, switching out of flowing mode. Any data that\nbecomes available will remain in the internal buffer.</p>\n<pre><code class=\"lang-js\">const readable = getReadableStreamSomehow();\nreadable.on(&#39;data&#39;, (chunk) =&gt; {\n  console.log(`Received ${chunk.length} bytes of data.`);\n  readable.pause();\n  console.log(&#39;There will be no additional data for 1 second.&#39;);\n  setTimeout(() =&gt; {\n    console.log(&#39;Now data will start flowing again.&#39;);\n    readable.resume();\n  }, 1000);\n});\n</code></pre>\n"
                    },
                    {
                      "textRaw": "readable.pipe(destination[, options])",
                      "type": "method",
                      "name": "pipe",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {stream.Writable} making it possible to set up chains of piped streams ",
                            "name": "return",
                            "type": "stream.Writable",
                            "desc": "making it possible to set up chains of piped streams"
                          },
                          "params": [
                            {
                              "textRaw": "`destination` {stream.Writable} The destination for writing data ",
                              "name": "destination",
                              "type": "stream.Writable",
                              "desc": "The destination for writing data"
                            },
                            {
                              "textRaw": "`options` {Object} Pipe options ",
                              "options": [
                                {
                                  "textRaw": "`end` {boolean} End the writer when the reader ends. **Default:** `true`. ",
                                  "name": "end",
                                  "type": "boolean",
                                  "default": "`true`",
                                  "desc": "End the writer when the reader ends."
                                }
                              ],
                              "name": "options",
                              "type": "Object",
                              "desc": "Pipe options",
                              "optional": true
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "destination"
                            },
                            {
                              "name": "options",
                              "optional": true
                            }
                          ]
                        }
                      ],
                      "desc": "<p>The <code>readable.pipe()</code> method attaches a <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> stream to the <code>readable</code>,\ncausing it to switch automatically into flowing mode and push all of its data\nto the attached <a href=\"#stream_class_stream_writable\"><code>Writable</code></a>. The flow of data will be automatically managed\nso that the destination <code>Writable</code> stream is not overwhelmed by a faster\n<code>Readable</code> stream.</p>\n<p>The following example pipes all of the data from the <code>readable</code> into a file\nnamed <code>file.txt</code>:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst readable = getReadableStreamSomehow();\nconst writable = fs.createWriteStream(&#39;file.txt&#39;);\n// All the data from readable goes into &#39;file.txt&#39;\nreadable.pipe(writable);\n</code></pre>\n<p>It is possible to attach multiple <code>Writable</code> streams to a single <code>Readable</code>\nstream.</p>\n<p>The <code>readable.pipe()</code> method returns a reference to the <em>destination</em> stream\nmaking it possible to set up chains of piped streams:</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst r = fs.createReadStream(&#39;file.txt&#39;);\nconst z = zlib.createGzip();\nconst w = fs.createWriteStream(&#39;file.txt.gz&#39;);\nr.pipe(z).pipe(w);\n</code></pre>\n<p>By default, <a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> is called on the destination <code>Writable</code>\nstream when the source <code>Readable</code> stream emits <a href=\"#stream_event_end\"><code>&#39;end&#39;</code></a>, so that the\ndestination is no longer writable. To disable this default behavior, the <code>end</code>\noption can be passed as <code>false</code>, causing the destination stream to remain open,\nas illustrated in the following example:</p>\n<pre><code class=\"lang-js\">reader.pipe(writer, { end: false });\nreader.on(&#39;end&#39;, () =&gt; {\n  writer.end(&#39;Goodbye\\n&#39;);\n});\n</code></pre>\n<p>One important caveat is that if the <code>Readable</code> stream emits an error during\nprocessing, the <code>Writable</code> destination <em>is not closed</em> automatically. If an\nerror occurs, it will be necessary to <em>manually</em> close each stream in order\nto prevent memory leaks.</p>\n<p>The <a href=\"process.html#process_process_stderr\"><code>process.stderr</code></a> and <a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> <code>Writable</code> streams are never\nclosed until the Node.js process exits, regardless of the specified options.</p>\n"
                    },
                    {
                      "textRaw": "readable.read([size])",
                      "type": "method",
                      "name": "read",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {string|Buffer|null} ",
                            "name": "return",
                            "type": "string|Buffer|null"
                          },
                          "params": [
                            {
                              "textRaw": "`size` {number} Optional argument to specify how much data to read. ",
                              "name": "size",
                              "type": "number",
                              "desc": "Optional argument to specify how much data to read.",
                              "optional": true
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "size",
                              "optional": true
                            }
                          ]
                        }
                      ],
                      "desc": "<p>The <code>readable.read()</code> method pulls some data out of the internal buffer and\nreturns it. If no data available to be read, <code>null</code> is returned. By default,\nthe data will be returned as a <code>Buffer</code> object unless an encoding has been\nspecified using the <code>readable.setEncoding()</code> method or the stream is operating\nin object mode.</p>\n<p>The optional <code>size</code> argument specifies a specific number of bytes to read. If\n<code>size</code> bytes are not available to be read, <code>null</code> will be returned <em>unless</em>\nthe stream has ended, in which case all of the data remaining in the internal\nbuffer will be returned.</p>\n<p>If the <code>size</code> argument is not specified, all of the data contained in the\ninternal buffer will be returned.</p>\n<p>The <code>readable.read()</code> method should only be called on <code>Readable</code> streams\noperating in paused mode. In flowing mode, <code>readable.read()</code> is called\nautomatically until the internal buffer is fully drained.</p>\n<pre><code class=\"lang-js\">const readable = getReadableStreamSomehow();\nreadable.on(&#39;readable&#39;, () =&gt; {\n  let chunk;\n  while (null !== (chunk = readable.read())) {\n    console.log(`Received ${chunk.length} bytes of data.`);\n  }\n});\n</code></pre>\n<p>A <code>Readable</code> stream in object mode will always return a single item from\na call to <a href=\"#stream_readable_read_size\"><code>readable.read(size)</code></a>, regardless of the value of the\n<code>size</code> argument.</p>\n<p>If the <code>readable.read()</code> method returns a chunk of data, a <code>&#39;data&#39;</code> event will\nalso be emitted.</p>\n<p>Calling <a href=\"#stream_readable_read_size\"><code>stream.read([size])</code></a> after the <a href=\"#stream_event_end\"><code>&#39;end&#39;</code></a> event has\nbeen emitted will return <code>null</code>. No runtime error will be raised.</p>\n"
                    },
                    {
                      "textRaw": "readable.resume()",
                      "type": "method",
                      "name": "resume",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": [
                          {
                            "version": "v10.0.0",
                            "pr-url": "https://github.com/nodejs/node/pull/18994",
                            "description": "The `resume()` has no effect if there is a `'readable'` event listening."
                          }
                        ]
                      },
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {this} ",
                            "name": "return",
                            "type": "this"
                          },
                          "params": []
                        },
                        {
                          "params": []
                        }
                      ],
                      "desc": "<p>The <code>readable.resume()</code> method causes an explicitly paused <code>Readable</code> stream to\nresume emitting <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> events, switching the stream into flowing mode.</p>\n<p>The <code>readable.resume()</code> method can be used to fully consume the data from a\nstream without actually processing any of that data as illustrated in the\nfollowing example:</p>\n<pre><code class=\"lang-js\">getReadableStreamSomehow()\n  .resume()\n  .on(&#39;end&#39;, () =&gt; {\n    console.log(&#39;Reached the end, but did not read anything.&#39;);\n  });\n</code></pre>\n<p>The <code>readable.resume()</code> method has no effect if there is a <code>&#39;readable&#39;</code>\nevent listener.</p>\n"
                    },
                    {
                      "textRaw": "readable.setEncoding(encoding)",
                      "type": "method",
                      "name": "setEncoding",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {this} ",
                            "name": "return",
                            "type": "this"
                          },
                          "params": [
                            {
                              "textRaw": "`encoding` {string} The encoding to use. ",
                              "name": "encoding",
                              "type": "string",
                              "desc": "The encoding to use."
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "encoding"
                            }
                          ]
                        }
                      ],
                      "desc": "<p>The <code>readable.setEncoding()</code> method sets the character encoding for\ndata read from the <code>Readable</code> stream.</p>\n<p>By default, no encoding is assigned and stream data will be returned as\n<code>Buffer</code> objects. Setting an encoding causes the stream data\nto be returned as strings of the specified encoding rather than as <code>Buffer</code>\nobjects. For instance, calling <code>readable.setEncoding(&#39;utf8&#39;)</code> will cause the\noutput data to be interpreted as UTF-8 data, and passed as strings. Calling\n<code>readable.setEncoding(&#39;hex&#39;)</code> will cause the data to be encoded in hexadecimal\nstring format.</p>\n<p>The <code>Readable</code> stream will properly handle multi-byte characters delivered\nthrough the stream that would otherwise become improperly decoded if simply\npulled from the stream as <code>Buffer</code> objects.</p>\n<pre><code class=\"lang-js\">const readable = getReadableStreamSomehow();\nreadable.setEncoding(&#39;utf8&#39;);\nreadable.on(&#39;data&#39;, (chunk) =&gt; {\n  assert.equal(typeof chunk, &#39;string&#39;);\n  console.log(&#39;got %d characters of string data&#39;, chunk.length);\n});\n</code></pre>\n"
                    },
                    {
                      "textRaw": "readable.unpipe([destination])",
                      "type": "method",
                      "name": "unpipe",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {this} ",
                            "name": "return",
                            "type": "this"
                          },
                          "params": [
                            {
                              "textRaw": "`destination` {stream.Writable} Optional specific stream to unpipe ",
                              "name": "destination",
                              "type": "stream.Writable",
                              "desc": "Optional specific stream to unpipe",
                              "optional": true
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "destination",
                              "optional": true
                            }
                          ]
                        }
                      ],
                      "desc": "<p>The <code>readable.unpipe()</code> method detaches a <code>Writable</code> stream previously attached\nusing the <a href=\"#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> method.</p>\n<p>If the <code>destination</code> is not specified, then <em>all</em> pipes are detached.</p>\n<p>If the <code>destination</code> is specified, but no pipe is set up for it, then\nthe method does nothing.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\nconst readable = getReadableStreamSomehow();\nconst writable = fs.createWriteStream(&#39;file.txt&#39;);\n// All the data from readable goes into &#39;file.txt&#39;,\n// but only for the first second\nreadable.pipe(writable);\nsetTimeout(() =&gt; {\n  console.log(&#39;Stop writing to file.txt&#39;);\n  readable.unpipe(writable);\n  console.log(&#39;Manually close the file stream&#39;);\n  writable.end();\n}, 1000);\n</code></pre>\n"
                    },
                    {
                      "textRaw": "readable.unshift(chunk)",
                      "type": "method",
                      "name": "unshift",
                      "meta": {
                        "added": [
                          "v0.9.11"
                        ],
                        "changes": [
                          {
                            "version": "v8.0.0",
                            "pr-url": "https://github.com/nodejs/node/pull/11608",
                            "description": "The `chunk` argument can now be a `Uint8Array` instance."
                          }
                        ]
                      },
                      "signatures": [
                        {
                          "params": [
                            {
                              "textRaw": "`chunk` {Buffer|Uint8Array|string|any} Chunk of data to unshift onto the read queue. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any JavaScript value other than `null`. ",
                              "name": "chunk",
                              "type": "Buffer|Uint8Array|string|any",
                              "desc": "Chunk of data to unshift onto the read queue. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any JavaScript value other than `null`."
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "chunk"
                            }
                          ]
                        }
                      ],
                      "desc": "<p>The <code>readable.unshift()</code> method pushes a chunk of data back into the internal\nbuffer. This is useful in certain situations where a stream is being consumed by\ncode that needs to &quot;un-consume&quot; some amount of data that it has optimistically\npulled out of the source, so that the data can be passed on to some other party.</p>\n<p>The <code>stream.unshift(chunk)</code> method cannot be called after the <a href=\"#stream_event_end\"><code>&#39;end&#39;</code></a> event\nhas been emitted or a runtime error will be thrown.</p>\n<p>Developers using <code>stream.unshift()</code> often should consider switching to\nuse of a <a href=\"#stream_class_stream_transform\"><code>Transform</code></a> stream instead. See the <a href=\"#stream_api_for_stream_implementers\">API for Stream Implementers</a>\nsection for more information.</p>\n<pre><code class=\"lang-js\">// Pull off a header delimited by \\n\\n\n// use unshift() if we get too much\n// Call the callback with (error, header, stream)\nconst { StringDecoder } = require(&#39;string_decoder&#39;);\nfunction parseHeader(stream, callback) {\n  stream.on(&#39;error&#39;, callback);\n  stream.on(&#39;readable&#39;, onReadable);\n  const decoder = new StringDecoder(&#39;utf8&#39;);\n  let header = &#39;&#39;;\n  function onReadable() {\n    let chunk;\n    while (null !== (chunk = stream.read())) {\n      const str = decoder.write(chunk);\n      if (str.match(/\\n\\n/)) {\n        // found the header boundary\n        const split = str.split(/\\n\\n/);\n        header += split.shift();\n        const remaining = split.join(&#39;\\n\\n&#39;);\n        const buf = Buffer.from(remaining, &#39;utf8&#39;);\n        stream.removeListener(&#39;error&#39;, callback);\n        // remove the &#39;readable&#39; listener before unshifting\n        stream.removeListener(&#39;readable&#39;, onReadable);\n        if (buf.length)\n          stream.unshift(buf);\n        // now the body of the message can be read from the stream.\n        callback(null, header, stream);\n      } else {\n        // still reading the header.\n        header += str;\n      }\n    }\n  }\n}\n</code></pre>\n<p>Unlike <a href=\"#stream_readable_push_chunk_encoding\"><code>stream.push(chunk)</code></a>, <code>stream.unshift(chunk)</code> will not\nend the reading process by resetting the internal reading state of the stream.\nThis can cause unexpected results if <code>readable.unshift()</code> is called during a\nread (i.e. from within a <a href=\"#stream_readable_read_size_1\"><code>stream._read()</code></a> implementation on a\ncustom stream). Following the call to <code>readable.unshift()</code> with an immediate\n<a href=\"#stream_readable_push_chunk_encoding\"><code>stream.push(&#39;&#39;)</code></a> will reset the reading state appropriately,\nhowever it is best to simply avoid calling <code>readable.unshift()</code> while in the\nprocess of performing a read.</p>\n"
                    },
                    {
                      "textRaw": "readable.wrap(stream)",
                      "type": "method",
                      "name": "wrap",
                      "meta": {
                        "added": [
                          "v0.9.4"
                        ],
                        "changes": []
                      },
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {this} ",
                            "name": "return",
                            "type": "this"
                          },
                          "params": [
                            {
                              "textRaw": "`stream` {Stream} An \"old style\" readable stream ",
                              "name": "stream",
                              "type": "Stream",
                              "desc": "An \"old style\" readable stream"
                            }
                          ]
                        },
                        {
                          "params": [
                            {
                              "name": "stream"
                            }
                          ]
                        }
                      ],
                      "desc": "<p>Versions of Node.js prior to v0.10 had streams that did not implement the\nentire <code>stream</code> module API as it is currently defined. (See <a href=\"#stream_compatibility_with_older_node_js_versions\">Compatibility</a>\nfor more information.)</p>\n<p>When using an older Node.js library that emits <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> events and has a\n<a href=\"#stream_readable_pause\"><code>stream.pause()</code></a> method that is advisory only, the\n<code>readable.wrap()</code> method can be used to create a <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> stream that uses\nthe old stream as its data source.</p>\n<p>It will rarely be necessary to use <code>readable.wrap()</code> but the method has been\nprovided as a convenience for interacting with older Node.js applications and\nlibraries.</p>\n<pre><code class=\"lang-js\">const { OldReader } = require(&#39;./old-api-module.js&#39;);\nconst { Readable } = require(&#39;stream&#39;);\nconst oreader = new OldReader();\nconst myReader = new Readable().wrap(oreader);\n\nmyReader.on(&#39;readable&#39;, () =&gt; {\n  myReader.read(); // etc.\n});\n</code></pre>\n"
                    },
                    {
                      "textRaw": "readable\\[Symbol.asyncIterator\\]()",
                      "type": "method",
                      "name": "\\[Symbol.asyncIterator\\]",
                      "meta": {
                        "added": [
                          "v10.0.0"
                        ],
                        "changes": []
                      },
                      "stability": 1,
                      "stabilityText": "Experimental",
                      "signatures": [
                        {
                          "return": {
                            "textRaw": "Returns: {AsyncIterator} to fully consume the stream. ",
                            "name": "return",
                            "type": "AsyncIterator",
                            "desc": "to fully consume the stream."
                          },
                          "params": []
                        },
                        {
                          "params": []
                        }
                      ],
                      "desc": "<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\nasync function print(readable) {\n  readable.setEncoding(&#39;utf8&#39;);\n  let data = &#39;&#39;;\n  for await (const k of readable) {\n    data += k;\n  }\n  console.log(data);\n}\n\nprint(fs.createReadStream(&#39;file&#39;)).catch(console.log);\n</code></pre>\n<p>If the loop terminates with a <code>break</code> or a <code>throw</code>, the stream will be\ndestroyed. In other terms, iterating over a stream will consume the stream\nfully. The stream will be read in chunks of size equal to the <code>highWaterMark</code>\noption. In the code example above, data will be in a single chunk if the file\nhas less then 64kb of data because no <code>highWaterMark</code> option is provided to\n<a href=\"fs.html#fs_fs_createreadstream_path_options\"><code>fs.createReadStream()</code></a>.</p>\n"
                    }
                  ],
                  "properties": [
                    {
                      "textRaw": "`readableHighWaterMark` Returns: {number} ",
                      "name": "readableHighWaterMark",
                      "meta": {
                        "added": [
                          "v9.3.0"
                        ],
                        "changes": []
                      },
                      "desc": "<p>Returns the value of <code>highWaterMark</code> passed when constructing this\n<code>Readable</code>.</p>\n",
                      "shortDesc": "Returns: {number}"
                    },
                    {
                      "textRaw": "`readableLength` Returns: {number} ",
                      "name": "readableLength",
                      "meta": {
                        "added": [
                          "v9.4.0"
                        ],
                        "changes": []
                      },
                      "desc": "<p>This property contains the number of bytes (or objects) in the queue\nready to be read. The value provides introspection data regarding\nthe status of the <code>highWaterMark</code>.</p>\n",
                      "shortDesc": "Returns: {number}"
                    }
                  ]
                }
              ],
              "type": "misc",
              "displayName": "Readable Streams"
            },
            {
              "textRaw": "Duplex and Transform Streams",
              "name": "duplex_and_transform_streams",
              "classes": [
                {
                  "textRaw": "Class: stream.Duplex",
                  "type": "class",
                  "name": "stream.Duplex",
                  "meta": {
                    "added": [
                      "v0.9.4"
                    ],
                    "changes": [
                      {
                        "version": "v6.8.0",
                        "pr-url": "https://github.com/nodejs/node/pull/8834",
                        "description": "Instances of `Duplex` now return `true` when checking `instanceof stream.Writable`."
                      }
                    ]
                  },
                  "desc": "<p>Duplex streams are streams that implement both the <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> and\n<a href=\"#stream_class_stream_writable\"><code>Writable</code></a> interfaces.</p>\n<p>Examples of <code>Duplex</code> streams include:</p>\n<ul>\n<li><a href=\"net.html#net_class_net_socket\">TCP sockets</a></li>\n<li><a href=\"zlib.html\">zlib streams</a></li>\n<li><a href=\"crypto.html\">crypto streams</a></li>\n</ul>\n"
                },
                {
                  "textRaw": "Class: stream.Transform",
                  "type": "class",
                  "name": "stream.Transform",
                  "meta": {
                    "added": [
                      "v0.9.4"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Transform streams are <a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a> streams where the output is in some way\nrelated to the input. Like all <a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a> streams, <code>Transform</code> streams\nimplement both the <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> and <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> interfaces.</p>\n<p>Examples of <code>Transform</code> streams include:</p>\n<ul>\n<li><a href=\"zlib.html\">zlib streams</a></li>\n<li><a href=\"crypto.html\">crypto streams</a></li>\n</ul>\n",
                  "methods": [
                    {
                      "textRaw": "transform.destroy([error])",
                      "type": "method",
                      "name": "destroy",
                      "meta": {
                        "added": [
                          "v8.0.0"
                        ],
                        "changes": []
                      },
                      "desc": "<p>Destroy the stream, and emit <code>&#39;error&#39;</code>. After this call, the\ntransform stream would release any internal resources.\nimplementors should not override this method, but instead implement\n<a href=\"#stream_readable_destroy_err_callback\"><code>readable._destroy()</code></a>.\nThe default implementation of <code>_destroy()</code> for <code>Transform</code> also emit <code>&#39;close&#39;</code>.</p>\n",
                      "signatures": [
                        {
                          "params": [
                            {
                              "name": "error",
                              "optional": true
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "type": "misc",
              "displayName": "Duplex and Transform Streams"
            }
          ],
          "methods": [
            {
              "textRaw": "stream.finished(stream, callback)",
              "type": "method",
              "name": "finished",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`stream` {Stream} A readable and/or writable stream. ",
                      "name": "stream",
                      "type": "Stream",
                      "desc": "A readable and/or writable stream."
                    },
                    {
                      "textRaw": "`callback` {Function} A callback function that takes an optional error argument. ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "A callback function that takes an optional error argument."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "stream"
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>A function to get notified when a stream is no longer readable, writable\nor has experienced an error or a premature close event.</p>\n<pre><code class=\"lang-js\">const { finished } = require(&#39;stream&#39;);\n\nconst rs = fs.createReadStream(&#39;archive.tar&#39;);\n\nfinished(rs, (err) =&gt; {\n  if (err) {\n    console.error(&#39;Stream failed&#39;, err);\n  } else {\n    console.log(&#39;Stream is done reading&#39;);\n  }\n});\n\nrs.resume(); // drain the stream\n</code></pre>\n<p>Especially useful in error handling scenarios where a stream is destroyed\nprematurely (like an aborted HTTP request), and will not emit <code>&#39;end&#39;</code>\nor <code>&#39;finish&#39;</code>.</p>\n<p>The <code>finished</code> API is promisify&#39;able as well;</p>\n<pre><code class=\"lang-js\">const finished = util.promisify(stream.finished);\n\nconst rs = fs.createReadStream(&#39;archive.tar&#39;);\n\nasync function run() {\n  await finished(rs);\n  console.log(&#39;Stream is done reading&#39;);\n}\n\nrun().catch(console.error);\nrs.resume(); // drain the stream\n</code></pre>\n"
            },
            {
              "textRaw": "stream.pipeline(...streams[, callback])",
              "type": "method",
              "name": "pipeline",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`...streams` {Stream} Two or more streams to pipe between. ",
                      "name": "...streams",
                      "type": "Stream",
                      "desc": "Two or more streams to pipe between."
                    },
                    {
                      "textRaw": "`callback` {Function} A callback function that takes an optional error argument. ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "A callback function that takes an optional error argument.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "...streams"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>A module method to pipe between streams forwarding errors and properly cleaning\nup and provide a callback when the pipeline is complete.</p>\n<pre><code class=\"lang-js\">const { pipeline } = require(&#39;stream&#39;);\nconst fs = require(&#39;fs&#39;);\nconst zlib = require(&#39;zlib&#39;);\n\n// Use the pipeline API to easily pipe a series of streams\n// together and get notified when the pipeline is fully done.\n\n// A pipeline to gzip a potentially huge tar file efficiently:\n\npipeline(\n  fs.createReadStream(&#39;archive.tar&#39;),\n  zlib.createGzip(),\n  fs.createWriteStream(&#39;archive.tar.gz&#39;),\n  (err) =&gt; {\n    if (err) {\n      console.error(&#39;Pipeline failed&#39;, err);\n    } else {\n      console.log(&#39;Pipeline succeeded&#39;);\n    }\n  }\n);\n</code></pre>\n<p>The <code>pipeline</code> API is promisify&#39;able as well:</p>\n<pre><code class=\"lang-js\">const pipeline = util.promisify(stream.pipeline);\n\nasync function run() {\n  await pipeline(\n    fs.createReadStream(&#39;archive.tar&#39;),\n    zlib.createGzip(),\n    fs.createWriteStream(&#39;archive.tar.gz&#39;)\n  );\n  console.log(&#39;Pipeline succeeded&#39;);\n}\n\nrun().catch(console.error);\n</code></pre>\n"
            }
          ]
        },
        {
          "textRaw": "API for Stream Implementers",
          "name": "API for Stream Implementers",
          "type": "misc",
          "desc": "<p>The <code>stream</code> module API has been designed to make it possible to easily\nimplement streams using JavaScript&#39;s prototypal inheritance model.</p>\n<p>First, a stream developer would declare a new JavaScript class that extends one\nof the four basic stream classes (<code>stream.Writable</code>, <code>stream.Readable</code>,\n<code>stream.Duplex</code>, or <code>stream.Transform</code>), making sure they call the appropriate\nparent class constructor:</p>\n<pre><code class=\"lang-js\">const { Writable } = require(&#39;stream&#39;);\n\nclass MyWritable extends Writable {\n  constructor(options) {\n    super(options);\n    // ...\n  }\n}\n</code></pre>\n<p>The new stream class must then implement one or more specific methods, depending\non the type of stream being created, as detailed in the chart below:</p>\n<table>\n  <thead>\n    <tr>\n      <th>\n        <p>Use-case</p>\n      </th>\n      <th>\n        <p>Class</p>\n      </th>\n      <th>\n        <p>Method(s) to implement</p>\n      </th>\n    </tr>\n  </thead>\n  <tr>\n    <td>\n      <p>Reading only</p>\n    </td>\n    <td>\n      <p><a href=\"#stream_class_stream_readable\"><code>Readable</code></a></p>\n    </td>\n    <td>\n      <p><code><a href=\"#stream_readable_read_size_1\">_read</a></code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>Writing only</p>\n    </td>\n    <td>\n      <p><a href=\"#stream_class_stream_writable\"><code>Writable</code></a></p>\n    </td>\n    <td>\n      <p>\n        <code><a href=\"#stream_writable_write_chunk_encoding_callback_1\">_write</a></code>,\n        <code><a href=\"#stream_writable_writev_chunks_callback\">_writev</a></code>,\n        <code><a href=\"#stream_writable_final_callback\">_final</a></code>\n      </p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>Reading and writing</p>\n    </td>\n    <td>\n      <p><a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a></p>\n    </td>\n    <td>\n      <p>\n        <code><a href=\"#stream_readable_read_size_1\">_read</a></code>,\n        <code><a href=\"#stream_writable_write_chunk_encoding_callback_1\">_write</a></code>,\n        <code><a href=\"#stream_writable_writev_chunks_callback\">_writev</a></code>,\n        <code><a href=\"#stream_writable_final_callback\">_final</a></code></p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <p>Operate on written data, then read the result</p>\n    </td>\n    <td>\n      <p><a href=\"#stream_class_stream_transform\"><code>Transform</code></a></p>\n    </td>\n    <td>\n      <p>\n        <code><a href=\"#stream_transform_transform_chunk_encoding_callback\">_transform</a></code>,\n        <code><a href=\"#stream_transform_flush_callback\">_flush</a></code>,\n        <code><a href=\"#stream_writable_final_callback\">_final</a></code>\n      </p>\n    </td>\n  </tr>\n</table>\n\n<p>The implementation code for a stream should <em>never</em> call the &quot;public&quot; methods\nof a stream that are intended for use by consumers (as described in the\n<a href=\"#stream_api_for_stream_consumers\">API for Stream Consumers</a> section). Doing so may lead to adverse side effects\nin application code consuming the stream.</p>\n",
          "miscs": [
            {
              "textRaw": "Simplified Construction",
              "name": "simplified_construction",
              "meta": {
                "added": [
                  "v1.2.0"
                ],
                "changes": []
              },
              "desc": "<p>For many simple cases, it is possible to construct a stream without relying on\ninheritance. This can be accomplished by directly creating instances of the\n<code>stream.Writable</code>, <code>stream.Readable</code>, <code>stream.Duplex</code> or <code>stream.Transform</code>\nobjects and passing appropriate methods as constructor options.</p>\n<pre><code class=\"lang-js\">const { Writable } = require(&#39;stream&#39;);\n\nconst myWritable = new Writable({\n  write(chunk, encoding, callback) {\n    // ...\n  }\n});\n</code></pre>\n",
              "type": "misc",
              "displayName": "Simplified Construction"
            },
            {
              "textRaw": "Implementing a Writable Stream",
              "name": "implementing_a_writable_stream",
              "desc": "<p>The <code>stream.Writable</code> class is extended to implement a <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> stream.</p>\n<p>Custom <code>Writable</code> streams <em>must</em> call the <code>new stream.Writable([options])</code>\nconstructor and implement the <code>writable._write()</code> method. The\n<code>writable._writev()</code> method <em>may</em> also be implemented.</p>\n",
              "ctors": [
                {
                  "textRaw": "Constructor: new stream.Writable([options])",
                  "type": "ctor",
                  "name": "stream.Writable",
                  "meta": {
                    "changes": [
                      {
                        "version": "v10.0.0",
                        "pr-url": "https://github.com/nodejs/node/pull/18438",
                        "description": "Add `emitClose` option to specify if `'close'` is emitted on destroy\n"
                      }
                    ]
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`options` {Object} ",
                          "options": [
                            {
                              "textRaw": "`highWaterMark` {number} Buffer level when [`stream.write()`][stream-write] starts returning `false`. **Default:** `16384` (16kb), or `16` for `objectMode` streams. ",
                              "name": "highWaterMark",
                              "type": "number",
                              "default": "`16384` (16kb), or `16` for `objectMode` streams",
                              "desc": "Buffer level when [`stream.write()`][stream-write] starts returning `false`."
                            },
                            {
                              "textRaw": "`decodeStrings` {boolean} Whether or not to decode strings into `Buffer`s before passing them to [`stream._write()`][stream-_write]. **Default:** `true`. ",
                              "name": "decodeStrings",
                              "type": "boolean",
                              "default": "`true`",
                              "desc": "Whether or not to decode strings into `Buffer`s before passing them to [`stream._write()`][stream-_write]."
                            },
                            {
                              "textRaw": "`objectMode` {boolean} Whether or not the [`stream.write(anyObj)`][stream-write] is a valid operation. When set, it becomes possible to write JavaScript values other than string, `Buffer` or `Uint8Array` if supported by the stream implementation. **Default:** `false`. ",
                              "name": "objectMode",
                              "type": "boolean",
                              "default": "`false`",
                              "desc": "Whether or not the [`stream.write(anyObj)`][stream-write] is a valid operation. When set, it becomes possible to write JavaScript values other than string, `Buffer` or `Uint8Array` if supported by the stream implementation."
                            },
                            {
                              "textRaw": "`emitClose` {boolean} Whether or not the stream should emit `'close'` after it has been destroyed. **Default:** `true`. ",
                              "name": "emitClose",
                              "type": "boolean",
                              "default": "`true`",
                              "desc": "Whether or not the stream should emit `'close'` after it has been destroyed."
                            },
                            {
                              "textRaw": "`write` {Function} Implementation for the [`stream._write()`][stream-_write] method. ",
                              "name": "write",
                              "type": "Function",
                              "desc": "Implementation for the [`stream._write()`][stream-_write] method."
                            },
                            {
                              "textRaw": "`writev` {Function} Implementation for the [`stream._writev()`][stream-_writev] method. ",
                              "name": "writev",
                              "type": "Function",
                              "desc": "Implementation for the [`stream._writev()`][stream-_writev] method."
                            },
                            {
                              "textRaw": "`destroy` {Function} Implementation for the [`stream._destroy()`][writable-_destroy] method. ",
                              "name": "destroy",
                              "type": "Function",
                              "desc": "Implementation for the [`stream._destroy()`][writable-_destroy] method."
                            },
                            {
                              "textRaw": "`final` {Function} Implementation for the [`stream._final()`][stream-_final] method. ",
                              "name": "final",
                              "type": "Function",
                              "desc": "Implementation for the [`stream._final()`][stream-_final] method."
                            }
                          ],
                          "name": "options",
                          "type": "Object",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "options",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<pre><code class=\"lang-js\">const { Writable } = require(&#39;stream&#39;);\n\nclass MyWritable extends Writable {\n  constructor(options) {\n    // Calls the stream.Writable() constructor\n    super(options);\n    // ...\n  }\n}\n</code></pre>\n<p>Or, when using pre-ES6 style constructors:</p>\n<pre><code class=\"lang-js\">const { Writable } = require(&#39;stream&#39;);\nconst util = require(&#39;util&#39;);\n\nfunction MyWritable(options) {\n  if (!(this instanceof MyWritable))\n    return new MyWritable(options);\n  Writable.call(this, options);\n}\nutil.inherits(MyWritable, Writable);\n</code></pre>\n<p>Or, using the Simplified Constructor approach:</p>\n<pre><code class=\"lang-js\">const { Writable } = require(&#39;stream&#39;);\n\nconst myWritable = new Writable({\n  write(chunk, encoding, callback) {\n    // ...\n  },\n  writev(chunks, callback) {\n    // ...\n  }\n});\n</code></pre>\n"
                }
              ],
              "methods": [
                {
                  "textRaw": "writable.\\_write(chunk, encoding, callback)",
                  "type": "method",
                  "name": "\\_write",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`chunk` {Buffer|string|any} The chunk to be written. Will **always** be a buffer unless the `decodeStrings` option was set to `false` or the stream is operating in object mode. ",
                          "name": "chunk",
                          "type": "Buffer|string|any",
                          "desc": "The chunk to be written. Will **always** be a buffer unless the `decodeStrings` option was set to `false` or the stream is operating in object mode."
                        },
                        {
                          "textRaw": "`encoding` {string} If the chunk is a string, then `encoding` is the character encoding of that string. If chunk is a `Buffer`, or if the stream is operating in object mode, `encoding` may be ignored. ",
                          "name": "encoding",
                          "type": "string",
                          "desc": "If the chunk is a string, then `encoding` is the character encoding of that string. If chunk is a `Buffer`, or if the stream is operating in object mode, `encoding` may be ignored."
                        },
                        {
                          "textRaw": "`callback` {Function} Call this function (optionally with an error argument) when processing is complete for the supplied chunk. ",
                          "name": "callback",
                          "type": "Function",
                          "desc": "Call this function (optionally with an error argument) when processing is complete for the supplied chunk."
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "chunk"
                        },
                        {
                          "name": "encoding"
                        },
                        {
                          "name": "callback"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>All <code>Writable</code> stream implementations must provide a\n<a href=\"#stream_writable_write_chunk_encoding_callback_1\"><code>writable._write()</code></a> method to send data to the underlying\nresource.</p>\n<p><a href=\"#stream_class_stream_transform\"><code>Transform</code></a> streams provide their own implementation of the\n<a href=\"#stream_writable_write_chunk_encoding_callback_1\"><code>writable._write()</code></a>.</p>\n<p>This function MUST NOT be called by application code directly. It should be\nimplemented by child classes, and called by the internal <code>Writable</code> class\nmethods only.</p>\n<p>The <code>callback</code> method must be called to signal either that the write completed\nsuccessfully or failed with an error. The first argument passed to the\n<code>callback</code> must be the <code>Error</code> object if the call failed or <code>null</code> if the\nwrite succeeded.</p>\n<p>All calls to <code>writable.write()</code> that occur between the time <code>writable._write()</code>\nis called and the <code>callback</code> is called will cause the written data to be\nbuffered. When the <code>callback</code> is invoked, the stream might emit a <a href=\"#stream_event_drain\"><code>&#39;drain&#39;</code></a>\nevent. If a stream implementation is capable of processing multiple chunks of\ndata at once, the <code>writable._writev()</code> method should be implemented.</p>\n<p>If the <code>decodeStrings</code> property is explicitly set to <code>false</code> in the constructor\noptions, then <code>chunk</code> will remain the same object that is passed to <code>.write()</code>,\nand may be a string rather than a <code>Buffer</code>. This is to support implementations\nthat have an optimized handling for certain string data encodings. In that case,\nthe <code>encoding</code> argument will indicate the character encoding of the string.\nOtherwise, the <code>encoding</code> argument can be safely ignored.</p>\n<p>The <code>writable._write()</code> method is prefixed with an underscore because it is\ninternal to the class that defines it, and should never be called directly by\nuser programs.</p>\n"
                },
                {
                  "textRaw": "writable.\\_writev(chunks, callback)",
                  "type": "method",
                  "name": "\\_writev",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`chunks` {Object[]} The chunks to be written. Each chunk has following format: `{ chunk: ..., encoding: ... }`. ",
                          "name": "chunks",
                          "type": "Object[]",
                          "desc": "The chunks to be written. Each chunk has following format: `{ chunk: ..., encoding: ... }`."
                        },
                        {
                          "textRaw": "`callback` {Function} A callback function (optionally with an error argument) to be invoked when processing is complete for the supplied chunks. ",
                          "name": "callback",
                          "type": "Function",
                          "desc": "A callback function (optionally with an error argument) to be invoked when processing is complete for the supplied chunks."
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "chunks"
                        },
                        {
                          "name": "callback"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>This function MUST NOT be called by application code directly. It should be\nimplemented by child classes, and called by the internal <code>Writable</code> class\nmethods only.</p>\n<p>The <code>writable._writev()</code> method may be implemented in addition to\n<code>writable._write()</code> in stream implementations that are capable of processing\nmultiple chunks of data at once. If implemented, the method will be called with\nall chunks of data currently buffered in the write queue.</p>\n<p>The <code>writable._writev()</code> method is prefixed with an underscore because it is\ninternal to the class that defines it, and should never be called directly by\nuser programs.</p>\n"
                },
                {
                  "textRaw": "writable.\\_destroy(err, callback)",
                  "type": "method",
                  "name": "\\_destroy",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`err` {Error} A possible error. ",
                          "name": "err",
                          "type": "Error",
                          "desc": "A possible error."
                        },
                        {
                          "textRaw": "`callback` {Function} A callback function that takes an optional error argument. ",
                          "name": "callback",
                          "type": "Function",
                          "desc": "A callback function that takes an optional error argument."
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "err"
                        },
                        {
                          "name": "callback"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>The <code>_destroy()</code> method is called by <a href=\"#stream_writable_destroy_error\"><code>writable.destroy()</code></a>.\nIt can be overridden by child classes but it <strong>must not</strong> be called directly.</p>\n"
                },
                {
                  "textRaw": "writable.\\_final(callback)",
                  "type": "method",
                  "name": "\\_final",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`callback` {Function} Call this function (optionally with an error argument) when finished writing any remaining data. ",
                          "name": "callback",
                          "type": "Function",
                          "desc": "Call this function (optionally with an error argument) when finished writing any remaining data."
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "callback"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>The <code>_final()</code> method <strong>must not</strong> be called directly. It may be implemented\nby child classes, and if so, will be called by the internal <code>Writable</code>\nclass methods only.</p>\n<p>This optional function will be called before the stream closes, delaying the\n<code>&#39;finish&#39;</code> event until <code>callback</code> is called. This is useful to close resources\nor write buffered data before a stream ends.</p>\n"
                }
              ],
              "modules": [
                {
                  "textRaw": "Errors While Writing",
                  "name": "errors_while_writing",
                  "desc": "<p>It is recommended that errors occurring during the processing of the\n<code>writable._write()</code> and <code>writable._writev()</code> methods are reported by invoking\nthe callback and passing the error as the first argument. This will cause an\n<code>&#39;error&#39;</code> event to be emitted by the <code>Writable</code>. Throwing an <code>Error</code> from within\n<code>writable._write()</code> can result in unexpected and inconsistent behavior depending\non how the stream is being used. Using the callback ensures consistent and\npredictable handling of errors.</p>\n<p>If a <code>Readable</code> stream pipes into a <code>Writable</code> stream when <code>Writable</code> emits an\nerror, the <code>Readable</code> stream will be unpiped.</p>\n<pre><code class=\"lang-js\">const { Writable } = require(&#39;stream&#39;);\n\nconst myWritable = new Writable({\n  write(chunk, encoding, callback) {\n    if (chunk.toString().indexOf(&#39;a&#39;) &gt;= 0) {\n      callback(new Error(&#39;chunk is invalid&#39;));\n    } else {\n      callback();\n    }\n  }\n});\n</code></pre>\n",
                  "type": "module",
                  "displayName": "Errors While Writing"
                },
                {
                  "textRaw": "An Example Writable Stream",
                  "name": "an_example_writable_stream",
                  "desc": "<p>The following illustrates a rather simplistic (and somewhat pointless) custom\n<code>Writable</code> stream implementation. While this specific <code>Writable</code> stream instance\nis not of any real particular usefulness, the example illustrates each of the\nrequired elements of a custom <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> stream instance:</p>\n<pre><code class=\"lang-js\">const { Writable } = require(&#39;stream&#39;);\n\nclass MyWritable extends Writable {\n  constructor(options) {\n    super(options);\n    // ...\n  }\n\n  _write(chunk, encoding, callback) {\n    if (chunk.toString().indexOf(&#39;a&#39;) &gt;= 0) {\n      callback(new Error(&#39;chunk is invalid&#39;));\n    } else {\n      callback();\n    }\n  }\n}\n</code></pre>\n",
                  "type": "module",
                  "displayName": "An Example Writable Stream"
                },
                {
                  "textRaw": "Decoding buffers in a Writable Stream",
                  "name": "decoding_buffers_in_a_writable_stream",
                  "desc": "<p>Decoding buffers is a common task, for instance, when using transformers whose\ninput is a string. This is not a trivial process when using multi-byte\ncharacters encoding, such as UTF-8. The following example shows how to decode\nmulti-byte strings using <code>StringDecoder</code> and <a href=\"#stream_class_stream_writable\"><code>Writable</code></a>.</p>\n<pre><code class=\"lang-js\">const { Writable } = require(&#39;stream&#39;);\nconst { StringDecoder } = require(&#39;string_decoder&#39;);\n\nclass StringWritable extends Writable {\n  constructor(options) {\n    super(options);\n    this._decoder = new StringDecoder(options &amp;&amp; options.defaultEncoding);\n    this.data = &#39;&#39;;\n  }\n  _write(chunk, encoding, callback) {\n    if (encoding === &#39;buffer&#39;) {\n      chunk = this._decoder.write(chunk);\n    }\n    this.data += chunk;\n    callback();\n  }\n  _final(callback) {\n    this.data += this._decoder.end();\n    callback();\n  }\n}\n\nconst euro = [[0xE2, 0x82], [0xAC]].map(Buffer.from);\nconst w = new StringWritable();\n\nw.write(&#39;currency: &#39;);\nw.write(euro[0]);\nw.end(euro[1]);\n\nconsole.log(w.data); // currency: €\n</code></pre>\n",
                  "type": "module",
                  "displayName": "Decoding buffers in a Writable Stream"
                }
              ],
              "type": "misc",
              "displayName": "Implementing a Writable Stream"
            },
            {
              "textRaw": "Implementing a Readable Stream",
              "name": "implementing_a_readable_stream",
              "desc": "<p>The <code>stream.Readable</code> class is extended to implement a <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> stream.</p>\n<p>Custom <code>Readable</code> streams <em>must</em> call the <code>new stream.Readable([options])</code>\nconstructor and implement the <code>readable._read()</code> method.</p>\n",
              "ctors": [
                {
                  "textRaw": "new stream.Readable([options])",
                  "type": "ctor",
                  "name": "stream.Readable",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`options` {Object} ",
                          "options": [
                            {
                              "textRaw": "`highWaterMark` {number} The maximum [number of bytes][hwm-gotcha] to store in the internal buffer before ceasing to read from the underlying resource. **Default:** `16384` (16kb), or `16` for `objectMode` streams. ",
                              "name": "highWaterMark",
                              "type": "number",
                              "default": "`16384` (16kb), or `16` for `objectMode` streams",
                              "desc": "The maximum [number of bytes][hwm-gotcha] to store in the internal buffer before ceasing to read from the underlying resource."
                            },
                            {
                              "textRaw": "`encoding` {string} If specified, then buffers will be decoded to strings using the specified encoding. **Default:** `null`. ",
                              "name": "encoding",
                              "type": "string",
                              "default": "`null`",
                              "desc": "If specified, then buffers will be decoded to strings using the specified encoding."
                            },
                            {
                              "textRaw": "`objectMode` {boolean} Whether this stream should behave as a stream of objects. Meaning that [`stream.read(n)`][stream-read] returns a single value instead of a `Buffer` of size `n`. **Default:** `false`. ",
                              "name": "objectMode",
                              "type": "boolean",
                              "default": "`false`",
                              "desc": "Whether this stream should behave as a stream of objects. Meaning that [`stream.read(n)`][stream-read] returns a single value instead of a `Buffer` of size `n`."
                            },
                            {
                              "textRaw": "`read` {Function} Implementation for the [`stream._read()`][stream-_read] method. ",
                              "name": "read",
                              "type": "Function",
                              "desc": "Implementation for the [`stream._read()`][stream-_read] method."
                            },
                            {
                              "textRaw": "`destroy` {Function} Implementation for the [`stream._destroy()`][readable-_destroy] method. ",
                              "name": "destroy",
                              "type": "Function",
                              "desc": "Implementation for the [`stream._destroy()`][readable-_destroy] method."
                            }
                          ],
                          "name": "options",
                          "type": "Object",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "options",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<pre><code class=\"lang-js\">const { Readable } = require(&#39;stream&#39;);\n\nclass MyReadable extends Readable {\n  constructor(options) {\n    // Calls the stream.Readable(options) constructor\n    super(options);\n    // ...\n  }\n}\n</code></pre>\n<p>Or, when using pre-ES6 style constructors:</p>\n<pre><code class=\"lang-js\">const { Readable } = require(&#39;stream&#39;);\nconst util = require(&#39;util&#39;);\n\nfunction MyReadable(options) {\n  if (!(this instanceof MyReadable))\n    return new MyReadable(options);\n  Readable.call(this, options);\n}\nutil.inherits(MyReadable, Readable);\n</code></pre>\n<p>Or, using the Simplified Constructor approach:</p>\n<pre><code class=\"lang-js\">const { Readable } = require(&#39;stream&#39;);\n\nconst myReadable = new Readable({\n  read(size) {\n    // ...\n  }\n});\n</code></pre>\n"
                }
              ],
              "methods": [
                {
                  "textRaw": "readable.\\_read(size)",
                  "type": "method",
                  "name": "\\_read",
                  "meta": {
                    "added": [
                      "v0.9.4"
                    ],
                    "changes": [
                      {
                        "version": "v10.0.0",
                        "pr-url": "https://github.com/nodejs/node/pull/17979",
                        "description": "call `_read()` only once per microtick"
                      }
                    ]
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`size` {number} Number of bytes to read asynchronously ",
                          "name": "size",
                          "type": "number",
                          "desc": "Number of bytes to read asynchronously"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "size"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>This function MUST NOT be called by application code directly. It should be\nimplemented by child classes, and called by the internal <code>Readable</code> class\nmethods only.</p>\n<p>All <code>Readable</code> stream implementations must provide an implementation of the\n<code>readable._read()</code> method to fetch data from the underlying resource.</p>\n<p>When <code>readable._read()</code> is called, if data is available from the resource, the\nimplementation should begin pushing that data into the read queue using the\n<a href=\"#stream_readable_push_chunk_encoding\"><code>this.push(dataChunk)</code></a> method. <code>_read()</code> should continue reading\nfrom the resource and pushing data until <code>readable.push()</code> returns <code>false</code>. Only\nwhen <code>_read()</code> is called again after it has stopped should it resume pushing\nadditional data onto the queue.</p>\n<p>Once the <code>readable._read()</code> method has been called, it will not be called again\nuntil the <a href=\"#stream_readable_push_chunk_encoding\"><code>readable.push()</code></a> method is called. <code>readable._read()</code>\nis guaranteed to be called only once within a synchronous execution, i.e. a\nmicrotick.</p>\n<p>The <code>size</code> argument is advisory. For implementations where a &quot;read&quot; is a\nsingle operation that returns data can use the <code>size</code> argument to determine how\nmuch data to fetch. Other implementations may ignore this argument and simply\nprovide data whenever it becomes available. There is no need to &quot;wait&quot; until\n<code>size</code> bytes are available before calling <a href=\"#stream_readable_push_chunk_encoding\"><code>stream.push(chunk)</code></a>.</p>\n<p>The <code>readable._read()</code> method is prefixed with an underscore because it is\ninternal to the class that defines it, and should never be called directly by\nuser programs.</p>\n"
                },
                {
                  "textRaw": "readable.\\_destroy(err, callback)",
                  "type": "method",
                  "name": "\\_destroy",
                  "meta": {
                    "added": [
                      "v8.0.0"
                    ],
                    "changes": []
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`err` {Error} A possible error. ",
                          "name": "err",
                          "type": "Error",
                          "desc": "A possible error."
                        },
                        {
                          "textRaw": "`callback` {Function} A callback function that takes an optional error argument. ",
                          "name": "callback",
                          "type": "Function",
                          "desc": "A callback function that takes an optional error argument."
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "err"
                        },
                        {
                          "name": "callback"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>The <code>_destroy()</code> method is called by <a href=\"#stream_readable_destroy_error\"><code>readable.destroy()</code></a>.\nIt can be overridden by child classes but it <strong>must not</strong> be called directly.</p>\n"
                },
                {
                  "textRaw": "readable.push(chunk[, encoding])",
                  "type": "method",
                  "name": "push",
                  "meta": {
                    "changes": [
                      {
                        "version": "v8.0.0",
                        "pr-url": "https://github.com/nodejs/node/pull/11608",
                        "description": "The `chunk` argument can now be a `Uint8Array` instance."
                      }
                    ]
                  },
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {boolean} `true` if additional chunks of data may continued to be pushed; `false` otherwise. ",
                        "name": "return",
                        "type": "boolean",
                        "desc": "`true` if additional chunks of data may continued to be pushed; `false` otherwise."
                      },
                      "params": [
                        {
                          "textRaw": "`chunk` {Buffer|Uint8Array|string|null|any} Chunk of data to push into the read queue. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any JavaScript value. ",
                          "name": "chunk",
                          "type": "Buffer|Uint8Array|string|null|any",
                          "desc": "Chunk of data to push into the read queue. For streams not operating in object mode, `chunk` must be a string, `Buffer` or `Uint8Array`. For object mode streams, `chunk` may be any JavaScript value."
                        },
                        {
                          "textRaw": "`encoding` {string} Encoding of string chunks. Must be a valid `Buffer` encoding, such as `'utf8'` or `'ascii'`. ",
                          "name": "encoding",
                          "type": "string",
                          "desc": "Encoding of string chunks. Must be a valid `Buffer` encoding, such as `'utf8'` or `'ascii'`.",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "chunk"
                        },
                        {
                          "name": "encoding",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>When <code>chunk</code> is a <code>Buffer</code>, <code>Uint8Array</code> or <code>string</code>, the <code>chunk</code> of data will\nbe added to the internal queue for users of the stream to consume.\nPassing <code>chunk</code> as <code>null</code> signals the end of the stream (EOF), after which no\nmore data can be written.</p>\n<p>When the <code>Readable</code> is operating in paused mode, the data added with\n<code>readable.push()</code> can be read out by calling the\n<a href=\"#stream_readable_read_size\"><code>readable.read()</code></a> method when the <a href=\"#stream_event_readable\"><code>&#39;readable&#39;</code></a> event is\nemitted.</p>\n<p>When the <code>Readable</code> is operating in flowing mode, the data added with\n<code>readable.push()</code> will be delivered by emitting a <code>&#39;data&#39;</code> event.</p>\n<p>The <code>readable.push()</code> method is designed to be as flexible as possible. For\nexample, when wrapping a lower-level source that provides some form of\npause/resume mechanism, and a data callback, the low-level source can be wrapped\nby the custom <code>Readable</code> instance as illustrated in the following example:</p>\n<pre><code class=\"lang-js\">// source is an object with readStop() and readStart() methods,\n// and an `ondata` member that gets called when it has data, and\n// an `onend` member that gets called when the data is over.\n\nclass SourceWrapper extends Readable {\n  constructor(options) {\n    super(options);\n\n    this._source = getLowlevelSourceObject();\n\n    // Every time there&#39;s data, push it into the internal buffer.\n    this._source.ondata = (chunk) =&gt; {\n      // if push() returns false, then stop reading from source\n      if (!this.push(chunk))\n        this._source.readStop();\n    };\n\n    // When the source ends, push the EOF-signaling `null` chunk\n    this._source.onend = () =&gt; {\n      this.push(null);\n    };\n  }\n  // _read will be called when the stream wants to pull more data in\n  // the advisory size argument is ignored in this case.\n  _read(size) {\n    this._source.readStart();\n  }\n}\n</code></pre>\n<p>The <code>readable.push()</code> method is intended be called only by <code>Readable</code>\nimplementers, and only from within the <code>readable._read()</code> method.</p>\n<p>For streams not operating in object mode, if the <code>chunk</code> parameter of\n<code>readable.push()</code> is <code>undefined</code>, it will be treated as empty string or\nbuffer. See <a href=\"#stream_readable_push\"><code>readable.push(&#39;&#39;)</code></a> for more information.</p>\n"
                }
              ],
              "modules": [
                {
                  "textRaw": "Errors While Reading",
                  "name": "errors_while_reading",
                  "desc": "<p>It is recommended that errors occurring during the processing of the\n<code>readable._read()</code> method are emitted using the <code>&#39;error&#39;</code> event rather than\nbeing thrown. Throwing an <code>Error</code> from within <code>readable._read()</code> can result in\nunexpected and inconsistent behavior depending on whether the stream is\noperating in flowing or paused mode. Using the <code>&#39;error&#39;</code> event ensures\nconsistent and predictable handling of errors.</p>\n<!-- eslint-disable no-useless-return -->\n<pre><code class=\"lang-js\">const { Readable } = require(&#39;stream&#39;);\n\nconst myReadable = new Readable({\n  read(size) {\n    if (checkSomeErrorCondition()) {\n      process.nextTick(() =&gt; this.emit(&#39;error&#39;, err));\n      return;\n    }\n    // do some work\n  }\n});\n</code></pre>\n",
                  "type": "module",
                  "displayName": "Errors While Reading"
                }
              ],
              "examples": [
                {
                  "textRaw": "An Example Counting Stream",
                  "name": "An Example Counting Stream",
                  "type": "example",
                  "desc": "<p>The following is a basic example of a <code>Readable</code> stream that emits the numerals\nfrom 1 to 1,000,000 in ascending order, and then ends.</p>\n<pre><code class=\"lang-js\">const { Readable } = require(&#39;stream&#39;);\n\nclass Counter extends Readable {\n  constructor(opt) {\n    super(opt);\n    this._max = 1000000;\n    this._index = 1;\n  }\n\n  _read() {\n    const i = this._index++;\n    if (i &gt; this._max)\n      this.push(null);\n    else {\n      const str = String(i);\n      const buf = Buffer.from(str, &#39;ascii&#39;);\n      this.push(buf);\n    }\n  }\n}\n</code></pre>\n"
                }
              ],
              "type": "misc",
              "displayName": "Implementing a Readable Stream"
            },
            {
              "textRaw": "Implementing a Duplex Stream",
              "name": "implementing_a_duplex_stream",
              "desc": "<p>A <a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a> stream is one that implements both <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> and\n<a href=\"#stream_class_stream_writable\"><code>Writable</code></a>, such as a TCP socket connection.</p>\n<p>Because JavaScript does not have support for multiple inheritance, the\n<code>stream.Duplex</code> class is extended to implement a <a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a> stream (as opposed\nto extending the <code>stream.Readable</code> <em>and</em> <code>stream.Writable</code> classes).</p>\n<p>The <code>stream.Duplex</code> class prototypically inherits from <code>stream.Readable</code> and\nparasitically from <code>stream.Writable</code>, but <code>instanceof</code> will work properly for\nboth base classes due to overriding <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance\"><code>Symbol.hasInstance</code></a> on\n<code>stream.Writable</code>.</p>\n<p>Custom <code>Duplex</code> streams <em>must</em> call the <code>new stream.Duplex([options])</code>\nconstructor and implement <em>both</em> the <code>readable._read()</code> and\n<code>writable._write()</code> methods.</p>\n",
              "ctors": [
                {
                  "textRaw": "new stream.Duplex(options)",
                  "type": "ctor",
                  "name": "stream.Duplex",
                  "meta": {
                    "changes": [
                      {
                        "version": "v8.4.0",
                        "pr-url": "https://github.com/nodejs/node/pull/14636",
                        "description": "The `readableHighWaterMark` and `writableHighWaterMark` options are supported now."
                      }
                    ]
                  },
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`options` {Object} Passed to both `Writable` and `Readable` constructors. Also has the following fields: ",
                          "options": [
                            {
                              "textRaw": "`allowHalfOpen` {boolean} If set to `false`, then the stream will automatically end the writable side when the readable side ends. **Default:** `true`. ",
                              "name": "allowHalfOpen",
                              "type": "boolean",
                              "default": "`true`",
                              "desc": "If set to `false`, then the stream will automatically end the writable side when the readable side ends."
                            },
                            {
                              "textRaw": "`readableObjectMode` {boolean} Sets `objectMode` for readable side of the stream. Has no effect if `objectMode` is `true`. **Default:** `false`. ",
                              "name": "readableObjectMode",
                              "type": "boolean",
                              "default": "`false`",
                              "desc": "Sets `objectMode` for readable side of the stream. Has no effect if `objectMode` is `true`."
                            },
                            {
                              "textRaw": "`writableObjectMode` {boolean} Sets `objectMode` for writable side of the stream. Has no effect if `objectMode` is `true`. **Default:** `false`. ",
                              "name": "writableObjectMode",
                              "type": "boolean",
                              "default": "`false`",
                              "desc": "Sets `objectMode` for writable side of the stream. Has no effect if `objectMode` is `true`."
                            },
                            {
                              "textRaw": "`readableHighWaterMark` {number} Sets `highWaterMark` for the readable side of the stream. Has no effect if `highWaterMark` is provided. ",
                              "name": "readableHighWaterMark",
                              "type": "number",
                              "desc": "Sets `highWaterMark` for the readable side of the stream. Has no effect if `highWaterMark` is provided."
                            },
                            {
                              "textRaw": "`writableHighWaterMark` {number} Sets `highWaterMark` for the writable side of the stream. Has no effect if `highWaterMark` is provided. ",
                              "name": "writableHighWaterMark",
                              "type": "number",
                              "desc": "Sets `highWaterMark` for the writable side of the stream. Has no effect if `highWaterMark` is provided."
                            }
                          ],
                          "name": "options",
                          "type": "Object",
                          "desc": "Passed to both `Writable` and `Readable` constructors. Also has the following fields:"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "options"
                        }
                      ]
                    }
                  ],
                  "desc": "<pre><code class=\"lang-js\">const { Duplex } = require(&#39;stream&#39;);\n\nclass MyDuplex extends Duplex {\n  constructor(options) {\n    super(options);\n    // ...\n  }\n}\n</code></pre>\n<p>Or, when using pre-ES6 style constructors:</p>\n<pre><code class=\"lang-js\">const { Duplex } = require(&#39;stream&#39;);\nconst util = require(&#39;util&#39;);\n\nfunction MyDuplex(options) {\n  if (!(this instanceof MyDuplex))\n    return new MyDuplex(options);\n  Duplex.call(this, options);\n}\nutil.inherits(MyDuplex, Duplex);\n</code></pre>\n<p>Or, using the Simplified Constructor approach:</p>\n<pre><code class=\"lang-js\">const { Duplex } = require(&#39;stream&#39;);\n\nconst myDuplex = new Duplex({\n  read(size) {\n    // ...\n  },\n  write(chunk, encoding, callback) {\n    // ...\n  }\n});\n</code></pre>\n"
                }
              ],
              "modules": [
                {
                  "textRaw": "An Example Duplex Stream",
                  "name": "an_example_duplex_stream",
                  "desc": "<p>The following illustrates a simple example of a <code>Duplex</code> stream that wraps a\nhypothetical lower-level source object to which data can be written, and\nfrom which data can be read, albeit using an API that is not compatible with\nNode.js streams.\nThe following illustrates a simple example of a <code>Duplex</code> stream that buffers\nincoming written data via the <a href=\"#stream_class_stream_writable\"><code>Writable</code></a> interface that is read back out\nvia the <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> interface.</p>\n<pre><code class=\"lang-js\">const { Duplex } = require(&#39;stream&#39;);\nconst kSource = Symbol(&#39;source&#39;);\n\nclass MyDuplex extends Duplex {\n  constructor(source, options) {\n    super(options);\n    this[kSource] = source;\n  }\n\n  _write(chunk, encoding, callback) {\n    // The underlying source only deals with strings\n    if (Buffer.isBuffer(chunk))\n      chunk = chunk.toString();\n    this[kSource].writeSomeData(chunk);\n    callback();\n  }\n\n  _read(size) {\n    this[kSource].fetchSomeData(size, (data, encoding) =&gt; {\n      this.push(Buffer.from(data, encoding));\n    });\n  }\n}\n</code></pre>\n<p>The most important aspect of a <code>Duplex</code> stream is that the <code>Readable</code> and\n<code>Writable</code> sides operate independently of one another despite co-existing within\na single object instance.</p>\n",
                  "type": "module",
                  "displayName": "An Example Duplex Stream"
                },
                {
                  "textRaw": "Object Mode Duplex Streams",
                  "name": "object_mode_duplex_streams",
                  "desc": "<p>For <code>Duplex</code> streams, <code>objectMode</code> can be set exclusively for either the\n<code>Readable</code> or <code>Writable</code> side using the <code>readableObjectMode</code> and\n<code>writableObjectMode</code> options respectively.</p>\n<p>In the following example, for instance, a new <code>Transform</code> stream (which is a\ntype of <a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a> stream) is created that has an object mode <code>Writable</code> side\nthat accepts JavaScript numbers that are converted to hexadecimal strings on\nthe <code>Readable</code> side.</p>\n<pre><code class=\"lang-js\">const { Transform } = require(&#39;stream&#39;);\n\n// All Transform streams are also Duplex Streams\nconst myTransform = new Transform({\n  writableObjectMode: true,\n\n  transform(chunk, encoding, callback) {\n    // Coerce the chunk to a number if necessary\n    chunk |= 0;\n\n    // Transform the chunk into something else.\n    const data = chunk.toString(16);\n\n    // Push the data onto the readable queue.\n    callback(null, &#39;0&#39;.repeat(data.length % 2) + data);\n  }\n});\n\nmyTransform.setEncoding(&#39;ascii&#39;);\nmyTransform.on(&#39;data&#39;, (chunk) =&gt; console.log(chunk));\n\nmyTransform.write(1);\n// Prints: 01\nmyTransform.write(10);\n// Prints: 0a\nmyTransform.write(100);\n// Prints: 64\n</code></pre>\n",
                  "type": "module",
                  "displayName": "Object Mode Duplex Streams"
                }
              ],
              "type": "misc",
              "displayName": "Implementing a Duplex Stream"
            },
            {
              "textRaw": "Implementing a Transform Stream",
              "name": "implementing_a_transform_stream",
              "desc": "<p>A <a href=\"#stream_class_stream_transform\"><code>Transform</code></a> stream is a <a href=\"#stream_class_stream_duplex\"><code>Duplex</code></a> stream where the output is computed\nin some way from the input. Examples include <a href=\"zlib.html\">zlib</a> streams or <a href=\"crypto.html\">crypto</a>\nstreams that compress, encrypt, or decrypt data.</p>\n<p>There is no requirement that the output be the same size as the input, the same\nnumber of chunks, or arrive at the same time. For example, a <code>Hash</code> stream will\nonly ever have a single chunk of output which is provided when the input is\nended. A <code>zlib</code> stream will produce output that is either much smaller or much\nlarger than its input.</p>\n<p>The <code>stream.Transform</code> class is extended to implement a <a href=\"#stream_class_stream_transform\"><code>Transform</code></a> stream.</p>\n<p>The <code>stream.Transform</code> class prototypically inherits from <code>stream.Duplex</code> and\nimplements its own versions of the <code>writable._write()</code> and <code>readable._read()</code>\nmethods. Custom <code>Transform</code> implementations <em>must</em> implement the\n<a href=\"#stream_transform_transform_chunk_encoding_callback\"><code>transform._transform()</code></a> method and <em>may</em> also implement\nthe <a href=\"#stream_transform_flush_callback\"><code>transform._flush()</code></a> method.</p>\n<p>Care must be taken when using <code>Transform</code> streams in that data written to the\nstream can cause the <code>Writable</code> side of the stream to become paused if the\noutput on the <code>Readable</code> side is not consumed.</p>\n",
              "ctors": [
                {
                  "textRaw": "new stream.Transform([options])",
                  "type": "ctor",
                  "name": "stream.Transform",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`options` {Object} Passed to both `Writable` and `Readable` constructors. Also has the following fields: ",
                          "options": [
                            {
                              "textRaw": "`transform` {Function} Implementation for the [`stream._transform()`][stream-_transform] method. ",
                              "name": "transform",
                              "type": "Function",
                              "desc": "Implementation for the [`stream._transform()`][stream-_transform] method."
                            },
                            {
                              "textRaw": "`flush` {Function} Implementation for the [`stream._flush()`][stream-_flush] method. ",
                              "name": "flush",
                              "type": "Function",
                              "desc": "Implementation for the [`stream._flush()`][stream-_flush] method."
                            }
                          ],
                          "name": "options",
                          "type": "Object",
                          "desc": "Passed to both `Writable` and `Readable` constructors. Also has the following fields:",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "options",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<pre><code class=\"lang-js\">const { Transform } = require(&#39;stream&#39;);\n\nclass MyTransform extends Transform {\n  constructor(options) {\n    super(options);\n    // ...\n  }\n}\n</code></pre>\n<p>Or, when using pre-ES6 style constructors:</p>\n<pre><code class=\"lang-js\">const { Transform } = require(&#39;stream&#39;);\nconst util = require(&#39;util&#39;);\n\nfunction MyTransform(options) {\n  if (!(this instanceof MyTransform))\n    return new MyTransform(options);\n  Transform.call(this, options);\n}\nutil.inherits(MyTransform, Transform);\n</code></pre>\n<p>Or, using the Simplified Constructor approach:</p>\n<pre><code class=\"lang-js\">const { Transform } = require(&#39;stream&#39;);\n\nconst myTransform = new Transform({\n  transform(chunk, encoding, callback) {\n    // ...\n  }\n});\n</code></pre>\n"
                }
              ],
              "modules": [
                {
                  "textRaw": "Events: 'finish' and 'end'",
                  "name": "events:_'finish'_and_'end'",
                  "desc": "<p>The <a href=\"#stream_event_finish\"><code>&#39;finish&#39;</code></a> and <a href=\"#stream_event_end\"><code>&#39;end&#39;</code></a> events are from the <code>stream.Writable</code>\nand <code>stream.Readable</code> classes, respectively. The <code>&#39;finish&#39;</code> event is emitted\nafter <a href=\"#stream_writable_end_chunk_encoding_callback\"><code>stream.end()</code></a> is called and all chunks have been processed\nby <a href=\"#stream_transform_transform_chunk_encoding_callback\"><code>stream._transform()</code></a>. The <code>&#39;end&#39;</code> event is emitted\nafter all data has been output, which occurs after the callback in\n<a href=\"#stream_transform_flush_callback\"><code>transform._flush()</code></a> has been called.</p>\n",
                  "type": "module",
                  "displayName": "Events: 'finish' and 'end'"
                }
              ],
              "methods": [
                {
                  "textRaw": "transform.\\_flush(callback)",
                  "type": "method",
                  "name": "\\_flush",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`callback` {Function} A callback function (optionally with an error argument and data) to be called when remaining data has been flushed. ",
                          "name": "callback",
                          "type": "Function",
                          "desc": "A callback function (optionally with an error argument and data) to be called when remaining data has been flushed."
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "callback"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>This function MUST NOT be called by application code directly. It should be\nimplemented by child classes, and called by the internal <code>Readable</code> class\nmethods only.</p>\n<p>In some cases, a transform operation may need to emit an additional bit of\ndata at the end of the stream. For example, a <code>zlib</code> compression stream will\nstore an amount of internal state used to optimally compress the output. When\nthe stream ends, however, that additional data needs to be flushed so that the\ncompressed data will be complete.</p>\n<p>Custom <a href=\"#stream_class_stream_transform\"><code>Transform</code></a> implementations <em>may</em> implement the <code>transform._flush()</code>\nmethod. This will be called when there is no more written data to be consumed,\nbut before the <a href=\"#stream_event_end\"><code>&#39;end&#39;</code></a> event is emitted signaling the end of the\n<a href=\"#stream_class_stream_readable\"><code>Readable</code></a> stream.</p>\n<p>Within the <code>transform._flush()</code> implementation, the <code>readable.push()</code> method\nmay be called zero or more times, as appropriate. The <code>callback</code> function must\nbe called when the flush operation is complete.</p>\n<p>The <code>transform._flush()</code> method is prefixed with an underscore because it is\ninternal to the class that defines it, and should never be called directly by\nuser programs.</p>\n"
                },
                {
                  "textRaw": "transform.\\_transform(chunk, encoding, callback)",
                  "type": "method",
                  "name": "\\_transform",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`chunk` {Buffer|string|any} The chunk to be transformed. Will **always** be a buffer unless the `decodeStrings` option was set to `false` or the stream is operating in object mode. ",
                          "name": "chunk",
                          "type": "Buffer|string|any",
                          "desc": "The chunk to be transformed. Will **always** be a buffer unless the `decodeStrings` option was set to `false` or the stream is operating in object mode."
                        },
                        {
                          "textRaw": "`encoding` {string} If the chunk is a string, then this is the encoding type. If chunk is a buffer, then this is the special value - 'buffer', ignore it in this case. ",
                          "name": "encoding",
                          "type": "string",
                          "desc": "If the chunk is a string, then this is the encoding type. If chunk is a buffer, then this is the special value - 'buffer', ignore it in this case."
                        },
                        {
                          "textRaw": "`callback` {Function} A callback function (optionally with an error argument and data) to be called after the supplied `chunk` has been processed. ",
                          "name": "callback",
                          "type": "Function",
                          "desc": "A callback function (optionally with an error argument and data) to be called after the supplied `chunk` has been processed."
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "chunk"
                        },
                        {
                          "name": "encoding"
                        },
                        {
                          "name": "callback"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>This function MUST NOT be called by application code directly. It should be\nimplemented by child classes, and called by the internal <code>Readable</code> class\nmethods only.</p>\n<p>All <code>Transform</code> stream implementations must provide a <code>_transform()</code>\nmethod to accept input and produce output. The <code>transform._transform()</code>\nimplementation handles the bytes being written, computes an output, then passes\nthat output off to the readable portion using the <code>readable.push()</code> method.</p>\n<p>The <code>transform.push()</code> method may be called zero or more times to generate\noutput from a single input chunk, depending on how much is to be output\nas a result of the chunk.</p>\n<p>It is possible that no output is generated from any given chunk of input data.</p>\n<p>The <code>callback</code> function must be called only when the current chunk is completely\nconsumed. The first argument passed to the <code>callback</code> must be an <code>Error</code> object\nif an error occurred while processing the input or <code>null</code> otherwise. If a second\nargument is passed to the <code>callback</code>, it will be forwarded on to the\n<code>readable.push()</code> method. In other words the following are equivalent:</p>\n<pre><code class=\"lang-js\">transform.prototype._transform = function(data, encoding, callback) {\n  this.push(data);\n  callback();\n};\n\ntransform.prototype._transform = function(data, encoding, callback) {\n  callback(null, data);\n};\n</code></pre>\n<p>The <code>transform._transform()</code> method is prefixed with an underscore because it\nis internal to the class that defines it, and should never be called directly by\nuser programs.</p>\n<p><code>transform._transform()</code> is never called in parallel; streams implement a\nqueue mechanism, and to receive the next chunk, <code>callback</code> must be\ncalled, either synchronously or asynchronously.</p>\n"
                }
              ],
              "classes": [
                {
                  "textRaw": "Class: stream.PassThrough",
                  "type": "class",
                  "name": "stream.PassThrough",
                  "desc": "<p>The <code>stream.PassThrough</code> class is a trivial implementation of a <a href=\"#stream_class_stream_transform\"><code>Transform</code></a>\nstream that simply passes the input bytes across to the output. Its purpose is\nprimarily for examples and testing, but there are some use cases where\n<code>stream.PassThrough</code> is useful as a building block for novel sorts of streams.</p>\n"
                }
              ],
              "type": "misc",
              "displayName": "Implementing a Transform Stream"
            }
          ]
        },
        {
          "textRaw": "Additional Notes",
          "name": "Additional Notes",
          "type": "misc",
          "miscs": [
            {
              "textRaw": "Compatibility with Older Node.js Versions",
              "name": "Compatibility with Older Node.js Versions",
              "type": "misc",
              "desc": "<p>In versions of Node.js prior to v0.10, the <code>Readable</code> stream interface was\nsimpler, but also less powerful and less useful.</p>\n<ul>\n<li>Rather than waiting for calls the <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> method,\n<a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> events would begin emitting immediately. Applications that\nwould need to perform some amount of work to decide how to handle data\nwere required to store read data into buffers so the data would not be lost.</li>\n<li>The <a href=\"#stream_readable_pause\"><code>stream.pause()</code></a> method was advisory, rather than\nguaranteed. This meant that it was still necessary to be prepared to receive\n<a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> events <em>even when the stream was in a paused state</em>.</li>\n</ul>\n<p>In Node.js v0.10, the <a href=\"#stream_class_stream_readable\"><code>Readable</code></a> class was added. For backwards\ncompatibility with older Node.js programs, <code>Readable</code> streams switch into\n&quot;flowing mode&quot; when a <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> event handler is added, or when the\n<a href=\"#stream_readable_resume\"><code>stream.resume()</code></a> method is called. The effect is that, even\nwhen not using the new <a href=\"#stream_readable_read_size\"><code>stream.read()</code></a> method and\n<a href=\"#stream_event_readable\"><code>&#39;readable&#39;</code></a> event, it is no longer necessary to worry about losing\n<a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> chunks.</p>\n<p>While most applications will continue to function normally, this introduces an\nedge case in the following conditions:</p>\n<ul>\n<li>No <a href=\"#stream_event_data\"><code>&#39;data&#39;</code></a> event listener is added.</li>\n<li>The <a href=\"#stream_readable_resume\"><code>stream.resume()</code></a> method is never called.</li>\n<li>The stream is not piped to any writable destination.</li>\n</ul>\n<p>For example, consider the following code:</p>\n<pre><code class=\"lang-js\">// WARNING!  BROKEN!\nnet.createServer((socket) =&gt; {\n\n  // we add an &#39;end&#39; listener, but never consume the data\n  socket.on(&#39;end&#39;, () =&gt; {\n    // It will never get here.\n    socket.end(&#39;The message was received but was not processed.\\n&#39;);\n  });\n\n}).listen(1337);\n</code></pre>\n<p>In versions of Node.js prior to v0.10, the incoming message data would be\nsimply discarded. However, in Node.js v0.10 and beyond, the socket remains\npaused forever.</p>\n<p>The workaround in this situation is to call the\n<a href=\"#stream_readable_resume\"><code>stream.resume()</code></a> method to begin the flow of data:</p>\n<pre><code class=\"lang-js\">// Workaround\nnet.createServer((socket) =&gt; {\n  socket.on(&#39;end&#39;, () =&gt; {\n    socket.end(&#39;The message was received but was not processed.\\n&#39;);\n  });\n\n  // start the flow of data, discarding it.\n  socket.resume();\n}).listen(1337);\n</code></pre>\n<p>In addition to new <code>Readable</code> streams switching into flowing mode,\npre-v0.10 style streams can be wrapped in a <code>Readable</code> class using the\n<a href=\"#stream_readable_wrap_stream\"><code>readable.wrap()</code></a> method.</p>\n"
            },
            {
              "textRaw": "`readable.read(0)`",
              "name": "`readable.read(0)`",
              "desc": "<p>There are some cases where it is necessary to trigger a refresh of the\nunderlying readable stream mechanisms, without actually consuming any\ndata. In such cases, it is possible to call <code>readable.read(0)</code>, which will\nalways return <code>null</code>.</p>\n<p>If the internal read buffer is below the <code>highWaterMark</code>, and the\nstream is not currently reading, then calling <code>stream.read(0)</code> will trigger\na low-level <a href=\"#stream_readable_read_size_1\"><code>stream._read()</code></a> call.</p>\n<p>While most applications will almost never need to do this, there are\nsituations within Node.js where this is done, particularly in the\n<code>Readable</code> stream class internals.</p>\n",
              "type": "misc",
              "displayName": "`readable.read(0)`"
            },
            {
              "textRaw": "`readable.push('')`",
              "name": "`readable.push('')`",
              "desc": "<p>Use of <code>readable.push(&#39;&#39;)</code> is not recommended.</p>\n<p>Pushing a zero-byte string, <code>Buffer</code> or <code>Uint8Array</code> to a stream that is not in\nobject mode has an interesting side effect. Because it <em>is</em> a call to\n<a href=\"#stream_readable_push_chunk_encoding\"><code>readable.push()</code></a>, the call will end the reading process.\nHowever, because the argument is an empty string, no data is added to the\nreadable buffer so there is nothing for a user to consume.</p>\n",
              "type": "misc",
              "displayName": "`readable.push('')`"
            },
            {
              "textRaw": "`highWaterMark` discrepancy after calling `readable.setEncoding()`",
              "name": "`highwatermark`_discrepancy_after_calling_`readable.setencoding()`",
              "desc": "<p>The use of <code>readable.setEncoding()</code> will change the behavior of how the\n<code>highWaterMark</code> operates in non-object mode.</p>\n<p>Typically, the size of the current buffer is measured against the\n<code>highWaterMark</code> in <em>bytes</em>. However, after <code>setEncoding()</code> is called, the\ncomparison function will begin to measure the buffer&#39;s size in <em>characters</em>.</p>\n<p>This is not a problem in common cases with <code>latin1</code> or <code>ascii</code>. But it is\nadvised to be mindful about this behavior when working with strings that could\ncontain multi-byte characters.</p>\n<!-- [end-include:stream.md] -->\n<!-- [start-include:string_decoder.md] -->\n",
              "type": "misc",
              "displayName": "`highWaterMark` discrepancy after calling `readable.setEncoding()`"
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Stream"
    },
    {
      "textRaw": "String Decoder",
      "name": "string_decoder",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>string_decoder</code> module provides an API for decoding <code>Buffer</code> objects into\nstrings in a manner that preserves encoded multi-byte UTF-8 and UTF-16\ncharacters. It can be accessed using:</p>\n<pre><code class=\"lang-js\">const { StringDecoder } = require(&#39;string_decoder&#39;);\n</code></pre>\n<p>The following example shows the basic use of the <code>StringDecoder</code> class.</p>\n<pre><code class=\"lang-js\">const { StringDecoder } = require(&#39;string_decoder&#39;);\nconst decoder = new StringDecoder(&#39;utf8&#39;);\n\nconst cent = Buffer.from([0xC2, 0xA2]);\nconsole.log(decoder.write(cent));\n\nconst euro = Buffer.from([0xE2, 0x82, 0xAC]);\nconsole.log(decoder.write(euro));\n</code></pre>\n<p>When a <code>Buffer</code> instance is written to the <code>StringDecoder</code> instance, an\ninternal buffer is used to ensure that the decoded string does not contain\nany incomplete multibyte characters. These are held in the buffer until the\nnext call to <code>stringDecoder.write()</code> or until <code>stringDecoder.end()</code> is called.</p>\n<p>In the following example, the three UTF-8 encoded bytes of the European Euro\nsymbol (<code>€</code>) are written over three separate operations:</p>\n<pre><code class=\"lang-js\">const { StringDecoder } = require(&#39;string_decoder&#39;);\nconst decoder = new StringDecoder(&#39;utf8&#39;);\n\ndecoder.write(Buffer.from([0xE2]));\ndecoder.write(Buffer.from([0x82]));\nconsole.log(decoder.end(Buffer.from([0xAC])));\n</code></pre>\n",
      "classes": [
        {
          "textRaw": "Class: StringDecoder",
          "type": "class",
          "name": "StringDecoder",
          "methods": [
            {
              "textRaw": "stringDecoder.end([buffer])",
              "type": "method",
              "name": "end",
              "meta": {
                "added": [
                  "v0.9.3"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string} ",
                    "name": "return",
                    "type": "string"
                  },
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer} A `Buffer` containing the bytes to decode. ",
                      "name": "buffer",
                      "type": "Buffer",
                      "desc": "A `Buffer` containing the bytes to decode.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns any remaining input stored in the internal buffer as a string. Bytes\nrepresenting incomplete UTF-8 and UTF-16 characters will be replaced with\nsubstitution characters appropriate for the character encoding.</p>\n<p>If the <code>buffer</code> argument is provided, one final call to <code>stringDecoder.write()</code>\nis performed before returning the remaining input.</p>\n"
            },
            {
              "textRaw": "stringDecoder.write(buffer)",
              "type": "method",
              "name": "write",
              "meta": {
                "added": [
                  "v0.1.99"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/9618",
                    "description": "Each invalid character is now replaced by a single replacement character instead of one for each individual byte."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string} ",
                    "name": "return",
                    "type": "string"
                  },
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer} A `Buffer` containing the bytes to decode. ",
                      "name": "buffer",
                      "type": "Buffer",
                      "desc": "A `Buffer` containing the bytes to decode."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns a decoded string, ensuring that any incomplete multibyte characters at\nthe end of the <code>Buffer</code> are omitted from the returned string and stored in an\ninternal buffer for the next call to <code>stringDecoder.write()</code> or\n<code>stringDecoder.end()</code>.</p>\n<!-- [end-include:string_decoder.md] -->\n<!-- [start-include:timers.md] -->\n"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`encoding` {string} The character encoding the `StringDecoder` will use. **Default:** `'utf8'`. ",
                  "name": "encoding",
                  "type": "string",
                  "default": "`'utf8'`",
                  "desc": "The character encoding the `StringDecoder` will use.",
                  "optional": true
                }
              ],
              "desc": "<p>Creates a new <code>StringDecoder</code> instance.</p>\n"
            },
            {
              "params": [
                {
                  "name": "encoding",
                  "optional": true
                }
              ],
              "desc": "<p>Creates a new <code>StringDecoder</code> instance.</p>\n"
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "String Decoder"
    },
    {
      "textRaw": "Timers",
      "name": "timers",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>timer</code> module exposes a global API for scheduling functions to\nbe called at some future period of time. Because the timer functions are\nglobals, there is no need to call <code>require(&#39;timers&#39;)</code> to use the API.</p>\n<p>The timer functions within Node.js implement a similar API as the timers API\nprovided by Web Browsers but use a different internal implementation that is\nbuilt around <a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick\">the Node.js Event Loop</a>.</p>\n",
      "classes": [
        {
          "textRaw": "Class: Immediate",
          "type": "class",
          "name": "Immediate",
          "desc": "<p>This object is created internally and is returned from <a href=\"timers.html#timers_setimmediate_callback_args\"><code>setImmediate()</code></a>. It\ncan be passed to <a href=\"timers.html#timers_clearimmediate_immediate\"><code>clearImmediate()</code></a> in order to cancel the scheduled\nactions.</p>\n<p>By default, when an immediate is scheduled, the Node.js event loop will continue\nrunning as long as the immediate is active. The <code>Immediate</code> object returned by\n<a href=\"timers.html#timers_setimmediate_callback_args\"><code>setImmediate()</code></a> exports both <code>immediate.ref()</code> and <code>immediate.unref()</code>\nfunctions that can be used to control this default behavior.</p>\n",
          "methods": [
            {
              "textRaw": "immediate.ref()",
              "type": "method",
              "name": "ref",
              "meta": {
                "added": [
                  "v9.7.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Immediate} a reference to `immediate` ",
                    "name": "return",
                    "type": "Immediate",
                    "desc": "a reference to `immediate`"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>When called, requests that the Node.js event loop <em>not</em> exit so long as the\n<code>Immediate</code> is active. Calling <code>immediate.ref()</code> multiple times will have no\neffect.</p>\n<p>By default, all <code>Immediate</code> objects are &quot;ref&#39;ed&quot;, making it normally unnecessary\nto call <code>immediate.ref()</code> unless <code>immediate.unref()</code> had been called previously.</p>\n"
            },
            {
              "textRaw": "immediate.unref()",
              "type": "method",
              "name": "unref",
              "meta": {
                "added": [
                  "v9.7.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Immediate} a reference to `immediate` ",
                    "name": "return",
                    "type": "Immediate",
                    "desc": "a reference to `immediate`"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>When called, the active <code>Immediate</code> object will not require the Node.js event\nloop to remain active. If there is no other activity keeping the event loop\nrunning, the process may exit before the <code>Immediate</code> object&#39;s callback is\ninvoked. Calling <code>immediate.unref()</code> multiple times will have no effect.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: Timeout",
          "type": "class",
          "name": "Timeout",
          "desc": "<p>This object is created internally and is returned from <a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a> and\n<a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a>. It can be passed to either <a href=\"timers.html#timers_cleartimeout_timeout\"><code>clearTimeout()</code></a> or\n<a href=\"timers.html#timers_clearinterval_timeout\"><code>clearInterval()</code></a> in order to cancel the scheduled actions.</p>\n<p>By default, when a timer is scheduled using either <a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a> or\n<a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a>, the Node.js event loop will continue running as long as the\ntimer is active. Each of the <code>Timeout</code> objects returned by these functions\nexport both <code>timeout.ref()</code> and <code>timeout.unref()</code> functions that can be used to\ncontrol this default behavior.</p>\n",
          "methods": [
            {
              "textRaw": "timeout.ref()",
              "type": "method",
              "name": "ref",
              "meta": {
                "added": [
                  "v0.9.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Timeout} a reference to `timeout` ",
                    "name": "return",
                    "type": "Timeout",
                    "desc": "a reference to `timeout`"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>When called, requests that the Node.js event loop <em>not</em> exit so long as the\n<code>Timeout</code> is active. Calling <code>timeout.ref()</code> multiple times will have no effect.</p>\n<p>By default, all <code>Timeout</code> objects are &quot;ref&#39;ed&quot;, making it normally unnecessary\nto call <code>timeout.ref()</code> unless <code>timeout.unref()</code> had been called previously.</p>\n"
            },
            {
              "textRaw": "timeout.unref()",
              "type": "method",
              "name": "unref",
              "meta": {
                "added": [
                  "v0.9.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Timeout} a reference to `timeout` ",
                    "name": "return",
                    "type": "Timeout",
                    "desc": "a reference to `timeout`"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>When called, the active <code>Timeout</code> object will not require the Node.js event loop\nto remain active. If there is no other activity keeping the event loop running,\nthe process may exit before the <code>Timeout</code> object&#39;s callback is invoked. Calling\n<code>timeout.unref()</code> multiple times will have no effect.</p>\n<p>Calling <code>timeout.unref()</code> creates an internal timer that will wake the Node.js\nevent loop. Creating too many of these can adversely impact performance\nof the Node.js application.</p>\n"
            }
          ]
        }
      ],
      "modules": [
        {
          "textRaw": "Scheduling Timers",
          "name": "scheduling_timers",
          "desc": "<p>A timer in Node.js is an internal construct that calls a given function after\na certain period of time. When a timer&#39;s function is called varies depending on\nwhich method was used to create the timer and what other work the Node.js\nevent loop is doing.</p>\n",
          "methods": [
            {
              "textRaw": "setImmediate(callback[, ...args])",
              "type": "method",
              "name": "setImmediate",
              "meta": {
                "added": [
                  "v0.9.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Immediate} for use with [`clearImmediate()`][] ",
                    "name": "return",
                    "type": "Immediate",
                    "desc": "for use with [`clearImmediate()`][]"
                  },
                  "params": [
                    {
                      "textRaw": "`callback` {Function} The function to call at the end of this turn of [the Node.js Event Loop] ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "The function to call at the end of this turn of [the Node.js Event Loop]"
                    },
                    {
                      "textRaw": "`...args` {any} Optional arguments to pass when the `callback` is called. ",
                      "name": "...args",
                      "type": "any",
                      "desc": "Optional arguments to pass when the `callback` is called.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback"
                    },
                    {
                      "name": "...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Schedules the &quot;immediate&quot; execution of the <code>callback</code> after I/O events&#39;\ncallbacks.</p>\n<p>When multiple calls to <code>setImmediate()</code> are made, the <code>callback</code> functions are\nqueued for execution in the order in which they are created. The entire callback\nqueue is processed every event loop iteration. If an immediate timer is queued\nfrom inside an executing callback, that timer will not be triggered until the\nnext event loop iteration.</p>\n<p>If <code>callback</code> is not a function, a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> will be thrown.</p>\n<p>This method has a custom variant for promises that is available using\n<a href=\"#util_util_promisify_original\"><code>util.promisify()</code></a>:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst setImmediatePromise = util.promisify(setImmediate);\n\nsetImmediatePromise(&#39;foobar&#39;).then((value) =&gt; {\n  // value === &#39;foobar&#39; (passing values is optional)\n  // This is executed after all I/O callbacks.\n});\n\n// or with async function\nasync function timerExample() {\n  console.log(&#39;Before I/O callbacks&#39;);\n  await setImmediatePromise();\n  console.log(&#39;After I/O callbacks&#39;);\n}\ntimerExample();\n</code></pre>\n"
            },
            {
              "textRaw": "setInterval(callback, delay[, ...args])",
              "type": "method",
              "name": "setInterval",
              "meta": {
                "added": [
                  "v0.0.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Timeout} for use with [`clearInterval()`][] ",
                    "name": "return",
                    "type": "Timeout",
                    "desc": "for use with [`clearInterval()`][]"
                  },
                  "params": [
                    {
                      "textRaw": "`callback` {Function} The function to call when the timer elapses. ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "The function to call when the timer elapses."
                    },
                    {
                      "textRaw": "`delay` {number} The number of milliseconds to wait before calling the `callback`. ",
                      "name": "delay",
                      "type": "number",
                      "desc": "The number of milliseconds to wait before calling the `callback`."
                    },
                    {
                      "textRaw": "`...args` {any} Optional arguments to pass when the `callback` is called. ",
                      "name": "...args",
                      "type": "any",
                      "desc": "Optional arguments to pass when the `callback` is called.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback"
                    },
                    {
                      "name": "delay"
                    },
                    {
                      "name": "...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Schedules repeated execution of <code>callback</code> every <code>delay</code> milliseconds.</p>\n<p>When <code>delay</code> is larger than <code>2147483647</code> or less than <code>1</code>, the <code>delay</code> will be\nset to <code>1</code>.</p>\n<p>If <code>callback</code> is not a function, a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> will be thrown.</p>\n"
            },
            {
              "textRaw": "setTimeout(callback, delay[, ...args])",
              "type": "method",
              "name": "setTimeout",
              "meta": {
                "added": [
                  "v0.0.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Timeout} for use with [`clearTimeout()`][] ",
                    "name": "return",
                    "type": "Timeout",
                    "desc": "for use with [`clearTimeout()`][]"
                  },
                  "params": [
                    {
                      "textRaw": "`callback` {Function} The function to call when the timer elapses. ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "The function to call when the timer elapses."
                    },
                    {
                      "textRaw": "`delay` {number} The number of milliseconds to wait before calling the `callback`. ",
                      "name": "delay",
                      "type": "number",
                      "desc": "The number of milliseconds to wait before calling the `callback`."
                    },
                    {
                      "textRaw": "`...args` {any} Optional arguments to pass when the `callback` is called. ",
                      "name": "...args",
                      "type": "any",
                      "desc": "Optional arguments to pass when the `callback` is called.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback"
                    },
                    {
                      "name": "delay"
                    },
                    {
                      "name": "...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Schedules execution of a one-time <code>callback</code> after <code>delay</code> milliseconds.</p>\n<p>The <code>callback</code> will likely not be invoked in precisely <code>delay</code> milliseconds.\nNode.js makes no guarantees about the exact timing of when callbacks will fire,\nnor of their ordering. The callback will be called as close as possible to the\ntime specified.</p>\n<p>When <code>delay</code> is larger than <code>2147483647</code> or less than <code>1</code>, the <code>delay</code>\nwill be set to <code>1</code>.</p>\n<p>If <code>callback</code> is not a function, a <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a> will be thrown.</p>\n<p>This method has a custom variant for promises that is available using\n<a href=\"#util_util_promisify_original\"><code>util.promisify()</code></a>:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst setTimeoutPromise = util.promisify(setTimeout);\n\nsetTimeoutPromise(40, &#39;foobar&#39;).then((value) =&gt; {\n  // value === &#39;foobar&#39; (passing values is optional)\n  // This is executed after about 40 milliseconds.\n});\n</code></pre>\n"
            }
          ],
          "type": "module",
          "displayName": "Scheduling Timers"
        },
        {
          "textRaw": "Cancelling Timers",
          "name": "cancelling_timers",
          "desc": "<p>The <a href=\"timers.html#timers_setimmediate_callback_args\"><code>setImmediate()</code></a>, <a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a>, and <a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a> methods\neach return objects that represent the scheduled timers. These can be used to\ncancel the timer and prevent it from triggering.</p>\n<p>It is not possible to cancel timers that were created using the promisified\nvariants of <a href=\"timers.html#timers_setimmediate_callback_args\"><code>setImmediate()</code></a>, <a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a>.</p>\n",
          "methods": [
            {
              "textRaw": "clearImmediate(immediate)",
              "type": "method",
              "name": "clearImmediate",
              "meta": {
                "added": [
                  "v0.9.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`immediate` {Immediate} An `Immediate` object as returned by [`setImmediate()`][]. ",
                      "name": "immediate",
                      "type": "Immediate",
                      "desc": "An `Immediate` object as returned by [`setImmediate()`][]."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "immediate"
                    }
                  ]
                }
              ],
              "desc": "<p>Cancels an <code>Immediate</code> object created by <a href=\"timers.html#timers_setimmediate_callback_args\"><code>setImmediate()</code></a>.</p>\n"
            },
            {
              "textRaw": "clearInterval(timeout)",
              "type": "method",
              "name": "clearInterval",
              "meta": {
                "added": [
                  "v0.0.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`timeout` {Timeout} A `Timeout` object as returned by [`setInterval()`][]. ",
                      "name": "timeout",
                      "type": "Timeout",
                      "desc": "A `Timeout` object as returned by [`setInterval()`][]."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "timeout"
                    }
                  ]
                }
              ],
              "desc": "<p>Cancels a <code>Timeout</code> object created by <a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a>.</p>\n"
            },
            {
              "textRaw": "clearTimeout(timeout)",
              "type": "method",
              "name": "clearTimeout",
              "meta": {
                "added": [
                  "v0.0.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`timeout` {Timeout} A `Timeout` object as returned by [`setTimeout()`][]. ",
                      "name": "timeout",
                      "type": "Timeout",
                      "desc": "A `Timeout` object as returned by [`setTimeout()`][]."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "timeout"
                    }
                  ]
                }
              ],
              "desc": "<p>Cancels a <code>Timeout</code> object created by <a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a>.</p>\n<!-- [end-include:timers.md] -->\n<!-- [start-include:tls.md] -->\n"
            }
          ],
          "type": "module",
          "displayName": "Cancelling Timers"
        }
      ],
      "type": "module",
      "displayName": "Timers"
    },
    {
      "textRaw": "TLS (SSL)",
      "name": "tls_(ssl)",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>tls</code> module provides an implementation of the Transport Layer Security\n(TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL.\nThe module can be accessed using:</p>\n<pre><code class=\"lang-js\">const tls = require(&#39;tls&#39;);\n</code></pre>\n",
      "modules": [
        {
          "textRaw": "TLS/SSL Concepts",
          "name": "tls/ssl_concepts",
          "desc": "<p>The TLS/SSL is a public/private key infrastructure (PKI). For most common\ncases, each client and server must have a <em>private key</em>.</p>\n<p>Private keys can be generated in multiple ways. The example below illustrates\nuse of the OpenSSL command-line interface to generate a 2048-bit RSA private\nkey:</p>\n<pre><code class=\"lang-sh\">openssl genrsa -out ryans-key.pem 2048\n</code></pre>\n<p>With TLS/SSL, all servers (and some clients) must have a <em>certificate</em>.\nCertificates are <em>public keys</em> that correspond to a private key, and that are\ndigitally signed either by a Certificate Authority or by the owner of the\nprivate key (such certificates are referred to as &quot;self-signed&quot;). The first\nstep to obtaining a certificate is to create a <em>Certificate Signing Request</em>\n(CSR) file.</p>\n<p>The OpenSSL command-line interface can be used to generate a CSR for a private\nkey:</p>\n<pre><code class=\"lang-sh\">openssl req -new -sha256 -key ryans-key.pem -out ryans-csr.pem\n</code></pre>\n<p>Once the CSR file is generated, it can either be sent to a Certificate\nAuthority for signing or used to generate a self-signed certificate.</p>\n<p>Creating a self-signed certificate using the OpenSSL command-line interface\nis illustrated in the example below:</p>\n<pre><code class=\"lang-sh\">openssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem\n</code></pre>\n<p>Once the certificate is generated, it can be used to generate a <code>.pfx</code> or\n<code>.p12</code> file:</p>\n<pre><code class=\"lang-sh\">openssl pkcs12 -export -in ryans-cert.pem -inkey ryans-key.pem \\\n      -certfile ca-cert.pem -out ryans.pfx\n</code></pre>\n<p>Where:</p>\n<ul>\n<li><code>in</code>: is the signed certificate</li>\n<li><code>inkey</code>: is the associated private key</li>\n<li><code>certfile</code>: is a concatenation of all Certificate Authority (CA) certs into\n a single file, e.g. <code>cat ca1-cert.pem ca2-cert.pem &gt; ca-cert.pem</code></li>\n</ul>\n",
          "miscs": [
            {
              "textRaw": "Perfect Forward Secrecy",
              "name": "Perfect Forward Secrecy",
              "type": "misc",
              "desc": "<p>The term &quot;<a href=\"https://en.wikipedia.org/wiki/Perfect_forward_secrecy\">Forward Secrecy</a>&quot; or &quot;Perfect Forward Secrecy&quot; describes a feature of\nkey-agreement (i.e., key-exchange) methods. That is, the server and client keys\nare used to negotiate new temporary keys that are used specifically and only for\nthe current communication session. Practically, this means that even if the\nserver&#39;s private key is compromised, communication can only be decrypted by\neavesdroppers if the attacker manages to obtain the key-pair specifically\ngenerated for the session.</p>\n<p>Perfect Forward Secrecy is achieved by randomly generating a key pair for\nkey-agreement on every TLS/SSL handshake (in contrast to using the same key for\nall sessions). Methods implementing this technique are called &quot;ephemeral&quot;.</p>\n<p>Currently two methods are commonly used to achieve Perfect Forward Secrecy (note\nthe character &quot;E&quot; appended to the traditional abbreviations):</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\">DHE</a> - An ephemeral version of the Diffie Hellman key-agreement protocol.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman\">ECDHE</a> - An ephemeral version of the Elliptic Curve Diffie Hellman\nkey-agreement protocol.</li>\n</ul>\n<p>Ephemeral methods may have some performance drawbacks, because key generation\nis expensive.</p>\n<p>To use Perfect Forward Secrecy using <code>DHE</code> with the <code>tls</code> module, it is required\nto generate Diffie-Hellman parameters and specify them with the <code>dhparam</code>\noption to <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>. The following illustrates the use of\nthe OpenSSL command-line interface to generate such parameters:</p>\n<pre><code class=\"lang-sh\">openssl dhparam -outform PEM -out dhparam.pem 2048\n</code></pre>\n<p>If using Perfect Forward Secrecy using <code>ECDHE</code>, Diffie-Hellman parameters are\nnot required and a default ECDHE curve will be used. The <code>ecdhCurve</code> property\ncan be used when creating a TLS Server to specify the list of names of supported\ncurves to use, see <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a> for more info.</p>\n"
            },
            {
              "textRaw": "ALPN and SNI",
              "name": "ALPN and SNI",
              "type": "misc",
              "desc": "<p>ALPN (Application-Layer Protocol Negotiation Extension) and\nSNI (Server Name Indication) are TLS handshake extensions:</p>\n<ul>\n<li>ALPN - Allows the use of one TLS server for multiple protocols (HTTP, HTTP/2)</li>\n<li>SNI - Allows the use of one TLS server for multiple hostnames with different\nSSL certificates.</li>\n</ul>\n"
            },
            {
              "textRaw": "Client-initiated renegotiation attack mitigation",
              "name": "Client-initiated renegotiation attack mitigation",
              "type": "misc",
              "desc": "<p>The TLS protocol allows clients to renegotiate certain aspects of the TLS\nsession. Unfortunately, session renegotiation requires a disproportionate amount\nof server-side resources, making it a potential vector for denial-of-service\nattacks.</p>\n<p>To mitigate the risk, renegotiation is limited to three times every ten minutes.\nAn <code>&#39;error&#39;</code> event is emitted on the <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> instance when this\nthreshold is exceeded. The limits are configurable:</p>\n<ul>\n<li><code>tls.CLIENT_RENEG_LIMIT</code> {number} Specifies the number of renegotiation\nrequests. <strong>Default:</strong> <code>3</code>.</li>\n<li><code>tls.CLIENT_RENEG_WINDOW</code> {number} Specifies the time renegotiation window\nin seconds. <strong>Default:</strong> <code>600</code> (10 minutes).</li>\n</ul>\n<p>The default renegotiation limits should not be modified without a full\nunderstanding of the implications and risks.</p>\n<p>To test the renegotiation limits on a server, connect to it using the OpenSSL\ncommand-line client (<code>openssl s_client -connect address:port</code>) then input\n<code>R&lt;CR&gt;</code> (i.e., the letter <code>R</code> followed by a carriage return) multiple times.</p>\n"
            }
          ],
          "type": "module",
          "displayName": "TLS/SSL Concepts"
        },
        {
          "textRaw": "Modifying the Default TLS Cipher suite",
          "name": "modifying_the_default_tls_cipher_suite",
          "desc": "<p>Node.js is built with a default suite of enabled and disabled TLS ciphers.\nCurrently, the default cipher suite is:</p>\n<pre><code class=\"lang-txt\">ECDHE-RSA-AES128-GCM-SHA256:\nECDHE-ECDSA-AES128-GCM-SHA256:\nECDHE-RSA-AES256-GCM-SHA384:\nECDHE-ECDSA-AES256-GCM-SHA384:\nDHE-RSA-AES128-GCM-SHA256:\nECDHE-RSA-AES128-SHA256:\nDHE-RSA-AES128-SHA256:\nECDHE-RSA-AES256-SHA384:\nDHE-RSA-AES256-SHA384:\nECDHE-RSA-AES256-SHA256:\nDHE-RSA-AES256-SHA256:\nHIGH:\n!aNULL:\n!eNULL:\n!EXPORT:\n!DES:\n!RC4:\n!MD5:\n!PSK:\n!SRP:\n!CAMELLIA\n</code></pre>\n<p>This default can be replaced entirely using the <code>--tls-cipher-list</code> command\nline switch. For instance, the following makes\n<code>ECDHE-RSA-AES128-GCM-SHA256:!RC4</code> the default TLS cipher suite:</p>\n<pre><code class=\"lang-sh\">node --tls-cipher-list=&quot;ECDHE-RSA-AES128-GCM-SHA256:!RC4&quot;\n</code></pre>\n<p>The default can also be replaced on a per client or server basis using the\n<code>ciphers</code> option from <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a>, which is also available\nin <a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a>, <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>, and when creating new\n<a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a>s.</p>\n<p>Consult <a href=\"https://www.openssl.org/docs/man1.1.0/apps/ciphers.html#CIPHER-LIST-FORMAT\">OpenSSL cipher list format documentation</a> for details on the format.</p>\n<p>The default cipher suite included within Node.js has been carefully\nselected to reflect current security best practices and risk mitigation.\nChanging the default cipher suite can have a significant impact on the security\nof an application. The <code>--tls-cipher-list</code> switch and <code>ciphers</code> option should by\nused only if absolutely necessary.</p>\n<p>The default cipher suite prefers GCM ciphers for <a href=\"https://www.chromium.org/Home/chromium-security/education/tls#TOC-Cipher-Suites\">Chrome&#39;s &#39;modern\ncryptography&#39; setting</a> and also prefers ECDHE and DHE ciphers for Perfect\nForward Secrecy, while offering <em>some</em> backward compatibility.</p>\n<p>128 bit AES is preferred over 192 and 256 bit AES in light of <a href=\"https://www.schneier.com/blog/archives/2009/07/another_new_aes.html\">specific\nattacks affecting larger AES key sizes</a>.</p>\n<p>Old clients that rely on insecure and deprecated RC4 or DES-based ciphers\n(like Internet Explorer 6) cannot complete the handshaking process with\nthe default configuration. If these clients <em>must</em> be supported, the\n<a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">TLS recommendations</a> may offer a compatible cipher suite. For more details\non the format, see the <a href=\"https://www.openssl.org/docs/man1.1.0/apps/ciphers.html#CIPHER-LIST-FORMAT\">OpenSSL cipher list format documentation</a>.</p>\n",
          "type": "module",
          "displayName": "Modifying the Default TLS Cipher suite"
        },
        {
          "textRaw": "Deprecated APIs",
          "name": "deprecated_apis",
          "classes": [
            {
              "textRaw": "Class: CryptoStream",
              "type": "class",
              "name": "CryptoStream",
              "meta": {
                "added": [
                  "v0.3.4"
                ],
                "deprecated": [
                  "v0.11.3"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`tls.TLSSocket`][] instead.",
              "desc": "<p>The <code>tls.CryptoStream</code> class represents a stream of encrypted data. This class\nhas been deprecated and should no longer be used.</p>\n",
              "properties": [
                {
                  "textRaw": "cryptoStream.bytesWritten",
                  "name": "bytesWritten",
                  "meta": {
                    "added": [
                      "v0.3.4"
                    ],
                    "deprecated": [
                      "v0.11.3"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>cryptoStream.bytesWritten</code> property returns the total number of bytes\nwritten to the underlying socket <em>including</em> the bytes required for the\nimplementation of the TLS protocol.</p>\n"
                }
              ]
            },
            {
              "textRaw": "Class: SecurePair",
              "type": "class",
              "name": "SecurePair",
              "meta": {
                "added": [
                  "v0.3.2"
                ],
                "deprecated": [
                  "v0.11.3"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`tls.TLSSocket`][] instead.",
              "desc": "<p>Returned by <a href=\"#tls_tls_createsecurepair_context_isserver_requestcert_rejectunauthorized_options\"><code>tls.createSecurePair()</code></a>.</p>\n",
              "events": [
                {
                  "textRaw": "Event: 'secure'",
                  "type": "event",
                  "name": "secure",
                  "meta": {
                    "added": [
                      "v0.3.2"
                    ],
                    "deprecated": [
                      "v0.11.3"
                    ],
                    "changes": []
                  },
                  "desc": "<p>The <code>&#39;secure&#39;</code> event is emitted by the <code>SecurePair</code> object once a secure\nconnection has been established.</p>\n<p>As with checking for the server\n<a href=\"#tls_event_secureconnection\"><code>&#39;secureConnection&#39;</code></a>\nevent, <code>pair.cleartext.authorized</code> should be inspected to confirm whether the\ncertificate used is properly authorized.</p>\n",
                  "params": []
                }
              ]
            }
          ],
          "methods": [
            {
              "textRaw": "tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized][, options])",
              "type": "method",
              "name": "createSecurePair",
              "meta": {
                "added": [
                  "v0.3.2"
                ],
                "deprecated": [
                  "v0.11.3"
                ],
                "changes": [
                  {
                    "version": "v5.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/2564",
                    "description": "ALPN options are supported now."
                  }
                ]
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`tls.TLSSocket`][] instead.",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`context` {Object} A secure context object as returned by `tls.createSecureContext()` ",
                      "name": "context",
                      "type": "Object",
                      "desc": "A secure context object as returned by `tls.createSecureContext()`",
                      "optional": true
                    },
                    {
                      "textRaw": "`isServer` {boolean} `true` to specify that this TLS connection should be opened as a server. ",
                      "name": "isServer",
                      "type": "boolean",
                      "desc": "`true` to specify that this TLS connection should be opened as a server.",
                      "optional": true
                    },
                    {
                      "textRaw": "`requestCert` {boolean} `true` to specify whether a server should request a certificate from a connecting client. Only applies when `isServer` is `true`. ",
                      "name": "requestCert",
                      "type": "boolean",
                      "desc": "`true` to specify whether a server should request a certificate from a connecting client. Only applies when `isServer` is `true`.",
                      "optional": true
                    },
                    {
                      "textRaw": "`rejectUnauthorized` {boolean} If not `false` a server automatically reject clients with invalid certificates. Only applies when `isServer` is `true`. ",
                      "name": "rejectUnauthorized",
                      "type": "boolean",
                      "desc": "If not `false` a server automatically reject clients with invalid certificates. Only applies when `isServer` is `true`.",
                      "optional": true
                    },
                    {
                      "textRaw": "`options` ",
                      "options": [
                        {
                          "textRaw": "`secureContext`: An optional TLS context object from  [`tls.createSecureContext()`][] ",
                          "name": "secureContext",
                          "desc": "An optional TLS context object from  [`tls.createSecureContext()`][]"
                        },
                        {
                          "textRaw": "`isServer`: If `true` the TLS socket will be instantiated in server-mode. **Default:** `false`. ",
                          "name": "isServer",
                          "default": "`false`",
                          "desc": "If `true` the TLS socket will be instantiated in server-mode."
                        },
                        {
                          "textRaw": "`server` {net.Server} An optional [`net.Server`][] instance ",
                          "name": "server",
                          "type": "net.Server",
                          "desc": "An optional [`net.Server`][] instance"
                        },
                        {
                          "textRaw": "`requestCert`: Optional, see [`tls.createServer()`][] ",
                          "name": "requestCert",
                          "desc": "Optional, see [`tls.createServer()`][]"
                        },
                        {
                          "textRaw": "`rejectUnauthorized`: Optional, see [`tls.createServer()`][] ",
                          "name": "rejectUnauthorized",
                          "desc": "Optional, see [`tls.createServer()`][]"
                        },
                        {
                          "textRaw": "`ALPNProtocols`: Optional, see [`tls.createServer()`][] ",
                          "name": "ALPNProtocols",
                          "desc": "Optional, see [`tls.createServer()`][]"
                        },
                        {
                          "textRaw": "`SNICallback`: Optional, see [`tls.createServer()`][] ",
                          "name": "SNICallback",
                          "desc": "Optional, see [`tls.createServer()`][]"
                        },
                        {
                          "textRaw": "`session` {Buffer} An optional `Buffer` instance containing a TLS session. ",
                          "name": "session",
                          "type": "Buffer",
                          "desc": "An optional `Buffer` instance containing a TLS session."
                        },
                        {
                          "textRaw": "`requestOCSP` {boolean} If `true`, specifies that the OCSP status request extension will be added to the client hello and an `'OCSPResponse'` event will be emitted on the socket before establishing a secure communication. ",
                          "name": "requestOCSP",
                          "type": "boolean",
                          "desc": "If `true`, specifies that the OCSP status request extension will be added to the client hello and an `'OCSPResponse'` event will be emitted on the socket before establishing a secure communication."
                        }
                      ],
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "context",
                      "optional": true
                    },
                    {
                      "name": "isServer",
                      "optional": true
                    },
                    {
                      "name": "requestCert",
                      "optional": true
                    },
                    {
                      "name": "rejectUnauthorized",
                      "optional": true
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a new secure pair object with two streams, one of which reads and writes\nthe encrypted data and the other of which reads and writes the cleartext data.\nGenerally, the encrypted stream is piped to/from an incoming encrypted data\nstream and the cleartext one is used as a replacement for the initial encrypted\nstream.</p>\n<p><code>tls.createSecurePair()</code> returns a <code>tls.SecurePair</code> object with <code>cleartext</code> and\n<code>encrypted</code> stream properties.</p>\n<p>Using <code>cleartext</code> has the same API as <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a>.</p>\n<p>The <code>tls.createSecurePair()</code> method is now deprecated in favor of\n<code>tls.TLSSocket()</code>. For example, the code:</p>\n<pre><code class=\"lang-js\">pair = tls.createSecurePair(/* ... */);\npair.encrypted.pipe(socket);\nsocket.pipe(pair.encrypted);\n</code></pre>\n<p>can be replaced by:</p>\n<pre><code class=\"lang-js\">secureSocket = tls.TLSSocket(socket, options);\n</code></pre>\n<p>where <code>secureSocket</code> has the same API as <code>pair.cleartext</code>.</p>\n<!-- [end-include:tls.md] -->\n<!-- [start-include:tracing.md] -->\n"
            }
          ],
          "type": "module",
          "displayName": "Deprecated APIs"
        }
      ],
      "classes": [
        {
          "textRaw": "Class: tls.Server",
          "type": "class",
          "name": "tls.Server",
          "meta": {
            "added": [
              "v0.3.2"
            ],
            "changes": []
          },
          "desc": "<p>The <code>tls.Server</code> class is a subclass of <code>net.Server</code> that accepts encrypted\nconnections using TLS or SSL.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'newSession'",
              "type": "event",
              "name": "newSession",
              "meta": {
                "added": [
                  "v0.9.2"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;newSession&#39;</code> event is emitted upon creation of a new TLS session. This may\nbe used to store sessions in external storage. The listener callback is passed\nthree arguments when called:</p>\n<ul>\n<li><code>sessionId</code> - The TLS session identifier</li>\n<li><code>sessionData</code> - The TLS session data</li>\n<li><code>callback</code> {Function} A callback function taking no arguments that must be\ninvoked in order for data to be sent or received over the secure connection.</li>\n</ul>\n<p>Listening for this event will have an effect only on connections established\nafter the addition of the event listener.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'OCSPRequest'",
              "type": "event",
              "name": "OCSPRequest",
              "meta": {
                "added": [
                  "v0.11.13"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;OCSPRequest&#39;</code> event is emitted when the client sends a certificate status\nrequest. The listener callback is passed three arguments when called:</p>\n<ul>\n<li><code>certificate</code> {Buffer} The server certificate</li>\n<li><code>issuer</code> {Buffer} The issuer&#39;s certificate</li>\n<li><code>callback</code> {Function} A callback function that must be invoked to provide\nthe results of the OCSP request.</li>\n</ul>\n<p>The server&#39;s current certificate can be parsed to obtain the OCSP URL\nand certificate ID; after obtaining an OCSP response, <code>callback(null, resp)</code> is\nthen invoked, where <code>resp</code> is a <code>Buffer</code> instance containing the OCSP response.\nBoth <code>certificate</code> and <code>issuer</code> are <code>Buffer</code> DER-representations of the\nprimary and issuer&#39;s certificates. These can be used to obtain the OCSP\ncertificate ID and OCSP endpoint URL.</p>\n<p>Alternatively, <code>callback(null, null)</code> may be called, indicating that there was\nno OCSP response.</p>\n<p>Calling <code>callback(err)</code> will result in a <code>socket.destroy(err)</code> call.</p>\n<p>The typical flow of an OCSP Request is as follows:</p>\n<ol>\n<li>Client connects to the server and sends an <code>&#39;OCSPRequest&#39;</code> (via the status\ninfo extension in ClientHello).</li>\n<li>Server receives the request and emits the <code>&#39;OCSPRequest&#39;</code> event, calling the\nlistener if registered.</li>\n<li>Server extracts the OCSP URL from either the <code>certificate</code> or <code>issuer</code> and\nperforms an <a href=\"https://en.wikipedia.org/wiki/OCSP_stapling\">OCSP request</a> to the CA.</li>\n<li>Server receives <code>&#39;OCSPResponse&#39;</code> from the CA and sends it back to the client\nvia the <code>callback</code> argument</li>\n<li>Client validates the response and either destroys the socket or performs a\nhandshake.</li>\n</ol>\n<p>The <code>issuer</code> can be <code>null</code> if the certificate is either self-signed or the\nissuer is not in the root certificates list. (An issuer may be provided\nvia the <code>ca</code> option when establishing the TLS connection.)</p>\n<p>Listening for this event will have an effect only on connections established\nafter the addition of the event listener.</p>\n<p>An npm module like <a href=\"https://npmjs.org/package/asn1.js\">asn1.js</a> may be used to parse the certificates.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'resumeSession'",
              "type": "event",
              "name": "resumeSession",
              "meta": {
                "added": [
                  "v0.9.2"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;resumeSession&#39;</code> event is emitted when the client requests to resume a\nprevious TLS session. The listener callback is passed two arguments when\ncalled:</p>\n<ul>\n<li><code>sessionId</code> - The TLS/SSL session identifier</li>\n<li><code>callback</code> {Function} A callback function to be called when the prior session\nhas been recovered.</li>\n</ul>\n<p>When called, the event listener may perform a lookup in external storage using\nthe given <code>sessionId</code> and invoke <code>callback(null, sessionData)</code> once finished. If\nthe session cannot be resumed (i.e., doesn&#39;t exist in storage) the callback may\nbe invoked as <code>callback(null, null)</code>. Calling <code>callback(err)</code> will terminate the\nincoming connection and destroy the socket.</p>\n<p>Listening for this event will have an effect only on connections established\nafter the addition of the event listener.</p>\n<p>The following illustrates resuming a TLS session:</p>\n<pre><code class=\"lang-js\">const tlsSessionStore = {};\nserver.on(&#39;newSession&#39;, (id, data, cb) =&gt; {\n  tlsSessionStore[id.toString(&#39;hex&#39;)] = data;\n  cb();\n});\nserver.on(&#39;resumeSession&#39;, (id, cb) =&gt; {\n  cb(null, tlsSessionStore[id.toString(&#39;hex&#39;)] || null);\n});\n</code></pre>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'secureConnection'",
              "type": "event",
              "name": "secureConnection",
              "meta": {
                "added": [
                  "v0.3.2"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;secureConnection&#39;</code> event is emitted after the handshaking process for a\nnew connection has successfully completed. The listener callback is passed a\nsingle argument when called:</p>\n<ul>\n<li><code>tlsSocket</code> {tls.TLSSocket} The established TLS socket.</li>\n</ul>\n<p>The <code>tlsSocket.authorized</code> property is a <code>boolean</code> indicating whether the\nclient has been verified by one of the supplied Certificate Authorities for the\nserver. If <code>tlsSocket.authorized</code> is <code>false</code>, then <code>socket.authorizationError</code>\nis set to describe how authorization failed. Note that depending on the settings\nof the TLS server, unauthorized connections may still be accepted.</p>\n<p>The <code>tlsSocket.alpnProtocol</code> property is a string that contains the selected\nALPN protocol. When ALPN has no selected protocol, <code>tlsSocket.alpnProtocol</code>\nequals <code>false</code>.</p>\n<p>The <code>tlsSocket.servername</code> property is a string containing the server name\nrequested via SNI.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'tlsClientError'",
              "type": "event",
              "name": "tlsClientError",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;tlsClientError&#39;</code> event is emitted when an error occurs before a secure\nconnection is established. The listener callback is passed two arguments when\ncalled:</p>\n<ul>\n<li><code>exception</code> {Error} The <code>Error</code> object describing the error</li>\n<li><code>tlsSocket</code> {tls.TLSSocket} The <code>tls.TLSSocket</code> instance from which the\nerror originated.</li>\n</ul>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "server.addContext(hostname, context)",
              "type": "method",
              "name": "addContext",
              "meta": {
                "added": [
                  "v0.5.3"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`hostname` {string} A SNI hostname or wildcard (e.g. `'*'`) ",
                      "name": "hostname",
                      "type": "string",
                      "desc": "A SNI hostname or wildcard (e.g. `'*'`)"
                    },
                    {
                      "textRaw": "`context` {Object} An object containing any of the possible properties from the [`tls.createSecureContext()`][] `options` arguments (e.g. `key`, `cert`, `ca`, etc). ",
                      "name": "context",
                      "type": "Object",
                      "desc": "An object containing any of the possible properties from the [`tls.createSecureContext()`][] `options` arguments (e.g. `key`, `cert`, `ca`, etc)."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "hostname"
                    },
                    {
                      "name": "context"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>server.addContext()</code> method adds a secure context that will be used if\nthe client request&#39;s SNI hostname matches the supplied <code>hostname</code> (or wildcard).</p>\n"
            },
            {
              "textRaw": "server.address()",
              "type": "method",
              "name": "address",
              "meta": {
                "added": [
                  "v0.6.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "name": "return",
                    "type": "Object"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns the bound address, the address family name, and port of the\nserver as reported by the operating system. See <a href=\"net.html#net_server_address\"><code>net.Server.address()</code></a> for\nmore information.</p>\n"
            },
            {
              "textRaw": "server.close([callback])",
              "type": "method",
              "name": "close",
              "meta": {
                "added": [
                  "v0.3.2"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`callback` {Function} An optional listener callback that will be registered to listen for the server instance's `'close'` event. ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "An optional listener callback that will be registered to listen for the server instance's `'close'` event.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>server.close()</code> method stops the server from accepting new connections.</p>\n<p>This function operates asynchronously. The <code>&#39;close&#39;</code> event will be emitted\nwhen the server has no more open connections.</p>\n"
            },
            {
              "textRaw": "server.getTicketKeys()",
              "type": "method",
              "name": "getTicketKeys",
              "meta": {
                "added": [
                  "v3.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} ",
                    "name": "return",
                    "type": "Buffer"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns a <code>Buffer</code> instance holding the keys currently used for\nencryption/decryption of the <a href=\"https://www.ietf.org/rfc/rfc5077.txt\">TLS Session Tickets</a>.</p>\n"
            },
            {
              "textRaw": "server.listen()",
              "type": "method",
              "name": "listen",
              "desc": "<p>Starts the server listening for encrypted connections.\nThis method is identical to <a href=\"net.html#net_server_listen\"><code>server.listen()</code></a> from <a href=\"net.html#net_class_net_server\"><code>net.Server</code></a>.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "server.setTicketKeys(keys)",
              "type": "method",
              "name": "setTicketKeys",
              "meta": {
                "added": [
                  "v3.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`keys` {Buffer} The keys used for encryption/decryption of the [TLS Session Tickets][]. ",
                      "name": "keys",
                      "type": "Buffer",
                      "desc": "The keys used for encryption/decryption of the [TLS Session Tickets][]."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "keys"
                    }
                  ]
                }
              ],
              "desc": "<p>Updates the keys for encryption/decryption of the <a href=\"https://www.ietf.org/rfc/rfc5077.txt\">TLS Session Tickets</a>.</p>\n<p>The key&#39;s <code>Buffer</code> should be 48 bytes long. See <code>ticketKeys</code> option in\n<a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a> for more information on how it is used.</p>\n<p>Changes to the ticket keys are effective only for future server connections.\nExisting or currently pending server connections will use the previous keys.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`connections` {number} ",
              "type": "number",
              "name": "connections",
              "meta": {
                "added": [
                  "v0.3.2"
                ],
                "deprecated": [
                  "v0.9.7"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`server.getConnections()`][] instead.",
              "desc": "<p>Returns the current number of concurrent connections on the server.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: tls.TLSSocket",
          "type": "class",
          "name": "tls.TLSSocket",
          "meta": {
            "added": [
              "v0.11.4"
            ],
            "changes": []
          },
          "desc": "<p>The <code>tls.TLSSocket</code> is a subclass of <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> that performs transparent\nencryption of written data and all required TLS negotiation.</p>\n<p>Instances of <code>tls.TLSSocket</code> implement the duplex <a href=\"stream.html#stream_stream\">Stream</a> interface.</p>\n<p>Methods that return TLS connection metadata (e.g.\n<a href=\"#tls_tlssocket_getpeercertificate_detailed\"><code>tls.TLSSocket.getPeerCertificate()</code></a> will only return data while the\nconnection is open.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'OCSPResponse'",
              "type": "event",
              "name": "OCSPResponse",
              "meta": {
                "added": [
                  "v0.11.13"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;OCSPResponse&#39;</code> event is emitted if the <code>requestOCSP</code> option was set\nwhen the <code>tls.TLSSocket</code> was created and an OCSP response has been received.\nThe listener callback is passed a single argument when called:</p>\n<ul>\n<li><code>response</code> {Buffer} The server&#39;s OCSP response</li>\n</ul>\n<p>Typically, the <code>response</code> is a digitally signed object from the server&#39;s CA that\ncontains information about server&#39;s certificate revocation status.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'secureConnect'",
              "type": "event",
              "name": "secureConnect",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;secureConnect&#39;</code> event is emitted after the handshaking process for a new\nconnection has successfully completed. The listener callback will be called\nregardless of whether or not the server&#39;s certificate has been authorized. It\nis the client&#39;s responsibility to check the <code>tlsSocket.authorized</code> property to\ndetermine if the server certificate was signed by one of the specified CAs. If\n<code>tlsSocket.authorized === false</code>, then the error can be found by examining the\n<code>tlsSocket.authorizationError</code> property. If ALPN was used, the\n<code>tlsSocket.alpnProtocol</code> property can be checked to determine the negotiated\nprotocol.</p>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "tlsSocket.address()",
              "type": "method",
              "name": "address",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "name": "return",
                    "type": "Object"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns the bound <code>address</code>, the address <code>family</code> name, and <code>port</code> of the\nunderlying socket as reported by the operating system:\n<code>{ port: 12346, family: &#39;IPv4&#39;, address: &#39;127.0.0.1&#39; }</code>.</p>\n"
            },
            {
              "textRaw": "tlsSocket.disableRenegotiation()",
              "type": "method",
              "name": "disableRenegotiation",
              "meta": {
                "added": [
                  "v8.4.0"
                ],
                "changes": []
              },
              "desc": "<p>Disables TLS renegotiation for this <code>TLSSocket</code> instance. Once called, attempts\nto renegotiate will trigger an <code>&#39;error&#39;</code> event on the <code>TLSSocket</code>.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "tlsSocket.getCipher()",
              "type": "method",
              "name": "getCipher",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "name": "return",
                    "type": "Object"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns an object representing the cipher name. The <code>version</code> key is a legacy\nfield which always contains the value <code>&#39;TLSv1/SSLv3&#39;</code>.</p>\n<p>For example: <code>{ name: &#39;AES256-SHA&#39;, version: &#39;TLSv1/SSLv3&#39; }</code>.</p>\n<p>See <code>SSL_CIPHER_get_name()</code> in\n<a href=\"https://www.openssl.org/docs/man1.1.0/ssl/SSL_CIPHER_get_name.html\">https://www.openssl.org/docs/man1.1.0/ssl/SSL_CIPHER_get_name.html</a> for more\ninformation.</p>\n"
            },
            {
              "textRaw": "tlsSocket.getEphemeralKeyInfo()",
              "type": "method",
              "name": "getEphemeralKeyInfo",
              "meta": {
                "added": [
                  "v5.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "name": "return",
                    "type": "Object"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns an object representing the type, name, and size of parameter of\nan ephemeral key exchange in <a href=\"#tls_perfect_forward_secrecy\">Perfect Forward Secrecy</a> on a client\nconnection. It returns an empty object when the key exchange is not\nephemeral. As this is only supported on a client socket; <code>null</code> is returned\nif called on a server socket. The supported types are <code>&#39;DH&#39;</code> and <code>&#39;ECDH&#39;</code>. The\n<code>name</code> property is available only when type is <code>&#39;ECDH&#39;</code>.</p>\n<p>For example: <code>{ type: &#39;ECDH&#39;, name: &#39;prime256v1&#39;, size: 256 }</code>.</p>\n"
            },
            {
              "textRaw": "tlsSocket.getFinished()",
              "type": "method",
              "name": "getFinished",
              "meta": {
                "added": [
                  "v9.9.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer|undefined} The latest `Finished` message that has been sent to the socket as part of a SSL/TLS handshake, or `undefined` if no `Finished` message has been sent yet. ",
                    "name": "return",
                    "type": "Buffer|undefined",
                    "desc": "The latest `Finished` message that has been sent to the socket as part of a SSL/TLS handshake, or `undefined` if no `Finished` message has been sent yet."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>As the <code>Finished</code> messages are message digests of the complete handshake\n(with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can\nbe used for external authentication procedures when the authentication\nprovided by SSL/TLS is not desired or is not enough.</p>\n<p>Corresponds to the <code>SSL_get_finished</code> routine in OpenSSL and may be used\nto implement the <code>tls-unique</code> channel binding from <a href=\"https://tools.ietf.org/html/rfc5929\">RFC 5929</a>.</p>\n"
            },
            {
              "textRaw": "tlsSocket.getPeerCertificate([detailed])",
              "type": "method",
              "name": "getPeerCertificate",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "name": "return",
                    "type": "Object"
                  },
                  "params": [
                    {
                      "textRaw": "`detailed` {boolean} Include the full certificate chain if `true`, otherwise include just the peer's certificate. ",
                      "name": "detailed",
                      "type": "boolean",
                      "desc": "Include the full certificate chain if `true`, otherwise include just the peer's certificate.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "detailed",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns an object representing the peer&#39;s certificate. The returned object has\nsome properties corresponding to the fields of the certificate.</p>\n<p>If the full certificate chain was requested, each certificate will include an\n<code>issuerCertificate</code> property containing an object representing its issuer&#39;s\ncertificate.</p>\n<p>For example:</p>\n<pre><code class=\"lang-text\">{ subject:\n   { C: &#39;UK&#39;,\n     ST: &#39;Acknack Ltd&#39;,\n     L: &#39;Rhys Jones&#39;,\n     O: &#39;node.js&#39;,\n     OU: &#39;Test TLS Certificate&#39;,\n     CN: &#39;localhost&#39; },\n  issuer:\n   { C: &#39;UK&#39;,\n     ST: &#39;Acknack Ltd&#39;,\n     L: &#39;Rhys Jones&#39;,\n     O: &#39;node.js&#39;,\n     OU: &#39;Test TLS Certificate&#39;,\n     CN: &#39;localhost&#39; },\n  issuerCertificate:\n   { ... another certificate, possibly with an .issuerCertificate ... },\n  raw: &lt; RAW DER buffer &gt;,\n  pubkey: &lt; RAW DER buffer &gt;,\n  valid_from: &#39;Nov 11 09:52:22 2009 GMT&#39;,\n  valid_to: &#39;Nov 6 09:52:22 2029 GMT&#39;,\n  fingerprint: &#39;2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF&#39;,\n  fingerprint256: &#39;2A:7A:C2:DD:E5:F9:CC:53:72:35:99:7A:02:5A:71:38:52:EC:8A:DF:00:11:22:33:44:55:66:77:88:99:AA:BB&#39;,\n  serialNumber: &#39;B9B0D332A1AA5635&#39; }\n</code></pre>\n<p>If the peer does not provide a certificate, an empty object will be returned.</p>\n"
            },
            {
              "textRaw": "tlsSocket.getPeerFinished()",
              "type": "method",
              "name": "getPeerFinished",
              "meta": {
                "added": [
                  "v9.9.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer|undefined} The latest `Finished` message that is expected or has actually been received from the socket as part of a SSL/TLS handshake, or `undefined` if there is no `Finished` message so far. ",
                    "name": "return",
                    "type": "Buffer|undefined",
                    "desc": "The latest `Finished` message that is expected or has actually been received from the socket as part of a SSL/TLS handshake, or `undefined` if there is no `Finished` message so far."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>As the <code>Finished</code> messages are message digests of the complete handshake\n(with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can\nbe used for external authentication procedures when the authentication\nprovided by SSL/TLS is not desired or is not enough.</p>\n<p>Corresponds to the <code>SSL_get_peer_finished</code> routine in OpenSSL and may be used\nto implement the <code>tls-unique</code> channel binding from <a href=\"https://tools.ietf.org/html/rfc5929\">RFC 5929</a>.</p>\n"
            },
            {
              "textRaw": "tlsSocket.getProtocol()",
              "type": "method",
              "name": "getProtocol",
              "meta": {
                "added": [
                  "v5.7.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string} ",
                    "name": "return",
                    "type": "string"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns a string containing the negotiated SSL/TLS protocol version of the\ncurrent connection. The value <code>&#39;unknown&#39;</code> will be returned for connected\nsockets that have not completed the handshaking process. The value <code>null</code> will\nbe returned for server sockets or disconnected client sockets.</p>\n<p>Example responses include:</p>\n<ul>\n<li><code>SSLv3</code></li>\n<li><code>TLSv1</code></li>\n<li><code>TLSv1.1</code></li>\n<li><code>TLSv1.2</code></li>\n<li><code>unknown</code></li>\n</ul>\n<p>See <a href=\"https://www.openssl.org/docs/man1.1.0/ssl/SSL_get_version.html\">https://www.openssl.org/docs/man1.1.0/ssl/SSL_get_version.html</a> for more\ninformation.</p>\n"
            },
            {
              "textRaw": "tlsSocket.getSession()",
              "type": "method",
              "name": "getSession",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Returns the ASN.1 encoded TLS session or <code>undefined</code> if no session was\nnegotiated. Can be used to speed up handshake establishment when reconnecting\nto the server.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "tlsSocket.getTLSTicket()",
              "type": "method",
              "name": "getTLSTicket",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Returns the TLS session ticket or <code>undefined</code> if no session was negotiated.</p>\n<p>This only works with client TLS sockets. Useful only for debugging, for session\nreuse provide <code>session</code> option to <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a>.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "tlsSocket.renegotiate(options, callback)",
              "type": "method",
              "name": "renegotiate",
              "meta": {
                "added": [
                  "v0.11.8"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`rejectUnauthorized` {boolean} If not `false`, the server certificate is verified against the list of supplied CAs. An `'error'` event is emitted if verification fails; `err.code` contains the OpenSSL error code. **Default:** `true`. ",
                          "name": "rejectUnauthorized",
                          "type": "boolean",
                          "default": "`true`",
                          "desc": "If not `false`, the server certificate is verified against the list of supplied CAs. An `'error'` event is emitted if verification fails; `err.code` contains the OpenSSL error code."
                        },
                        {
                          "textRaw": "`requestCert` ",
                          "name": "requestCert"
                        }
                      ],
                      "name": "options",
                      "type": "Object"
                    },
                    {
                      "textRaw": "`callback` {Function} A function that will be called when the renegotiation request has been completed. ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "A function that will be called when the renegotiation request has been completed."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "options"
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>tlsSocket.renegotiate()</code> method initiates a TLS renegotiation process.\nUpon completion, the <code>callback</code> function will be passed a single argument\nthat is either an <code>Error</code> (if the request failed) or <code>null</code>.</p>\n<p>This method can be used to request a peer&#39;s certificate after the secure\nconnection has been established.</p>\n<p>When running as the server, the socket will be destroyed with an error after\n<code>handshakeTimeout</code> timeout.</p>\n"
            },
            {
              "textRaw": "tlsSocket.setMaxSendFragment(size)",
              "type": "method",
              "name": "setMaxSendFragment",
              "meta": {
                "added": [
                  "v0.11.11"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`size` {number} The maximum TLS fragment size. The maximum value is `16384`. **Default:** `16384`. ",
                      "name": "size",
                      "type": "number",
                      "default": "`16384`",
                      "desc": "The maximum TLS fragment size. The maximum value is `16384`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "size"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>tlsSocket.setMaxSendFragment()</code> method sets the maximum TLS fragment size.\nReturns <code>true</code> if setting the limit succeeded; <code>false</code> otherwise.</p>\n<p>Smaller fragment sizes decrease the buffering latency on the client: larger\nfragments are buffered by the TLS layer until the entire fragment is received\nand its integrity is verified; large fragments can span multiple roundtrips\nand their processing can be delayed due to packet loss or reordering. However,\nsmaller fragments add extra TLS framing bytes and CPU overhead, which may\ndecrease overall server throughput.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "tlsSocket.authorizationError",
              "name": "authorizationError",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Returns the reason why the peer&#39;s certificate was not been verified. This\nproperty is set only when <code>tlsSocket.authorized === false</code>.</p>\n"
            },
            {
              "textRaw": "`authorized` Returns: {boolean} ",
              "name": "authorized",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Returns <code>true</code> if the peer certificate was signed by one of the CAs specified\nwhen creating the <code>tls.TLSSocket</code> instance, otherwise <code>false</code>.</p>\n",
              "shortDesc": "Returns: {boolean}"
            },
            {
              "textRaw": "tlsSocket.encrypted",
              "name": "encrypted",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Always returns <code>true</code>. This may be used to distinguish TLS sockets from regular\n<code>net.Socket</code> instances.</p>\n"
            },
            {
              "textRaw": "`localAddress` {string} ",
              "type": "string",
              "name": "localAddress",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Returns the string representation of the local IP address.</p>\n"
            },
            {
              "textRaw": "`localPort` {number} ",
              "type": "number",
              "name": "localPort",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Returns the numeric representation of the local port.</p>\n"
            },
            {
              "textRaw": "`remoteAddress` {string} ",
              "type": "string",
              "name": "remoteAddress",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Returns the string representation of the remote IP address. For example,\n<code>&#39;74.125.127.100&#39;</code> or <code>&#39;2001:4860:a005::68&#39;</code>.</p>\n"
            },
            {
              "textRaw": "`remoteFamily` {string} ",
              "type": "string",
              "name": "remoteFamily",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Returns the string representation of the remote IP family. <code>&#39;IPv4&#39;</code> or <code>&#39;IPv6&#39;</code>.</p>\n"
            },
            {
              "textRaw": "`remotePort` {number} ",
              "type": "number",
              "name": "remotePort",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Returns the numeric representation of the remote port. For example, <code>443</code>.</p>\n"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`socket` {net.Socket|stream.Duplex} On the server side, any `Duplex` stream. On the client side, any instance of [`net.Socket`][] (for generic `Duplex` stream support on the client side, [`tls.connect()`][] must be used). ",
                  "name": "socket",
                  "type": "net.Socket|stream.Duplex",
                  "desc": "On the server side, any `Duplex` stream. On the client side, any instance of [`net.Socket`][] (for generic `Duplex` stream support on the client side, [`tls.connect()`][] must be used)."
                },
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`isServer`: The SSL/TLS protocol is asymmetrical, TLSSockets must know if they are to behave as a server or a client. If `true` the TLS socket will be instantiated as a server. **Default:** `false`. ",
                      "name": "isServer",
                      "default": "`false`",
                      "desc": "The SSL/TLS protocol is asymmetrical, TLSSockets must know if they are to behave as a server or a client. If `true` the TLS socket will be instantiated as a server."
                    },
                    {
                      "textRaw": "`server` {net.Server} An optional [`net.Server`][] instance. ",
                      "name": "server",
                      "type": "net.Server",
                      "desc": "An optional [`net.Server`][] instance."
                    },
                    {
                      "textRaw": "`requestCert`: Whether to authenticate the remote peer by requesting a  certificate. Clients always request a server certificate. Servers  (`isServer` is true) may optionally set `requestCert` to true to request a  client certificate. ",
                      "name": "requestCert",
                      "desc": "Whether to authenticate the remote peer by requesting a  certificate. Clients always request a server certificate. Servers  (`isServer` is true) may optionally set `requestCert` to true to request a  client certificate."
                    },
                    {
                      "textRaw": "`rejectUnauthorized`: Optional, see [`tls.createServer()`][] ",
                      "name": "rejectUnauthorized",
                      "desc": "Optional, see [`tls.createServer()`][]"
                    },
                    {
                      "textRaw": "`ALPNProtocols`: Optional, see [`tls.createServer()`][] ",
                      "name": "ALPNProtocols",
                      "desc": "Optional, see [`tls.createServer()`][]"
                    },
                    {
                      "textRaw": "`SNICallback`: Optional, see [`tls.createServer()`][] ",
                      "name": "SNICallback",
                      "desc": "Optional, see [`tls.createServer()`][]"
                    },
                    {
                      "textRaw": "`session` {Buffer} An optional `Buffer` instance containing a TLS session. ",
                      "name": "session",
                      "type": "Buffer",
                      "desc": "An optional `Buffer` instance containing a TLS session."
                    },
                    {
                      "textRaw": "`requestOCSP` {boolean} If `true`, specifies that the OCSP status request extension will be added to the client hello and an `'OCSPResponse'` event will be emitted on the socket before establishing a secure communication ",
                      "name": "requestOCSP",
                      "type": "boolean",
                      "desc": "If `true`, specifies that the OCSP status request extension will be added to the client hello and an `'OCSPResponse'` event will be emitted on the socket before establishing a secure communication"
                    },
                    {
                      "textRaw": "`secureContext`: Optional TLS context object created with [`tls.createSecureContext()`][]. If a `secureContext` is _not_ provided, one will be created by passing the entire `options` object to `tls.createSecureContext()`. ",
                      "name": "secureContext",
                      "desc": "Optional TLS context object created with [`tls.createSecureContext()`][]. If a `secureContext` is _not_ provided, one will be created by passing the entire `options` object to `tls.createSecureContext()`."
                    },
                    {
                      "textRaw": "...: Optional [`tls.createSecureContext()`][] options that are used if the `secureContext` option is missing, otherwise they are ignored. ",
                      "name": "...",
                      "desc": "Optional [`tls.createSecureContext()`][] options that are used if the `secureContext` option is missing, otherwise they are ignored."
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "optional": true
                }
              ],
              "desc": "<p>Construct a new <code>tls.TLSSocket</code> object from an existing TCP socket.</p>\n"
            },
            {
              "params": [
                {
                  "name": "socket"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ],
              "desc": "<p>Construct a new <code>tls.TLSSocket</code> object from an existing TCP socket.</p>\n"
            }
          ]
        }
      ],
      "methods": [
        {
          "textRaw": "tls.checkServerIdentity(host, cert)",
          "type": "method",
          "name": "checkServerIdentity",
          "meta": {
            "added": [
              "v0.8.4"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Error|undefined} ",
                "name": "return",
                "type": "Error|undefined"
              },
              "params": [
                {
                  "textRaw": "`host` {string} The hostname to verify the certificate against ",
                  "name": "host",
                  "type": "string",
                  "desc": "The hostname to verify the certificate against"
                },
                {
                  "textRaw": "`cert` {Object} An object representing the peer's certificate. The returned object has some properties corresponding to the fields of the certificate. ",
                  "name": "cert",
                  "type": "Object",
                  "desc": "An object representing the peer's certificate. The returned object has some properties corresponding to the fields of the certificate."
                }
              ]
            },
            {
              "params": [
                {
                  "name": "host"
                },
                {
                  "name": "cert"
                }
              ]
            }
          ],
          "desc": "<p>Verifies the certificate <code>cert</code> is issued to host <code>host</code>.</p>\n<p>Returns {Error} object, populating it with the reason, host, and cert on\nfailure. On success, returns {undefined}.</p>\n<p>This function can be overwritten by providing alternative function as part of\nthe <code>options.checkServerIdentity</code> option passed to <code>tls.connect()</code>. The\noverwriting function can call <code>tls.checkServerIdentity()</code> of course, to augment\nthe checks done with additional verification.</p>\n<p>This function is only called if the certificate passed all other checks, such as\nbeing issued by trusted CA (<code>options.ca</code>).</p>\n<p>The cert object contains the parsed certificate and will have a structure\nsimilar to:</p>\n<pre><code class=\"lang-text\">{ subject:\n   { OU: [ &#39;Domain Control Validated&#39;, &#39;PositiveSSL Wildcard&#39; ],\n     CN: &#39;*.nodejs.org&#39; },\n  issuer:\n   { C: &#39;GB&#39;,\n     ST: &#39;Greater Manchester&#39;,\n     L: &#39;Salford&#39;,\n     O: &#39;COMODO CA Limited&#39;,\n     CN: &#39;COMODO RSA Domain Validation Secure Server CA&#39; },\n  subjectaltname: &#39;DNS:*.nodejs.org, DNS:nodejs.org&#39;,\n  infoAccess:\n   { &#39;CA Issuers - URI&#39;:\n      [ &#39;http://crt.comodoca.com/COMODORSADomainValidationSecureServerCA.crt&#39; ],\n     &#39;OCSP - URI&#39;: [ &#39;http://ocsp.comodoca.com&#39; ] },\n  modulus: &#39;B56CE45CB740B09A13F64AC543B712FF9EE8E4C284B542A1708A27E82A8D151CA178153E12E6DDA15BF70FFD96CB8A88618641BDFCCA03527E665B70D779C8A349A6F88FD4EF6557180BD4C98192872BCFE3AF56E863C09DDD8BC1EC58DF9D94F914F0369102B2870BECFA1348A0838C9C49BD1C20124B442477572347047506B1FCD658A80D0C44BCC16BC5C5496CFE6E4A8428EF654CD3D8972BF6E5BFAD59C93006830B5EB1056BBB38B53D1464FA6E02BFDF2FF66CD949486F0775EC43034EC2602AEFBF1703AD221DAA2A88353C3B6A688EFE8387811F645CEED7B3FE46E1F8B9F59FAD028F349B9BC14211D5830994D055EEA3D547911E07A0ADDEB8A82B9188E58720D95CD478EEC9AF1F17BE8141BE80906F1A339445A7EB5B285F68039B0F294598A7D1C0005FC22B5271B0752F58CCDEF8C8FD856FB7AE21C80B8A2CE983AE94046E53EDE4CB89F42502D31B5360771C01C80155918637490550E3F555E2EE75CC8C636DDE3633CFEDD62E91BF0F7688273694EEEBA20C2FC9F14A2A435517BC1D7373922463409AB603295CEB0BB53787A334C9CA3CA8B30005C5A62FC0715083462E00719A8FA3ED0A9828C3871360A73F8B04A4FC1E71302844E9BB9940B77E745C9D91F226D71AFCAD4B113AAF68D92B24DDB4A2136B55A1CD1ADF39605B63CB639038ED0F4C987689866743A68769CC55847E4A06D6E2E3F1&#39;,\n  exponent: &#39;0x10001&#39;,\n  pubkey: &lt;Buffer ... &gt;,\n  valid_from: &#39;Aug 14 00:00:00 2017 GMT&#39;,\n  valid_to: &#39;Nov 20 23:59:59 2019 GMT&#39;,\n  fingerprint: &#39;01:02:59:D9:C3:D2:0D:08:F7:82:4E:44:A4:B4:53:C5:E2:3A:87:4D&#39;,\n  fingerprint256: &#39;69:AE:1A:6A:D4:3D:C6:C1:1B:EA:C6:23:DE:BA:2A:14:62:62:93:5C:7A:EA:06:41:9B:0B:BC:87:CE:48:4E:02&#39;,\n  ext_key_usage: [ &#39;1.3.6.1.5.5.7.3.1&#39;, &#39;1.3.6.1.5.5.7.3.2&#39; ],\n  serialNumber: &#39;66593D57F20CBC573E433381B5FEC280&#39;,\n  raw: &lt;Buffer ... &gt; }\n</code></pre>\n"
        },
        {
          "textRaw": "tls.connect(options[, callback])",
          "type": "method",
          "name": "connect",
          "meta": {
            "added": [
              "v0.11.3"
            ],
            "changes": [
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12839",
                "description": "The `lookup` option is supported now."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/11984",
                "description": "The `ALPNProtocols` option can be a `Uint8Array` now."
              },
              {
                "version": "v5.3.0, v4.7.0",
                "pr-url": "https://github.com/nodejs/node/pull/4246",
                "description": "The `secureContext` option is supported now."
              },
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/2564",
                "description": "ALPN options are supported now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`host` {string} Host the client should connect to. **Default:** `'localhost'`. ",
                      "name": "host",
                      "type": "string",
                      "default": "`'localhost'`",
                      "desc": "Host the client should connect to."
                    },
                    {
                      "textRaw": "`port` {number} Port the client should connect to. ",
                      "name": "port",
                      "type": "number",
                      "desc": "Port the client should connect to."
                    },
                    {
                      "textRaw": "`path` {string} Creates unix socket connection to path. If this option is specified, `host` and `port` are ignored. ",
                      "name": "path",
                      "type": "string",
                      "desc": "Creates unix socket connection to path. If this option is specified, `host` and `port` are ignored."
                    },
                    {
                      "textRaw": "`socket` {stream.Duplex} Establish secure connection on a given socket rather than creating a new socket. Typically, this is an instance of [`net.Socket`][], but any `Duplex` stream is allowed. If this option is specified, `path`, `host` and `port` are ignored, except for certificate validation. Usually, a socket is already connected when passed to `tls.connect()`, but it can be connected later. Note that connection/disconnection/destruction of `socket` is the user's responsibility, calling `tls.connect()` will not cause `net.connect()` to be called. ",
                      "name": "socket",
                      "type": "stream.Duplex",
                      "desc": "Establish secure connection on a given socket rather than creating a new socket. Typically, this is an instance of [`net.Socket`][], but any `Duplex` stream is allowed. If this option is specified, `path`, `host` and `port` are ignored, except for certificate validation. Usually, a socket is already connected when passed to `tls.connect()`, but it can be connected later. Note that connection/disconnection/destruction of `socket` is the user's responsibility, calling `tls.connect()` will not cause `net.connect()` to be called."
                    },
                    {
                      "textRaw": "`rejectUnauthorized` {boolean} If not `false`, the server certificate is verified against the list of supplied CAs. An `'error'` event is emitted if verification fails; `err.code` contains the OpenSSL error code. **Default:** `true`. ",
                      "name": "rejectUnauthorized",
                      "type": "boolean",
                      "default": "`true`",
                      "desc": "If not `false`, the server certificate is verified against the list of supplied CAs. An `'error'` event is emitted if verification fails; `err.code` contains the OpenSSL error code."
                    },
                    {
                      "textRaw": "`ALPNProtocols`: {string[]|Buffer[]|Uint8Array[]|Buffer|Uint8Array} An array of strings, `Buffer`s or `Uint8Array`s, or a single `Buffer` or `Uint8Array` containing the supported ALPN protocols. `Buffer`s should have the format `[len][name][len][name]...` e.g. `0x05hello0x05world`, where the first byte is the length of the next protocol name. Passing an array is usually much simpler, e.g. `['hello', 'world']`. ",
                      "name": "ALPNProtocols",
                      "type": "string[]|Buffer[]|Uint8Array[]|Buffer|Uint8Array",
                      "desc": "An array of strings, `Buffer`s or `Uint8Array`s, or a single `Buffer` or `Uint8Array` containing the supported ALPN protocols. `Buffer`s should have the format `[len][name][len][name]...` e.g. `0x05hello0x05world`, where the first byte is the length of the next protocol name. Passing an array is usually much simpler, e.g. `['hello', 'world']`."
                    },
                    {
                      "textRaw": "`servername`: {string} Server name for the SNI (Server Name Indication) TLS extension. ",
                      "name": "servername",
                      "type": "string",
                      "desc": "Server name for the SNI (Server Name Indication) TLS extension."
                    },
                    {
                      "textRaw": "`checkServerIdentity(servername, cert)` {Function} A callback function to be used (instead of the builtin `tls.checkServerIdentity()` function) when checking the server's hostname (or the provided `servername` when explicitly set) against the certificate. This should return an {Error} if verification fails. The method should return `undefined` if the `servername` and `cert` are verified. ",
                      "name": "checkServerIdentity(servername,",
                      "desc": "cert)` {Function} A callback function to be used (instead of the builtin `tls.checkServerIdentity()` function) when checking the server's hostname (or the provided `servername` when explicitly set) against the certificate. This should return an {Error} if verification fails. The method should return `undefined` if the `servername` and `cert` are verified."
                    },
                    {
                      "textRaw": "`session` {Buffer} A `Buffer` instance, containing TLS session. ",
                      "name": "session",
                      "type": "Buffer",
                      "desc": "A `Buffer` instance, containing TLS session."
                    },
                    {
                      "textRaw": "`minDHSize` {number} Minimum size of the DH parameter in bits to accept a TLS connection. When a server offers a DH parameter with a size less than `minDHSize`, the TLS connection is destroyed and an error is thrown. **Default:** `1024`. ",
                      "name": "minDHSize",
                      "type": "number",
                      "default": "`1024`",
                      "desc": "Minimum size of the DH parameter in bits to accept a TLS connection. When a server offers a DH parameter with a size less than `minDHSize`, the TLS connection is destroyed and an error is thrown."
                    },
                    {
                      "textRaw": "`secureContext`: Optional TLS context object created with [`tls.createSecureContext()`][]. If a `secureContext` is _not_ provided, one will be created by passing the entire `options` object to `tls.createSecureContext()`. ",
                      "name": "secureContext",
                      "desc": "Optional TLS context object created with [`tls.createSecureContext()`][]. If a `secureContext` is _not_ provided, one will be created by passing the entire `options` object to `tls.createSecureContext()`."
                    },
                    {
                      "textRaw": "`lookup`: {Function} Custom lookup function. **Default:** [`dns.lookup()`][]. ",
                      "name": "lookup",
                      "type": "Function",
                      "default": "[`dns.lookup()`][]",
                      "desc": "Custom lookup function."
                    },
                    {
                      "textRaw": "...: Optional [`tls.createSecureContext()`][] options that are used if the `secureContext` option is missing, otherwise they are ignored. ",
                      "name": "...",
                      "desc": "Optional [`tls.createSecureContext()`][] options that are used if the `secureContext` option is missing, otherwise they are ignored."
                    }
                  ],
                  "name": "options",
                  "type": "Object"
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "name": "callback",
                  "type": "Function",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>callback</code> function, if specified, will be added as a listener for the\n<a href=\"#tls_event_secureconnect\"><code>&#39;secureConnect&#39;</code></a> event.</p>\n<p><code>tls.connect()</code> returns a <a href=\"#tls_class_tls_tlssocket\"><code>tls.TLSSocket</code></a> object.</p>\n<p>The following implements a simple &quot;echo server&quot; example:</p>\n<pre><code class=\"lang-js\">const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  // Necessary only if using the client certificate authentication\n  key: fs.readFileSync(&#39;client-key.pem&#39;),\n  cert: fs.readFileSync(&#39;client-cert.pem&#39;),\n\n  // Necessary only if the server uses the self-signed certificate\n  ca: [ fs.readFileSync(&#39;server-cert.pem&#39;) ]\n};\n\nconst socket = tls.connect(8000, options, () =&gt; {\n  console.log(&#39;client connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding(&#39;utf8&#39;);\nsocket.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data);\n});\nsocket.on(&#39;end&#39;, () =&gt; {\n  server.close();\n});\n</code></pre>\n<p>Or</p>\n<pre><code class=\"lang-js\">const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  pfx: fs.readFileSync(&#39;client.pfx&#39;)\n};\n\nconst socket = tls.connect(8000, options, () =&gt; {\n  console.log(&#39;client connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  process.stdin.pipe(socket);\n  process.stdin.resume();\n});\nsocket.setEncoding(&#39;utf8&#39;);\nsocket.on(&#39;data&#39;, (data) =&gt; {\n  console.log(data);\n});\nsocket.on(&#39;end&#39;, () =&gt; {\n  server.close();\n});\n</code></pre>\n"
        },
        {
          "textRaw": "tls.connect(path[, options][, callback])",
          "type": "method",
          "name": "connect",
          "meta": {
            "added": [
              "v0.11.3"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string} Default value for `options.path`. ",
                  "name": "path",
                  "type": "string",
                  "desc": "Default value for `options.path`."
                },
                {
                  "textRaw": "`options` {Object} See [`tls.connect()`][]. ",
                  "name": "options",
                  "type": "Object",
                  "desc": "See [`tls.connect()`][].",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} See [`tls.connect()`][]. ",
                  "name": "callback",
                  "type": "Function",
                  "desc": "See [`tls.connect()`][].",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Same as <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a> except that <code>path</code> can be provided\nas an argument instead of an option.</p>\n<p>A path option, if specified, will take precedence over the path argument.</p>\n"
        },
        {
          "textRaw": "tls.connect(port[, host][, options][, callback])",
          "type": "method",
          "name": "connect",
          "meta": {
            "added": [
              "v0.11.3"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`port` {number} Default value for `options.port`. ",
                  "name": "port",
                  "type": "number",
                  "desc": "Default value for `options.port`."
                },
                {
                  "textRaw": "`host` {string} Optional default value for `options.host`. ",
                  "name": "host",
                  "type": "string",
                  "desc": "Optional default value for `options.host`.",
                  "optional": true
                },
                {
                  "textRaw": "`options` {Object} See [`tls.connect()`][]. ",
                  "name": "options",
                  "type": "Object",
                  "desc": "See [`tls.connect()`][].",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} See [`tls.connect()`][]. ",
                  "name": "callback",
                  "type": "Function",
                  "desc": "See [`tls.connect()`][].",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "port"
                },
                {
                  "name": "host",
                  "optional": true
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Same as <a href=\"#tls_tls_connect_options_callback\"><code>tls.connect()</code></a> except that <code>port</code> and <code>host</code> can be provided\nas arguments instead of options.</p>\n<p>A port or host option, if specified, will take precedence over any port or host\nargument.</p>\n"
        },
        {
          "textRaw": "tls.createSecureContext(options)",
          "type": "method",
          "name": "createSecureContext",
          "meta": {
            "added": [
              "v0.11.13"
            ],
            "changes": [
              {
                "version": "v9.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/14903",
                "description": "The `options` parameter can now include `clientCertEngine`."
              },
              {
                "version": "v7.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/10294",
                "description": "If the `key` option is an array, individual entries do not need a `passphrase` property anymore. `Array` entries can also just be `string`s or `Buffer`s now."
              },
              {
                "version": "v5.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/4099",
                "description": "The `ca` option can now be a single string containing multiple CA certificates."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`pfx` {string|string[]|Buffer|Buffer[]|Object[]} Optional PFX or PKCS12 encoded private key and certificate chain. `pfx` is an alternative to providing `key` and `cert` individually. PFX is usually encrypted, if it is, `passphrase` will be used to decrypt it. Multiple PFX can be provided either as an array of unencrypted PFX buffers, or an array of objects in the form `{buf: <string|buffer>[, passphrase: <string>]}`. The object form can only occur in an array. `object.passphrase` is optional. Encrypted PFX will be decrypted with `object.passphrase` if provided, or `options.passphrase` if it is not. ",
                      "name": "pfx",
                      "type": "string|string[]|Buffer|Buffer[]|Object[]",
                      "desc": "Optional PFX or PKCS12 encoded private key and certificate chain. `pfx` is an alternative to providing `key` and `cert` individually. PFX is usually encrypted, if it is, `passphrase` will be used to decrypt it. Multiple PFX can be provided either as an array of unencrypted PFX buffers, or an array of objects in the form `{buf: <string|buffer>[, passphrase: <string>]}`. The object form can only occur in an array. `object.passphrase` is optional. Encrypted PFX will be decrypted with `object.passphrase` if provided, or `options.passphrase` if it is not."
                    },
                    {
                      "textRaw": "`key` {string|string[]|Buffer|Buffer[]|Object[]} Optional private keys in PEM format. PEM allows the option of private keys being encrypted. Encrypted keys will be decrypted with `options.passphrase`. Multiple keys using different algorithms can be provided either as an array of unencrypted key strings or buffers, or an array of objects in the form `{pem: <string|buffer>[, passphrase: <string>]}`. The object form can only occur in an array. `object.passphrase` is optional. Encrypted keys will be decrypted with `object.passphrase` if provided, or `options.passphrase` if it is not. ",
                      "name": "key",
                      "type": "string|string[]|Buffer|Buffer[]|Object[]",
                      "desc": "Optional private keys in PEM format. PEM allows the option of private keys being encrypted. Encrypted keys will be decrypted with `options.passphrase`. Multiple keys using different algorithms can be provided either as an array of unencrypted key strings or buffers, or an array of objects in the form `{pem: <string|buffer>[, passphrase: <string>]}`. The object form can only occur in an array. `object.passphrase` is optional. Encrypted keys will be decrypted with `object.passphrase` if provided, or `options.passphrase` if it is not."
                    },
                    {
                      "textRaw": "`passphrase` {string} Optional shared passphrase used for a single private key and/or a PFX. ",
                      "name": "passphrase",
                      "type": "string",
                      "desc": "Optional shared passphrase used for a single private key and/or a PFX."
                    },
                    {
                      "textRaw": "`cert` {string|string[]|Buffer|Buffer[]} Optional cert chains in PEM format. One cert chain should be provided per private key. Each cert chain should consist of the PEM formatted certificate for a provided private `key`, followed by the PEM formatted intermediate certificates (if any), in order, and not including the root CA (the root CA must be pre-known to the peer, see `ca`). When providing multiple cert chains, they do not have to be in the same order as their private keys in `key`. If the intermediate certificates are not provided, the peer will not be able to validate the certificate, and the handshake will fail. ",
                      "name": "cert",
                      "type": "string|string[]|Buffer|Buffer[]",
                      "desc": "Optional cert chains in PEM format. One cert chain should be provided per private key. Each cert chain should consist of the PEM formatted certificate for a provided private `key`, followed by the PEM formatted intermediate certificates (if any), in order, and not including the root CA (the root CA must be pre-known to the peer, see `ca`). When providing multiple cert chains, they do not have to be in the same order as their private keys in `key`. If the intermediate certificates are not provided, the peer will not be able to validate the certificate, and the handshake will fail."
                    },
                    {
                      "textRaw": "`ca` {string|string[]|Buffer|Buffer[]} Optionally override the trusted CA certificates. Default is to trust the well-known CAs curated by Mozilla. Mozilla's CAs are completely replaced when CAs are explicitly specified using this option. The value can be a string or `Buffer`, or an `Array` of strings and/or `Buffer`s. Any string or `Buffer` can contain multiple PEM CAs concatenated together. The peer's certificate must be chainable to a CA trusted by the server for the connection to be authenticated. When using certificates that are not chainable to a well-known CA, the certificate's CA must be explicitly specified as a trusted or the connection will fail to authenticate. If the peer uses a certificate that doesn't match or chain to one of the default CAs, use the `ca` option to provide a CA certificate that the peer's certificate can match or chain to. For self-signed certificates, the certificate is its own CA, and must be provided. ",
                      "name": "ca",
                      "type": "string|string[]|Buffer|Buffer[]",
                      "desc": "Optionally override the trusted CA certificates. Default is to trust the well-known CAs curated by Mozilla. Mozilla's CAs are completely replaced when CAs are explicitly specified using this option. The value can be a string or `Buffer`, or an `Array` of strings and/or `Buffer`s. Any string or `Buffer` can contain multiple PEM CAs concatenated together. The peer's certificate must be chainable to a CA trusted by the server for the connection to be authenticated. When using certificates that are not chainable to a well-known CA, the certificate's CA must be explicitly specified as a trusted or the connection will fail to authenticate. If the peer uses a certificate that doesn't match or chain to one of the default CAs, use the `ca` option to provide a CA certificate that the peer's certificate can match or chain to. For self-signed certificates, the certificate is its own CA, and must be provided."
                    },
                    {
                      "textRaw": "`ciphers` {string} Optional cipher suite specification, replacing the default. For more information, see [modifying the default cipher suite][]. ",
                      "name": "ciphers",
                      "type": "string",
                      "desc": "Optional cipher suite specification, replacing the default. For more information, see [modifying the default cipher suite][]."
                    },
                    {
                      "textRaw": "`honorCipherOrder` {boolean} Attempt to use the server's cipher suite preferences instead of the client's. When `true`, causes `SSL_OP_CIPHER_SERVER_PREFERENCE` to be set in `secureOptions`, see [OpenSSL Options][] for more information. ",
                      "name": "honorCipherOrder",
                      "type": "boolean",
                      "desc": "Attempt to use the server's cipher suite preferences instead of the client's. When `true`, causes `SSL_OP_CIPHER_SERVER_PREFERENCE` to be set in `secureOptions`, see [OpenSSL Options][] for more information."
                    },
                    {
                      "textRaw": "`ecdhCurve` {string} A string describing a named curve or a colon separated list of curve NIDs or names, for example `P-521:P-384:P-256`, to use for ECDH key agreement, or `false` to disable ECDH. Set to `auto` to select the curve automatically. Use [`crypto.getCurves()`][] to obtain a list of available curve names. On recent releases, `openssl ecparam -list_curves` will also display the name and description of each available elliptic curve. **Default:** [`tls.DEFAULT_ECDH_CURVE`]. ",
                      "name": "ecdhCurve",
                      "type": "string",
                      "default": "[`tls.DEFAULT_ECDH_CURVE`]",
                      "desc": "A string describing a named curve or a colon separated list of curve NIDs or names, for example `P-521:P-384:P-256`, to use for ECDH key agreement, or `false` to disable ECDH. Set to `auto` to select the curve automatically. Use [`crypto.getCurves()`][] to obtain a list of available curve names. On recent releases, `openssl ecparam -list_curves` will also display the name and description of each available elliptic curve."
                    },
                    {
                      "textRaw": "`clientCertEngine` {string} Optional name of an OpenSSL engine which can provide the client certificate. ",
                      "name": "clientCertEngine",
                      "type": "string",
                      "desc": "Optional name of an OpenSSL engine which can provide the client certificate."
                    },
                    {
                      "textRaw": "`crl` {string|string[]|Buffer|Buffer[]} Optional PEM formatted CRLs (Certificate Revocation Lists). ",
                      "name": "crl",
                      "type": "string|string[]|Buffer|Buffer[]",
                      "desc": "Optional PEM formatted CRLs (Certificate Revocation Lists)."
                    },
                    {
                      "textRaw": "`dhparam` {string|Buffer} Diffie Hellman parameters, required for [Perfect Forward Secrecy][]. Use `openssl dhparam` to create the parameters. The key length must be greater than or equal to 1024 bits, otherwise an error will be thrown. It is strongly recommended to use 2048 bits or larger for stronger security. If omitted or invalid, the parameters are silently discarded and DHE ciphers will not be available. ",
                      "name": "dhparam",
                      "type": "string|Buffer",
                      "desc": "Diffie Hellman parameters, required for [Perfect Forward Secrecy][]. Use `openssl dhparam` to create the parameters. The key length must be greater than or equal to 1024 bits, otherwise an error will be thrown. It is strongly recommended to use 2048 bits or larger for stronger security. If omitted or invalid, the parameters are silently discarded and DHE ciphers will not be available."
                    },
                    {
                      "textRaw": "`secureOptions` {number} Optionally affect the OpenSSL protocol behavior, which is not usually necessary. This should be used carefully if at all! Value is a numeric bitmask of the `SSL_OP_*` options from [OpenSSL Options][]. ",
                      "name": "secureOptions",
                      "type": "number",
                      "desc": "Optionally affect the OpenSSL protocol behavior, which is not usually necessary. This should be used carefully if at all! Value is a numeric bitmask of the `SSL_OP_*` options from [OpenSSL Options][]."
                    },
                    {
                      "textRaw": "`secureProtocol` {string} Optional SSL method to use. The possible values are listed as [SSL_METHODS][], use the function names as strings. For example, `'TLSv1_2_method'` to force TLS version 1.2. **Default:** `'TLS_method'`. ",
                      "name": "secureProtocol",
                      "type": "string",
                      "default": "`'TLS_method'`",
                      "desc": "Optional SSL method to use. The possible values are listed as [SSL_METHODS][], use the function names as strings. For example, `'TLSv1_2_method'` to force TLS version 1.2."
                    },
                    {
                      "textRaw": "`sessionIdContext` {string} Optional opaque identifier used by servers to ensure session state is not shared between applications. Unused by clients. ",
                      "name": "sessionIdContext",
                      "type": "string",
                      "desc": "Optional opaque identifier used by servers to ensure session state is not shared between applications. Unused by clients."
                    }
                  ],
                  "name": "options",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "options"
                }
              ]
            }
          ],
          "desc": "<p><a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a> sets the default value of the <code>honorCipherOrder</code> option\nto <code>true</code>, other APIs that create secure contexts leave it unset.</p>\n<p><a href=\"#tls_tls_createserver_options_secureconnectionlistener\"><code>tls.createServer()</code></a> uses a 128 bit truncated SHA1 hash value generated\nfrom <code>process.argv</code> as the default value of the <code>sessionIdContext</code> option, other\nAPIs that create secure contexts have no default value.</p>\n<p>The <code>tls.createSecureContext()</code> method creates a credentials object.</p>\n<p>A key is <em>required</em> for ciphers that make use of certificates. Either <code>key</code> or\n<code>pfx</code> can be used to provide it.</p>\n<p>If the &#39;ca&#39; option is not given, then Node.js will use the default\npublicly trusted list of CAs as given in\n<a href=\"https://hg.mozilla.org/mozilla-central/raw-file/tip/security/nss/lib/ckfw/builtins/certdata.txt\">https://hg.mozilla.org/mozilla-central/raw-file/tip/security/nss/lib/ckfw/builtins/certdata.txt</a>.</p>\n"
        },
        {
          "textRaw": "tls.createServer([options][, secureConnectionListener])",
          "type": "method",
          "name": "createServer",
          "meta": {
            "added": [
              "v0.3.2"
            ],
            "changes": [
              {
                "version": "v9.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/14903",
                "description": "The `options` parameter can now include `clientCertEngine`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/11984",
                "description": "The `ALPNProtocols` option can be a `Uint8Array` now."
              },
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/2564",
                "description": "ALPN options are supported now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`clientCertEngine` {string} Optional name of an OpenSSL engine which can provide the client certificate. ",
                      "name": "clientCertEngine",
                      "type": "string",
                      "desc": "Optional name of an OpenSSL engine which can provide the client certificate."
                    },
                    {
                      "textRaw": "`handshakeTimeout` {number} Abort the connection if the SSL/TLS handshake does not finish in the specified number of milliseconds. A `'tlsClientError'` is emitted on the `tls.Server` object whenever a handshake times out. **Default:** `120000` (120 seconds). ",
                      "name": "handshakeTimeout",
                      "type": "number",
                      "default": "`120000` (120 seconds)",
                      "desc": "Abort the connection if the SSL/TLS handshake does not finish in the specified number of milliseconds. A `'tlsClientError'` is emitted on the `tls.Server` object whenever a handshake times out."
                    },
                    {
                      "textRaw": "`requestCert` {boolean} If `true` the server will request a certificate from clients that connect and attempt to verify that certificate. **Default:** `false`. ",
                      "name": "requestCert",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "If `true` the server will request a certificate from clients that connect and attempt to verify that certificate."
                    },
                    {
                      "textRaw": "`rejectUnauthorized` {boolean} If not `false` the server will reject any connection which is not authorized with the list of supplied CAs. This option only has an effect if `requestCert` is `true`. **Default:** `true`. ",
                      "name": "rejectUnauthorized",
                      "type": "boolean",
                      "default": "`true`",
                      "desc": "If not `false` the server will reject any connection which is not authorized with the list of supplied CAs. This option only has an effect if `requestCert` is `true`."
                    },
                    {
                      "textRaw": "`ALPNProtocols`: {string[]|Buffer[]|Uint8Array[]|Buffer|Uint8Array} An array of strings, `Buffer`s or `Uint8Array`s, or a single `Buffer` or `Uint8Array` containing the supported ALPN protocols. `Buffer`s should have the format `[len][name][len][name]...` e.g. `0x05hello0x05world`, where the first byte is the length of the next protocol name. Passing an array is usually much simpler, e.g. `['hello', 'world']`. (Protocols should be ordered by their priority.) ",
                      "name": "ALPNProtocols",
                      "type": "string[]|Buffer[]|Uint8Array[]|Buffer|Uint8Array",
                      "desc": "An array of strings, `Buffer`s or `Uint8Array`s, or a single `Buffer` or `Uint8Array` containing the supported ALPN protocols. `Buffer`s should have the format `[len][name][len][name]...` e.g. `0x05hello0x05world`, where the first byte is the length of the next protocol name. Passing an array is usually much simpler, e.g. `['hello', 'world']`. (Protocols should be ordered by their priority.)"
                    },
                    {
                      "textRaw": "`SNICallback(servername, cb)` {Function} A function that will be called if the client supports SNI TLS extension. Two arguments will be passed when called: `servername` and `cb`. `SNICallback` should invoke `cb(null, ctx)`, where `ctx` is a `SecureContext` instance. (`tls.createSecureContext(...)` can be used to get a proper `SecureContext`.) If `SNICallback` wasn't provided the default callback with high-level API will be used (see below). ",
                      "name": "SNICallback(servername,",
                      "desc": "cb)` {Function} A function that will be called if the client supports SNI TLS extension. Two arguments will be passed when called: `servername` and `cb`. `SNICallback` should invoke `cb(null, ctx)`, where `ctx` is a `SecureContext` instance. (`tls.createSecureContext(...)` can be used to get a proper `SecureContext`.) If `SNICallback` wasn't provided the default callback with high-level API will be used (see below)."
                    },
                    {
                      "textRaw": "`sessionTimeout` {number} An integer specifying the number of seconds after which the TLS session identifiers and TLS session tickets created by the server will time out. See [`SSL_CTX_set_timeout`] for more details. ",
                      "name": "sessionTimeout",
                      "type": "number",
                      "desc": "An integer specifying the number of seconds after which the TLS session identifiers and TLS session tickets created by the server will time out. See [`SSL_CTX_set_timeout`] for more details."
                    },
                    {
                      "textRaw": "`ticketKeys`: A 48-byte `Buffer` instance consisting of a 16-byte prefix, a 16-byte HMAC key, and a 16-byte AES key. This can be used to accept TLS session tickets on multiple instances of the TLS server. ",
                      "name": "ticketKeys",
                      "desc": "A 48-byte `Buffer` instance consisting of a 16-byte prefix, a 16-byte HMAC key, and a 16-byte AES key. This can be used to accept TLS session tickets on multiple instances of the TLS server."
                    },
                    {
                      "textRaw": "...: Any [`tls.createSecureContext()`][] options can be provided. For servers, the identity options (`pfx` or `key`/`cert`) are usually required. ",
                      "name": "...",
                      "desc": "Any [`tls.createSecureContext()`][] options can be provided. For servers, the identity options (`pfx` or `key`/`cert`) are usually required."
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "optional": true
                },
                {
                  "textRaw": "`secureConnectionListener` {Function} ",
                  "name": "secureConnectionListener",
                  "type": "Function",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "secureConnectionListener",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Creates a new <a href=\"#tls_class_tls_server\"><code>tls.Server</code></a>. The <code>secureConnectionListener</code>, if provided, is\nautomatically set as a listener for the <a href=\"#tls_event_secureconnection\"><code>&#39;secureConnection&#39;</code></a> event.</p>\n<p>The <code>ticketKeys</code> options is automatically shared between <code>cluster</code> module\nworkers.</p>\n<p>The following illustrates a simple echo server:</p>\n<pre><code class=\"lang-js\">const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  key: fs.readFileSync(&#39;server-key.pem&#39;),\n  cert: fs.readFileSync(&#39;server-cert.pem&#39;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n\n  // This is necessary only if the client uses the self-signed certificate.\n  ca: [ fs.readFileSync(&#39;client-cert.pem&#39;) ]\n};\n\nconst server = tls.createServer(options, (socket) =&gt; {\n  console.log(&#39;server connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  socket.write(&#39;welcome!\\n&#39;);\n  socket.setEncoding(&#39;utf8&#39;);\n  socket.pipe(socket);\n});\nserver.listen(8000, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n</code></pre>\n<p>Or</p>\n<pre><code class=\"lang-js\">const tls = require(&#39;tls&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst options = {\n  pfx: fs.readFileSync(&#39;server.pfx&#39;),\n\n  // This is necessary only if using the client certificate authentication.\n  requestCert: true,\n};\n\nconst server = tls.createServer(options, (socket) =&gt; {\n  console.log(&#39;server connected&#39;,\n              socket.authorized ? &#39;authorized&#39; : &#39;unauthorized&#39;);\n  socket.write(&#39;welcome!\\n&#39;);\n  socket.setEncoding(&#39;utf8&#39;);\n  socket.pipe(socket);\n});\nserver.listen(8000, () =&gt; {\n  console.log(&#39;server bound&#39;);\n});\n</code></pre>\n<p>This server can be tested by connecting to it using <code>openssl s_client</code>:</p>\n<pre><code class=\"lang-sh\">openssl s_client -connect 127.0.0.1:8000\n</code></pre>\n"
        },
        {
          "textRaw": "tls.getCiphers()",
          "type": "method",
          "name": "getCiphers",
          "meta": {
            "added": [
              "v0.10.2"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string[]} ",
                "name": "return",
                "type": "string[]"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>Returns an array with the names of the supported SSL ciphers.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">console.log(tls.getCiphers()); // [&#39;AES128-SHA&#39;, &#39;AES256-SHA&#39;, ...]\n</code></pre>\n"
        }
      ],
      "properties": [
        {
          "textRaw": "tls.DEFAULT_ECDH_CURVE",
          "name": "DEFAULT_ECDH_CURVE",
          "meta": {
            "added": [
              "v0.11.13"
            ],
            "changes": []
          },
          "desc": "<p>The default curve name to use for ECDH key agreement in a tls server. The\ndefault value is <code>&#39;auto&#39;</code>. See <a href=\"#tls_tls_createsecurecontext_options\"><code>tls.createSecureContext()</code></a> for further\ninformation.</p>\n"
        }
      ],
      "type": "module",
      "displayName": "TLS (SSL)"
    },
    {
      "textRaw": "Trace Events",
      "name": "trace_events",
      "introduced_in": "v7.7.0",
      "stability": 1,
      "stabilityText": "Experimental",
      "desc": "<p>Trace Event provides a mechanism to centralize tracing information generated by\nV8, Node.js core, and userspace code.</p>\n<p>Tracing can be enabled with the <code>--trace-event-categories</code> command-line flag\nor by using the <code>trace_events</code> module. The <code>--trace-event-categories</code> flag\naccepts a list of comma-separated category names.</p>\n<p>The available categories are:</p>\n<ul>\n<li><code>node</code> - An empty placeholder.</li>\n<li><code>node.async_hooks</code> - Enables capture of detailed <a href=\"async_hooks.html\"><code>async_hooks</code></a> trace data.\nThe <a href=\"async_hooks.html\"><code>async_hooks</code></a> events have a unique <code>asyncId</code> and a special <code>triggerId</code>\n<code>triggerAsyncId</code> property.</li>\n<li><code>node.bootstrap</code> - Enables capture of Node.js bootstrap milestones.</li>\n<li><code>node.perf</code> - Enables capture of <a href=\"perf_hooks.html\">Performance API</a> measurements.<ul>\n<li><code>node.perf.usertiming</code> - Enables capture of only Performance API User Timing\nmeasures and marks.</li>\n<li><code>node.perf.timerify</code> - Enables capture of only Performance API timerify\nmeasurements.</li>\n</ul>\n</li>\n<li><code>node.fs.sync</code> - Enables capture of trace data for file system sync methods.</li>\n<li><code>v8</code> - The <a href=\"https://developers.google.com/v8/\">V8</a> events are GC, compiling, and execution related.</li>\n</ul>\n<p>By default the <code>node</code>, <code>node.async_hooks</code>, and <code>v8</code> categories are enabled.</p>\n<pre><code class=\"lang-txt\">node --trace-event-categories v8,node,node.async_hooks server.js\n</code></pre>\n<p>Prior versions of Node.js required the use of the <code>--trace-events-enabled</code>\nflag to enable trace events. This requirement has been removed. However, the\n<code>--trace-events-enabled</code> flag <em>may</em> still be used and will enable the\n<code>node</code>, <code>node.async_hooks</code>, and <code>v8</code> trace event categories by default.</p>\n<pre><code class=\"lang-txt\">node --trace-events-enabled\n\n// is equivalent to\n\nnode --trace-event-categories v8,node,node.async_hooks\n</code></pre>\n<p>Alternatively, trace events may be enabled using the <code>trace_events</code> module:</p>\n<pre><code class=\"lang-js\">const trace_events = require(&#39;trace_events&#39;);\nconst tracing = trace_events.createTracing({ categories: [&#39;node.perf&#39;] });\ntracing.enable();  // Enable trace event capture for the &#39;node.perf&#39; category\n\n// do work\n\ntracing.disable();  // Disable trace event capture for the &#39;node.perf&#39; category\n</code></pre>\n<p>Running Node.js with tracing enabled will produce log files that can be opened\nin the <a href=\"https://www.chromium.org/developers/how-tos/trace-event-profiling-tool\"><code>chrome://tracing</code></a>\ntab of Chrome.</p>\n<p>The logging file is by default called <code>node_trace.${rotation}.log</code>, where\n<code>${rotation}</code> is an incrementing log-rotation id. The filepath pattern can\nbe specified with <code>--trace-event-file-pattern</code> that accepts a template\nstring that supports <code>${rotation}</code> and <code>${pid}</code>. For example:</p>\n<pre><code class=\"lang-txt\">node --trace-event-categories v8 --trace-event-file-pattern &#39;${pid}-${rotation}.log&#39; server.js\n</code></pre>\n<p>Starting with Node.js 10.0.0, the tracing system uses the same time source\nas the one used by <code>process.hrtime()</code>\nhowever the trace-event timestamps are expressed in microseconds,\nunlike <code>process.hrtime()</code> which returns nanoseconds.</p>\n",
      "modules": [
        {
          "textRaw": "The `trace_events` module",
          "name": "the_`trace_events`_module",
          "meta": {
            "added": [
              "v10.0.0"
            ],
            "changes": []
          },
          "modules": [
            {
              "textRaw": "`Tracing` object",
              "name": "`tracing`_object",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>Tracing</code> object is used to enable or disable tracing for sets of\ncategories. Instances are created using the <code>trace_events.createTracing()</code>\nmethod.</p>\n<p>When created, the <code>Tracing</code> object is disabled. Calling the\n<code>tracing.enable()</code> method adds the categories to the set of enabled trace event\ncategories. Calling <code>tracing.disable()</code> will remove the categories from the\nset of enabled trace event categories.</p>\n",
              "modules": [
                {
                  "textRaw": "`tracing.categories`",
                  "name": "`tracing.categories`",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li>{string}</li>\n</ul>\n<p>A comma-separated list of the trace event categories covered by this\n<code>Tracing</code> object.</p>\n",
                  "type": "module",
                  "displayName": "`tracing.categories`"
                },
                {
                  "textRaw": "`tracing.disable()`",
                  "name": "`tracing.disable()`",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Disables this <code>Tracing</code> object.</p>\n<p>Only trace event categories <em>not</em> covered by other enabled <code>Tracing</code> objects\nand <em>not</em> specified by the <code>--trace-event-categories</code> flag will be disabled.</p>\n<pre><code class=\"lang-js\">const trace_events = require(&#39;trace_events&#39;);\nconst t1 = trace_events.createTracing({ categories: [&#39;node&#39;, &#39;v8&#39;] });\nconst t2 = trace_events.createTracing({ categories: [&#39;node.perf&#39;, &#39;node&#39;] });\nt1.enable();\nt2.enable();\n\n// Prints &#39;node,node.perf,v8&#39;\nconsole.log(trace_events.getEnabledCategories());\n\nt2.disable(); // will only disable emission of the &#39;node.perf&#39; category\n\n// Prints &#39;node,v8&#39;\nconsole.log(trace_events.getEnabledCategories());\n</code></pre>\n",
                  "type": "module",
                  "displayName": "`tracing.disable()`"
                },
                {
                  "textRaw": "`tracing.enable()`",
                  "name": "`tracing.enable()`",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Enables this <code>Tracing</code> object for the set of categories covered by the\n<code>Tracing</code> object.</p>\n",
                  "type": "module",
                  "displayName": "`tracing.enable()`"
                },
                {
                  "textRaw": "`tracing.enabled`",
                  "name": "`tracing.enabled`",
                  "meta": {
                    "added": [
                      "v10.0.0"
                    ],
                    "changes": []
                  },
                  "desc": "<ul>\n<li>{boolean} <code>true</code> only if the <code>Tracing</code> object has been enabled.</li>\n</ul>\n",
                  "type": "module",
                  "displayName": "`tracing.enabled`"
                }
              ],
              "type": "module",
              "displayName": "`Tracing` object"
            },
            {
              "textRaw": "`trace_events.createTracing(options)`",
              "name": "`trace_events.createtracing(options)`",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li><code>options</code> {Object}<ul>\n<li><code>categories</code> {string[]} An array of trace category names. Values included\nin the array are coerced to a string when possible. An error will be\nthrown if the value cannot be coerced.</li>\n</ul>\n</li>\n<li>Returns: {Tracing}.</li>\n</ul>\n<p>Creates and returns a <code>Tracing</code> object for the given set of <code>categories</code>.</p>\n<pre><code class=\"lang-js\">const trace_events = require(&#39;trace_events&#39;);\nconst categories = [&#39;node.perf&#39;, &#39;node.async_hooks&#39;];\nconst tracing = trace_events.createTracing({ categories });\ntracing.enable();\n// do stuff\ntracing.disable();\n</code></pre>\n",
              "type": "module",
              "displayName": "`trace_events.createTracing(options)`"
            },
            {
              "textRaw": "`trace_events.getEnabledCategories()`",
              "name": "`trace_events.getenabledcategories()`",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<ul>\n<li>Returns: {string}</li>\n</ul>\n<p>Returns a comma-separated list of all currently-enabled trace event\ncategories. The current set of enabled trace event categories is determined\nby the <em>union</em> of all currently-enabled <code>Tracing</code> objects and any categories\nenabled using the <code>--trace-event-categories</code> flag.</p>\n<p>Given the file <code>test.js</code> below, the command\n<code>node --trace-event-categories node.perf test.js</code> will print\n<code>&#39;node.async_hooks,node.perf&#39;</code> to the console.</p>\n<pre><code class=\"lang-js\">const trace_events = require(&#39;trace_events&#39;);\nconst t1 = trace_events.createTracing({ categories: [&#39;node.async_hooks&#39;] });\nconst t2 = trace_events.createTracing({ categories: [&#39;node.perf&#39;] });\nconst t3 = trace_events.createTracing({ categories: [&#39;v8&#39;] });\n\nt1.enable();\nt2.enable();\n\nconsole.log(trace_events.getEnabledCategories());\n</code></pre>\n<!-- [end-include:tracing.md] -->\n<!-- [start-include:tty.md] -->\n",
              "type": "module",
              "displayName": "`trace_events.getEnabledCategories()`"
            }
          ],
          "type": "module",
          "displayName": "The `trace_events` module"
        }
      ],
      "type": "module",
      "displayName": "Trace Events"
    },
    {
      "textRaw": "TTY",
      "name": "tty",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>tty</code> module provides the <code>tty.ReadStream</code> and <code>tty.WriteStream</code> classes.\nIn most cases, it will not be necessary or possible to use this module directly.\nHowever, it can be accessed using:</p>\n<pre><code class=\"lang-js\">const tty = require(&#39;tty&#39;);\n</code></pre>\n<p>When Node.js detects that it is being run with a text terminal (&quot;TTY&quot;)\nattached, <a href=\"process.html#process_process_stdin\"><code>process.stdin</code></a> will, by default, be initialized as an instance of\n<code>tty.ReadStream</code> and both <a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> and <a href=\"process.html#process_process_stderr\"><code>process.stderr</code></a> will, by\ndefault be instances of <code>tty.WriteStream</code>. The preferred method of determining\nwhether Node.js is being run within a TTY context is to check that the value of\nthe <code>process.stdout.isTTY</code> property is <code>true</code>:</p>\n<pre><code class=\"lang-sh\">$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p -e &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse\n</code></pre>\n<p>In most cases, there should be little to no reason for an application to\nmanually create instances of the <code>tty.ReadStream</code> and <code>tty.WriteStream</code>\nclasses.</p>\n",
      "classes": [
        {
          "textRaw": "Class: tty.ReadStream",
          "type": "class",
          "name": "tty.ReadStream",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>The <code>tty.ReadStream</code> class is a subclass of <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> that represents the\nreadable side of a TTY. In normal circumstances <a href=\"process.html#process_process_stdin\"><code>process.stdin</code></a> will be the\nonly <code>tty.ReadStream</code> instance in a Node.js process and there should be no\nreason to create additional instances.</p>\n",
          "properties": [
            {
              "textRaw": "readStream.isRaw",
              "name": "isRaw",
              "meta": {
                "added": [
                  "v0.7.7"
                ],
                "changes": []
              },
              "desc": "<p>A <code>boolean</code> that is <code>true</code> if the TTY is currently configured to operate as a\nraw device. Defaults to <code>false</code>.</p>\n"
            },
            {
              "textRaw": "readStream.isTTY",
              "name": "isTTY",
              "meta": {
                "added": [
                  "v0.5.8"
                ],
                "changes": []
              },
              "desc": "<p>A <code>boolean</code> that is always <code>true</code> for <code>tty.ReadStream</code> instances.</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "readStream.setRawMode(mode)",
              "type": "method",
              "name": "setRawMode",
              "meta": {
                "added": [
                  "v0.7.7"
                ],
                "changes": []
              },
              "desc": "<p>Allows configuration of <code>tty.ReadStream</code> so that it operates as a raw device.</p>\n<p>When in raw mode, input is always available character-by-character, not\nincluding modifiers. Additionally, all special processing of characters by the\nterminal is disabled, including echoing input characters.\nNote that <code>CTRL</code>+<code>C</code> will no longer cause a <code>SIGINT</code> when in this mode.</p>\n<ul>\n<li><code>mode</code> {boolean} If <code>true</code>, configures the <code>tty.ReadStream</code> to operate as a\nraw device. If <code>false</code>, configures the <code>tty.ReadStream</code> to operate in its\ndefault mode. The <code>readStream.isRaw</code> property will be set to the resulting\nmode.</li>\n</ul>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "mode"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Class: tty.WriteStream",
          "type": "class",
          "name": "tty.WriteStream",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>The <code>tty.WriteStream</code> class is a subclass of <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> that represents\nthe writable side of a TTY. In normal circumstances, <a href=\"process.html#process_process_stdout\"><code>process.stdout</code></a> and\n<a href=\"process.html#process_process_stderr\"><code>process.stderr</code></a> will be the only <code>tty.WriteStream</code> instances created for a\nNode.js process and there should be no reason to create additional instances.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'resize'",
              "type": "event",
              "name": "resize",
              "meta": {
                "added": [
                  "v0.7.7"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;resize&#39;</code> event is emitted whenever either of the <code>writeStream.columns</code>\nor <code>writeStream.rows</code> properties have changed. No arguments are passed to the\nlistener callback when called.</p>\n<pre><code class=\"lang-js\">process.stdout.on(&#39;resize&#39;, () =&gt; {\n  console.log(&#39;screen size has changed!&#39;);\n  console.log(`${process.stdout.columns}x${process.stdout.rows}`);\n});\n</code></pre>\n",
              "params": []
            }
          ],
          "properties": [
            {
              "textRaw": "writeStream.columns",
              "name": "columns",
              "meta": {
                "added": [
                  "v0.7.7"
                ],
                "changes": []
              },
              "desc": "<p>A <code>number</code> specifying the number of columns the TTY currently has. This property\nis updated whenever the <code>&#39;resize&#39;</code> event is emitted.</p>\n"
            },
            {
              "textRaw": "writeStream.isTTY",
              "name": "isTTY",
              "meta": {
                "added": [
                  "v0.5.8"
                ],
                "changes": []
              },
              "desc": "<p>A <code>boolean</code> that is always <code>true</code>.</p>\n"
            },
            {
              "textRaw": "writeStream.rows",
              "name": "rows",
              "meta": {
                "added": [
                  "v0.7.7"
                ],
                "changes": []
              },
              "desc": "<p>A <code>number</code> specifying the number of rows the TTY currently has. This property\nis updated whenever the <code>&#39;resize&#39;</code> event is emitted.</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "writeStream.getColorDepth([env])",
              "type": "method",
              "name": "getColorDepth",
              "meta": {
                "added": [
                  "v9.9.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {number} ",
                    "name": "return",
                    "type": "number"
                  },
                  "params": [
                    {
                      "textRaw": "`env` {Object} An object containing the environment variables to check. **Default:** `process.env`. ",
                      "name": "env",
                      "type": "Object",
                      "default": "`process.env`",
                      "desc": "An object containing the environment variables to check.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "env",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns:</p>\n<ul>\n<li><code>1</code> for 2,</li>\n<li><code>4</code> for 16,</li>\n<li><code>8</code> for 256,</li>\n<li><code>24</code> for 16,777,216\ncolors supported.</li>\n</ul>\n<p>Use this to determine what colors the terminal supports. Due to the nature of\ncolors in terminals it is possible to either have false positives or false\nnegatives. It depends on process information and the environment variables that\nmay lie about what terminal is used.\nTo enforce a specific behavior without relying on <code>process.env</code> it is possible\nto pass in an object with different settings.</p>\n<p>Use the <code>NODE_DISABLE_COLORS</code> environment variable to enforce this function to\nalways return 1.</p>\n"
            }
          ]
        }
      ],
      "methods": [
        {
          "textRaw": "tty.isatty(fd)",
          "type": "method",
          "name": "isatty",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fd` {number} A numeric file descriptor ",
                  "name": "fd",
                  "type": "number",
                  "desc": "A numeric file descriptor"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fd"
                }
              ]
            }
          ],
          "desc": "<p>The <code>tty.isatty()</code> method returns <code>true</code> if the given <code>fd</code> is associated with\na TTY and <code>false</code> if it is not, including whenever <code>fd</code> is not a non-negative\ninteger.</p>\n<!-- [end-include:tty.md] -->\n<!-- [start-include:dgram.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "TTY"
    },
    {
      "textRaw": "UDP / Datagram Sockets",
      "name": "dgram",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>dgram</code> module provides an implementation of UDP Datagram sockets.</p>\n<pre><code class=\"lang-js\">const dgram = require(&#39;dgram&#39;);\nconst server = dgram.createSocket(&#39;udp4&#39;);\n\nserver.on(&#39;error&#39;, (err) =&gt; {\n  console.log(`server error:\\n${err.stack}`);\n  server.close();\n});\n\nserver.on(&#39;message&#39;, (msg, rinfo) =&gt; {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on(&#39;listening&#39;, () =&gt; {\n  const address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234\n</code></pre>\n",
      "classes": [
        {
          "textRaw": "Class: dgram.Socket",
          "type": "class",
          "name": "dgram.Socket",
          "meta": {
            "added": [
              "v0.1.99"
            ],
            "changes": []
          },
          "desc": "<p>The <code>dgram.Socket</code> object is an <a href=\"events.html\"><code>EventEmitter</code></a> that encapsulates the\ndatagram functionality.</p>\n<p>New instances of <code>dgram.Socket</code> are created using <a href=\"#dgram_dgram_createsocket_options_callback\"><code>dgram.createSocket()</code></a>.\nThe <code>new</code> keyword is not to be used to create <code>dgram.Socket</code> instances.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'close'",
              "type": "event",
              "name": "close",
              "meta": {
                "added": [
                  "v0.1.99"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;close&#39;</code> event is emitted after a socket is closed with <a href=\"#dgram_socket_close_callback\"><code>close()</code></a>.\nOnce triggered, no new <code>&#39;message&#39;</code> events will be emitted on this socket.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'error'",
              "type": "event",
              "name": "error",
              "meta": {
                "added": [
                  "v0.1.99"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>The <code>&#39;error&#39;</code> event is emitted whenever any error occurs. The event handler\nfunction is passed a single <code>Error</code> object.</p>\n"
            },
            {
              "textRaw": "Event: 'listening'",
              "type": "event",
              "name": "listening",
              "meta": {
                "added": [
                  "v0.1.99"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;listening&#39;</code> event is emitted whenever a socket begins listening for\ndatagram messages. This occurs as soon as UDP sockets are created.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'message'",
              "type": "event",
              "name": "message",
              "meta": {
                "added": [
                  "v0.1.99"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;message&#39;</code> event is emitted when a new datagram is available on a socket.\nThe event handler function is passed two arguments: <code>msg</code> and <code>rinfo</code>.</p>\n<ul>\n<li><code>msg</code> {Buffer} The message.</li>\n<li><code>rinfo</code> {Object} Remote address information.<ul>\n<li><code>address</code> {string} The sender address.</li>\n<li><code>family</code> {string} The address family (<code>&#39;IPv4&#39;</code> or <code>&#39;IPv6&#39;</code>).</li>\n<li><code>port</code> {number} The sender port.</li>\n<li><code>size</code> {number} The message size.</li>\n</ul>\n</li>\n</ul>\n",
              "params": []
            }
          ],
          "methods": [
            {
              "textRaw": "socket.addMembership(multicastAddress[, multicastInterface])",
              "type": "method",
              "name": "addMembership",
              "meta": {
                "added": [
                  "v0.6.9"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`multicastAddress` {string} ",
                      "name": "multicastAddress",
                      "type": "string"
                    },
                    {
                      "textRaw": "`multicastInterface` {string} ",
                      "name": "multicastInterface",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "multicastAddress"
                    },
                    {
                      "name": "multicastInterface",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Tells the kernel to join a multicast group at the given <code>multicastAddress</code> and\n<code>multicastInterface</code> using the <code>IP_ADD_MEMBERSHIP</code> socket option. If the\n<code>multicastInterface</code> argument is not specified, the operating system will choose\none interface and will add membership to it. To add membership to every\navailable interface, call <code>addMembership</code> multiple times, once per interface.</p>\n"
            },
            {
              "textRaw": "socket.address()",
              "type": "method",
              "name": "address",
              "meta": {
                "added": [
                  "v0.1.99"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Object} ",
                    "name": "return",
                    "type": "Object"
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>Returns an object containing the address information for a socket.\nFor UDP sockets, this object will contain <code>address</code>, <code>family</code> and <code>port</code>\nproperties.</p>\n"
            },
            {
              "textRaw": "socket.bind([port][, address][, callback])",
              "type": "method",
              "name": "bind",
              "meta": {
                "added": [
                  "v0.1.99"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`port` {integer} ",
                      "name": "port",
                      "type": "integer",
                      "optional": true
                    },
                    {
                      "textRaw": "`address` {string} ",
                      "name": "address",
                      "type": "string",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} with no parameters. Called when binding is complete. ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "with no parameters. Called when binding is complete.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "port",
                      "optional": true
                    },
                    {
                      "name": "address",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram\nmessages on a named <code>port</code> and optional <code>address</code>. If <code>port</code> is not\nspecified or is <code>0</code>, the operating system will attempt to bind to a\nrandom port. If <code>address</code> is not specified, the operating system will\nattempt to listen on all addresses. Once binding is complete, a\n<code>&#39;listening&#39;</code> event is emitted and the optional <code>callback</code> function is\ncalled.</p>\n<p>Note that specifying both a <code>&#39;listening&#39;</code> event listener and passing a\n<code>callback</code> to the <code>socket.bind()</code> method is not harmful but not very\nuseful.</p>\n<p>A bound datagram socket keeps the Node.js process running to receive\ndatagram messages.</p>\n<p>If binding fails, an <code>&#39;error&#39;</code> event is generated. In rare case (e.g.\nattempting to bind with a closed socket), an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> may be thrown.</p>\n<p>Example of a UDP server listening on port 41234:</p>\n<pre><code class=\"lang-js\">const dgram = require(&#39;dgram&#39;);\nconst server = dgram.createSocket(&#39;udp4&#39;);\n\nserver.on(&#39;error&#39;, (err) =&gt; {\n  console.log(`server error:\\n${err.stack}`);\n  server.close();\n});\n\nserver.on(&#39;message&#39;, (msg, rinfo) =&gt; {\n  console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nserver.on(&#39;listening&#39;, () =&gt; {\n  const address = server.address();\n  console.log(`server listening ${address.address}:${address.port}`);\n});\n\nserver.bind(41234);\n// server listening 0.0.0.0:41234\n</code></pre>\n"
            },
            {
              "textRaw": "socket.bind(options[, callback])",
              "type": "method",
              "name": "bind",
              "meta": {
                "added": [
                  "v0.11.14"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`options` {Object} Required. Supports the following properties: ",
                      "options": [
                        {
                          "textRaw": "`port` {integer} ",
                          "name": "port",
                          "type": "integer"
                        },
                        {
                          "textRaw": "`address` {string} ",
                          "name": "address",
                          "type": "string"
                        },
                        {
                          "textRaw": "`exclusive` {boolean} ",
                          "name": "exclusive",
                          "type": "boolean"
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "desc": "Required. Supports the following properties:"
                    },
                    {
                      "textRaw": "`callback` {Function} ",
                      "name": "callback",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "options"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>For UDP sockets, causes the <code>dgram.Socket</code> to listen for datagram\nmessages on a named <code>port</code> and optional <code>address</code> that are passed as\nproperties of an <code>options</code> object passed as the first argument. If\n<code>port</code> is not specified or is <code>0</code>, the operating system will attempt\nto bind to a random port. If <code>address</code> is not specified, the operating\nsystem will attempt to listen on all addresses. Once binding is\ncomplete, a <code>&#39;listening&#39;</code> event is emitted and the optional <code>callback</code>\nfunction is called.</p>\n<p>Note that specifying both a <code>&#39;listening&#39;</code> event listener and passing a\n<code>callback</code> to the <code>socket.bind()</code> method is not harmful but not very\nuseful.</p>\n<p>The <code>options</code> object may contain an additional <code>exclusive</code> property that is\nuse when using <code>dgram.Socket</code> objects with the <a href=\"cluster.html\"><code>cluster</code></a> module. When\n<code>exclusive</code> is set to <code>false</code> (the default), cluster workers will use the same\nunderlying socket handle allowing connection handling duties to be shared.\nWhen <code>exclusive</code> is <code>true</code>, however, the handle is not shared and attempted\nport sharing results in an error.</p>\n<p>A bound datagram socket keeps the Node.js process running to receive\ndatagram messages.</p>\n<p>If binding fails, an <code>&#39;error&#39;</code> event is generated. In rare case (e.g.\nattempting to bind with a closed socket), an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> may be thrown.</p>\n<p>An example socket listening on an exclusive port is shown below.</p>\n<pre><code class=\"lang-js\">socket.bind({\n  address: &#39;localhost&#39;,\n  port: 8000,\n  exclusive: true\n});\n</code></pre>\n"
            },
            {
              "textRaw": "socket.close([callback])",
              "type": "method",
              "name": "close",
              "meta": {
                "added": [
                  "v0.1.99"
                ],
                "changes": []
              },
              "desc": "<p>Close the underlying socket and stop listening for data on it. If a callback is\nprovided, it is added as a listener for the <a href=\"#dgram_event_close\"><code>&#39;close&#39;</code></a> event.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "socket.dropMembership(multicastAddress[, multicastInterface])",
              "type": "method",
              "name": "dropMembership",
              "meta": {
                "added": [
                  "v0.6.9"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`multicastAddress` {string} ",
                      "name": "multicastAddress",
                      "type": "string"
                    },
                    {
                      "textRaw": "`multicastInterface` {string} ",
                      "name": "multicastInterface",
                      "type": "string",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "multicastAddress"
                    },
                    {
                      "name": "multicastInterface",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Instructs the kernel to leave a multicast group at <code>multicastAddress</code> using the\n<code>IP_DROP_MEMBERSHIP</code> socket option. This method is automatically called by the\nkernel when the socket is closed or the process terminates, so most apps will\nnever have reason to call this.</p>\n<p>If <code>multicastInterface</code> is not specified, the operating system will attempt to\ndrop membership on all valid interfaces.</p>\n"
            },
            {
              "textRaw": "socket.getSendBufferSize()",
              "type": "method",
              "name": "getSendBufferSize",
              "meta": {
                "added": [
                  "v8.7.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {number} the `SO_SNDBUF` socket send buffer size in bytes. ",
                    "name": "return",
                    "type": "number",
                    "desc": "the `SO_SNDBUF` socket send buffer size in bytes."
                  },
                  "params": []
                },
                {
                  "params": []
                }
              ],
              "desc": "<p>By default, binding a socket will cause it to block the Node.js process from\nexiting as long as the socket is open. The <code>socket.unref()</code> method can be used\nto exclude the socket from the reference counting that keeps the Node.js\nprocess active. The <code>socket.ref()</code> method adds the socket back to the reference\ncounting and restores the default behavior.</p>\n<p>Calling <code>socket.ref()</code> multiples times will have no additional effect.</p>\n<p>The <code>socket.ref()</code> method returns a reference to the socket so calls can be\nchained.</p>\n"
            },
            {
              "textRaw": "socket.ref()",
              "type": "method",
              "name": "ref",
              "meta": {
                "added": [
                  "v0.9.1"
                ],
                "changes": []
              },
              "desc": "<p>By default, binding a socket will cause it to block the Node.js process from\nexiting as long as the socket is open. The <code>socket.unref()</code> method can be used\nto exclude the socket from the reference counting that keeps the Node.js\nprocess active. The <code>socket.ref()</code> method adds the socket back to the reference\ncounting and restores the default behavior.</p>\n<p>Calling <code>socket.ref()</code> multiples times will have no additional effect.</p>\n<p>The <code>socket.ref()</code> method returns a reference to the socket so calls can be\nchained.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "socket.send(msg, [offset, length,] port [, address] [, callback])",
              "type": "method",
              "name": "send",
              "meta": {
                "added": [
                  "v0.1.99"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/11985",
                    "description": "The `msg` parameter can be an `Uint8Array` now."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/10473",
                    "description": "The `address` parameter is always optional now."
                  },
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/5929",
                    "description": "On success, `callback` will now be called with an `error` argument of `null` rather than `0`."
                  },
                  {
                    "version": "v5.7.0",
                    "pr-url": "https://github.com/nodejs/node/pull/4374",
                    "description": "The `msg` parameter can be an array now. Also, the `offset` and `length` parameters are optional now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`msg` {Buffer|Uint8Array|string|Array} Message to be sent. ",
                      "name": "msg",
                      "type": "Buffer|Uint8Array|string|Array",
                      "desc": "Message to be sent."
                    },
                    {
                      "textRaw": "`offset` {integer} Offset in the buffer where the message starts. ",
                      "name": "offset",
                      "type": "integer",
                      "desc": "Offset in the buffer where the message starts.",
                      "optional": true
                    },
                    {
                      "textRaw": "`length` {integer} Number of bytes in the message. ",
                      "name": "length",
                      "type": "integer",
                      "desc": "Number of bytes in the message.",
                      "optional": true
                    },
                    {
                      "textRaw": "`port` {integer} Destination port. ",
                      "name": "port",
                      "type": "integer",
                      "desc": "Destination port."
                    },
                    {
                      "textRaw": "`address` {string} Destination hostname or IP address. ",
                      "name": "address",
                      "type": "string",
                      "desc": "Destination hostname or IP address.",
                      "optional": true
                    },
                    {
                      "textRaw": "`callback` {Function} Called when the message has been sent. ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "Called when the message has been sent.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "msg"
                    },
                    {
                      "name": "offset",
                      "optional": true
                    },
                    {
                      "name": "length",
                      "optional": true
                    },
                    {
                      "name": "port"
                    },
                    {
                      "name": "address",
                      "optional": true
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Broadcasts a datagram on the socket. The destination <code>port</code> and <code>address</code> must\nbe specified.</p>\n<p>The <code>msg</code> argument contains the message to be sent.\nDepending on its type, different behavior can apply. If <code>msg</code> is a <code>Buffer</code>\nor <code>Uint8Array</code>,\nthe <code>offset</code> and <code>length</code> specify the offset within the <code>Buffer</code> where the\nmessage begins and the number of bytes in the message, respectively.\nIf <code>msg</code> is a <code>String</code>, then it is automatically converted to a <code>Buffer</code>\nwith <code>&#39;utf8&#39;</code> encoding. With messages that\ncontain multi-byte characters, <code>offset</code> and <code>length</code> will be calculated with\nrespect to <a href=\"buffer.html#buffer_class_method_buffer_bytelength_string_encoding\">byte length</a> and not the character position.\nIf <code>msg</code> is an array, <code>offset</code> and <code>length</code> must not be specified.</p>\n<p>The <code>address</code> argument is a string. If the value of <code>address</code> is a host name,\nDNS will be used to resolve the address of the host. If <code>address</code> is not\nprovided or otherwise falsy, <code>&#39;127.0.0.1&#39;</code> (for <code>udp4</code> sockets) or <code>&#39;::1&#39;</code>\n(for <code>udp6</code> sockets) will be used by default.</p>\n<p>If the socket has not been previously bound with a call to <code>bind</code>, the socket\nis assigned a random port number and is bound to the &quot;all interfaces&quot; address\n(<code>&#39;0.0.0.0&#39;</code> for <code>udp4</code> sockets, <code>&#39;::0&#39;</code> for <code>udp6</code> sockets.)</p>\n<p>An optional <code>callback</code> function may be specified to as a way of reporting\nDNS errors or for determining when it is safe to reuse the <code>buf</code> object.\nNote that DNS lookups delay the time to send for at least one tick of the\nNode.js event loop.</p>\n<p>The only way to know for sure that the datagram has been sent is by using a\n<code>callback</code>. If an error occurs and a <code>callback</code> is given, the error will be\npassed as the first argument to the <code>callback</code>. If a <code>callback</code> is not given,\nthe error is emitted as an <code>&#39;error&#39;</code> event on the <code>socket</code> object.</p>\n<p>Offset and length are optional but both <em>must</em> be set if either are used.\nThey are supported only when the first argument is a <code>Buffer</code> or <code>Uint8Array</code>.</p>\n<p>Example of sending a UDP packet to a port on <code>localhost</code>;</p>\n<pre><code class=\"lang-js\">const dgram = require(&#39;dgram&#39;);\nconst message = Buffer.from(&#39;Some bytes&#39;);\nconst client = dgram.createSocket(&#39;udp4&#39;);\nclient.send(message, 41234, &#39;localhost&#39;, (err) =&gt; {\n  client.close();\n});\n</code></pre>\n<p>Example of sending a UDP packet composed of multiple buffers to a port on\n<code>127.0.0.1</code>;</p>\n<pre><code class=\"lang-js\">const dgram = require(&#39;dgram&#39;);\nconst buf1 = Buffer.from(&#39;Some &#39;);\nconst buf2 = Buffer.from(&#39;bytes&#39;);\nconst client = dgram.createSocket(&#39;udp4&#39;);\nclient.send([buf1, buf2], 41234, (err) =&gt; {\n  client.close();\n});\n</code></pre>\n<p>Sending multiple buffers might be faster or slower depending on the\napplication and operating system. It is important to run benchmarks to\ndetermine the optimal strategy on a case-by-case basis. Generally speaking,\nhowever, sending multiple buffers is faster.</p>\n<p><strong>A Note about UDP datagram size</strong></p>\n<p>The maximum size of an <code>IPv4/v6</code> datagram depends on the <code>MTU</code>\n(<em>Maximum Transmission Unit</em>) and on the <code>Payload Length</code> field size.</p>\n<ul>\n<li><p>The <code>Payload Length</code> field is <code>16 bits</code> wide, which means that a normal\npayload exceed 64K octets <em>including</em> the internet header and data\n(65,507 bytes = 65,535 − 8 bytes UDP header − 20 bytes IP header);\nthis is generally true for loopback interfaces, but such long datagram\nmessages are impractical for most hosts and networks.</p>\n</li>\n<li><p>The <code>MTU</code> is the largest size a given link layer technology can support for\ndatagram messages. For any link, <code>IPv4</code> mandates a minimum <code>MTU</code> of <code>68</code>\noctets, while the recommended <code>MTU</code> for IPv4 is <code>576</code> (typically recommended\nas the <code>MTU</code> for dial-up type applications), whether they arrive whole or in\nfragments.</p>\n<p>For <code>IPv6</code>, the minimum <code>MTU</code> is <code>1280</code> octets, however, the mandatory minimum\nfragment reassembly buffer size is <code>1500</code> octets. The value of <code>68</code> octets is\nvery small, since most current link layer technologies, like Ethernet, have a\nminimum <code>MTU</code> of <code>1500</code>.</p>\n</li>\n</ul>\n<p>It is impossible to know in advance the MTU of each link through which\na packet might travel. Sending a datagram greater than the receiver <code>MTU</code> will\nnot work because the packet will get silently dropped without informing the\nsource that the data did not reach its intended recipient.</p>\n"
            },
            {
              "textRaw": "socket.setBroadcast(flag)",
              "type": "method",
              "name": "setBroadcast",
              "meta": {
                "added": [
                  "v0.6.9"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`flag` {boolean} ",
                      "name": "flag",
                      "type": "boolean"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "flag"
                    }
                  ]
                }
              ],
              "desc": "<p>Sets or clears the <code>SO_BROADCAST</code> socket option. When set to <code>true</code>, UDP\npackets may be sent to a local interface&#39;s broadcast address.</p>\n"
            },
            {
              "textRaw": "socket.setMulticastInterface(multicastInterface)",
              "type": "method",
              "name": "setMulticastInterface",
              "meta": {
                "added": [
                  "v8.6.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`multicastInterface` {string} ",
                      "name": "multicastInterface",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "multicastInterface"
                    }
                  ]
                }
              ],
              "desc": "<p><em>Note: All references to scope in this section are referring to\n<a href=\"https://en.wikipedia.org/wiki/IPv6_address#Scoped_literal_IPv6_addresses\">IPv6 Zone Indices</a>, which are defined by <a href=\"https://tools.ietf.org/html/rfc4007\">RFC 4007</a>. In string form, an IP\nwith a scope index is written as <code>&#39;IP%scope&#39;</code> where scope is an interface name\nor interface number.</em></p>\n<p>Sets the default outgoing multicast interface of the socket to a chosen\ninterface or back to system interface selection. The <code>multicastInterface</code> must\nbe a valid string representation of an IP from the socket&#39;s family.</p>\n<p>For IPv4 sockets, this should be the IP configured for the desired physical\ninterface. All packets sent to multicast on the socket will be sent on the\ninterface determined by the most recent successful use of this call.</p>\n<p>For IPv6 sockets, <code>multicastInterface</code> should include a scope to indicate the\ninterface as in the examples that follow. In IPv6, individual <code>send</code> calls can\nalso use explicit scope in addresses, so only packets sent to a multicast\naddress without specifying an explicit scope are affected by the most recent\nsuccessful use of this call.</p>\n<h4>Examples: IPv6 Outgoing Multicast Interface</h4>\n<p>On most systems, where scope format uses the interface name:</p>\n<pre><code class=\"lang-js\">const socket = dgram.createSocket(&#39;udp6&#39;);\n\nsocket.bind(1234, () =&gt; {\n  socket.setMulticastInterface(&#39;::%eth1&#39;);\n});\n</code></pre>\n<p>On Windows, where scope format uses an interface number:</p>\n<pre><code class=\"lang-js\">const socket = dgram.createSocket(&#39;udp6&#39;);\n\nsocket.bind(1234, () =&gt; {\n  socket.setMulticastInterface(&#39;::%2&#39;);\n});\n</code></pre>\n<h4>Example: IPv4 Outgoing Multicast Interface</h4>\n<p>All systems use an IP of the host on the desired physical interface:</p>\n<pre><code class=\"lang-js\">const socket = dgram.createSocket(&#39;udp4&#39;);\n\nsocket.bind(1234, () =&gt; {\n  socket.setMulticastInterface(&#39;10.0.0.2&#39;);\n});\n</code></pre>\n",
              "modules": [
                {
                  "textRaw": "Call Results",
                  "name": "call_results",
                  "desc": "<p>A call on a socket that is not ready to send or no longer open may throw a <em>Not\nrunning</em> <a href=\"errors.html#errors_class_error\"><code>Error</code></a>.</p>\n<p>If <code>multicastInterface</code> can not be parsed into an IP then an <em>EINVAL</em>\n<a href=\"errors.html#errors_class_systemerror\"><code>System Error</code></a> is thrown.</p>\n<p>On IPv4, if <code>multicastInterface</code> is a valid address but does not match any\ninterface, or if the address does not match the family then\na <a href=\"errors.html#errors_class_systemerror\"><code>System Error</code></a> such as <code>EADDRNOTAVAIL</code> or <code>EPROTONOSUP</code> is thrown.</p>\n<p>On IPv6, most errors with specifying or omitting scope will result in the socket\ncontinuing to use (or returning to) the system&#39;s default interface selection.</p>\n<p>A socket&#39;s address family&#39;s ANY address (IPv4 <code>&#39;0.0.0.0&#39;</code> or IPv6 <code>&#39;::&#39;</code>) can be\nused to return control of the sockets default outgoing interface to the system\nfor future multicast packets.</p>\n",
                  "type": "module",
                  "displayName": "Call Results"
                }
              ]
            },
            {
              "textRaw": "socket.setMulticastLoopback(flag)",
              "type": "method",
              "name": "setMulticastLoopback",
              "meta": {
                "added": [
                  "v0.3.8"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`flag` {boolean} ",
                      "name": "flag",
                      "type": "boolean"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "flag"
                    }
                  ]
                }
              ],
              "desc": "<p>Sets or clears the <code>IP_MULTICAST_LOOP</code> socket option. When set to <code>true</code>,\nmulticast packets will also be received on the local interface.</p>\n"
            },
            {
              "textRaw": "socket.setMulticastTTL(ttl)",
              "type": "method",
              "name": "setMulticastTTL",
              "meta": {
                "added": [
                  "v0.3.8"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`ttl` {integer} ",
                      "name": "ttl",
                      "type": "integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "ttl"
                    }
                  ]
                }
              ],
              "desc": "<p>Sets the <code>IP_MULTICAST_TTL</code> socket option. While TTL generally stands for\n&quot;Time to Live&quot;, in this context it specifies the number of IP hops that a\npacket is allowed to travel through, specifically for multicast traffic. Each\nrouter or gateway that forwards a packet decrements the TTL. If the TTL is\ndecremented to 0 by a router, it will not be forwarded.</p>\n<p>The argument passed to <code>socket.setMulticastTTL()</code> is a number of hops\nbetween 0 and 255. The default on most systems is <code>1</code> but can vary.</p>\n"
            },
            {
              "textRaw": "socket.setRecvBufferSize(size)",
              "type": "method",
              "name": "setRecvBufferSize",
              "meta": {
                "added": [
                  "v8.7.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`size` {integer} ",
                      "name": "size",
                      "type": "integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "size"
                    }
                  ]
                }
              ],
              "desc": "<p>Sets the <code>SO_RCVBUF</code> socket option. Sets the maximum socket receive buffer\nin bytes.</p>\n"
            },
            {
              "textRaw": "socket.setSendBufferSize(size)",
              "type": "method",
              "name": "setSendBufferSize",
              "meta": {
                "added": [
                  "v8.7.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`size` {integer} ",
                      "name": "size",
                      "type": "integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "size"
                    }
                  ]
                }
              ],
              "desc": "<p>Sets the <code>SO_SNDBUF</code> socket option. Sets the maximum socket send buffer\nin bytes.</p>\n"
            },
            {
              "textRaw": "socket.setTTL(ttl)",
              "type": "method",
              "name": "setTTL",
              "meta": {
                "added": [
                  "v0.1.101"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`ttl` {integer} ",
                      "name": "ttl",
                      "type": "integer"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "ttl"
                    }
                  ]
                }
              ],
              "desc": "<p>Sets the <code>IP_TTL</code> socket option. While TTL generally stands for &quot;Time to Live&quot;,\nin this context it specifies the number of IP hops that a packet is allowed to\ntravel through. Each router or gateway that forwards a packet decrements the\nTTL. If the TTL is decremented to 0 by a router, it will not be forwarded.\nChanging TTL values is typically done for network probes or when multicasting.</p>\n<p>The argument to <code>socket.setTTL()</code> is a number of hops between 1 and 255.\nThe default on most systems is 64 but can vary.</p>\n"
            },
            {
              "textRaw": "socket.unref()",
              "type": "method",
              "name": "unref",
              "meta": {
                "added": [
                  "v0.9.1"
                ],
                "changes": []
              },
              "desc": "<p>By default, binding a socket will cause it to block the Node.js process from\nexiting as long as the socket is open. The <code>socket.unref()</code> method can be used\nto exclude the socket from the reference counting that keeps the Node.js\nprocess active, allowing the process to exit even if the socket is still\nlistening.</p>\n<p>Calling <code>socket.unref()</code> multiple times will have no addition effect.</p>\n<p>The <code>socket.unref()</code> method returns a reference to the socket so calls can be\nchained.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ],
          "modules": [
            {
              "textRaw": "Change to asynchronous `socket.bind()` behavior",
              "name": "change_to_asynchronous_`socket.bind()`_behavior",
              "desc": "<p>As of Node.js v0.10, <a href=\"#dgram_socket_bind_options_callback\"><code>dgram.Socket#bind()</code></a> changed to an asynchronous\nexecution model. Legacy code that assumes synchronous behavior, as in the\nfollowing example:</p>\n<pre><code class=\"lang-js\">const s = dgram.createSocket(&#39;udp4&#39;);\ns.bind(1234);\ns.addMembership(&#39;224.0.0.114&#39;);\n</code></pre>\n<p>Must be changed to pass a callback function to the <a href=\"#dgram_socket_bind_options_callback\"><code>dgram.Socket#bind()</code></a>\nfunction:</p>\n<pre><code class=\"lang-js\">const s = dgram.createSocket(&#39;udp4&#39;);\ns.bind(1234, () =&gt; {\n  s.addMembership(&#39;224.0.0.114&#39;);\n});\n</code></pre>\n",
              "type": "module",
              "displayName": "Change to asynchronous `socket.bind()` behavior"
            }
          ]
        }
      ],
      "modules": [
        {
          "textRaw": "`dgram` module functions",
          "name": "`dgram`_module_functions",
          "methods": [
            {
              "textRaw": "dgram.createSocket(options[, callback])",
              "type": "method",
              "name": "createSocket",
              "meta": {
                "added": [
                  "v0.11.13"
                ],
                "changes": [
                  {
                    "version": "v8.6.0",
                    "pr-url": "https://github.com/nodejs/node/pull/14560",
                    "description": "The `lookup` option is supported."
                  },
                  {
                    "version": "v8.7.0",
                    "pr-url": "https://github.com/nodejs/node/pull/13623",
                    "description": "The `recvBufferSize` and `sendBufferSize` options are supported now."
                  }
                ]
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {dgram.Socket} ",
                    "name": "return",
                    "type": "dgram.Socket"
                  },
                  "params": [
                    {
                      "textRaw": "`options` {Object} Available options are: ",
                      "options": [
                        {
                          "textRaw": "`type` {string} The family of socket. Must be either `'udp4'` or `'udp6'`. Required. ",
                          "name": "type",
                          "type": "string",
                          "desc": "The family of socket. Must be either `'udp4'` or `'udp6'`. Required."
                        },
                        {
                          "textRaw": "`reuseAddr` {boolean} When `true` [`socket.bind()`][] will reuse the address, even if another process has already bound a socket on it. **Default:** `false`. ",
                          "name": "reuseAddr",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "When `true` [`socket.bind()`][] will reuse the address, even if another process has already bound a socket on it."
                        },
                        {
                          "textRaw": "`recvBufferSize` {number} - Sets the `SO_RCVBUF` socket value. ",
                          "name": "recvBufferSize",
                          "type": "number",
                          "desc": "Sets the `SO_RCVBUF` socket value."
                        },
                        {
                          "textRaw": "`sendBufferSize` {number} - Sets the `SO_SNDBUF` socket value. ",
                          "name": "sendBufferSize",
                          "type": "number",
                          "desc": "Sets the `SO_SNDBUF` socket value."
                        },
                        {
                          "textRaw": "`lookup` {Function} Custom lookup function. **Default:** [`dns.lookup()`][]. ",
                          "name": "lookup",
                          "type": "Function",
                          "default": "[`dns.lookup()`][]",
                          "desc": "Custom lookup function."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "desc": "Available options are:"
                    },
                    {
                      "textRaw": "`callback` {Function} Attached as a listener for `'message'` events. Optional. ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "Attached as a listener for `'message'` events. Optional.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "options"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a <code>dgram.Socket</code> object. Once the socket is created, calling\n<a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> will instruct the socket to begin listening for datagram\nmessages. When <code>address</code> and <code>port</code> are not passed to <a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> the\nmethod will bind the socket to the &quot;all interfaces&quot; address on a random port\n(it does the right thing for both <code>udp4</code> and <code>udp6</code> sockets). The bound address\nand port can be retrieved using <a href=\"#dgram_socket_address\"><code>socket.address().address</code></a> and\n<a href=\"#dgram_socket_address\"><code>socket.address().port</code></a>.</p>\n"
            },
            {
              "textRaw": "dgram.createSocket(type[, callback])",
              "type": "method",
              "name": "createSocket",
              "meta": {
                "added": [
                  "v0.1.99"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {dgram.Socket} ",
                    "name": "return",
                    "type": "dgram.Socket"
                  },
                  "params": [
                    {
                      "textRaw": "`type` {string} - Either `'udp4'` or `'udp6'`. ",
                      "name": "type",
                      "type": "string",
                      "desc": "Either `'udp4'` or `'udp6'`."
                    },
                    {
                      "textRaw": "`callback` {Function} - Attached as a listener to `'message'` events. ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "Attached as a listener to `'message'` events.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "type"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a <code>dgram.Socket</code> object of the specified <code>type</code>. The <code>type</code> argument\ncan be either <code>&#39;udp4&#39;</code> or <code>&#39;udp6&#39;</code>. An optional <code>callback</code> function can be\npassed which is added as a listener for <code>&#39;message&#39;</code> events.</p>\n<p>Once the socket is created, calling <a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> will instruct the\nsocket to begin listening for datagram messages. When <code>address</code> and <code>port</code> are\nnot passed to <a href=\"#dgram_socket_bind_port_address_callback\"><code>socket.bind()</code></a> the method will bind the socket to the &quot;all\ninterfaces&quot; address on a random port (it does the right thing for both <code>udp4</code>\nand <code>udp6</code> sockets). The bound address and port can be retrieved using\n<a href=\"#dgram_socket_address\"><code>socket.address().address</code></a> and <a href=\"#dgram_socket_address\"><code>socket.address().port</code></a>.</p>\n<!-- [end-include:dgram.md] -->\n<!-- [start-include:url.md] -->\n"
            }
          ],
          "type": "module",
          "displayName": "`dgram` module functions"
        }
      ],
      "type": "module",
      "displayName": "dgram"
    },
    {
      "textRaw": "URL",
      "name": "url",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>url</code> module provides utilities for URL resolution and parsing. It can be\naccessed using:</p>\n<pre><code class=\"lang-js\">const url = require(&#39;url&#39;);\n</code></pre>\n",
      "modules": [
        {
          "textRaw": "URL Strings and URL Objects",
          "name": "url_strings_and_url_objects",
          "desc": "<p>A URL string is a structured string containing multiple meaningful components.\nWhen parsed, a URL object is returned containing properties for each of these\ncomponents.</p>\n<p>The <code>url</code> module provides two APIs for working with URLs: a legacy API that is\nNode.js specific, and a newer API that implements the same\n<a href=\"https://url.spec.whatwg.org/\">WHATWG URL Standard</a> used by web browsers.</p>\n<p>While the Legacy API has not been deprecated, it is maintained solely for\nbackwards compatibility with existing applications. New application code\nshould use the WHATWG API.</p>\n<p>A comparison between the WHATWG and Legacy APIs is provided below. Above the URL\n<code>&#39;http://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash&#39;</code>, properties of\nan object returned by the legacy <code>url.parse()</code> are shown. Below it are\nproperties of a WHATWG <code>URL</code> object.</p>\n<p>WHATWG URL&#39;s <code>origin</code> property includes <code>protocol</code> and <code>host</code>, but not\n<code>username</code> or <code>password</code>.</p>\n<pre><code class=\"lang-txt\">┌─────────────────────────────────────────────────────────────────────────────────────────────┐\n│                                            href                                             │\n├──────────┬──┬─────────────────────┬─────────────────────┬───────────────────────────┬───────┤\n│ protocol │  │        auth         │        host         │           path            │ hash  │\n│          │  │                     ├──────────────┬──────┼──────────┬────────────────┤       │\n│          │  │                     │   hostname   │ port │ pathname │     search     │       │\n│          │  │                     │              │      │          ├─┬──────────────┤       │\n│          │  │                     │              │      │          │ │    query     │       │\n&quot;  https:   //    user   :   pass   @ sub.host.com : 8080   /p/a/t/h  ?  query=string   #hash &quot;\n│          │  │          │          │   hostname   │ port │          │                │       │\n│          │  │          │          ├──────────────┴──────┤          │                │       │\n│ protocol │  │ username │ password │        host         │          │                │       │\n├──────────┴──┼──────────┴──────────┼─────────────────────┤          │                │       │\n│   origin    │                     │       origin        │ pathname │     search     │ hash  │\n├─────────────┴─────────────────────┴─────────────────────┴──────────┴────────────────┴───────┤\n│                                            href                                             │\n└─────────────────────────────────────────────────────────────────────────────────────────────┘\n(all spaces in the &quot;&quot; line should be ignored — they are purely for formatting)\n</code></pre>\n<p>Parsing the URL string using the WHATWG API:</p>\n<pre><code class=\"lang-js\">const myURL =\n  new URL(&#39;https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash&#39;);\n</code></pre>\n<p>Parsing the URL string using the Legacy API:</p>\n<pre><code class=\"lang-js\">const url = require(&#39;url&#39;);\nconst myURL =\n  url.parse(&#39;https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash&#39;);\n</code></pre>\n",
          "type": "module",
          "displayName": "URL Strings and URL Objects"
        },
        {
          "textRaw": "The WHATWG URL API",
          "name": "the_whatwg_url_api",
          "classes": [
            {
              "textRaw": "Class: URL",
              "type": "class",
              "name": "URL",
              "meta": {
                "added": [
                  "v7.0.0"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18281",
                    "description": "The class is now available on the global object."
                  }
                ]
              },
              "desc": "<p>Browser-compatible <code>URL</code> class, implemented by following the WHATWG URL\nStandard. <a href=\"https://url.spec.whatwg.org/#example-url-parsing\">Examples of parsed URLs</a> may be found in the Standard itself.\nThe <code>URL</code> class is also available on the global object.</p>\n<p>In accordance with browser conventions, all properties of <code>URL</code> objects\nare implemented as getters and setters on the class prototype, rather than as\ndata properties on the object itself. Thus, unlike <a href=\"#url_legacy_urlobject\">legacy <code>urlObject</code></a>s,\nusing the <code>delete</code> keyword on any properties of <code>URL</code> objects (e.g. <code>delete\nmyURL.protocol</code>, <code>delete myURL.pathname</code>, etc) has no effect but will still\nreturn <code>true</code>.</p>\n",
              "properties": [
                {
                  "textRaw": "`hash` {string} ",
                  "type": "string",
                  "name": "hash",
                  "desc": "<p>Gets and sets the fragment portion of the URL.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://example.org/foo#bar&#39;);\nconsole.log(myURL.hash);\n// Prints #bar\n\nmyURL.hash = &#39;baz&#39;;\nconsole.log(myURL.href);\n// Prints https://example.org/foo#baz\n</code></pre>\n<p>Invalid URL characters included in the value assigned to the <code>hash</code> property\nare <a href=\"#whatwg-percent-encoding\">percent-encoded</a>. Note that the selection of which characters to\npercent-encode may vary somewhat from what the <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a> and\n<a href=\"#url_url_format_urlobject\"><code>url.format()</code></a> methods would produce.</p>\n"
                },
                {
                  "textRaw": "`host` {string} ",
                  "type": "string",
                  "name": "host",
                  "desc": "<p>Gets and sets the host portion of the URL.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://example.org:81/foo&#39;);\nconsole.log(myURL.host);\n// Prints example.org:81\n\nmyURL.host = &#39;example.com:82&#39;;\nconsole.log(myURL.href);\n// Prints https://example.com:82/foo\n</code></pre>\n<p>Invalid host values assigned to the <code>host</code> property are ignored.</p>\n"
                },
                {
                  "textRaw": "`hostname` {string} ",
                  "type": "string",
                  "name": "hostname",
                  "desc": "<p>Gets and sets the hostname portion of the URL. The key difference between\n<code>url.host</code> and <code>url.hostname</code> is that <code>url.hostname</code> does <em>not</em> include the\nport.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://example.org:81/foo&#39;);\nconsole.log(myURL.hostname);\n// Prints example.org\n\nmyURL.hostname = &#39;example.com:82&#39;;\nconsole.log(myURL.href);\n// Prints https://example.com:81/foo\n</code></pre>\n<p>Invalid hostname values assigned to the <code>hostname</code> property are ignored.</p>\n"
                },
                {
                  "textRaw": "`href` {string} ",
                  "type": "string",
                  "name": "href",
                  "desc": "<p>Gets and sets the serialized URL.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://example.org/foo&#39;);\nconsole.log(myURL.href);\n// Prints https://example.org/foo\n\nmyURL.href = &#39;https://example.com/bar&#39;;\nconsole.log(myURL.href);\n// Prints https://example.com/bar\n</code></pre>\n<p>Getting the value of the <code>href</code> property is equivalent to calling\n<a href=\"#url_url_tostring\"><code>url.toString()</code></a>.</p>\n<p>Setting the value of this property to a new value is equivalent to creating a\nnew <code>URL</code> object using <a href=\"#url_constructor_new_url_input_base\"><code>new URL(value)</code></a>. Each of the <code>URL</code>\nobject&#39;s properties will be modified.</p>\n<p>If the value assigned to the <code>href</code> property is not a valid URL, a <code>TypeError</code>\nwill be thrown.</p>\n"
                },
                {
                  "textRaw": "`origin` {string} ",
                  "type": "string",
                  "name": "origin",
                  "desc": "<p>Gets the read-only serialization of the URL&#39;s origin.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://example.org/foo/bar?baz&#39;);\nconsole.log(myURL.origin);\n// Prints https://example.org\n</code></pre>\n<pre><code class=\"lang-js\">const idnURL = new URL(&#39;https://你好你好&#39;);\nconsole.log(idnURL.origin);\n// Prints https://xn--6qqa088eba\n\nconsole.log(idnURL.hostname);\n// Prints xn--6qqa088eba\n</code></pre>\n"
                },
                {
                  "textRaw": "`password` {string} ",
                  "type": "string",
                  "name": "password",
                  "desc": "<p>Gets and sets the password portion of the URL.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://abc:xyz@example.com&#39;);\nconsole.log(myURL.password);\n// Prints xyz\n\nmyURL.password = &#39;123&#39;;\nconsole.log(myURL.href);\n// Prints https://abc:123@example.com\n</code></pre>\n<p>Invalid URL characters included in the value assigned to the <code>password</code> property\nare <a href=\"#whatwg-percent-encoding\">percent-encoded</a>. Note that the selection of which characters to\npercent-encode may vary somewhat from what the <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a> and\n<a href=\"#url_url_format_urlobject\"><code>url.format()</code></a> methods would produce.</p>\n"
                },
                {
                  "textRaw": "`pathname` {string} ",
                  "type": "string",
                  "name": "pathname",
                  "desc": "<p>Gets and sets the path portion of the URL.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://example.org/abc/xyz?123&#39;);\nconsole.log(myURL.pathname);\n// Prints /abc/xyz\n\nmyURL.pathname = &#39;/abcdef&#39;;\nconsole.log(myURL.href);\n// Prints https://example.org/abcdef?123\n</code></pre>\n<p>Invalid URL characters included in the value assigned to the <code>pathname</code>\nproperty are <a href=\"#whatwg-percent-encoding\">percent-encoded</a>. Note that the selection of which characters\nto percent-encode may vary somewhat from what the <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a> and\n<a href=\"#url_url_format_urlobject\"><code>url.format()</code></a> methods would produce.</p>\n"
                },
                {
                  "textRaw": "`port` {string} ",
                  "type": "string",
                  "name": "port",
                  "desc": "<p>Gets and sets the port portion of the URL.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://example.org:8888&#39;);\nconsole.log(myURL.port);\n// Prints 8888\n\n// Default ports are automatically transformed to the empty string\n// (HTTPS protocol&#39;s default port is 443)\nmyURL.port = &#39;443&#39;;\nconsole.log(myURL.port);\n// Prints the empty string\nconsole.log(myURL.href);\n// Prints https://example.org/\n\nmyURL.port = 1234;\nconsole.log(myURL.port);\n// Prints 1234\nconsole.log(myURL.href);\n// Prints https://example.org:1234/\n\n// Completely invalid port strings are ignored\nmyURL.port = &#39;abcd&#39;;\nconsole.log(myURL.port);\n// Prints 1234\n\n// Leading numbers are treated as a port number\nmyURL.port = &#39;5678abcd&#39;;\nconsole.log(myURL.port);\n// Prints 5678\n\n// Non-integers are truncated\nmyURL.port = 1234.5678;\nconsole.log(myURL.port);\n// Prints 1234\n\n// Out-of-range numbers which are not represented in scientific notation\n// will be ignored.\nmyURL.port = 1e10; // 10000000000, will be range-checked as described below\nconsole.log(myURL.port);\n// Prints 1234\n</code></pre>\n<p>The port value may be set as either a number or as a string containing a number\nin the range <code>0</code> to <code>65535</code> (inclusive). Setting the value to the default port\nof the <code>URL</code> objects given <code>protocol</code> will result in the <code>port</code> value becoming\nthe empty string (<code>&#39;&#39;</code>).</p>\n<p>Upon assigning a value to the port, the value will first be converted to a\nstring using <code>.toString()</code>.</p>\n<p>If that string is invalid but it begins with a number, the leading number is\nassigned to <code>port</code>.\nOtherwise, or if the number lies outside the range denoted above,\nit is ignored.</p>\n<p>Note that numbers which contain a decimal point,\nsuch as floating-point numbers or numbers in scientific notation,\nare not an exception to this rule.\nLeading numbers up to the decimal point will be set as the URL&#39;s port,\nassuming they are valid:</p>\n<pre><code class=\"lang-js\">myURL.port = 4.567e21;\nconsole.log(myURL.port);\n// Prints 4 (because it is the leading number in the string &#39;4.567e21&#39;)\n</code></pre>\n"
                },
                {
                  "textRaw": "`protocol` {string} ",
                  "type": "string",
                  "name": "protocol",
                  "desc": "<p>Gets and sets the protocol portion of the URL.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://example.org&#39;);\nconsole.log(myURL.protocol);\n// Prints https:\n\nmyURL.protocol = &#39;ftp&#39;;\nconsole.log(myURL.href);\n// Prints ftp://example.org/\n</code></pre>\n<p>Invalid URL protocol values assigned to the <code>protocol</code> property are ignored.</p>\n"
                },
                {
                  "textRaw": "`search` {string} ",
                  "type": "string",
                  "name": "search",
                  "desc": "<p>Gets and sets the serialized query portion of the URL.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://example.org/abc?123&#39;);\nconsole.log(myURL.search);\n// Prints ?123\n\nmyURL.search = &#39;abc=xyz&#39;;\nconsole.log(myURL.href);\n// Prints https://example.org/abc?abc=xyz\n</code></pre>\n<p>Any invalid URL characters appearing in the value assigned the <code>search</code>\nproperty will be <a href=\"#whatwg-percent-encoding\">percent-encoded</a>. Note that the selection of which\ncharacters to percent-encode may vary somewhat from what the <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a>\nand <a href=\"#url_url_format_urlobject\"><code>url.format()</code></a> methods would produce.</p>\n"
                },
                {
                  "textRaw": "`searchParams` {URLSearchParams} ",
                  "type": "URLSearchParams",
                  "name": "searchParams",
                  "desc": "<p>Gets the <a href=\"#url_class_urlsearchparams\"><code>URLSearchParams</code></a> object representing the query parameters of the\nURL. This property is read-only; to replace the entirety of query parameters of\nthe URL, use the <a href=\"#url_url_search\"><code>url.search</code></a> setter. See <a href=\"#url_class_urlsearchparams\"><code>URLSearchParams</code></a>\ndocumentation for details.</p>\n"
                },
                {
                  "textRaw": "`username` {string} ",
                  "type": "string",
                  "name": "username",
                  "desc": "<p>Gets and sets the username portion of the URL.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://abc:xyz@example.com&#39;);\nconsole.log(myURL.username);\n// Prints abc\n\nmyURL.username = &#39;123&#39;;\nconsole.log(myURL.href);\n// Prints https://123:xyz@example.com/\n</code></pre>\n<p>Any invalid URL characters appearing in the value assigned the <code>username</code>\nproperty will be <a href=\"#whatwg-percent-encoding\">percent-encoded</a>. Note that the selection of which\ncharacters to percent-encode may vary somewhat from what the <a href=\"#url_url_parse_urlstring_parsequerystring_slashesdenotehost\"><code>url.parse()</code></a>\nand <a href=\"#url_url_format_urlobject\"><code>url.format()</code></a> methods would produce.</p>\n"
                }
              ],
              "methods": [
                {
                  "textRaw": "url.toString()",
                  "type": "method",
                  "name": "toString",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {string} ",
                        "name": "return",
                        "type": "string"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>The <code>toString()</code> method on the <code>URL</code> object returns the serialized URL. The\nvalue returned is equivalent to that of <a href=\"#url_url_href\"><code>url.href</code></a> and <a href=\"#url_url_tojson\"><code>url.toJSON()</code></a>.</p>\n<p>Because of the need for standard compliance, this method does not allow users\nto customize the serialization process of the URL. For more flexibility,\n<a href=\"#url_url_format_url_options\"><code>require(&#39;url&#39;).format()</code></a> method might be of interest.</p>\n"
                },
                {
                  "textRaw": "url.toJSON()",
                  "type": "method",
                  "name": "toJSON",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {string} ",
                        "name": "return",
                        "type": "string"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>The <code>toJSON()</code> method on the <code>URL</code> object returns the serialized URL. The\nvalue returned is equivalent to that of <a href=\"#url_url_href\"><code>url.href</code></a> and\n<a href=\"#url_url_tostring\"><code>url.toString()</code></a>.</p>\n<p>This method is automatically called when an <code>URL</code> object is serialized\nwith <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\"><code>JSON.stringify()</code></a>.</p>\n<pre><code class=\"lang-js\">const myURLs = [\n  new URL(&#39;https://www.example.com&#39;),\n  new URL(&#39;https://test.example.org&#39;)\n];\nconsole.log(JSON.stringify(myURLs));\n// Prints [&quot;https://www.example.com/&quot;,&quot;https://test.example.org/&quot;]\n</code></pre>\n"
                }
              ],
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`input` {string} The absolute or relative input URL to parse. If `input` is relative, then `base` is required. If `input` is absolute, the `base` is ignored. ",
                      "name": "input",
                      "type": "string",
                      "desc": "The absolute or relative input URL to parse. If `input` is relative, then `base` is required. If `input` is absolute, the `base` is ignored."
                    },
                    {
                      "textRaw": "`base` {string|URL} The base URL to resolve against if the `input` is not absolute. ",
                      "name": "base",
                      "type": "string|URL",
                      "desc": "The base URL to resolve against if the `input` is not absolute.",
                      "optional": true
                    }
                  ],
                  "desc": "<p>Creates a new <code>URL</code> object by parsing the <code>input</code> relative to the <code>base</code>. If\n<code>base</code> is passed as a string, it will be parsed equivalent to <code>new URL(base)</code>.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;/foo&#39;, &#39;https://example.org/&#39;);\n// https://example.org/foo\n</code></pre>\n<p>A <code>TypeError</code> will be thrown if the <code>input</code> or <code>base</code> are not valid URLs. Note\nthat an effort will be made to coerce the given values into strings. For\ninstance:</p>\n<pre><code class=\"lang-js\">const myURL = new URL({ toString: () =&gt; &#39;https://example.org/&#39; });\n// https://example.org/\n</code></pre>\n<p>Unicode characters appearing within the hostname of <code>input</code> will be\nautomatically converted to ASCII using the <a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a> algorithm.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://你好你好&#39;);\n// https://xn--6qqa088eba/\n</code></pre>\n<p>This feature is only available if the <code>node</code> executable was compiled with\n<a href=\"intl.html#intl_options_for_building_node_js\">ICU</a> enabled. If not, the domain names are passed through unchanged.</p>\n<p>In cases where it is not known in advance if <code>input</code> is an absolute URL\nand a <code>base</code> is provided, it is advised to validate that the <code>origin</code> of\nthe <code>URL</code> object is what is expected.</p>\n<pre><code class=\"lang-js\">let myURL = new URL(&#39;http://anotherExample.org/&#39;, &#39;https://example.org/&#39;);\n// http://anotherexample.org/\n\nmyURL = new URL(&#39;https://anotherExample.org/&#39;, &#39;https://example.org/&#39;);\n// https://anotherexample.org/\n\nmyURL = new URL(&#39;foo://anotherExample.org/&#39;, &#39;https://example.org/&#39;);\n// foo://anotherExample.org/\n\nmyURL = new URL(&#39;http:anotherExample.org/&#39;, &#39;https://example.org/&#39;);\n// http://anotherexample.org/\n\nmyURL = new URL(&#39;https:anotherExample.org/&#39;, &#39;https://example.org/&#39;);\n// https://example.org/anotherExample.org/\n\nmyURL = new URL(&#39;foo:anotherExample.org/&#39;, &#39;https://example.org/&#39;);\n// foo:anotherExample.org/\n</code></pre>\n"
                },
                {
                  "params": [
                    {
                      "name": "input"
                    },
                    {
                      "name": "base",
                      "optional": true
                    }
                  ],
                  "desc": "<p>Creates a new <code>URL</code> object by parsing the <code>input</code> relative to the <code>base</code>. If\n<code>base</code> is passed as a string, it will be parsed equivalent to <code>new URL(base)</code>.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;/foo&#39;, &#39;https://example.org/&#39;);\n// https://example.org/foo\n</code></pre>\n<p>A <code>TypeError</code> will be thrown if the <code>input</code> or <code>base</code> are not valid URLs. Note\nthat an effort will be made to coerce the given values into strings. For\ninstance:</p>\n<pre><code class=\"lang-js\">const myURL = new URL({ toString: () =&gt; &#39;https://example.org/&#39; });\n// https://example.org/\n</code></pre>\n<p>Unicode characters appearing within the hostname of <code>input</code> will be\nautomatically converted to ASCII using the <a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a> algorithm.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://你好你好&#39;);\n// https://xn--6qqa088eba/\n</code></pre>\n<p>This feature is only available if the <code>node</code> executable was compiled with\n<a href=\"intl.html#intl_options_for_building_node_js\">ICU</a> enabled. If not, the domain names are passed through unchanged.</p>\n<p>In cases where it is not known in advance if <code>input</code> is an absolute URL\nand a <code>base</code> is provided, it is advised to validate that the <code>origin</code> of\nthe <code>URL</code> object is what is expected.</p>\n<pre><code class=\"lang-js\">let myURL = new URL(&#39;http://anotherExample.org/&#39;, &#39;https://example.org/&#39;);\n// http://anotherexample.org/\n\nmyURL = new URL(&#39;https://anotherExample.org/&#39;, &#39;https://example.org/&#39;);\n// https://anotherexample.org/\n\nmyURL = new URL(&#39;foo://anotherExample.org/&#39;, &#39;https://example.org/&#39;);\n// foo://anotherExample.org/\n\nmyURL = new URL(&#39;http:anotherExample.org/&#39;, &#39;https://example.org/&#39;);\n// http://anotherexample.org/\n\nmyURL = new URL(&#39;https:anotherExample.org/&#39;, &#39;https://example.org/&#39;);\n// https://example.org/anotherExample.org/\n\nmyURL = new URL(&#39;foo:anotherExample.org/&#39;, &#39;https://example.org/&#39;);\n// foo:anotherExample.org/\n</code></pre>\n"
                }
              ]
            },
            {
              "textRaw": "Class: URLSearchParams",
              "type": "class",
              "name": "URLSearchParams",
              "meta": {
                "added": [
                  "v7.5.0"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/18281",
                    "description": "The class is now available on the global object."
                  }
                ]
              },
              "desc": "<p>The <code>URLSearchParams</code> API provides read and write access to the query of a\n<code>URL</code>. The <code>URLSearchParams</code> class can also be used standalone with one of the\nfour following constructors.\nThe <code>URLSearchParams</code> class is also available on the global object.</p>\n<p>The WHATWG <code>URLSearchParams</code> interface and the <a href=\"querystring.html\"><code>querystring</code></a> module have\nsimilar purpose, but the purpose of the <a href=\"querystring.html\"><code>querystring</code></a> module is more\ngeneral, as it allows the customization of delimiter characters (<code>&amp;</code> and <code>=</code>).\nOn the other hand, this API is designed purely for URL query strings.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://example.org/?abc=123&#39;);\nconsole.log(myURL.searchParams.get(&#39;abc&#39;));\n// Prints 123\n\nmyURL.searchParams.append(&#39;abc&#39;, &#39;xyz&#39;);\nconsole.log(myURL.href);\n// Prints https://example.org/?abc=123&amp;abc=xyz\n\nmyURL.searchParams.delete(&#39;abc&#39;);\nmyURL.searchParams.set(&#39;a&#39;, &#39;b&#39;);\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b\n\nconst newSearchParams = new URLSearchParams(myURL.searchParams);\n// The above is equivalent to\n// const newSearchParams = new URLSearchParams(myURL.search);\n\nnewSearchParams.append(&#39;a&#39;, &#39;c&#39;);\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b\nconsole.log(newSearchParams.toString());\n// Prints a=b&amp;a=c\n\n// newSearchParams.toString() is implicitly called\nmyURL.search = newSearchParams;\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b&amp;a=c\nnewSearchParams.delete(&#39;a&#39;);\nconsole.log(myURL.href);\n// Prints https://example.org/?a=b&amp;a=c\n</code></pre>\n",
              "methods": [
                {
                  "textRaw": "urlSearchParams.append(name, value)",
                  "type": "method",
                  "name": "append",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`name` {string} ",
                          "name": "name",
                          "type": "string"
                        },
                        {
                          "textRaw": "`value` {string} ",
                          "name": "value",
                          "type": "string"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "name"
                        },
                        {
                          "name": "value"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Append a new name-value pair to the query string.</p>\n"
                },
                {
                  "textRaw": "urlSearchParams.delete(name)",
                  "type": "method",
                  "name": "delete",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`name` {string} ",
                          "name": "name",
                          "type": "string"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Remove all name-value pairs whose name is <code>name</code>.</p>\n"
                },
                {
                  "textRaw": "urlSearchParams.entries()",
                  "type": "method",
                  "name": "entries",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Iterator} ",
                        "name": "return",
                        "type": "Iterator"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Returns an ES6 <code>Iterator</code> over each of the name-value pairs in the query.\nEach item of the iterator is a JavaScript <code>Array</code>. The first item of the <code>Array</code>\nis the <code>name</code>, the second item of the <code>Array</code> is the <code>value</code>.</p>\n<p>Alias for <a href=\"#url_urlsearchparams_symbol_iterator\"><code>urlSearchParams[@@iterator]()</code></a>.</p>\n"
                },
                {
                  "textRaw": "urlSearchParams.forEach(fn[, thisArg])",
                  "type": "method",
                  "name": "forEach",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`fn` {Function} Invoked for each name-value pair in the query ",
                          "name": "fn",
                          "type": "Function",
                          "desc": "Invoked for each name-value pair in the query"
                        },
                        {
                          "textRaw": "`thisArg` {Object} To be used as `this` value for when `fn` is called ",
                          "name": "thisArg",
                          "type": "Object",
                          "desc": "To be used as `this` value for when `fn` is called",
                          "optional": true
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "fn"
                        },
                        {
                          "name": "thisArg",
                          "optional": true
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Iterates over each name-value pair in the query and invokes the given function.</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://example.org/?a=b&amp;c=d&#39;);\nmyURL.searchParams.forEach((value, name, searchParams) =&gt; {\n  console.log(name, value, myURL.searchParams === searchParams);\n});\n// Prints:\n//   a b true\n//   c d true\n</code></pre>\n"
                },
                {
                  "textRaw": "urlSearchParams.get(name)",
                  "type": "method",
                  "name": "get",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {string} or `null` if there is no name-value pair with the given `name`. ",
                        "name": "return",
                        "type": "string",
                        "desc": "or `null` if there is no name-value pair with the given `name`."
                      },
                      "params": [
                        {
                          "textRaw": "`name` {string} ",
                          "name": "name",
                          "type": "string"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Returns the value of the first name-value pair whose name is <code>name</code>. If there\nare no such pairs, <code>null</code> is returned.</p>\n"
                },
                {
                  "textRaw": "urlSearchParams.getAll(name)",
                  "type": "method",
                  "name": "getAll",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {string[]} ",
                        "name": "return",
                        "type": "string[]"
                      },
                      "params": [
                        {
                          "textRaw": "`name` {string} ",
                          "name": "name",
                          "type": "string"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Returns the values of all name-value pairs whose name is <code>name</code>. If there are\nno such pairs, an empty array is returned.</p>\n"
                },
                {
                  "textRaw": "urlSearchParams.has(name)",
                  "type": "method",
                  "name": "has",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {boolean} ",
                        "name": "return",
                        "type": "boolean"
                      },
                      "params": [
                        {
                          "textRaw": "`name` {string} ",
                          "name": "name",
                          "type": "string"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Returns <code>true</code> if there is at least one name-value pair whose name is <code>name</code>.</p>\n"
                },
                {
                  "textRaw": "urlSearchParams.keys()",
                  "type": "method",
                  "name": "keys",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Iterator} ",
                        "name": "return",
                        "type": "Iterator"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Returns an ES6 <code>Iterator</code> over the names of each name-value pair.</p>\n<pre><code class=\"lang-js\">const params = new URLSearchParams(&#39;foo=bar&amp;foo=baz&#39;);\nfor (const name of params.keys()) {\n  console.log(name);\n}\n// Prints:\n//   foo\n//   foo\n</code></pre>\n"
                },
                {
                  "textRaw": "urlSearchParams.set(name, value)",
                  "type": "method",
                  "name": "set",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`name` {string} ",
                          "name": "name",
                          "type": "string"
                        },
                        {
                          "textRaw": "`value` {string} ",
                          "name": "value",
                          "type": "string"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "name"
                        },
                        {
                          "name": "value"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Sets the value in the <code>URLSearchParams</code> object associated with <code>name</code> to\n<code>value</code>. If there are any pre-existing name-value pairs whose names are <code>name</code>,\nset the first such pair&#39;s value to <code>value</code> and remove all others. If not,\nappend the name-value pair to the query string.</p>\n<pre><code class=\"lang-js\">const params = new URLSearchParams();\nparams.append(&#39;foo&#39;, &#39;bar&#39;);\nparams.append(&#39;foo&#39;, &#39;baz&#39;);\nparams.append(&#39;abc&#39;, &#39;def&#39;);\nconsole.log(params.toString());\n// Prints foo=bar&amp;foo=baz&amp;abc=def\n\nparams.set(&#39;foo&#39;, &#39;def&#39;);\nparams.set(&#39;xyz&#39;, &#39;opq&#39;);\nconsole.log(params.toString());\n// Prints foo=def&amp;abc=def&amp;xyz=opq\n</code></pre>\n"
                },
                {
                  "textRaw": "urlSearchParams.sort()",
                  "type": "method",
                  "name": "sort",
                  "meta": {
                    "added": [
                      "v7.7.0"
                    ],
                    "changes": []
                  },
                  "desc": "<p>Sort all existing name-value pairs in-place by their names. Sorting is done\nwith a <a href=\"https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\">stable sorting algorithm</a>, so relative order between name-value pairs\nwith the same name is preserved.</p>\n<p>This method can be used, in particular, to increase cache hits.</p>\n<pre><code class=\"lang-js\">const params = new URLSearchParams(&#39;query[]=abc&amp;type=search&amp;query[]=123&#39;);\nparams.sort();\nconsole.log(params.toString());\n// Prints query%5B%5D=abc&amp;query%5B%5D=123&amp;type=search\n</code></pre>\n",
                  "signatures": [
                    {
                      "params": []
                    }
                  ]
                },
                {
                  "textRaw": "urlSearchParams.toString()",
                  "type": "method",
                  "name": "toString",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {string} ",
                        "name": "return",
                        "type": "string"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Returns the search parameters serialized as a string, with characters\npercent-encoded where necessary.</p>\n"
                },
                {
                  "textRaw": "urlSearchParams.values()",
                  "type": "method",
                  "name": "values",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Iterator} ",
                        "name": "return",
                        "type": "Iterator"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Returns an ES6 <code>Iterator</code> over the values of each name-value pair.</p>\n"
                },
                {
                  "textRaw": "urlSearchParams\\[Symbol.iterator\\]()",
                  "type": "method",
                  "name": "\\[Symbol.iterator\\]",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Iterator} ",
                        "name": "return",
                        "type": "Iterator"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Returns an ES6 <code>Iterator</code> over each of the name-value pairs in the query string.\nEach item of the iterator is a JavaScript <code>Array</code>. The first item of the <code>Array</code>\nis the <code>name</code>, the second item of the <code>Array</code> is the <code>value</code>.</p>\n<p>Alias for <a href=\"#url_urlsearchparams_entries\"><code>urlSearchParams.entries()</code></a>.</p>\n<pre><code class=\"lang-js\">const params = new URLSearchParams(&#39;foo=bar&amp;xyz=baz&#39;);\nfor (const [name, value] of params) {\n  console.log(name, value);\n}\n// Prints:\n//   foo bar\n//   xyz baz\n</code></pre>\n"
                }
              ],
              "signatures": [
                {
                  "params": [],
                  "desc": "<p>Instantiate a new empty <code>URLSearchParams</code> object.</p>\n"
                },
                {
                  "params": [
                    {
                      "textRaw": "`string` {string} A query string ",
                      "name": "string",
                      "type": "string",
                      "desc": "A query string"
                    }
                  ],
                  "desc": "<p>Parse the <code>string</code> as a query string, and use it to instantiate a new\n<code>URLSearchParams</code> object. A leading <code>&#39;?&#39;</code>, if present, is ignored.</p>\n<pre><code class=\"lang-js\">let params;\n\nparams = new URLSearchParams(&#39;user=abc&amp;query=xyz&#39;);\nconsole.log(params.get(&#39;user&#39;));\n// Prints &#39;abc&#39;\nconsole.log(params.toString());\n// Prints &#39;user=abc&amp;query=xyz&#39;\n\nparams = new URLSearchParams(&#39;?user=abc&amp;query=xyz&#39;);\nconsole.log(params.toString());\n// Prints &#39;user=abc&amp;query=xyz&#39;\n</code></pre>\n"
                },
                {
                  "params": [
                    {
                      "name": "string"
                    }
                  ],
                  "desc": "<p>Parse the <code>string</code> as a query string, and use it to instantiate a new\n<code>URLSearchParams</code> object. A leading <code>&#39;?&#39;</code>, if present, is ignored.</p>\n<pre><code class=\"lang-js\">let params;\n\nparams = new URLSearchParams(&#39;user=abc&amp;query=xyz&#39;);\nconsole.log(params.get(&#39;user&#39;));\n// Prints &#39;abc&#39;\nconsole.log(params.toString());\n// Prints &#39;user=abc&amp;query=xyz&#39;\n\nparams = new URLSearchParams(&#39;?user=abc&amp;query=xyz&#39;);\nconsole.log(params.toString());\n// Prints &#39;user=abc&amp;query=xyz&#39;\n</code></pre>\n"
                },
                {
                  "params": [
                    {
                      "textRaw": "`obj` {Object} An object representing a collection of key-value pairs ",
                      "name": "obj",
                      "type": "Object",
                      "desc": "An object representing a collection of key-value pairs"
                    }
                  ],
                  "desc": "<p>Instantiate a new <code>URLSearchParams</code> object with a query hash map. The key and\nvalue of each property of <code>obj</code> are always coerced to strings.</p>\n<p>Unlike <a href=\"querystring.html\"><code>querystring</code></a> module, duplicate keys in the form of array values are\nnot allowed. Arrays are stringified using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\"><code>array.toString()</code></a>, which simply\njoins all array elements with commas.</p>\n<pre><code class=\"lang-js\">const params = new URLSearchParams({\n  user: &#39;abc&#39;,\n  query: [&#39;first&#39;, &#39;second&#39;]\n});\nconsole.log(params.getAll(&#39;query&#39;));\n// Prints [ &#39;first,second&#39; ]\nconsole.log(params.toString());\n// Prints &#39;user=abc&amp;query=first%2Csecond&#39;\n</code></pre>\n"
                },
                {
                  "params": [
                    {
                      "name": "obj"
                    }
                  ],
                  "desc": "<p>Instantiate a new <code>URLSearchParams</code> object with a query hash map. The key and\nvalue of each property of <code>obj</code> are always coerced to strings.</p>\n<p>Unlike <a href=\"querystring.html\"><code>querystring</code></a> module, duplicate keys in the form of array values are\nnot allowed. Arrays are stringified using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\"><code>array.toString()</code></a>, which simply\njoins all array elements with commas.</p>\n<pre><code class=\"lang-js\">const params = new URLSearchParams({\n  user: &#39;abc&#39;,\n  query: [&#39;first&#39;, &#39;second&#39;]\n});\nconsole.log(params.getAll(&#39;query&#39;));\n// Prints [ &#39;first,second&#39; ]\nconsole.log(params.toString());\n// Prints &#39;user=abc&amp;query=first%2Csecond&#39;\n</code></pre>\n"
                },
                {
                  "params": [
                    {
                      "textRaw": "`iterable` {Iterable} An iterable object whose elements are key-value pairs ",
                      "name": "iterable",
                      "type": "Iterable",
                      "desc": "An iterable object whose elements are key-value pairs"
                    }
                  ],
                  "desc": "<p>Instantiate a new <code>URLSearchParams</code> object with an iterable map in a way that\nis similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a>&#39;s constructor. <code>iterable</code> can be an <code>Array</code> or any\niterable object. That means <code>iterable</code> can be another <code>URLSearchParams</code>, in\nwhich case the constructor will simply create a clone of the provided\n<code>URLSearchParams</code>. Elements of <code>iterable</code> are key-value pairs, and can\nthemselves be any iterable object.</p>\n<p>Duplicate keys are allowed.</p>\n<pre><code class=\"lang-js\">let params;\n\n// Using an array\nparams = new URLSearchParams([\n  [&#39;user&#39;, &#39;abc&#39;],\n  [&#39;query&#39;, &#39;first&#39;],\n  [&#39;query&#39;, &#39;second&#39;]\n]);\nconsole.log(params.toString());\n// Prints &#39;user=abc&amp;query=first&amp;query=second&#39;\n\n// Using a Map object\nconst map = new Map();\nmap.set(&#39;user&#39;, &#39;abc&#39;);\nmap.set(&#39;query&#39;, &#39;xyz&#39;);\nparams = new URLSearchParams(map);\nconsole.log(params.toString());\n// Prints &#39;user=abc&amp;query=xyz&#39;\n\n// Using a generator function\nfunction* getQueryPairs() {\n  yield [&#39;user&#39;, &#39;abc&#39;];\n  yield [&#39;query&#39;, &#39;first&#39;];\n  yield [&#39;query&#39;, &#39;second&#39;];\n}\nparams = new URLSearchParams(getQueryPairs());\nconsole.log(params.toString());\n// Prints &#39;user=abc&amp;query=first&amp;query=second&#39;\n\n// Each key-value pair must have exactly two elements\nnew URLSearchParams([\n  [&#39;user&#39;, &#39;abc&#39;, &#39;error&#39;]\n]);\n// Throws TypeError [ERR_INVALID_TUPLE]:\n//        Each query pair must be an iterable [name, value] tuple\n</code></pre>\n"
                },
                {
                  "params": [
                    {
                      "name": "iterable"
                    }
                  ],
                  "desc": "<p>Instantiate a new <code>URLSearchParams</code> object with an iterable map in a way that\nis similar to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a>&#39;s constructor. <code>iterable</code> can be an <code>Array</code> or any\niterable object. That means <code>iterable</code> can be another <code>URLSearchParams</code>, in\nwhich case the constructor will simply create a clone of the provided\n<code>URLSearchParams</code>. Elements of <code>iterable</code> are key-value pairs, and can\nthemselves be any iterable object.</p>\n<p>Duplicate keys are allowed.</p>\n<pre><code class=\"lang-js\">let params;\n\n// Using an array\nparams = new URLSearchParams([\n  [&#39;user&#39;, &#39;abc&#39;],\n  [&#39;query&#39;, &#39;first&#39;],\n  [&#39;query&#39;, &#39;second&#39;]\n]);\nconsole.log(params.toString());\n// Prints &#39;user=abc&amp;query=first&amp;query=second&#39;\n\n// Using a Map object\nconst map = new Map();\nmap.set(&#39;user&#39;, &#39;abc&#39;);\nmap.set(&#39;query&#39;, &#39;xyz&#39;);\nparams = new URLSearchParams(map);\nconsole.log(params.toString());\n// Prints &#39;user=abc&amp;query=xyz&#39;\n\n// Using a generator function\nfunction* getQueryPairs() {\n  yield [&#39;user&#39;, &#39;abc&#39;];\n  yield [&#39;query&#39;, &#39;first&#39;];\n  yield [&#39;query&#39;, &#39;second&#39;];\n}\nparams = new URLSearchParams(getQueryPairs());\nconsole.log(params.toString());\n// Prints &#39;user=abc&amp;query=first&amp;query=second&#39;\n\n// Each key-value pair must have exactly two elements\nnew URLSearchParams([\n  [&#39;user&#39;, &#39;abc&#39;, &#39;error&#39;]\n]);\n// Throws TypeError [ERR_INVALID_TUPLE]:\n//        Each query pair must be an iterable [name, value] tuple\n</code></pre>\n"
                }
              ]
            }
          ],
          "methods": [
            {
              "textRaw": "url.domainToASCII(domain)",
              "type": "method",
              "name": "domainToASCII",
              "meta": {
                "added": [
                  "v7.4.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string} ",
                    "name": "return",
                    "type": "string"
                  },
                  "params": [
                    {
                      "textRaw": "`domain` {string} ",
                      "name": "domain",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "domain"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns the <a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a> ASCII serialization of the <code>domain</code>. If <code>domain</code> is an\ninvalid domain, the empty string is returned.</p>\n<p>It performs the inverse operation to <a href=\"#url_url_domaintounicode_domain\"><code>url.domainToUnicode()</code></a>.</p>\n<pre><code class=\"lang-js\">const url = require(&#39;url&#39;);\nconsole.log(url.domainToASCII(&#39;español.com&#39;));\n// Prints xn--espaol-zwa.com\nconsole.log(url.domainToASCII(&#39;中文.com&#39;));\n// Prints xn--fiq228c.com\nconsole.log(url.domainToASCII(&#39;xn--iñvalid.com&#39;));\n// Prints an empty string\n</code></pre>\n"
            },
            {
              "textRaw": "url.domainToUnicode(domain)",
              "type": "method",
              "name": "domainToUnicode",
              "meta": {
                "added": [
                  "v7.4.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string} ",
                    "name": "return",
                    "type": "string"
                  },
                  "params": [
                    {
                      "textRaw": "`domain` {string} ",
                      "name": "domain",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "domain"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns the Unicode serialization of the <code>domain</code>. If <code>domain</code> is an invalid\ndomain, the empty string is returned.</p>\n<p>It performs the inverse operation to <a href=\"#url_url_domaintoascii_domain\"><code>url.domainToASCII()</code></a>.</p>\n<pre><code class=\"lang-js\">const url = require(&#39;url&#39;);\nconsole.log(url.domainToUnicode(&#39;xn--espaol-zwa.com&#39;));\n// Prints español.com\nconsole.log(url.domainToUnicode(&#39;xn--fiq228c.com&#39;));\n// Prints 中文.com\nconsole.log(url.domainToUnicode(&#39;xn--iñvalid.com&#39;));\n// Prints an empty string\n</code></pre>\n"
            },
            {
              "textRaw": "url.format(URL[, options])",
              "type": "method",
              "name": "format",
              "meta": {
                "added": [
                  "v7.6.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string} ",
                    "name": "return",
                    "type": "string"
                  },
                  "params": [
                    {
                      "textRaw": "`URL` {URL} A [WHATWG URL][] object ",
                      "name": "URL",
                      "type": "URL",
                      "desc": "A [WHATWG URL][] object"
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`auth` {boolean} `true` if the serialized URL string should include the username and password, `false` otherwise. **Default:** `true`. ",
                          "name": "auth",
                          "type": "boolean",
                          "default": "`true`",
                          "desc": "`true` if the serialized URL string should include the username and password, `false` otherwise."
                        },
                        {
                          "textRaw": "`fragment` {boolean} `true` if the serialized URL string should include the fragment, `false` otherwise. **Default:** `true`. ",
                          "name": "fragment",
                          "type": "boolean",
                          "default": "`true`",
                          "desc": "`true` if the serialized URL string should include the fragment, `false` otherwise."
                        },
                        {
                          "textRaw": "`search` {boolean} `true` if the serialized URL string should include the search query, `false` otherwise. **Default:** `true`. ",
                          "name": "search",
                          "type": "boolean",
                          "default": "`true`",
                          "desc": "`true` if the serialized URL string should include the search query, `false` otherwise."
                        },
                        {
                          "textRaw": "`unicode` {boolean} `true` if Unicode characters appearing in the host component of the URL string should be encoded directly as opposed to being Punycode encoded. **Default:** `false`. ",
                          "name": "unicode",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "`true` if Unicode characters appearing in the host component of the URL string should be encoded directly as opposed to being Punycode encoded."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "URL"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Returns a customizable serialization of a URL <code>String</code> representation of a\n<a href=\"#url_the_whatwg_url_api\">WHATWG URL</a> object.</p>\n<p>The URL object has both a <code>toString()</code> method and <code>href</code> property that return\nstring serializations of the URL. These are not, however, customizable in\nany way. The <code>url.format(URL[, options])</code> method allows for basic customization\nof the output.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://a:b@你好你好?abc#foo&#39;);\n\nconsole.log(myURL.href);\n// Prints https://a:b@xn--6qqa088eba/?abc#foo\n\nconsole.log(myURL.toString());\n// Prints https://a:b@xn--6qqa088eba/?abc#foo\n\nconsole.log(url.format(myURL, { fragment: false, unicode: true, auth: false }));\n// Prints &#39;https://你好你好/?abc&#39;\n</code></pre>\n"
            }
          ],
          "type": "module",
          "displayName": "The WHATWG URL API"
        },
        {
          "textRaw": "Legacy URL API",
          "name": "legacy_url_api",
          "modules": [
            {
              "textRaw": "Legacy `urlObject`",
              "name": "legacy_`urlobject`",
              "desc": "<p>The legacy <code>urlObject</code> (<code>require(&#39;url&#39;).Url</code>) is created and returned by the\n<code>url.parse()</code> function.</p>\n",
              "properties": [
                {
                  "textRaw": "urlObject.auth",
                  "name": "auth",
                  "desc": "<p>The <code>auth</code> property is the username and password portion of the URL, also\nreferred to as &quot;userinfo&quot;. This string subset follows the <code>protocol</code> and\ndouble slashes (if present) and precedes the <code>host</code> component, delimited by an\nASCII &quot;at sign&quot; (<code>@</code>). The format of the string is <code>{username}[:{password}]</code>,\nwith the <code>[:{password}]</code> portion being optional.</p>\n<p>For example: <code>&#39;user:pass&#39;</code>.</p>\n"
                },
                {
                  "textRaw": "urlObject.hash",
                  "name": "hash",
                  "desc": "<p>The <code>hash</code> property consists of the &quot;fragment&quot; portion of the URL including\nthe leading ASCII hash (<code>#</code>) character.</p>\n<p>For example: <code>&#39;#hash&#39;</code>.</p>\n"
                },
                {
                  "textRaw": "urlObject.host",
                  "name": "host",
                  "desc": "<p>The <code>host</code> property is the full lower-cased host portion of the URL, including\nthe <code>port</code> if specified.</p>\n<p>For example: <code>&#39;sub.host.com:8080&#39;</code>.</p>\n"
                },
                {
                  "textRaw": "urlObject.hostname",
                  "name": "hostname",
                  "desc": "<p>The <code>hostname</code> property is the lower-cased host name portion of the <code>host</code>\ncomponent <em>without</em> the <code>port</code> included.</p>\n<p>For example: <code>&#39;sub.host.com&#39;</code>.</p>\n"
                },
                {
                  "textRaw": "urlObject.href",
                  "name": "href",
                  "desc": "<p>The <code>href</code> property is the full URL string that was parsed with both the\n<code>protocol</code> and <code>host</code> components converted to lower-case.</p>\n<p>For example: <code>&#39;http://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash&#39;</code>.</p>\n"
                },
                {
                  "textRaw": "urlObject.path",
                  "name": "path",
                  "desc": "<p>The <code>path</code> property is a concatenation of the <code>pathname</code> and <code>search</code>\ncomponents.</p>\n<p>For example: <code>&#39;/p/a/t/h?query=string&#39;</code>.</p>\n<p>No decoding of the <code>path</code> is performed.</p>\n"
                },
                {
                  "textRaw": "urlObject.pathname",
                  "name": "pathname",
                  "desc": "<p>The <code>pathname</code> property consists of the entire path section of the URL. This\nis everything following the <code>host</code> (including the <code>port</code>) and before the start\nof the <code>query</code> or <code>hash</code> components, delimited by either the ASCII question\nmark (<code>?</code>) or hash (<code>#</code>) characters.</p>\n<p>For example <code>&#39;/p/a/t/h&#39;</code>.</p>\n<p>No decoding of the path string is performed.</p>\n"
                },
                {
                  "textRaw": "urlObject.port",
                  "name": "port",
                  "desc": "<p>The <code>port</code> property is the numeric port portion of the <code>host</code> component.</p>\n<p>For example: <code>&#39;8080&#39;</code>.</p>\n"
                },
                {
                  "textRaw": "urlObject.protocol",
                  "name": "protocol",
                  "desc": "<p>The <code>protocol</code> property identifies the URL&#39;s lower-cased protocol scheme.</p>\n<p>For example: <code>&#39;http:&#39;</code>.</p>\n"
                },
                {
                  "textRaw": "urlObject.query",
                  "name": "query",
                  "desc": "<p>The <code>query</code> property is either the query string without the leading ASCII\nquestion mark (<code>?</code>), or an object returned by the <a href=\"querystring.html\"><code>querystring</code></a> module&#39;s\n<code>parse()</code> method. Whether the <code>query</code> property is a string or object is\ndetermined by the <code>parseQueryString</code> argument passed to <code>url.parse()</code>.</p>\n<p>For example: <code>&#39;query=string&#39;</code> or <code>{&#39;query&#39;: &#39;string&#39;}</code>.</p>\n<p>If returned as a string, no decoding of the query string is performed. If\nreturned as an object, both keys and values are decoded.</p>\n"
                },
                {
                  "textRaw": "urlObject.search",
                  "name": "search",
                  "desc": "<p>The <code>search</code> property consists of the entire &quot;query string&quot; portion of the\nURL, including the leading ASCII question mark (<code>?</code>) character.</p>\n<p>For example: <code>&#39;?query=string&#39;</code>.</p>\n<p>No decoding of the query string is performed.</p>\n"
                },
                {
                  "textRaw": "urlObject.slashes",
                  "name": "slashes",
                  "desc": "<p>The <code>slashes</code> property is a <code>boolean</code> with a value of <code>true</code> if two ASCII\nforward-slash characters (<code>/</code>) are required following the colon in the\n<code>protocol</code>.</p>\n"
                }
              ],
              "type": "module",
              "displayName": "Legacy `urlObject`"
            }
          ],
          "methods": [
            {
              "textRaw": "url.format(urlObject)",
              "type": "method",
              "name": "format",
              "meta": {
                "added": [
                  "v0.1.25"
                ],
                "changes": [
                  {
                    "version": "v7.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/7234",
                    "description": "URLs with a `file:` scheme will now always use the correct number of slashes regardless of `slashes` option. A false-y `slashes` option with no protocol is now also respected at all times."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`urlObject` {Object|string} A URL object (as returned by `url.parse()` or constructed otherwise). If a string, it is converted to an object by passing it to `url.parse()`. ",
                      "name": "urlObject",
                      "type": "Object|string",
                      "desc": "A URL object (as returned by `url.parse()` or constructed otherwise). If a string, it is converted to an object by passing it to `url.parse()`."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "urlObject"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>url.format()</code> method returns a formatted URL string derived from\n<code>urlObject</code>.</p>\n<pre><code class=\"lang-js\">url.format({\n  protocol: &#39;https&#39;,\n  hostname: &#39;example.com&#39;,\n  pathname: &#39;/some/path&#39;,\n  query: {\n    page: 1,\n    format: &#39;json&#39;\n  }\n});\n\n// =&gt; &#39;https://example.com/some/path?page=1&amp;format=json&#39;\n</code></pre>\n<p>If <code>urlObject</code> is not an object or a string, <code>url.format()</code> will throw a\n<a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a>.</p>\n<p>The formatting process operates as follows:</p>\n<ul>\n<li>A new empty string <code>result</code> is created.</li>\n<li>If <code>urlObject.protocol</code> is a string, it is appended as-is to <code>result</code>.</li>\n<li>Otherwise, if <code>urlObject.protocol</code> is not <code>undefined</code> and is not a string, an\n<a href=\"errors.html#errors_class_error\"><code>Error</code></a> is thrown.</li>\n<li>For all string values of <code>urlObject.protocol</code> that <em>do not end</em> with an ASCII\ncolon (<code>:</code>) character, the literal string <code>:</code> will be appended to <code>result</code>.</li>\n<li>If either of the following conditions is true, then the literal string <code>//</code>\nwill be appended to <code>result</code>:<ul>\n<li><code>urlObject.slashes</code> property is true;</li>\n<li><code>urlObject.protocol</code> begins with <code>http</code>, <code>https</code>, <code>ftp</code>, <code>gopher</code>, or\n<code>file</code>;</li>\n</ul>\n</li>\n<li>If the value of the <code>urlObject.auth</code> property is truthy, and either\n<code>urlObject.host</code> or <code>urlObject.hostname</code> are not <code>undefined</code>, the value of\n<code>urlObject.auth</code> will be coerced into a string and appended to <code>result</code>\n followed by the literal string <code>@</code>.</li>\n<li>If the <code>urlObject.host</code> property is <code>undefined</code> then:<ul>\n<li>If the <code>urlObject.hostname</code> is a string, it is appended to <code>result</code>.</li>\n<li>Otherwise, if <code>urlObject.hostname</code> is not <code>undefined</code> and is not a string,\nan <a href=\"errors.html#errors_class_error\"><code>Error</code></a> is thrown.</li>\n<li>If the <code>urlObject.port</code> property value is truthy, and <code>urlObject.hostname</code>\nis not <code>undefined</code>:<ul>\n<li>The literal string <code>:</code> is appended to <code>result</code>, and</li>\n<li>The value of <code>urlObject.port</code> is coerced to a string and appended to\n<code>result</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Otherwise, if the <code>urlObject.host</code> property value is truthy, the value of\n<code>urlObject.host</code> is coerced to a string and appended to <code>result</code>.</li>\n<li>If the <code>urlObject.pathname</code> property is a string that is not an empty string:<ul>\n<li>If the <code>urlObject.pathname</code> <em>does not start</em> with an ASCII forward slash\n(<code>/</code>), then the literal string <code>&#39;/&#39;</code> is appended to <code>result</code>.</li>\n<li>The value of <code>urlObject.pathname</code> is appended to <code>result</code>.</li>\n</ul>\n</li>\n<li>Otherwise, if <code>urlObject.pathname</code> is not <code>undefined</code> and is not a string, an\n<a href=\"errors.html#errors_class_error\"><code>Error</code></a> is thrown.</li>\n<li>If the <code>urlObject.search</code> property is <code>undefined</code> and if the <code>urlObject.query</code>\nproperty is an <code>Object</code>, the literal string <code>?</code> is appended to <code>result</code>\nfollowed by the output of calling the <a href=\"querystring.html\"><code>querystring</code></a> module&#39;s <code>stringify()</code>\nmethod passing the value of <code>urlObject.query</code>.</li>\n<li>Otherwise, if <code>urlObject.search</code> is a string:<ul>\n<li>If the value of <code>urlObject.search</code> <em>does not start</em> with the ASCII question\nmark (<code>?</code>) character, the literal string <code>?</code> is appended to <code>result</code>.</li>\n<li>The value of <code>urlObject.search</code> is appended to <code>result</code>.</li>\n</ul>\n</li>\n<li>Otherwise, if <code>urlObject.search</code> is not <code>undefined</code> and is not a string, an\n<a href=\"errors.html#errors_class_error\"><code>Error</code></a> is thrown.</li>\n<li>If the <code>urlObject.hash</code> property is a string:<ul>\n<li>If the value of <code>urlObject.hash</code> <em>does not start</em> with the ASCII hash (<code>#</code>)\ncharacter, the literal string <code>#</code> is appended to <code>result</code>.</li>\n<li>The value of <code>urlObject.hash</code> is appended to <code>result</code>.</li>\n</ul>\n</li>\n<li>Otherwise, if the <code>urlObject.hash</code> property is not <code>undefined</code> and is not a\nstring, an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> is thrown.</li>\n<li><code>result</code> is returned.</li>\n</ul>\n"
            },
            {
              "textRaw": "url.parse(urlString[, parseQueryString[, slashesDenoteHost]])",
              "type": "method",
              "name": "parse",
              "meta": {
                "added": [
                  "v0.1.25"
                ],
                "changes": [
                  {
                    "version": "v9.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/13606",
                    "description": "The `search` property on the returned URL object is now `null` when no query string is present."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`urlString` {string} The URL string to parse. ",
                      "name": "urlString",
                      "type": "string",
                      "desc": "The URL string to parse."
                    },
                    {
                      "textRaw": "`parseQueryString` {boolean} If `true`, the `query` property will always be set to an object returned by the [`querystring`][] module's `parse()` method. If `false`, the `query` property on the returned URL object will be an unparsed, undecoded string. **Default:** `false`. ",
                      "name": "parseQueryString",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "If `true`, the `query` property will always be set to an object returned by the [`querystring`][] module's `parse()` method. If `false`, the `query` property on the returned URL object will be an unparsed, undecoded string.",
                      "optional": true
                    },
                    {
                      "textRaw": "`slashesDenoteHost` {boolean} If `true`, the first token after the literal string `//` and preceding the next `/` will be interpreted as the `host`. For instance, given `//foo/bar`, the result would be `{host: 'foo', pathname: '/bar'}` rather than `{pathname: '//foo/bar'}`. **Default:** `false`. ",
                      "name": "slashesDenoteHost",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "If `true`, the first token after the literal string `//` and preceding the next `/` will be interpreted as the `host`. For instance, given `//foo/bar`, the result would be `{host: 'foo', pathname: '/bar'}` rather than `{pathname: '//foo/bar'}`.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "urlString"
                    },
                    {
                      "name": "parseQueryString",
                      "optional": true
                    },
                    {
                      "name": "slashesDenoteHost",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>url.parse()</code> method takes a URL string, parses it, and returns a URL\nobject.</p>\n<p>A <code>TypeError</code> is thrown if <code>urlString</code> is not a string.</p>\n<p>A <code>URIError</code> is thrown if the <code>auth</code> property is present but cannot be decoded.</p>\n"
            },
            {
              "textRaw": "url.resolve(from, to)",
              "type": "method",
              "name": "resolve",
              "meta": {
                "added": [
                  "v0.1.25"
                ],
                "changes": [
                  {
                    "version": "v6.6.0",
                    "pr-url": "https://github.com/nodejs/node/pull/8215",
                    "description": "The `auth` fields are now kept intact when `from` and `to` refer to the same host."
                  },
                  {
                    "version": "v6.5.0, v4.6.2",
                    "pr-url": "https://github.com/nodejs/node/pull/8214",
                    "description": "The `port` field is copied correctly now."
                  },
                  {
                    "version": "v6.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/1480",
                    "description": "The `auth` fields is cleared now the `to` parameter contains a hostname."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`from` {string} The Base URL being resolved against. ",
                      "name": "from",
                      "type": "string",
                      "desc": "The Base URL being resolved against."
                    },
                    {
                      "textRaw": "`to` {string} The HREF URL being resolved. ",
                      "name": "to",
                      "type": "string",
                      "desc": "The HREF URL being resolved."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "from"
                    },
                    {
                      "name": "to"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>url.resolve()</code> method resolves a target URL relative to a base URL in a\nmanner similar to that of a Web browser resolving an anchor tag HREF.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">const url = require(&#39;url&#39;);\nurl.resolve(&#39;/one/two/three&#39;, &#39;four&#39;);         // &#39;/one/two/four&#39;\nurl.resolve(&#39;http://example.com/&#39;, &#39;/one&#39;);    // &#39;http://example.com/one&#39;\nurl.resolve(&#39;http://example.com/one&#39;, &#39;/two&#39;); // &#39;http://example.com/two&#39;\n</code></pre>\n<p><a id=\"whatwg-percent-encoding\"></a></p>\n"
            }
          ],
          "type": "module",
          "displayName": "Legacy URL API"
        },
        {
          "textRaw": "Percent-Encoding in URLs",
          "name": "percent-encoding_in_urls",
          "desc": "<p>URLs are permitted to only contain a certain range of characters. Any character\nfalling outside of that range must be encoded. How such characters are encoded,\nand which characters to encode depends entirely on where the character is\nlocated within the structure of the URL.</p>\n",
          "modules": [
            {
              "textRaw": "Legacy API",
              "name": "legacy_api",
              "desc": "<p>Within the Legacy API, spaces (<code>&#39; &#39;</code>) and the following characters will be\nautomatically escaped in the properties of URL objects:</p>\n<pre><code class=\"lang-txt\">&lt; &gt; &quot; ` \\r \\n \\t { } | \\ ^ &#39;\n</code></pre>\n<p>For example, the ASCII space character (<code>&#39; &#39;</code>) is encoded as <code>%20</code>. The ASCII\nforward slash (<code>/</code>) character is encoded as <code>%3C</code>.</p>\n",
              "type": "module",
              "displayName": "Legacy API"
            },
            {
              "textRaw": "WHATWG API",
              "name": "whatwg_api",
              "desc": "<p>The <a href=\"https://url.spec.whatwg.org/\">WHATWG URL Standard</a> uses a more selective and fine grained approach to\nselecting encoded characters than that used by the Legacy API.</p>\n<p>The WHATWG algorithm defines four &quot;percent-encode sets&quot; that describe ranges\nof characters that must be percent-encoded:</p>\n<ul>\n<li><p>The <em>C0 control percent-encode set</em> includes code points in range U+0000 to\nU+001F (inclusive) and all code points greater than U+007E.</p>\n</li>\n<li><p>The <em>fragment percent-encode set</em> includes the <em>C0 control percent-encode set</em>\nand code points U+0020, U+0022, U+003C, U+003E, and U+0060.</p>\n</li>\n<li><p>The <em>path percent-encode set</em> includes the <em>C0 control percent-encode set</em>\nand code points U+0020, U+0022, U+0023, U+003C, U+003E, U+003F, U+0060,\nU+007B, and U+007D.</p>\n</li>\n<li><p>The <em>userinfo encode set</em> includes the <em>path percent-encode set</em> and code\npoints U+002F, U+003A, U+003B, U+003D, U+0040, U+005B, U+005C, U+005D,\nU+005E, and U+007C.</p>\n</li>\n</ul>\n<p>The <em>userinfo percent-encode set</em> is used exclusively for username and\npasswords encoded within the URL. The <em>path percent-encode set</em> is used for the\npath of most URLs. The <em>fragment percent-encode set</em> is used for URL fragments.\nThe <em>C0 control percent-encode set</em> is used for host and path under certain\nspecific conditions, in addition to all other cases.</p>\n<p>When non-ASCII characters appear within a hostname, the hostname is encoded\nusing the <a href=\"https://tools.ietf.org/html/rfc5891#section-4.4\">Punycode</a> algorithm. Note, however, that a hostname <em>may</em> contain\n<em>both</em> Punycode encoded and percent-encoded characters. For example:</p>\n<pre><code class=\"lang-js\">const myURL = new URL(&#39;https://%CF%80.com/foo&#39;);\nconsole.log(myURL.href);\n// Prints https://xn--1xa.com/foo\nconsole.log(myURL.origin);\n// Prints https://π.com\n</code></pre>\n<!-- [end-include:url.md] -->\n<!-- [start-include:util.md] -->\n",
              "type": "module",
              "displayName": "WHATWG API"
            }
          ],
          "type": "module",
          "displayName": "Percent-Encoding in URLs"
        }
      ],
      "type": "module",
      "displayName": "URL"
    },
    {
      "textRaw": "Util",
      "name": "util",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>util</code> module is primarily designed to support the needs of Node.js&#39; own\ninternal APIs. However, many of the utilities are useful for application and\nmodule developers as well. It can be accessed using:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n</code></pre>\n",
      "methods": [
        {
          "textRaw": "util.callbackify(original)",
          "type": "method",
          "name": "callbackify",
          "meta": {
            "added": [
              "v8.2.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Function} a callback style function ",
                "name": "return",
                "type": "Function",
                "desc": "a callback style function"
              },
              "params": [
                {
                  "textRaw": "`original` {Function} An `async` function ",
                  "name": "original",
                  "type": "Function",
                  "desc": "An `async` function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "original"
                }
              ]
            }
          ],
          "desc": "<p>Takes an <code>async</code> function (or a function that returns a <code>Promise</code>) and returns a\nfunction following the error-first callback style, i.e. taking\nan <code>(err, value) =&gt; ...</code> callback as the last argument. In the callback, the\nfirst argument will be the rejection reason (or <code>null</code> if the <code>Promise</code>\nresolved), and the second argument will be the resolved value.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nasync function fn() {\n  return &#39;hello world&#39;;\n}\nconst callbackFunction = util.callbackify(fn);\n\ncallbackFunction((err, ret) =&gt; {\n  if (err) throw err;\n  console.log(ret);\n});\n</code></pre>\n<p>Will print:</p>\n<pre><code class=\"lang-txt\">hello world\n</code></pre>\n<p>The callback is executed asynchronously, and will have a limited stack trace.\nIf the callback throws, the process will emit an <a href=\"process.html#process_event_uncaughtexception\"><code>&#39;uncaughtException&#39;</code></a>\nevent, and if not handled will exit.</p>\n<p>Since <code>null</code> has a special meaning as the first argument to a callback, if a\nwrapped function rejects a <code>Promise</code> with a falsy value as a reason, the value\nis wrapped in an <code>Error</code> with the original value stored in a field named\n<code>reason</code>.</p>\n<pre><code class=\"lang-js\">function fn() {\n  return Promise.reject(null);\n}\nconst callbackFunction = util.callbackify(fn);\n\ncallbackFunction((err, ret) =&gt; {\n  // When the Promise was rejected with `null` it is wrapped with an Error and\n  // the original value is stored in `reason`.\n  err &amp;&amp; err.hasOwnProperty(&#39;reason&#39;) &amp;&amp; err.reason === null;  // true\n});\n</code></pre>\n"
        },
        {
          "textRaw": "util.debuglog(section)",
          "type": "method",
          "name": "debuglog",
          "meta": {
            "added": [
              "v0.11.3"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Function} The logging function ",
                "name": "return",
                "type": "Function",
                "desc": "The logging function"
              },
              "params": [
                {
                  "textRaw": "`section` {string} A string identifying the portion of the application for which the `debuglog` function is being created. ",
                  "name": "section",
                  "type": "string",
                  "desc": "A string identifying the portion of the application for which the `debuglog` function is being created."
                }
              ]
            },
            {
              "params": [
                {
                  "name": "section"
                }
              ]
            }
          ],
          "desc": "<p>The <code>util.debuglog()</code> method is used to create a function that conditionally\nwrites debug messages to <code>stderr</code> based on the existence of the <code>NODE_DEBUG</code>\nenvironment variable. If the <code>section</code> name appears within the value of that\nenvironment variable, then the returned function operates similar to\n<a href=\"console.html#console_console_error_data_args\"><code>console.error()</code></a>. If not, then the returned function is a no-op.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst debuglog = util.debuglog(&#39;foo&#39;);\n\ndebuglog(&#39;hello from foo [%d]&#39;, 123);\n</code></pre>\n<p>If this program is run with <code>NODE_DEBUG=foo</code> in the environment, then\nit will output something like:</p>\n<pre><code class=\"lang-txt\">FOO 3245: hello from foo [123]\n</code></pre>\n<p>where <code>3245</code> is the process id. If it is not run with that\nenvironment variable set, then it will not print anything.</p>\n<p>The <code>section</code> supports wildcard also:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst debuglog = util.debuglog(&#39;foo-bar&#39;);\n\ndebuglog(&#39;hi there, it\\&#39;s foo-bar [%d]&#39;, 2333);\n</code></pre>\n<p>if it is run with <code>NODE_DEBUG=foo*</code> in the environment, then it will output\nsomething like:</p>\n<pre><code class=\"lang-txt\">FOO-BAR 3257: hi there, it&#39;s foo-bar [2333]\n</code></pre>\n<p>Multiple comma-separated <code>section</code> names may be specified in the <code>NODE_DEBUG</code>\nenvironment variable: <code>NODE_DEBUG=fs,net,tls</code>.</p>\n"
        },
        {
          "textRaw": "util.deprecate(fn, msg[, code])",
          "type": "method",
          "name": "deprecate",
          "meta": {
            "added": [
              "v0.8.0"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/16393",
                "description": "Deprecation warnings are only emitted once for each code."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Function} The deprecated function wrapped to emit a warning. ",
                "name": "return",
                "type": "Function",
                "desc": "The deprecated function wrapped to emit a warning."
              },
              "params": [
                {
                  "textRaw": "`fn` {Function} The function that is being deprecated. ",
                  "name": "fn",
                  "type": "Function",
                  "desc": "The function that is being deprecated."
                },
                {
                  "textRaw": "`msg` {string} A warning message to display when the deprecated function is invoked. ",
                  "name": "msg",
                  "type": "string",
                  "desc": "A warning message to display when the deprecated function is invoked."
                },
                {
                  "textRaw": "`code` {string} A deprecation code. See the [list of deprecated APIs][] for a list of codes. ",
                  "name": "code",
                  "type": "string",
                  "desc": "A deprecation code. See the [list of deprecated APIs][] for a list of codes.",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fn"
                },
                {
                  "name": "msg"
                },
                {
                  "name": "code",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>util.deprecate()</code> method wraps <code>fn</code> (which may be a function or class) in\nsuch a way that it is marked as deprecated.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nexports.obsoleteFunction = util.deprecate(() =&gt; {\n  // Do something here.\n}, &#39;obsoleteFunction() is deprecated. Use newShinyFunction() instead.&#39;);\n</code></pre>\n<p>When called, <code>util.deprecate()</code> will return a function that will emit a\n<code>DeprecationWarning</code> using the <a href=\"process.html#process_event_warning\"><code>&#39;warning&#39;</code></a> event. The warning will\nbe emitted and printed to <code>stderr</code> the first time the returned function is\ncalled. After the warning is emitted, the wrapped function is called without\nemitting a warning.</p>\n<p>If the same optional <code>code</code> is supplied in multiple calls to <code>util.deprecate()</code>,\nthe warning will be emitted only once for that <code>code</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nconst fn1 = util.deprecate(someFunction, someMessage, &#39;DEP0001&#39;);\nconst fn2 = util.deprecate(someOtherFunction, someOtherMessage, &#39;DEP0001&#39;);\nfn1(); // emits a deprecation warning with code DEP0001\nfn2(); // does not emit a deprecation warning because it has the same code\n</code></pre>\n<p>If either the <code>--no-deprecation</code> or <code>--no-warnings</code> command line flags are\nused, or if the <code>process.noDeprecation</code> property is set to <code>true</code> <em>prior</em> to\nthe first deprecation warning, the <code>util.deprecate()</code> method does nothing.</p>\n<p>If the <code>--trace-deprecation</code> or <code>--trace-warnings</code> command line flags are set,\nor the <code>process.traceDeprecation</code> property is set to <code>true</code>, a warning and a\nstack trace are printed to <code>stderr</code> the first time the deprecated function is\ncalled.</p>\n<p>If the <code>--throw-deprecation</code> command line flag is set, or the\n<code>process.throwDeprecation</code> property is set to <code>true</code>, then an exception will be\nthrown when the deprecated function is called.</p>\n<p>The <code>--throw-deprecation</code> command line flag and <code>process.throwDeprecation</code>\nproperty take precedence over <code>--trace-deprecation</code> and\n<code>process.traceDeprecation</code>.</p>\n"
        },
        {
          "textRaw": "util.format(format[, ...args])",
          "type": "method",
          "name": "format",
          "meta": {
            "added": [
              "v0.5.3"
            ],
            "changes": [
              {
                "version": "v8.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/14558",
                "description": "The `%o` and `%O` specifiers are supported now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`format` {string} A `printf`-like format string. ",
                  "name": "format",
                  "type": "string",
                  "desc": "A `printf`-like format string."
                },
                {
                  "name": "...args",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "format"
                },
                {
                  "name": "...args",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>util.format()</code> method returns a formatted string using the first argument\nas a <code>printf</code>-like format.</p>\n<p>The first argument is a string containing zero or more <em>placeholder</em> tokens.\nEach placeholder token is replaced with the converted value from the\ncorresponding argument. Supported placeholders are:</p>\n<ul>\n<li><code>%s</code> - <code>String</code>.</li>\n<li><code>%d</code> - <code>Number</code> (integer or floating point value).</li>\n<li><code>%i</code> - Integer.</li>\n<li><code>%f</code> - Floating point value.</li>\n<li><code>%j</code> - JSON. Replaced with the string <code>&#39;[Circular]&#39;</code> if the argument\ncontains circular references.</li>\n<li><code>%o</code> - <code>Object</code>. A string representation of an object\nwith generic JavaScript object formatting.\nSimilar to <code>util.inspect()</code> with options\n<code>{ showHidden: true, showProxy: true }</code>. This will show the full object\nincluding non-enumerable properties and proxies.</li>\n<li><code>%O</code> - <code>Object</code>. A string representation of an object with generic JavaScript\nobject formatting. Similar to <code>util.inspect()</code> without options. This will show\nthe full object not including non-enumerable properties and proxies.</li>\n<li><code>%%</code> - single percent sign (<code>&#39;%&#39;</code>). This does not consume an argument.</li>\n<li>Returns: {string} The formatted string</li>\n</ul>\n<p>If the placeholder does not have a corresponding argument, the placeholder is\nnot replaced.</p>\n<pre><code class=\"lang-js\">util.format(&#39;%s:%s&#39;, &#39;foo&#39;);\n// Returns: &#39;foo:%s&#39;\n</code></pre>\n<p>If there are more arguments passed to the <code>util.format()</code> method than the number\nof placeholders, the extra arguments are coerced into strings then concatenated\nto the returned string, each delimited by a space. Excessive arguments whose\n<code>typeof</code> is <code>&#39;object&#39;</code> or <code>&#39;symbol&#39;</code> (except <code>null</code>) will be transformed by\n<code>util.inspect()</code>.</p>\n<pre><code class=\"lang-js\">util.format(&#39;%s:%s&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;); // &#39;foo:bar baz&#39;\n</code></pre>\n<p>If the first argument is not a string then <code>util.format()</code> returns\na string that is the concatenation of all arguments separated by spaces.\nEach argument is converted to a string using <code>util.inspect()</code>.</p>\n<pre><code class=\"lang-js\">util.format(1, 2, 3); // &#39;1 2 3&#39;\n</code></pre>\n<p>If only one argument is passed to <code>util.format()</code>, it is returned as it is\nwithout any formatting.</p>\n<pre><code class=\"lang-js\">util.format(&#39;%% %s&#39;); // &#39;%% %s&#39;\n</code></pre>\n<p>Please note that <code>util.format()</code> is a synchronous method that is mainly\nintended as a debugging tool. Some input values can have a significant\nperformance overhead that can block the event loop. Use this function\nwith care and never in a hot code path.</p>\n"
        },
        {
          "textRaw": "util.formatWithOptions(inspectOptions, format[, ...args])",
          "type": "method",
          "name": "formatWithOptions",
          "meta": {
            "added": [
              "v10.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`inspectOptions` {Object} ",
                  "name": "inspectOptions",
                  "type": "Object"
                },
                {
                  "textRaw": "`format` {string} ",
                  "name": "format",
                  "type": "string"
                },
                {
                  "name": "...args",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "inspectOptions"
                },
                {
                  "name": "format"
                },
                {
                  "name": "...args",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>This function is identical to <a href=\"#util_util_format_format_args\"><code>util.format()</code></a>, except in that it takes\nan <code>inspectOptions</code> argument which specifies options that are passed along to\n<a href=\"#util_util_inspect_object_options\"><code>util.inspect()</code></a>.</p>\n<pre><code class=\"lang-js\">util.formatWithOptions({ colors: true }, &#39;See object %O&#39;, { foo: 42 });\n// Returns &#39;See object { foo: 42 }&#39;, where `42` is colored as a number\n// when printed to a terminal.\n</code></pre>\n"
        },
        {
          "textRaw": "util.getSystemErrorName(err)",
          "type": "method",
          "name": "getSystemErrorName",
          "meta": {
            "added": [
              "v9.7.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": [
                {
                  "textRaw": "`err` {number} ",
                  "name": "err",
                  "type": "number"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "err"
                }
              ]
            }
          ],
          "desc": "<p>Returns the string name for a numeric error code that comes from a Node.js API.\nThe mapping between error codes and error names is platform-dependent.\nSee <a href=\"errors.html#errors_common_system_errors\">Common System Errors</a> for the names of common errors.</p>\n<pre><code class=\"lang-js\">fs.access(&#39;file/that/does/not/exist&#39;, (err) =&gt; {\n  const name = util.getSystemErrorName(err.errno);\n  console.error(name);  // ENOENT\n});\n</code></pre>\n"
        },
        {
          "textRaw": "util.inherits(constructor, superConstructor)",
          "type": "method",
          "name": "inherits",
          "meta": {
            "added": [
              "v0.3.0"
            ],
            "changes": [
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/3455",
                "description": "The `constructor` parameter can refer to an ES6 class now."
              }
            ]
          },
          "desc": "<p>Usage of <code>util.inherits()</code> is discouraged. Please use the ES6 <code>class</code> and\n<code>extends</code> keywords to get language level inheritance support. Also note\nthat the two styles are <a href=\"https://github.com/nodejs/node/issues/4179\">semantically incompatible</a>.</p>\n<ul>\n<li><code>constructor</code> {Function}</li>\n<li><code>superConstructor</code> {Function}</li>\n</ul>\n<p>Inherit the prototype methods from one <a href=\"https://developer.mozilla.org/en-US/JavaScript/Reference/Global_Objects/Object/constructor\">constructor</a> into another. The\nprototype of <code>constructor</code> will be set to a new object created from\n<code>superConstructor</code>.</p>\n<p>As an additional convenience, <code>superConstructor</code> will be accessible\nthrough the <code>constructor.super_</code> property.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst EventEmitter = require(&#39;events&#39;);\n\nfunction MyStream() {\n  EventEmitter.call(this);\n}\n\nutil.inherits(MyStream, EventEmitter);\n\nMyStream.prototype.write = function(data) {\n  this.emit(&#39;data&#39;, data);\n};\n\nconst stream = new MyStream();\n\nconsole.log(stream instanceof EventEmitter); // true\nconsole.log(MyStream.super_ === EventEmitter); // true\n\nstream.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`Received data: &quot;${data}&quot;`);\n});\nstream.write(&#39;It works!&#39;); // Received data: &quot;It works!&quot;\n</code></pre>\n<p>ES6 example using <code>class</code> and <code>extends</code>:</p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\n\nclass MyStream extends EventEmitter {\n  write(data) {\n    this.emit(&#39;data&#39;, data);\n  }\n}\n\nconst stream = new MyStream();\n\nstream.on(&#39;data&#39;, (data) =&gt; {\n  console.log(`Received data: &quot;${data}&quot;`);\n});\nstream.write(&#39;With ES6&#39;);\n</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "constructor"
                },
                {
                  "name": "superConstructor"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "util.inspect(object[, options])",
          "type": "method",
          "name": "inspect",
          "meta": {
            "added": [
              "v0.3.0"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/19259",
                "description": "The `WeakMap` and `WeakSet` entries can now be inspected."
              },
              {
                "version": "v9.9.0",
                "pr-url": "https://github.com/nodejs/node/pull/17576",
                "description": "The `compact` option is supported now."
              },
              {
                "version": "v6.6.0",
                "pr-url": "https://github.com/nodejs/node/pull/8174",
                "description": "Custom inspection functions can now return `this`."
              },
              {
                "version": "v6.3.0",
                "pr-url": "https://github.com/nodejs/node/pull/7499",
                "description": "The `breakLength` option is supported now."
              },
              {
                "version": "v6.1.0",
                "pr-url": "https://github.com/nodejs/node/pull/6334",
                "description": "The `maxArrayLength` option is supported now; in particular, long arrays are truncated by default."
              },
              {
                "version": "v6.1.0",
                "pr-url": "https://github.com/nodejs/node/pull/6465",
                "description": "The `showProxy` option is supported now."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} The representation of passed object ",
                "name": "return",
                "type": "string",
                "desc": "The representation of passed object"
              },
              "params": [
                {
                  "textRaw": "`object` {any} Any JavaScript primitive or `Object`. ",
                  "name": "object",
                  "type": "any",
                  "desc": "Any JavaScript primitive or `Object`."
                },
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`showHidden` {boolean} If `true`, the `object`'s non-enumerable symbols and properties will be included in the formatted result as well as [`WeakMap`][] and [`WeakSet`][] entries. **Default:** `false`. ",
                      "name": "showHidden",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "If `true`, the `object`'s non-enumerable symbols and properties will be included in the formatted result as well as [`WeakMap`][] and [`WeakSet`][] entries."
                    },
                    {
                      "textRaw": "`depth` {number} Specifies the number of times to recurse while formatting the `object`. This is useful for inspecting large complicated objects. To make it recurse indefinitely pass `null`. **Default:** `2`. ",
                      "name": "depth",
                      "type": "number",
                      "default": "`2`",
                      "desc": "Specifies the number of times to recurse while formatting the `object`. This is useful for inspecting large complicated objects. To make it recurse indefinitely pass `null`."
                    },
                    {
                      "textRaw": "`colors` {boolean} If `true`, the output will be styled with ANSI color codes. Colors are customizable, see [Customizing `util.inspect` colors][]. **Default:** `false`. ",
                      "name": "colors",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "If `true`, the output will be styled with ANSI color codes. Colors are customizable, see [Customizing `util.inspect` colors][]."
                    },
                    {
                      "textRaw": "`customInspect` {boolean} If `false`, then custom `inspect(depth, opts)` functions will not be called. **Default:** `true`. ",
                      "name": "customInspect",
                      "type": "boolean",
                      "default": "`true`",
                      "desc": "If `false`, then custom `inspect(depth, opts)` functions will not be called."
                    },
                    {
                      "textRaw": "`showProxy` {boolean} If `true`, then objects and functions that are `Proxy` objects will be introspected to show their `target` and `handler` objects. **Default:** `false`. ",
                      "name": "showProxy",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "If `true`, then objects and functions that are `Proxy` objects will be introspected to show their `target` and `handler` objects."
                    },
                    {
                      "textRaw": "`maxArrayLength` {number} Specifies the maximum number of `Array`, [`TypedArray`][], [`WeakMap`][] and [`WeakSet`][] elements to include when formatting. Set to `null` or `Infinity` to show all elements. Set to `0` or negative to show no elements. **Default:** `100`. ",
                      "name": "maxArrayLength",
                      "type": "number",
                      "default": "`100`",
                      "desc": "Specifies the maximum number of `Array`, [`TypedArray`][], [`WeakMap`][] and [`WeakSet`][] elements to include when formatting. Set to `null` or `Infinity` to show all elements. Set to `0` or negative to show no elements."
                    },
                    {
                      "textRaw": "`breakLength` {number} The length at which an object's keys are split across multiple lines. Set to `Infinity` to format an object as a single line. **Default:** `60` for legacy compatibility. ",
                      "name": "breakLength",
                      "type": "number",
                      "default": "`60` for legacy compatibility",
                      "desc": "The length at which an object's keys are split across multiple lines. Set to `Infinity` to format an object as a single line."
                    },
                    {
                      "textRaw": "`compact` {boolean} Setting this to `false` changes the default indentation to use a line break for each object key instead of lining up multiple properties in one line. It will also break text that is above the `breakLength` size into smaller and better readable chunks and indents objects the same as arrays. Note that no text will be reduced below 16 characters, no matter the `breakLength` size. For more information, see the example below. **Default:** `true`. ",
                      "name": "compact",
                      "type": "boolean",
                      "default": "`true`",
                      "desc": "Setting this to `false` changes the default indentation to use a line break for each object key instead of lining up multiple properties in one line. It will also break text that is above the `breakLength` size into smaller and better readable chunks and indents objects the same as arrays. Note that no text will be reduced below 16 characters, no matter the `breakLength` size. For more information, see the example below."
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "object"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>util.inspect()</code> method returns a string representation of <code>object</code> that is\nintended for debugging. The output of <code>util.inspect</code> may change at any time\nand should not be depended upon programmatically. Additional <code>options</code> may be\npassed that alter certain aspects of the formatted string.\n<code>util.inspect()</code> will use the constructor&#39;s name and/or <code>@@toStringTag</code> to make\nan identifiable tag for an inspected value.</p>\n<pre><code class=\"lang-js\">class Foo {\n  get [Symbol.toStringTag]() {\n    return &#39;bar&#39;;\n  }\n}\n\nclass Bar {}\n\nconst baz = Object.create(null, { [Symbol.toStringTag]: { value: &#39;foo&#39; } });\n\nutil.inspect(new Foo()); // &#39;Foo [bar] {}&#39;\nutil.inspect(new Bar()); // &#39;Bar {}&#39;\nutil.inspect(baz);       // &#39;[foo] {}&#39;\n</code></pre>\n<p>The following example inspects all properties of the <code>util</code> object:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nconsole.log(util.inspect(util, { showHidden: true, depth: null }));\n</code></pre>\n<p>Values may supply their own custom <code>inspect(depth, opts)</code> functions, when\ncalled these receive the current <code>depth</code> in the recursive inspection, as well as\nthe options object passed to <code>util.inspect()</code>.</p>\n<p>The following example highlights the difference with the <code>compact</code> option:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nconst o = {\n  a: [1, 2, [[\n    &#39;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do &#39; +\n      &#39;eiusmod tempor incididunt ut labore et dolore magna aliqua.&#39;,\n    &#39;test&#39;,\n    &#39;foo&#39;]], 4],\n  b: new Map([[&#39;za&#39;, 1], [&#39;zb&#39;, &#39;test&#39;]])\n};\nconsole.log(util.inspect(o, { compact: true, depth: 5, breakLength: 80 }));\n\n// This will print\n\n// { a:\n//   [ 1,\n//     2,\n//     [ [ &#39;Lorem ipsum dolor sit amet, consectetur [...]&#39;, // A long line\n//           &#39;test&#39;,\n//           &#39;foo&#39; ] ],\n//     4 ],\n//   b: Map { &#39;za&#39; =&gt; 1, &#39;zb&#39; =&gt; &#39;test&#39; } }\n\n// Setting `compact` to false changes the output to be more reader friendly.\nconsole.log(util.inspect(o, { compact: false, depth: 5, breakLength: 80 }));\n\n// {\n//   a: [\n//     1,\n//     2,\n//     [\n//       [\n//         &#39;Lorem ipsum dolor sit amet, consectetur &#39; +\n//           &#39;adipiscing elit, sed do eiusmod tempor &#39; +\n//           &#39;incididunt ut labore et dolore magna &#39; +\n//           &#39;aliqua.,\n//         &#39;test&#39;,\n//         &#39;foo&#39;\n//       ]\n//     ],\n//     4\n//   ],\n//   b: Map {\n//     &#39;za&#39; =&gt; 1,\n//     &#39;zb&#39; =&gt; &#39;test&#39;\n//   }\n// }\n\n// Setting `breakLength` to e.g. 150 will print the &quot;Lorem ipsum&quot; text in a\n// single line.\n// Reducing the `breakLength` will split the &quot;Lorem ipsum&quot; text in smaller\n// chunks.\n</code></pre>\n<p>Using the <code>showHidden</code> option allows to inspect <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a>\nentries. If there are more entries than <code>maxArrayLength</code>, there is no guarantee\nwhich entries are displayed. That means retrieving the same <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a>\nentries twice might actually result in a different output. Besides this any item\nmight be collected at any point of time by the garbage collector if there is no\nstrong reference left to that object. Therefore there is no guarantee to get a\nreliable output.</p>\n<pre><code class=\"lang-js\">const { inspect } = require(&#39;util&#39;);\n\nconst obj = { a: 1 };\nconst obj2 = { b: 2 };\nconst weakSet = new WeakSet([obj, obj2]);\n\nconsole.log(inspect(weakSet, { showHidden: true }));\n// WeakSet { { a: 1 }, { b: 2 } }\n</code></pre>\n<p>Please note that <code>util.inspect()</code> is a synchronous method that is mainly\nintended as a debugging tool. Some input values can have a significant\nperformance overhead that can block the event loop. Use this function\nwith care and never in a hot code path.</p>\n",
          "miscs": [
            {
              "textRaw": "Customizing `util.inspect` colors",
              "name": "Customizing `util.inspect` colors",
              "type": "misc",
              "desc": "<p>Color output (if enabled) of <code>util.inspect</code> is customizable globally\nvia the <code>util.inspect.styles</code> and <code>util.inspect.colors</code> properties.</p>\n<p><code>util.inspect.styles</code> is a map associating a style name to a color from\n<code>util.inspect.colors</code>.</p>\n<p>The default styles and associated colors are:</p>\n<ul>\n<li><code>number</code> - <code>yellow</code></li>\n<li><code>boolean</code> - <code>yellow</code></li>\n<li><code>string</code> - <code>green</code></li>\n<li><code>date</code> - <code>magenta</code></li>\n<li><code>regexp</code> - <code>red</code></li>\n<li><code>null</code> - <code>bold</code></li>\n<li><code>undefined</code> - <code>grey</code></li>\n<li><code>special</code> - <code>cyan</code> (only applied to functions at this time)</li>\n<li><code>name</code> - (no styling)</li>\n</ul>\n<p>The predefined color codes are: <code>white</code>, <code>grey</code>, <code>black</code>, <code>blue</code>, <code>cyan</code>,\n<code>green</code>, <code>magenta</code>, <code>red</code> and <code>yellow</code>. There are also <code>bold</code>, <code>italic</code>,\n<code>underline</code> and <code>inverse</code> codes.</p>\n<p>Color styling uses ANSI control codes that may not be supported on all\nterminals.</p>\n"
            },
            {
              "textRaw": "Custom inspection functions on Objects",
              "name": "Custom inspection functions on Objects",
              "type": "misc",
              "desc": "<p>Objects may also define their own <code>[util.inspect.custom](depth, opts)</code>\n(or the equivalent but deprecated <code>inspect(depth, opts)</code>) function that\n<code>util.inspect()</code> will invoke and use the result of when inspecting the object:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nclass Box {\n  constructor(value) {\n    this.value = value;\n  }\n\n  [util.inspect.custom](depth, options) {\n    if (depth &lt; 0) {\n      return options.stylize(&#39;[Box]&#39;, &#39;special&#39;);\n    }\n\n    const newOptions = Object.assign({}, options, {\n      depth: options.depth === null ? null : options.depth - 1\n    });\n\n    // Five space padding because that&#39;s the size of &quot;Box&lt; &quot;.\n    const padding = &#39; &#39;.repeat(5);\n    const inner = util.inspect(this.value, newOptions)\n                      .replace(/\\n/g, `\\n${padding}`);\n    return `${options.stylize(&#39;Box&#39;, &#39;special&#39;)}&lt; ${inner} &gt;`;\n  }\n}\n\nconst box = new Box(true);\n\nutil.inspect(box);\n// Returns: &quot;Box&lt; true &gt;&quot;\n</code></pre>\n<p>Custom <code>[util.inspect.custom](depth, opts)</code> functions typically return a string\nbut may return a value of any type that will be formatted accordingly by\n<code>util.inspect()</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nconst obj = { foo: &#39;this will not show up in the inspect() output&#39; };\nobj[util.inspect.custom] = (depth) =&gt; {\n  return { bar: &#39;baz&#39; };\n};\n\nutil.inspect(obj);\n// Returns: &quot;{ bar: &#39;baz&#39; }&quot;\n</code></pre>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "util.inspect.custom",
              "name": "custom",
              "meta": {
                "added": [
                  "v6.6.0"
                ],
                "changes": []
              },
              "desc": "<p>A {symbol} that can be used to declare custom inspect functions, see\n<a href=\"#util_custom_inspection_functions_on_objects\">Custom inspection functions on Objects</a>.</p>\n"
            },
            {
              "textRaw": "util.inspect.defaultOptions",
              "name": "defaultOptions",
              "meta": {
                "added": [
                  "v6.4.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>defaultOptions</code> value allows customization of the default options used by\n<code>util.inspect</code>. This is useful for functions like <code>console.log</code> or\n<code>util.format</code> which implicitly call into <code>util.inspect</code>. It shall be set to an\nobject containing one or more valid <a href=\"#util_util_inspect_object_options\"><code>util.inspect()</code></a> options. Setting\noption properties directly is also supported.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst arr = Array(101).fill(0);\n\nconsole.log(arr); // logs the truncated array\nutil.inspect.defaultOptions.maxArrayLength = null;\nconsole.log(arr); // logs the full array\n</code></pre>\n"
            }
          ]
        },
        {
          "textRaw": "util.isDeepStrictEqual(val1, val2)",
          "type": "method",
          "name": "isDeepStrictEqual",
          "meta": {
            "added": [
              "v9.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {boolean} ",
                "name": "return",
                "type": "boolean"
              },
              "params": [
                {
                  "textRaw": "`val1` {any} ",
                  "name": "val1",
                  "type": "any"
                },
                {
                  "textRaw": "`val2` {any} ",
                  "name": "val2",
                  "type": "any"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "val1"
                },
                {
                  "name": "val2"
                }
              ]
            }
          ],
          "desc": "<p>Returns <code>true</code> if there is deep strict equality between <code>val1</code> and <code>val2</code>.\nOtherwise, returns <code>false</code>.</p>\n<p>See <a href=\"assert.html#assert_assert_deepstrictequal_actual_expected_message\"><code>assert.deepStrictEqual()</code></a> for more information about deep strict\nequality.</p>\n"
        },
        {
          "textRaw": "util.promisify(original)",
          "type": "method",
          "name": "promisify",
          "meta": {
            "added": [
              "v8.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Function} ",
                "name": "return",
                "type": "Function"
              },
              "params": [
                {
                  "textRaw": "`original` {Function} ",
                  "name": "original",
                  "type": "Function"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "original"
                }
              ]
            }
          ],
          "desc": "<p>Takes a function following the common error-first callback style, i.e. taking\nan <code>(err, value) =&gt; ...</code> callback as the last argument, and returns a version\nthat returns promises.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst stat = util.promisify(fs.stat);\nstat(&#39;.&#39;).then((stats) =&gt; {\n  // Do something with `stats`\n}).catch((error) =&gt; {\n  // Handle the error.\n});\n</code></pre>\n<p>Or, equivalently using <code>async function</code>s:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst fs = require(&#39;fs&#39;);\n\nconst stat = util.promisify(fs.stat);\n\nasync function callStat() {\n  const stats = await stat(&#39;.&#39;);\n  console.log(`This directory is owned by ${stats.uid}`);\n}\n</code></pre>\n<p>If there is an <code>original[util.promisify.custom]</code> property present, <code>promisify</code>\nwill return its value, see <a href=\"#util_custom_promisified_functions\">Custom promisified functions</a>.</p>\n<p><code>promisify()</code> assumes that <code>original</code> is a function taking a callback as its\nfinal argument in all cases. If <code>original</code> is not a function, <code>promisify()</code>\nwill throw an error. If <code>original</code> is a function but its last argument is not\nan error-first callback, it will still be passed an error-first\ncallback as its last argument.</p>\n",
          "modules": [
            {
              "textRaw": "Custom promisified functions",
              "name": "custom_promisified_functions",
              "desc": "<p>Using the <code>util.promisify.custom</code> symbol one can override the return value of\n<a href=\"#util_util_promisify_original\"><code>util.promisify()</code></a>:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nfunction doSomething(foo, callback) {\n  // ...\n}\n\ndoSomething[util.promisify.custom] = (foo) =&gt; {\n  return getPromiseSomehow();\n};\n\nconst promisified = util.promisify(doSomething);\nconsole.log(promisified === doSomething[util.promisify.custom]);\n// prints &#39;true&#39;\n</code></pre>\n<p>This can be useful for cases where the original function does not follow the\nstandard format of taking an error-first callback as the last argument.</p>\n<p>For example, with a function that takes in\n<code>(foo, onSuccessCallback, onErrorCallback)</code>:</p>\n<pre><code class=\"lang-js\">doSomething[util.promisify.custom] = (foo) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    doSomething(foo, resolve, reject);\n  });\n};\n</code></pre>\n<p>If <code>promisify.custom</code> is defined but is not a function, <code>promisify()</code> will\nthrow an error.</p>\n",
              "type": "module",
              "displayName": "Custom promisified functions"
            }
          ],
          "properties": [
            {
              "textRaw": "`custom` {symbol} ",
              "type": "symbol",
              "name": "custom",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>A {symbol} that can be used to declare custom promisified variants of functions,\nsee <a href=\"#util_custom_promisified_functions\">Custom promisified functions</a>.</p>\n"
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: util.TextDecoder",
          "type": "class",
          "name": "util.TextDecoder",
          "meta": {
            "added": [
              "v8.3.0"
            ],
            "changes": []
          },
          "desc": "<p>An implementation of the <a href=\"https://encoding.spec.whatwg.org/\">WHATWG Encoding Standard</a> <code>TextDecoder</code> API.</p>\n<pre><code class=\"lang-js\">const decoder = new TextDecoder(&#39;shift_jis&#39;);\nlet string = &#39;&#39;;\nlet buffer;\nwhile (buffer = getNextChunkSomehow()) {\n  string += decoder.decode(buffer, { stream: true });\n}\nstring += decoder.decode(); // end-of-stream\n</code></pre>\n",
          "modules": [
            {
              "textRaw": "WHATWG Supported Encodings",
              "name": "whatwg_supported_encodings",
              "desc": "<p>Per the <a href=\"https://encoding.spec.whatwg.org/\">WHATWG Encoding Standard</a>, the encodings supported by the\n<code>TextDecoder</code> API are outlined in the tables below. For each encoding,\none or more aliases may be used.</p>\n<p>Different Node.js build configurations support different sets of encodings.\nWhile a very basic set of encodings is supported even on Node.js builds without\nICU enabled, support for some encodings is provided only when Node.js is built\nwith ICU and using the full ICU data (see <a href=\"intl.html\">Internationalization</a>).</p>\n",
              "modules": [
                {
                  "textRaw": "Encodings Supported Without ICU",
                  "name": "encodings_supported_without_icu",
                  "desc": "<table>\n<thead>\n<tr>\n<th>Encoding</th>\n<th>Aliases</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#39;utf-8&#39;</code></td>\n<td><code>&#39;unicode-1-1-utf-8&#39;</code>, <code>&#39;utf8&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;utf-16le&#39;</code></td>\n<td><code>&#39;utf-16&#39;</code></td>\n</tr>\n</tbody>\n</table>\n",
                  "type": "module",
                  "displayName": "Encodings Supported Without ICU"
                },
                {
                  "textRaw": "Encodings Supported by Default (With ICU)",
                  "name": "encodings_supported_by_default_(with_icu)",
                  "desc": "<table>\n<thead>\n<tr>\n<th>Encoding</th>\n<th>Aliases</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#39;utf-8&#39;</code></td>\n<td><code>&#39;unicode-1-1-utf-8&#39;</code>, <code>&#39;utf8&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;utf-16le&#39;</code></td>\n<td><code>&#39;utf-16&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;utf-16be&#39;</code></td>\n</tr>\n</tbody>\n</table>\n",
                  "type": "module",
                  "displayName": "Encodings Supported by Default (With ICU)"
                },
                {
                  "textRaw": "Encodings Requiring Full ICU Data",
                  "name": "encodings_requiring_full_icu_data",
                  "desc": "<table>\n<thead>\n<tr>\n<th>Encoding</th>\n<th>Aliases</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#39;ibm866&#39;</code></td>\n<td><code>&#39;866&#39;</code>, <code>&#39;cp866&#39;</code>, <code>&#39;csibm866&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;iso-8859-2&#39;</code></td>\n<td><code>&#39;csisolatin2&#39;</code>, <code>&#39;iso-ir-101&#39;</code>, <code>&#39;iso8859-2&#39;</code>, <code>&#39;iso88592&#39;</code>, <code>&#39;iso_8859-2&#39;</code>, <code>&#39;iso_8859-2:1987&#39;</code>, <code>&#39;l2&#39;</code>, <code>&#39;latin2&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;iso-8859-3&#39;</code></td>\n<td><code>&#39;csisolatin3&#39;</code>, <code>&#39;iso-ir-109&#39;</code>, <code>&#39;iso8859-3&#39;</code>, <code>&#39;iso88593&#39;</code>, <code>&#39;iso_8859-3&#39;</code>, <code>&#39;iso_8859-3:1988&#39;</code>, <code>&#39;l3&#39;</code>, <code>&#39;latin3&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;iso-8859-4&#39;</code></td>\n<td><code>&#39;csisolatin4&#39;</code>, <code>&#39;iso-ir-110&#39;</code>, <code>&#39;iso8859-4&#39;</code>, <code>&#39;iso88594&#39;</code>, <code>&#39;iso_8859-4&#39;</code>, <code>&#39;iso_8859-4:1988&#39;</code>, <code>&#39;l4&#39;</code>, <code>&#39;latin4&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;iso-8859-5&#39;</code></td>\n<td><code>&#39;csisolatincyrillic&#39;</code>, <code>&#39;cyrillic&#39;</code>, <code>&#39;iso-ir-144&#39;</code>, <code>&#39;iso8859-5&#39;</code>, <code>&#39;iso88595&#39;</code>, <code>&#39;iso_8859-5&#39;</code>, <code>&#39;iso_8859-5:1988&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;iso-8859-6&#39;</code></td>\n<td><code>&#39;arabic&#39;</code>, <code>&#39;asmo-708&#39;</code>, <code>&#39;csiso88596e&#39;</code>, <code>&#39;csiso88596i&#39;</code>, <code>&#39;csisolatinarabic&#39;</code>, <code>&#39;ecma-114&#39;</code>, <code>&#39;iso-8859-6-e&#39;</code>, <code>&#39;iso-8859-6-i&#39;</code>, <code>&#39;iso-ir-127&#39;</code>, <code>&#39;iso8859-6&#39;</code>, <code>&#39;iso88596&#39;</code>, <code>&#39;iso_8859-6&#39;</code>, <code>&#39;iso_8859-6:1987&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;iso-8859-7&#39;</code></td>\n<td><code>&#39;csisolatingreek&#39;</code>, <code>&#39;ecma-118&#39;</code>, <code>&#39;elot_928&#39;</code>, <code>&#39;greek&#39;</code>, <code>&#39;greek8&#39;</code>, <code>&#39;iso-ir-126&#39;</code>, <code>&#39;iso8859-7&#39;</code>, <code>&#39;iso88597&#39;</code>, <code>&#39;iso_8859-7&#39;</code>, <code>&#39;iso_8859-7:1987&#39;</code>, <code>&#39;sun_eu_greek&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;iso-8859-8&#39;</code></td>\n<td><code>&#39;csiso88598e&#39;</code>, <code>&#39;csisolatinhebrew&#39;</code>, <code>&#39;hebrew&#39;</code>, <code>&#39;iso-8859-8-e&#39;</code>, <code>&#39;iso-ir-138&#39;</code>, <code>&#39;iso8859-8&#39;</code>, <code>&#39;iso88598&#39;</code>, <code>&#39;iso_8859-8&#39;</code>, <code>&#39;iso_8859-8:1988&#39;</code>, <code>&#39;visual&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;iso-8859-8-i&#39;</code></td>\n<td><code>&#39;csiso88598i&#39;</code>, <code>&#39;logical&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;iso-8859-10&#39;</code></td>\n<td><code>&#39;csisolatin6&#39;</code>, <code>&#39;iso-ir-157&#39;</code>, <code>&#39;iso8859-10&#39;</code>, <code>&#39;iso885910&#39;</code>, <code>&#39;l6&#39;</code>, <code>&#39;latin6&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;iso-8859-13&#39;</code></td>\n<td><code>&#39;iso8859-13&#39;</code>, <code>&#39;iso885913&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;iso-8859-14&#39;</code></td>\n<td><code>&#39;iso8859-14&#39;</code>, <code>&#39;iso885914&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;iso-8859-15&#39;</code></td>\n<td><code>&#39;csisolatin9&#39;</code>, <code>&#39;iso8859-15&#39;</code>, <code>&#39;iso885915&#39;</code>, <code>&#39;iso_8859-15&#39;</code>, <code>&#39;l9&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;koi8-r&#39;</code></td>\n<td><code>&#39;cskoi8r&#39;</code>, <code>&#39;koi&#39;</code>, <code>&#39;koi8&#39;</code>, <code>&#39;koi8_r&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;koi8-u&#39;</code></td>\n<td><code>&#39;koi8-ru&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;macintosh&#39;</code></td>\n<td><code>&#39;csmacintosh&#39;</code>, <code>&#39;mac&#39;</code>, <code>&#39;x-mac-roman&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;windows-874&#39;</code></td>\n<td><code>&#39;dos-874&#39;</code>, <code>&#39;iso-8859-11&#39;</code>, <code>&#39;iso8859-11&#39;</code>, <code>&#39;iso885911&#39;</code>, <code>&#39;tis-620&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;windows-1250&#39;</code></td>\n<td><code>&#39;cp1250&#39;</code>, <code>&#39;x-cp1250&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;windows-1251&#39;</code></td>\n<td><code>&#39;cp1251&#39;</code>, <code>&#39;x-cp1251&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;windows-1252&#39;</code></td>\n<td><code>&#39;ansi_x3.4-1968&#39;</code>, <code>&#39;ascii&#39;</code>, <code>&#39;cp1252&#39;</code>, <code>&#39;cp819&#39;</code>, <code>&#39;csisolatin1&#39;</code>, <code>&#39;ibm819&#39;</code>, <code>&#39;iso-8859-1&#39;</code>, <code>&#39;iso-ir-100&#39;</code>, <code>&#39;iso8859-1&#39;</code>, <code>&#39;iso88591&#39;</code>, <code>&#39;iso_8859-1&#39;</code>, <code>&#39;iso_8859-1:1987&#39;</code>, <code>&#39;l1&#39;</code>, <code>&#39;latin1&#39;</code>, <code>&#39;us-ascii&#39;</code>, <code>&#39;x-cp1252&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;windows-1253&#39;</code></td>\n<td><code>&#39;cp1253&#39;</code>, <code>&#39;x-cp1253&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;windows-1254&#39;</code></td>\n<td><code>&#39;cp1254&#39;</code>, <code>&#39;csisolatin5&#39;</code>, <code>&#39;iso-8859-9&#39;</code>, <code>&#39;iso-ir-148&#39;</code>, <code>&#39;iso8859-9&#39;</code>, <code>&#39;iso88599&#39;</code>, <code>&#39;iso_8859-9&#39;</code>, <code>&#39;iso_8859-9:1989&#39;</code>, <code>&#39;l5&#39;</code>, <code>&#39;latin5&#39;</code>, <code>&#39;x-cp1254&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;windows-1255&#39;</code></td>\n<td><code>&#39;cp1255&#39;</code>, <code>&#39;x-cp1255&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;windows-1256&#39;</code></td>\n<td><code>&#39;cp1256&#39;</code>, <code>&#39;x-cp1256&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;windows-1257&#39;</code></td>\n<td><code>&#39;cp1257&#39;</code>, <code>&#39;x-cp1257&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;windows-1258&#39;</code></td>\n<td><code>&#39;cp1258&#39;</code>, <code>&#39;x-cp1258&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;x-mac-cyrillic&#39;</code></td>\n<td><code>&#39;x-mac-ukrainian&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;gbk&#39;</code></td>\n<td><code>&#39;chinese&#39;</code>, <code>&#39;csgb2312&#39;</code>, <code>&#39;csiso58gb231280&#39;</code>, <code>&#39;gb2312&#39;</code>, <code>&#39;gb_2312&#39;</code>, <code>&#39;gb_2312-80&#39;</code>, <code>&#39;iso-ir-58&#39;</code>, <code>&#39;x-gbk&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;gb18030&#39;</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>&#39;big5&#39;</code></td>\n<td><code>&#39;big5-hkscs&#39;</code>, <code>&#39;cn-big5&#39;</code>, <code>&#39;csbig5&#39;</code>, <code>&#39;x-x-big5&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;euc-jp&#39;</code></td>\n<td><code>&#39;cseucpkdfmtjapanese&#39;</code>, <code>&#39;x-euc-jp&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;iso-2022-jp&#39;</code></td>\n<td><code>&#39;csiso2022jp&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;shift_jis&#39;</code></td>\n<td><code>&#39;csshiftjis&#39;</code>, <code>&#39;ms932&#39;</code>, <code>&#39;ms_kanji&#39;</code>, <code>&#39;shift-jis&#39;</code>, <code>&#39;sjis&#39;</code>, <code>&#39;windows-31j&#39;</code>, <code>&#39;x-sjis&#39;</code></td>\n</tr>\n<tr>\n<td><code>&#39;euc-kr&#39;</code></td>\n<td><code>&#39;cseuckr&#39;</code>, <code>&#39;csksc56011987&#39;</code>, <code>&#39;iso-ir-149&#39;</code>, <code>&#39;korean&#39;</code>, <code>&#39;ks_c_5601-1987&#39;</code>, <code>&#39;ks_c_5601-1989&#39;</code>, <code>&#39;ksc5601&#39;</code>, <code>&#39;ksc_5601&#39;</code>, <code>&#39;windows-949&#39;</code></td>\n</tr>\n</tbody>\n</table>\n<p>The <code>&#39;iso-8859-16&#39;</code> encoding listed in the <a href=\"https://encoding.spec.whatwg.org/\">WHATWG Encoding Standard</a>\nis not supported.</p>\n",
                  "type": "module",
                  "displayName": "Encodings Requiring Full ICU Data"
                }
              ],
              "type": "module",
              "displayName": "WHATWG Supported Encodings"
            }
          ],
          "methods": [
            {
              "textRaw": "textDecoder.decode([input[, options]])",
              "type": "method",
              "name": "decode",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {string} ",
                    "name": "return",
                    "type": "string"
                  },
                  "params": [
                    {
                      "textRaw": "`input` {ArrayBuffer|DataView|TypedArray} An `ArrayBuffer`, `DataView` or `Typed Array` instance containing the encoded data. ",
                      "name": "input",
                      "type": "ArrayBuffer|DataView|TypedArray",
                      "desc": "An `ArrayBuffer`, `DataView` or `Typed Array` instance containing the encoded data.",
                      "optional": true
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`stream` {boolean} `true` if additional chunks of data are expected. **Default:** `false`. ",
                          "name": "stream",
                          "type": "boolean",
                          "default": "`false`",
                          "desc": "`true` if additional chunks of data are expected."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "input",
                      "optional": true
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Decodes the <code>input</code> and returns a string. If <code>options.stream</code> is <code>true</code>, any\nincomplete byte sequences occurring at the end of the <code>input</code> are buffered\ninternally and emitted after the next call to <code>textDecoder.decode()</code>.</p>\n<p>If <code>textDecoder.fatal</code> is <code>true</code>, decoding errors that occur will result in a\n<code>TypeError</code> being thrown.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`encoding` {string} ",
              "type": "string",
              "name": "encoding",
              "desc": "<p>The encoding supported by the <code>TextDecoder</code> instance.</p>\n"
            },
            {
              "textRaw": "`fatal` {boolean} ",
              "type": "boolean",
              "name": "fatal",
              "desc": "<p>The value will be <code>true</code> if decoding errors result in a <code>TypeError</code> being\nthrown.</p>\n"
            },
            {
              "textRaw": "`ignoreBOM` {boolean} ",
              "type": "boolean",
              "name": "ignoreBOM",
              "desc": "<p>The value will be <code>true</code> if the decoding result will include the byte order\nmark.</p>\n"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`encoding` {string} Identifies the `encoding` that this `TextDecoder` instance supports. **Default:** `'utf-8'`. ",
                  "name": "encoding",
                  "type": "string",
                  "default": "`'utf-8'`",
                  "desc": "Identifies the `encoding` that this `TextDecoder` instance supports.",
                  "optional": true
                },
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`fatal` {boolean} `true` if decoding failures are fatal. This option is only supported when ICU is enabled (see [Internationalization][]). **Default:** `false`. ",
                      "name": "fatal",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "`true` if decoding failures are fatal. This option is only supported when ICU is enabled (see [Internationalization][])."
                    },
                    {
                      "textRaw": "`ignoreBOM` {boolean} When `true`, the `TextDecoder` will include the byte  order mark in the decoded result. When `false`, the byte order mark will  be removed from the output. This option is only used when `encoding` is  `'utf-8'`, `'utf-16be'` or `'utf-16le'`. **Default:** `false`. ",
                      "name": "ignoreBOM",
                      "type": "boolean",
                      "default": "`false`",
                      "desc": "When `true`, the `TextDecoder` will include the byte  order mark in the decoded result. When `false`, the byte order mark will  be removed from the output. This option is only used when `encoding` is  `'utf-8'`, `'utf-16be'` or `'utf-16le'`."
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "optional": true
                }
              ],
              "desc": "<p>Creates an new <code>TextDecoder</code> instance. The <code>encoding</code> may specify one of the\nsupported encodings or an alias.</p>\n"
            },
            {
              "params": [
                {
                  "name": "encoding",
                  "optional": true
                },
                {
                  "name": "options",
                  "optional": true
                }
              ],
              "desc": "<p>Creates an new <code>TextDecoder</code> instance. The <code>encoding</code> may specify one of the\nsupported encodings or an alias.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: util.TextEncoder",
          "type": "class",
          "name": "util.TextEncoder",
          "meta": {
            "added": [
              "v8.3.0"
            ],
            "changes": []
          },
          "desc": "<p>An implementation of the <a href=\"https://encoding.spec.whatwg.org/\">WHATWG Encoding Standard</a> <code>TextEncoder</code> API. All\ninstances of <code>TextEncoder</code> only support UTF-8 encoding.</p>\n<pre><code class=\"lang-js\">const encoder = new TextEncoder();\nconst uint8array = encoder.encode(&#39;this is some data&#39;);\n</code></pre>\n",
          "methods": [
            {
              "textRaw": "textEncoder.encode([input])",
              "type": "method",
              "name": "encode",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Uint8Array} ",
                    "name": "return",
                    "type": "Uint8Array"
                  },
                  "params": [
                    {
                      "textRaw": "`input` {string} The text to encode. **Default:** an empty string. ",
                      "name": "input",
                      "type": "string",
                      "default": "an empty string",
                      "desc": "The text to encode.",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "input",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>UTF-8 encodes the <code>input</code> string and returns a <code>Uint8Array</code> containing the\nencoded bytes.</p>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`encoding` {string} ",
              "type": "string",
              "name": "encoding",
              "desc": "<p>The encoding supported by the <code>TextEncoder</code> instance. Always set to <code>&#39;utf-8&#39;</code>.</p>\n"
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "util.types",
          "name": "types",
          "meta": {
            "added": [
              "v10.0.0"
            ],
            "changes": []
          },
          "desc": "<p><code>util.types</code> provides a number of type checks for different kinds of built-in\nobjects. Unlike <code>instanceof</code> or <code>Object.prototype.toString.call(value)</code>,\nthese checks do not inspect properties of the object that are accessible from\nJavaScript (like their prototype), and usually have the overhead of\ncalling into C++.</p>\n<p>The result generally does not make any guarantees about what kinds of\nproperties or behavior a value exposes in JavaScript. They are primarily\nuseful for addon developers who prefer to do type checking in JavaScript.</p>\n",
          "methods": [
            {
              "textRaw": "util.types.isAnyArrayBuffer(value)",
              "type": "method",
              "name": "isAnyArrayBuffer",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance.</p>\n<p>See also <a href=\"#util_util_types_isarraybuffer_value\"><code>util.types.isArrayBuffer()</code></a> and\n<a href=\"#util_util_types_issharedarraybuffer_value\"><code>util.types.isSharedArrayBuffer()</code></a>.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isAnyArrayBuffer(new ArrayBuffer());  // Returns true\nutil.types.isAnyArrayBuffer(new SharedArrayBuffer());  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isArgumentsObject(value)",
              "type": "method",
              "name": "isArgumentsObject",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is an <code>arguments</code> object.</p>\n<p>For example:</p>\n<!-- eslint-disable prefer-rest-params -->\n<pre><code class=\"lang-js\">function foo() {\n  util.types.isArgumentsObject(arguments);  // Returns true\n}\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isArrayBuffer(value)",
              "type": "method",
              "name": "isArrayBuffer",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instance.\nThis does <em>not</em> include <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instances. Usually, it is\ndesirable to test for both; See <a href=\"#util_util_types_isanyarraybuffer_value\"><code>util.types.isAnyArrayBuffer()</code></a> for that.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isArrayBuffer(new ArrayBuffer());  // Returns true\nutil.types.isArrayBuffer(new SharedArrayBuffer());  // Returns false\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isAsyncFunction(value)",
              "type": "method",
              "name": "isAsyncFunction",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async function</a>.\nNote that this only reports back what the JavaScript engine is seeing;\nin particular, the return value may not match the original source code if\na transpilation tool was used.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isAsyncFunction(function foo() {});  // Returns false\nutil.types.isAsyncFunction(async function foo() {});  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isBooleanObject(value)",
              "type": "method",
              "name": "isBooleanObject",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a boolean object, e.g. created\nby <code>new Boolean()</code>.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isBooleanObject(false);  // Returns false\nutil.types.isBooleanObject(true);   // Returns false\nutil.types.isBooleanObject(new Boolean(false));   // Returns true\nutil.types.isBooleanObject(new Boolean(true));    // Returns true\nutil.types.isBooleanObject(Boolean(false)); // Returns false\nutil.types.isBooleanObject(Boolean(true)); // Returns false\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isDataView(value)",
              "type": "method",
              "name": "isDataView",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">const ab = new ArrayBuffer(20);\nutil.types.isDataView(new DataView(ab));  // Returns true\nutil.types.isDataView(new Float64Array());  // Returns false\n</code></pre>\n<p>See also <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView\"><code>ArrayBuffer.isView()</code></a>.</p>\n"
            },
            {
              "textRaw": "util.types.isDate(value)",
              "type": "method",
              "name": "isDate",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isDate(new Date());  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isExternal(value)",
              "type": "method",
              "name": "isExternal",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a native <code>External</code> value.</p>\n"
            },
            {
              "textRaw": "util.types.isFloat32Array(value)",
              "type": "method",
              "name": "isFloat32Array",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\"><code>Float32Array</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isFloat32Array(new ArrayBuffer());  // Returns false\nutil.types.isFloat32Array(new Float32Array());  // Returns true\nutil.types.isFloat32Array(new Float64Array());  // Returns false\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isFloat64Array(value)",
              "type": "method",
              "name": "isFloat64Array",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\"><code>Float64Array</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isFloat64Array(new ArrayBuffer());  // Returns false\nutil.types.isFloat64Array(new Uint8Array());  // Returns false\nutil.types.isFloat64Array(new Float64Array());  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isGeneratorFunction(value)",
              "type": "method",
              "name": "isGeneratorFunction",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a generator function.\nNote that this only reports back what the JavaScript engine is seeing;\nin particular, the return value may not match the original source code if\na transpilation tool was used.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isGeneratorFunction(function foo() {});  // Returns false\nutil.types.isGeneratorFunction(function* foo() {});  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isGeneratorObject(value)",
              "type": "method",
              "name": "isGeneratorObject",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a generator object as returned from a\nbuilt-in generator function.\nNote that this only reports back what the JavaScript engine is seeing;\nin particular, the return value may not match the original source code if\na transpilation tool was used.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">function* foo() {}\nconst generator = foo();\nutil.types.isGeneratorObject(generator);  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isInt8Array(value)",
              "type": "method",
              "name": "isInt8Array",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isInt8Array(new ArrayBuffer());  // Returns false\nutil.types.isInt8Array(new Int8Array());  // Returns true\nutil.types.isInt8Array(new Float64Array());  // Returns false\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isInt16Array(value)",
              "type": "method",
              "name": "isInt16Array",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isInt16Array(new ArrayBuffer());  // Returns false\nutil.types.isInt16Array(new Int16Array());  // Returns true\nutil.types.isInt16Array(new Float64Array());  // Returns false\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isInt32Array(value)",
              "type": "method",
              "name": "isInt32Array",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isInt32Array(new ArrayBuffer());  // Returns false\nutil.types.isInt32Array(new Int32Array());  // Returns true\nutil.types.isInt32Array(new Float64Array());  // Returns false\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isMap(value)",
              "type": "method",
              "name": "isMap",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isMap(new Map());  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isMapIterator(value)",
              "type": "method",
              "name": "isMapIterator",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is an iterator returned for a built-in\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">const map = new Map();\nutil.types.isMapIterator(map.keys());  // Returns true\nutil.types.isMapIterator(map.values());  // Returns true\nutil.types.isMapIterator(map.entries());  // Returns true\nutil.types.isMapIterator(map[Symbol.iterator]());  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isNativeError(value)",
              "type": "method",
              "name": "isNativeError",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is an instance of a built-in <a href=\"errors.html#errors_class_error\"><code>Error</code></a> type.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isNativeError(new Error());  // Returns true\nutil.types.isNativeError(new TypeError());  // Returns true\nutil.types.isNativeError(new RangeError());  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isNumberObject(value)",
              "type": "method",
              "name": "isNumberObject",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a number object, e.g. created\nby <code>new Number()</code>.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isNumberObject(0);  // Returns false\nutil.types.isNumberObject(new Number(0));   // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isPromise(value)",
              "type": "method",
              "name": "isPromise",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isPromise(Promise.resolve(42));  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isProxy(value)",
              "type": "method",
              "name": "isProxy",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\"><code>Proxy</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">const target = {};\nconst proxy = new Proxy(target, {});\nutil.types.isProxy(target);  // Returns false\nutil.types.isProxy(proxy);  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isRegExp(value)",
              "type": "method",
              "name": "isRegExp",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a regular expression object.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isRegExp(/abc/);  // Returns true\nutil.types.isRegExp(new RegExp(&#39;abc&#39;));  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isSet(value)",
              "type": "method",
              "name": "isSet",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isSet(new Set());  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isSetIterator(value)",
              "type": "method",
              "name": "isSetIterator",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is an iterator returned for a built-in\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">const set = new Set();\nutil.types.isSetIterator(set.keys());  // Returns true\nutil.types.isSetIterator(set.values());  // Returns true\nutil.types.isSetIterator(set.entries());  // Returns true\nutil.types.isSetIterator(set[Symbol.iterator]());  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isSharedArrayBuffer(value)",
              "type": "method",
              "name": "isSharedArrayBuffer",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> instance.\nThis does <em>not</em> include <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> instances. Usually, it is\ndesirable to test for both; See <a href=\"#util_util_types_isanyarraybuffer_value\"><code>util.types.isAnyArrayBuffer()</code></a> for that.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isSharedArrayBuffer(new ArrayBuffer());  // Returns false\nutil.types.isSharedArrayBuffer(new SharedArrayBuffer());  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isStringObject(value)",
              "type": "method",
              "name": "isStringObject",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a string object, e.g. created\nby <code>new String()</code>.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isStringObject(&#39;foo&#39;);  // Returns false\nutil.types.isStringObject(new String(&#39;foo&#39;));   // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isSymbolObject(value)",
              "type": "method",
              "name": "isSymbolObject",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a symbol object, created\nby calling <code>Object()</code> on a <code>Symbol</code> primitive.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">const symbol = Symbol(&#39;foo&#39;);\nutil.types.isSymbolObject(symbol);  // Returns false\nutil.types.isSymbolObject(Object(symbol));   // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isTypedArray(value)",
              "type": "method",
              "name": "isTypedArray",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isTypedArray(new ArrayBuffer());  // Returns false\nutil.types.isTypedArray(new Uint8Array());  // Returns true\nutil.types.isTypedArray(new Float64Array());  // Returns true\n</code></pre>\n<p>See also <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView\"><code>ArrayBuffer.isView()</code></a>.</p>\n"
            },
            {
              "textRaw": "util.types.isUint8Array(value)",
              "type": "method",
              "name": "isUint8Array",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isUint8Array(new ArrayBuffer());  // Returns false\nutil.types.isUint8Array(new Uint8Array());  // Returns true\nutil.types.isUint8Array(new Float64Array());  // Returns false\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isUint8ClampedArray(value)",
              "type": "method",
              "name": "isUint8ClampedArray",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\"><code>Uint8ClampedArray</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isUint8ClampedArray(new ArrayBuffer());  // Returns false\nutil.types.isUint8ClampedArray(new Uint8ClampedArray());  // Returns true\nutil.types.isUint8ClampedArray(new Float64Array());  // Returns false\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isUint16Array(value)",
              "type": "method",
              "name": "isUint16Array",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isUint16Array(new ArrayBuffer());  // Returns false\nutil.types.isUint16Array(new Uint16Array());  // Returns true\nutil.types.isUint16Array(new Float64Array());  // Returns false\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isUint32Array(value)",
              "type": "method",
              "name": "isUint32Array",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isUint32Array(new ArrayBuffer());  // Returns false\nutil.types.isUint32Array(new Uint32Array());  // Returns true\nutil.types.isUint32Array(new Float64Array());  // Returns false\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isWeakMap(value)",
              "type": "method",
              "name": "isWeakMap",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isWeakMap(new WeakMap());  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isWeakSet(value)",
              "type": "method",
              "name": "isWeakSet",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\"><code>WeakSet</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">util.types.isWeakSet(new WeakSet());  // Returns true\n</code></pre>\n"
            },
            {
              "textRaw": "util.types.isWebAssemblyCompiledModule(value)",
              "type": "method",
              "name": "isWebAssemblyCompiledModule",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the value is a built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> instance.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">const module = new WebAssembly.Module(wasmBuffer);\nutil.types.isWebAssemblyCompiledModule(module);  // Returns true\n</code></pre>\n"
            }
          ]
        }
      ],
      "modules": [
        {
          "textRaw": "Deprecated APIs",
          "name": "deprecated_apis",
          "desc": "<p>The following APIs have been deprecated and should no longer be used. Existing\napplications and modules should be updated to find alternative approaches.</p>\n",
          "methods": [
            {
              "textRaw": "util.\\_extend(target, source)",
              "type": "method",
              "name": "\\_extend",
              "meta": {
                "added": [
                  "v0.7.5"
                ],
                "deprecated": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`Object.assign()`] instead.",
              "desc": "<p>The <code>util._extend()</code> method was never intended to be used outside of internal\nNode.js modules. The community found and used it anyway.</p>\n<p>It is deprecated and should not be used in new code. JavaScript comes with very\nsimilar built-in functionality through <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a>.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "target"
                    },
                    {
                      "name": "source"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "util.debug(string)",
              "type": "method",
              "name": "debug",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "deprecated": [
                  "v0.11.3"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`console.error()`][] instead.",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`string` {string} The message to print to `stderr` ",
                      "name": "string",
                      "type": "string",
                      "desc": "The message to print to `stderr`"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "string"
                    }
                  ]
                }
              ],
              "desc": "<p>Deprecated predecessor of <code>console.error</code>.</p>\n"
            },
            {
              "textRaw": "util.error([...strings])",
              "type": "method",
              "name": "error",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "deprecated": [
                  "v0.11.3"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`console.error()`][] instead.",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`...strings` {string} The message to print to `stderr` ",
                      "name": "...strings",
                      "type": "string",
                      "desc": "The message to print to `stderr`",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "...strings",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Deprecated predecessor of <code>console.error</code>.</p>\n"
            },
            {
              "textRaw": "util.isArray(object)",
              "type": "method",
              "name": "isArray",
              "meta": {
                "added": [
                  "v0.6.0"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`Array.isArray()`][] instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ],
              "desc": "<p>Alias for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"><code>Array.isArray()</code></a>.</p>\n<p>Returns <code>true</code> if the given <code>object</code> is an <code>Array</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isArray([]);\n// Returns: true\nutil.isArray(new Array());\n// Returns: true\nutil.isArray({});\n// Returns: false\n</code></pre>\n"
            },
            {
              "textRaw": "util.isBoolean(object)",
              "type": "method",
              "name": "isBoolean",
              "meta": {
                "added": [
                  "v0.11.5"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use `typeof value === 'boolean'` instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the given <code>object</code> is a <code>Boolean</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isBoolean(1);\n// Returns: false\nutil.isBoolean(0);\n// Returns: false\nutil.isBoolean(false);\n// Returns: true\n</code></pre>\n"
            },
            {
              "textRaw": "util.isBuffer(object)",
              "type": "method",
              "name": "isBuffer",
              "meta": {
                "added": [
                  "v0.11.5"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`Buffer.isBuffer()`][] instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the given <code>object</code> is a <code>Buffer</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isBuffer({ length: 0 });\n// Returns: false\nutil.isBuffer([]);\n// Returns: false\nutil.isBuffer(Buffer.from(&#39;hello world&#39;));\n// Returns: true\n</code></pre>\n"
            },
            {
              "textRaw": "util.isDate(object)",
              "type": "method",
              "name": "isDate",
              "meta": {
                "added": [
                  "v0.6.0"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`util.types.isDate()`][] instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the given <code>object</code> is a <code>Date</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isDate(new Date());\n// Returns: true\nutil.isDate(Date());\n// false (without &#39;new&#39; returns a String)\nutil.isDate({});\n// Returns: false\n</code></pre>\n"
            },
            {
              "textRaw": "util.isError(object)",
              "type": "method",
              "name": "isError",
              "meta": {
                "added": [
                  "v0.6.0"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`util.types.isNativeError()`][] instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the given <code>object</code> is an <a href=\"errors.html#errors_class_error\"><code>Error</code></a>. Otherwise, returns\n<code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isError(new Error());\n// Returns: true\nutil.isError(new TypeError());\n// Returns: true\nutil.isError({ name: &#39;Error&#39;, message: &#39;an error occurred&#39; });\n// Returns: false\n</code></pre>\n<p>Note that this method relies on <code>Object.prototype.toString()</code> behavior. It is\npossible to obtain an incorrect result when the <code>object</code> argument manipulates\n<code>@@toStringTag</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst obj = { name: &#39;Error&#39;, message: &#39;an error occurred&#39; };\n\nutil.isError(obj);\n// Returns: false\nobj[Symbol.toStringTag] = &#39;Error&#39;;\nutil.isError(obj);\n// Returns: true\n</code></pre>\n"
            },
            {
              "textRaw": "util.isFunction(object)",
              "type": "method",
              "name": "isFunction",
              "meta": {
                "added": [
                  "v0.11.5"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use `typeof value === 'function'` instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the given <code>object</code> is a <code>Function</code>. Otherwise, returns\n<code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nfunction Foo() {}\nconst Bar = () =&gt; {};\n\nutil.isFunction({});\n// Returns: false\nutil.isFunction(Foo);\n// Returns: true\nutil.isFunction(Bar);\n// Returns: true\n</code></pre>\n"
            },
            {
              "textRaw": "util.isNull(object)",
              "type": "method",
              "name": "isNull",
              "meta": {
                "added": [
                  "v0.11.5"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use `value === null` instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the given <code>object</code> is strictly <code>null</code>. Otherwise, returns\n<code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isNull(0);\n// Returns: false\nutil.isNull(undefined);\n// Returns: false\nutil.isNull(null);\n// Returns: true\n</code></pre>\n"
            },
            {
              "textRaw": "util.isNullOrUndefined(object)",
              "type": "method",
              "name": "isNullOrUndefined",
              "meta": {
                "added": [
                  "v0.11.5"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Stability: 0 - Deprecated: Use\n<code>value === undefined || value === null</code> instead.</p>\n<p>Returns <code>true</code> if the given <code>object</code> is <code>null</code> or <code>undefined</code>. Otherwise,\nreturns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isNullOrUndefined(0);\n// Returns: false\nutil.isNullOrUndefined(undefined);\n// Returns: true\nutil.isNullOrUndefined(null);\n// Returns: true\n</code></pre>\n",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "util.isNumber(object)",
              "type": "method",
              "name": "isNumber",
              "meta": {
                "added": [
                  "v0.11.5"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use `typeof value === 'number'` instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the given <code>object</code> is a <code>Number</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isNumber(false);\n// Returns: false\nutil.isNumber(Infinity);\n// Returns: true\nutil.isNumber(0);\n// Returns: true\nutil.isNumber(NaN);\n// Returns: true\n</code></pre>\n"
            },
            {
              "textRaw": "util.isObject(object)",
              "type": "method",
              "name": "isObject",
              "meta": {
                "added": [
                  "v0.11.5"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Stability: 0 - Deprecated:\nUse <code>value !== null &amp;&amp; typeof value === &#39;object&#39;</code> instead.</p>\n<p>Returns <code>true</code> if the given <code>object</code> is strictly an <code>Object</code> <strong>and</strong> not a\n<code>Function</code> (even though functions are objects in JavaScript).\nOtherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isObject(5);\n// Returns: false\nutil.isObject(null);\n// Returns: false\nutil.isObject({});\n// Returns: true\nutil.isObject(() =&gt; {});\n// Returns: false\n</code></pre>\n",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "util.isPrimitive(object)",
              "type": "method",
              "name": "isPrimitive",
              "meta": {
                "added": [
                  "v0.11.5"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "desc": "<p>Stability: 0 - Deprecated: Use\n<code>(typeof value !== &#39;object&#39; &amp;&amp; typeof value !== &#39;function&#39;) || value === null</code>\ninstead.</p>\n<p>Returns <code>true</code> if the given <code>object</code> is a primitive type. Otherwise, returns\n<code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isPrimitive(5);\n// Returns: true\nutil.isPrimitive(&#39;foo&#39;);\n// Returns: true\nutil.isPrimitive(false);\n// Returns: true\nutil.isPrimitive(null);\n// Returns: true\nutil.isPrimitive(undefined);\n// Returns: true\nutil.isPrimitive({});\n// Returns: false\nutil.isPrimitive(() =&gt; {});\n// Returns: false\nutil.isPrimitive(/^$/);\n// Returns: false\nutil.isPrimitive(new Date());\n// Returns: false\n</code></pre>\n",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "util.isRegExp(object)",
              "type": "method",
              "name": "isRegExp",
              "meta": {
                "added": [
                  "v0.6.0"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the given <code>object</code> is a <code>RegExp</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isRegExp(/some regexp/);\n// Returns: true\nutil.isRegExp(new RegExp(&#39;another regexp&#39;));\n// Returns: true\nutil.isRegExp({});\n// Returns: false\n</code></pre>\n"
            },
            {
              "textRaw": "util.isString(object)",
              "type": "method",
              "name": "isString",
              "meta": {
                "added": [
                  "v0.11.5"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use `typeof value === 'string'` instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the given <code>object</code> is a <code>string</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isString(&#39;&#39;);\n// Returns: true\nutil.isString(&#39;foo&#39;);\n// Returns: true\nutil.isString(String(&#39;foo&#39;));\n// Returns: true\nutil.isString(5);\n// Returns: false\n</code></pre>\n"
            },
            {
              "textRaw": "util.isSymbol(object)",
              "type": "method",
              "name": "isSymbol",
              "meta": {
                "added": [
                  "v0.11.5"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use `typeof value === 'symbol'` instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the given <code>object</code> is a <code>Symbol</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.isSymbol(5);\n// Returns: false\nutil.isSymbol(&#39;foo&#39;);\n// Returns: false\nutil.isSymbol(Symbol(&#39;foo&#39;));\n// Returns: true\n</code></pre>\n"
            },
            {
              "textRaw": "util.isUndefined(object)",
              "type": "method",
              "name": "isUndefined",
              "meta": {
                "added": [
                  "v0.11.5"
                ],
                "deprecated": [
                  "v4.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use `value === undefined` instead.",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {boolean} ",
                    "name": "return",
                    "type": "boolean"
                  },
                  "params": [
                    {
                      "textRaw": "`object` {any} ",
                      "name": "object",
                      "type": "any"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "object"
                    }
                  ]
                }
              ],
              "desc": "<p>Returns <code>true</code> if the given <code>object</code> is <code>undefined</code>. Otherwise, returns <code>false</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nconst foo = undefined;\nutil.isUndefined(5);\n// Returns: false\nutil.isUndefined(foo);\n// Returns: true\nutil.isUndefined(null);\n// Returns: false\n</code></pre>\n"
            },
            {
              "textRaw": "util.log(string)",
              "type": "method",
              "name": "log",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "deprecated": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use a third party module instead.",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`string` {string} ",
                      "name": "string",
                      "type": "string"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "string"
                    }
                  ]
                }
              ],
              "desc": "<p>The <code>util.log()</code> method prints the given <code>string</code> to <code>stdout</code> with an included\ntimestamp.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\n\nutil.log(&#39;Timestamped message.&#39;);\n</code></pre>\n"
            },
            {
              "textRaw": "util.print([...strings])",
              "type": "method",
              "name": "print",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "deprecated": [
                  "v0.11.3"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`console.log()`][] instead.",
              "desc": "<p>Deprecated predecessor of <code>console.log</code>.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "...strings",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "util.puts([...strings])",
              "type": "method",
              "name": "puts",
              "meta": {
                "added": [
                  "v0.3.0"
                ],
                "deprecated": [
                  "v0.11.3"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`console.log()`][] instead.",
              "desc": "<p>Deprecated predecessor of <code>console.log</code>.</p>\n<!-- [end-include:util.md] -->\n<!-- [start-include:v8.md] -->\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "...strings",
                      "optional": true
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "Deprecated APIs"
        }
      ],
      "type": "module",
      "displayName": "Util"
    },
    {
      "textRaw": "V8",
      "name": "v8",
      "introduced_in": "v4.0.0",
      "desc": "<p>The <code>v8</code> module exposes APIs that are specific to the version of <a href=\"https://developers.google.com/v8/\">V8</a>\nbuilt into the Node.js binary. It can be accessed using:</p>\n<pre><code class=\"lang-js\">const v8 = require(&#39;v8&#39;);\n</code></pre>\n<p>The APIs and implementation are subject to change at any time.</p>\n",
      "methods": [
        {
          "textRaw": "v8.cachedDataVersionTag()",
          "type": "method",
          "name": "cachedDataVersionTag",
          "meta": {
            "added": [
              "v8.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {integer} ",
                "name": "return",
                "type": "integer"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>Returns an integer representing a &quot;version tag&quot; derived from the V8 version,\ncommand line flags and detected CPU features. This is useful for determining\nwhether a <a href=\"vm.html#vm_new_vm_script_code_options\"><code>vm.Script</code></a> <code>cachedData</code> buffer is compatible with this instance\nof V8.</p>\n"
        },
        {
          "textRaw": "v8.getHeapSpaceStatistics()",
          "type": "method",
          "name": "getHeapSpaceStatistics",
          "meta": {
            "added": [
              "v6.0.0"
            ],
            "changes": [
              {
                "version": "v7.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/10186",
                "description": "Support values exceeding the 32-bit unsigned integer range."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Object[]} ",
                "name": "return",
                "type": "Object[]"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>Returns statistics about the V8 heap spaces, i.e. the segments which make up\nthe V8 heap. Neither the ordering of heap spaces, nor the availability of a\nheap space can be guaranteed as the statistics are provided via the V8\n<a href=\"https://v8docs.nodesource.com/node-8.0/d5/dda/classv8_1_1_isolate.html#ac673576f24fdc7a33378f8f57e1d13a4\"><code>GetHeapSpaceStatistics</code></a> function and may change from one V8 version to the\nnext.</p>\n<p>The value returned is an array of objects containing the following properties:</p>\n<ul>\n<li><code>space_name</code> {string}</li>\n<li><code>space_size</code> {number}</li>\n<li><code>space_used_size</code> {number}</li>\n<li><code>space_available_size</code> {number}</li>\n<li><code>physical_space_size</code> {number}</li>\n</ul>\n<pre><code class=\"lang-json\">[\n  {\n    &quot;space_name&quot;: &quot;new_space&quot;,\n    &quot;space_size&quot;: 2063872,\n    &quot;space_used_size&quot;: 951112,\n    &quot;space_available_size&quot;: 80824,\n    &quot;physical_space_size&quot;: 2063872\n  },\n  {\n    &quot;space_name&quot;: &quot;old_space&quot;,\n    &quot;space_size&quot;: 3090560,\n    &quot;space_used_size&quot;: 2493792,\n    &quot;space_available_size&quot;: 0,\n    &quot;physical_space_size&quot;: 3090560\n  },\n  {\n    &quot;space_name&quot;: &quot;code_space&quot;,\n    &quot;space_size&quot;: 1260160,\n    &quot;space_used_size&quot;: 644256,\n    &quot;space_available_size&quot;: 960,\n    &quot;physical_space_size&quot;: 1260160\n  },\n  {\n    &quot;space_name&quot;: &quot;map_space&quot;,\n    &quot;space_size&quot;: 1094160,\n    &quot;space_used_size&quot;: 201608,\n    &quot;space_available_size&quot;: 0,\n    &quot;physical_space_size&quot;: 1094160\n  },\n  {\n    &quot;space_name&quot;: &quot;large_object_space&quot;,\n    &quot;space_size&quot;: 0,\n    &quot;space_used_size&quot;: 0,\n    &quot;space_available_size&quot;: 1490980608,\n    &quot;physical_space_size&quot;: 0\n  }\n]\n</code></pre>\n"
        },
        {
          "textRaw": "v8.getHeapStatistics()",
          "type": "method",
          "name": "getHeapStatistics",
          "meta": {
            "added": [
              "v1.0.0"
            ],
            "changes": [
              {
                "version": "v7.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/8610",
                "description": "Added `malloced_memory`, `peak_malloced_memory`, and `does_zap_garbage`."
              },
              {
                "version": "v7.5.0",
                "pr-url": "https://github.com/nodejs/node/pull/10186",
                "description": "Support values exceeding the 32-bit unsigned integer range."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Object} ",
                "name": "return",
                "type": "Object"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>Returns an object with the following properties:</p>\n<ul>\n<li><code>total_heap_size</code> {number}</li>\n<li><code>total_heap_size_executable</code> {number}</li>\n<li><code>total_physical_size</code> {number}</li>\n<li><code>total_available_size</code> {number}</li>\n<li><code>used_heap_size</code> {number}</li>\n<li><code>heap_size_limit</code> {number}</li>\n<li><code>malloced_memory</code> {number}</li>\n<li><code>peak_malloced_memory</code> {number}</li>\n<li><code>does_zap_garbage</code> {number}</li>\n</ul>\n<p><code>does_zap_garbage</code> is a 0/1 boolean, which signifies whether the\n<code>--zap_code_space</code> option is enabled or not. This makes V8 overwrite heap\ngarbage with a bit pattern. The RSS footprint (resident memory set) gets bigger\nbecause it continuously touches all heap pages and that makes them less likely\nto get swapped out by the operating system.</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  total_heap_size: 7326976,\n  total_heap_size_executable: 4194304,\n  total_physical_size: 7326976,\n  total_available_size: 1152656,\n  used_heap_size: 3476208,\n  heap_size_limit: 1535115264,\n  malloced_memory: 16384,\n  peak_malloced_memory: 1127496,\n  does_zap_garbage: 0\n}\n</code></pre>\n"
        },
        {
          "textRaw": "v8.setFlagsFromString(flags)",
          "type": "method",
          "name": "setFlagsFromString",
          "meta": {
            "added": [
              "v1.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`flags` {string} ",
                  "name": "flags",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "flags"
                }
              ]
            }
          ],
          "desc": "<p>The <code>v8.setFlagsFromString()</code> method can be used to programmatically set\nV8 command line flags. This method should be used with care. Changing settings\nafter the VM has started may result in unpredictable behavior, including\ncrashes and data loss; or it may simply do nothing.</p>\n<p>The V8 options available for a version of Node.js may be determined by running\n<code>node --v8-options</code>. An unofficial, community-maintained list of options\nand their effects is available <a href=\"https://github.com/thlorenz/v8-flags/blob/master/flags-0.11.md\">here</a>.</p>\n<p>Usage:</p>\n<pre><code class=\"lang-js\">// Print GC events to stdout for one minute.\nconst v8 = require(&#39;v8&#39;);\nv8.setFlagsFromString(&#39;--trace_gc&#39;);\nsetTimeout(function() { v8.setFlagsFromString(&#39;--notrace_gc&#39;); }, 60e3);\n</code></pre>\n"
        }
      ],
      "modules": [
        {
          "textRaw": "Serialization API",
          "name": "serialization_api",
          "stability": 1,
          "stabilityText": "Experimental",
          "desc": "<p>The serialization API provides means of serializing JavaScript values in a way\nthat is compatible with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">HTML structured clone algorithm</a>.\nThe format is backward-compatible (i.e. safe to store to disk).</p>\n<p>This API is under development, and changes (including incompatible\nchanges to the API or wire format) may occur until this warning is removed.</p>\n",
          "methods": [
            {
              "textRaw": "v8.serialize(value)",
              "type": "method",
              "name": "serialize",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Buffer} ",
                    "name": "return",
                    "type": "Buffer"
                  },
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "value"
                    }
                  ]
                }
              ],
              "desc": "<p>Uses a <a href=\"#v8_class_v8_defaultserializer\"><code>DefaultSerializer</code></a> to serialize <code>value</code> into a buffer.</p>\n"
            },
            {
              "textRaw": "v8.deserialize(buffer)",
              "type": "method",
              "name": "deserialize",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|Uint8Array} A buffer returned by [`serialize()`][]. ",
                      "name": "buffer",
                      "type": "Buffer|Uint8Array",
                      "desc": "A buffer returned by [`serialize()`][]."
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    }
                  ]
                }
              ],
              "desc": "<p>Uses a <a href=\"#v8_class_v8_defaultdeserializer\"><code>DefaultDeserializer</code></a> with default options to read a JS value\nfrom a buffer.</p>\n"
            }
          ],
          "classes": [
            {
              "textRaw": "class: v8.Serializer",
              "type": "class",
              "name": "v8.Serializer",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "methods": [
                {
                  "textRaw": "serializer.writeHeader()",
                  "type": "method",
                  "name": "writeHeader",
                  "desc": "<p>Writes out a header, which includes the serialization format version.</p>\n",
                  "signatures": [
                    {
                      "params": []
                    }
                  ]
                },
                {
                  "textRaw": "serializer.writeValue(value)",
                  "type": "method",
                  "name": "writeValue",
                  "desc": "<p>Serializes a JavaScript value and adds the serialized representation to the\ninternal buffer.</p>\n<p>This throws an error if <code>value</code> cannot be serialized.</p>\n",
                  "signatures": [
                    {
                      "params": [
                        {
                          "name": "value"
                        }
                      ]
                    }
                  ]
                },
                {
                  "textRaw": "serializer.releaseBuffer()",
                  "type": "method",
                  "name": "releaseBuffer",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Buffer} ",
                        "name": "return",
                        "type": "Buffer"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Returns the stored internal buffer. This serializer should not be used once\nthe buffer is released. Calling this method results in undefined behavior\nif a previous write has failed.</p>\n"
                },
                {
                  "textRaw": "serializer.transferArrayBuffer(id, arrayBuffer)",
                  "type": "method",
                  "name": "transferArrayBuffer",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`id` {integer} A 32-bit unsigned integer. ",
                          "name": "id",
                          "type": "integer",
                          "desc": "A 32-bit unsigned integer."
                        },
                        {
                          "textRaw": "`arrayBuffer` {ArrayBuffer} An `ArrayBuffer` instance. ",
                          "name": "arrayBuffer",
                          "type": "ArrayBuffer",
                          "desc": "An `ArrayBuffer` instance."
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "id"
                        },
                        {
                          "name": "arrayBuffer"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Marks an <code>ArrayBuffer</code> as havings its contents transferred out of band.\nPass the corresponding <code>ArrayBuffer</code> in the deserializing context to\n<a href=\"#v8_deserializer_transferarraybuffer_id_arraybuffer\"><code>deserializer.transferArrayBuffer()</code></a>.</p>\n"
                },
                {
                  "textRaw": "serializer.writeUint32(value)",
                  "type": "method",
                  "name": "writeUint32",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`value` {integer} ",
                          "name": "value",
                          "type": "integer"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "value"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Write a raw 32-bit unsigned integer.\nFor use inside of a custom <a href=\"#v8_serializer_writehostobject_object\"><code>serializer._writeHostObject()</code></a>.</p>\n"
                },
                {
                  "textRaw": "serializer.writeUint64(hi, lo)",
                  "type": "method",
                  "name": "writeUint64",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`hi` {integer} ",
                          "name": "hi",
                          "type": "integer"
                        },
                        {
                          "textRaw": "`lo` {integer} ",
                          "name": "lo",
                          "type": "integer"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "hi"
                        },
                        {
                          "name": "lo"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Write a raw 64-bit unsigned integer, split into high and low 32-bit parts.\nFor use inside of a custom <a href=\"#v8_serializer_writehostobject_object\"><code>serializer._writeHostObject()</code></a>.</p>\n"
                },
                {
                  "textRaw": "serializer.writeDouble(value)",
                  "type": "method",
                  "name": "writeDouble",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`value` {number} ",
                          "name": "value",
                          "type": "number"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "value"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Write a JS <code>number</code> value.\nFor use inside of a custom <a href=\"#v8_serializer_writehostobject_object\"><code>serializer._writeHostObject()</code></a>.</p>\n"
                },
                {
                  "textRaw": "serializer.writeRawBytes(buffer)",
                  "type": "method",
                  "name": "writeRawBytes",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`buffer` {Buffer|Uint8Array} ",
                          "name": "buffer",
                          "type": "Buffer|Uint8Array"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "buffer"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Write raw bytes into the serializer’s internal buffer. The deserializer\nwill require a way to compute the length of the buffer.\nFor use inside of a custom <a href=\"#v8_serializer_writehostobject_object\"><code>serializer._writeHostObject()</code></a>.</p>\n"
                },
                {
                  "textRaw": "serializer.\\_writeHostObject(object)",
                  "type": "method",
                  "name": "\\_writeHostObject",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`object` {Object} ",
                          "name": "object",
                          "type": "Object"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "object"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>This method is called to write some kind of host object, i.e. an object created\nby native C++ bindings. If it is not possible to serialize <code>object</code>, a suitable\nexception should be thrown.</p>\n<p>This method is not present on the <code>Serializer</code> class itself but can be provided\nby subclasses.</p>\n"
                },
                {
                  "textRaw": "serializer.\\_getDataCloneError(message)",
                  "type": "method",
                  "name": "\\_getDataCloneError",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`message` {string} ",
                          "name": "message",
                          "type": "string"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "message"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>This method is called to generate error objects that will be thrown when an\nobject can not be cloned.</p>\n<p>This method defaults to the <a href=\"errors.html#errors_class_error\"><code>Error</code></a> constructor and can be overridden on\nsubclasses.</p>\n"
                },
                {
                  "textRaw": "serializer.\\_getSharedArrayBufferId(sharedArrayBuffer)",
                  "type": "method",
                  "name": "\\_getSharedArrayBufferId",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`sharedArrayBuffer` {SharedArrayBuffer} ",
                          "name": "sharedArrayBuffer",
                          "type": "SharedArrayBuffer"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "sharedArrayBuffer"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>This method is called when the serializer is going to serialize a\n<code>SharedArrayBuffer</code> object. It must return an unsigned 32-bit integer ID for\nthe object, using the same ID if this <code>SharedArrayBuffer</code> has already been\nserialized. When deserializing, this ID will be passed to\n<a href=\"#v8_deserializer_transferarraybuffer_id_arraybuffer\"><code>deserializer.transferArrayBuffer()</code></a>.</p>\n<p>If the object cannot be serialized, an exception should be thrown.</p>\n<p>This method is not present on the <code>Serializer</code> class itself but can be provided\nby subclasses.</p>\n"
                },
                {
                  "textRaw": "serializer.\\_setTreatArrayBufferViewsAsHostObjects(flag)",
                  "type": "method",
                  "name": "\\_setTreatArrayBufferViewsAsHostObjects",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`flag` {boolean} **Default:** `false` ",
                          "name": "flag",
                          "type": "boolean",
                          "default": "`false`"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "flag"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Indicate whether to treat <code>TypedArray</code> and <code>DataView</code> objects as\nhost objects, i.e. pass them to <a href=\"#v8_serializer_writehostobject_object\"><code>serializer._writeHostObject()</code></a>.</p>\n"
                }
              ],
              "signatures": [
                {
                  "params": [],
                  "desc": "<p>Creates a new <code>Serializer</code> object.</p>\n"
                }
              ]
            },
            {
              "textRaw": "class: v8.Deserializer",
              "type": "class",
              "name": "v8.Deserializer",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "methods": [
                {
                  "textRaw": "deserializer.readHeader()",
                  "type": "method",
                  "name": "readHeader",
                  "desc": "<p>Reads and validates a header (including the format version).\nMay, for example, reject an invalid or unsupported wire format. In that case,\nan <code>Error</code> is thrown.</p>\n",
                  "signatures": [
                    {
                      "params": []
                    }
                  ]
                },
                {
                  "textRaw": "deserializer.readValue()",
                  "type": "method",
                  "name": "readValue",
                  "desc": "<p>Deserializes a JavaScript value from the buffer and returns it.</p>\n",
                  "signatures": [
                    {
                      "params": []
                    }
                  ]
                },
                {
                  "textRaw": "deserializer.transferArrayBuffer(id, arrayBuffer)",
                  "type": "method",
                  "name": "transferArrayBuffer",
                  "signatures": [
                    {
                      "params": [
                        {
                          "textRaw": "`id` {integer} A 32-bit unsigned integer. ",
                          "name": "id",
                          "type": "integer",
                          "desc": "A 32-bit unsigned integer."
                        },
                        {
                          "textRaw": "`arrayBuffer` {ArrayBuffer|SharedArrayBuffer} An `ArrayBuffer` instance. ",
                          "name": "arrayBuffer",
                          "type": "ArrayBuffer|SharedArrayBuffer",
                          "desc": "An `ArrayBuffer` instance."
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "id"
                        },
                        {
                          "name": "arrayBuffer"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Marks an <code>ArrayBuffer</code> as havings its contents transferred out of band.\nPass the corresponding <code>ArrayBuffer</code> in the serializing context to\n<a href=\"#v8_serializer_transferarraybuffer_id_arraybuffer\"><code>serializer.transferArrayBuffer()</code></a> (or return the <code>id</code> from\n<a href=\"#v8_serializer_getsharedarraybufferid_sharedarraybuffer\"><code>serializer._getSharedArrayBufferId()</code></a> in the case of <code>SharedArrayBuffer</code>s).</p>\n"
                },
                {
                  "textRaw": "deserializer.getWireFormatVersion()",
                  "type": "method",
                  "name": "getWireFormatVersion",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {integer} ",
                        "name": "return",
                        "type": "integer"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Reads the underlying wire format version. Likely mostly to be useful to\nlegacy code reading old wire format versions. May not be called before\n<code>.readHeader()</code>.</p>\n"
                },
                {
                  "textRaw": "deserializer.readUint32()",
                  "type": "method",
                  "name": "readUint32",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {integer} ",
                        "name": "return",
                        "type": "integer"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Read a raw 32-bit unsigned integer and return it.\nFor use inside of a custom <a href=\"#v8_deserializer_readhostobject\"><code>deserializer._readHostObject()</code></a>.</p>\n"
                },
                {
                  "textRaw": "deserializer.readUint64()",
                  "type": "method",
                  "name": "readUint64",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {integer[]} ",
                        "name": "return",
                        "type": "integer[]"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Read a raw 64-bit unsigned integer and return it as an array <code>[hi, lo]</code>\nwith two 32-bit unsigned integer entries.\nFor use inside of a custom <a href=\"#v8_deserializer_readhostobject\"><code>deserializer._readHostObject()</code></a>.</p>\n"
                },
                {
                  "textRaw": "deserializer.readDouble()",
                  "type": "method",
                  "name": "readDouble",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {number} ",
                        "name": "return",
                        "type": "number"
                      },
                      "params": []
                    },
                    {
                      "params": []
                    }
                  ],
                  "desc": "<p>Read a JS <code>number</code> value.\nFor use inside of a custom <a href=\"#v8_deserializer_readhostobject\"><code>deserializer._readHostObject()</code></a>.</p>\n"
                },
                {
                  "textRaw": "deserializer.readRawBytes(length)",
                  "type": "method",
                  "name": "readRawBytes",
                  "signatures": [
                    {
                      "return": {
                        "textRaw": "Returns: {Buffer} ",
                        "name": "return",
                        "type": "Buffer"
                      },
                      "params": [
                        {
                          "name": "length"
                        }
                      ]
                    },
                    {
                      "params": [
                        {
                          "name": "length"
                        }
                      ]
                    }
                  ],
                  "desc": "<p>Read raw bytes from the deserializer’s internal buffer. The <code>length</code> parameter\nmust correspond to the length of the buffer that was passed to\n<a href=\"#v8_serializer_writerawbytes_buffer\"><code>serializer.writeRawBytes()</code></a>.\nFor use inside of a custom <a href=\"#v8_deserializer_readhostobject\"><code>deserializer._readHostObject()</code></a>.</p>\n"
                },
                {
                  "textRaw": "deserializer.\\_readHostObject()",
                  "type": "method",
                  "name": "\\_readHostObject",
                  "desc": "<p>This method is called to read some kind of host object, i.e. an object that is\ncreated by native C++ bindings. If it is not possible to deserialize the data,\na suitable exception should be thrown.</p>\n<p>This method is not present on the <code>Deserializer</code> class itself but can be\nprovided by subclasses.</p>\n",
                  "signatures": [
                    {
                      "params": []
                    }
                  ]
                }
              ],
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|Uint8Array} A buffer returned by [`serializer.releaseBuffer()`][]. ",
                      "name": "buffer",
                      "type": "Buffer|Uint8Array",
                      "desc": "A buffer returned by [`serializer.releaseBuffer()`][]."
                    }
                  ],
                  "desc": "<p>Creates a new <code>Deserializer</code> object.</p>\n"
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    }
                  ],
                  "desc": "<p>Creates a new <code>Deserializer</code> object.</p>\n"
                }
              ]
            },
            {
              "textRaw": "class: v8.DefaultSerializer",
              "type": "class",
              "name": "v8.DefaultSerializer",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>A subclass of <a href=\"#v8_class_v8_serializer\"><code>Serializer</code></a> that serializes <code>TypedArray</code>\n(in particular <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>) and <code>DataView</code> objects as host objects, and only\nstores the part of their underlying <code>ArrayBuffer</code>s that they are referring to.</p>\n"
            },
            {
              "textRaw": "class: v8.DefaultDeserializer",
              "type": "class",
              "name": "v8.DefaultDeserializer",
              "meta": {
                "added": [
                  "v8.0.0"
                ],
                "changes": []
              },
              "desc": "<p>A subclass of <a href=\"#v8_class_v8_deserializer\"><code>Deserializer</code></a> corresponding to the format written by\n<a href=\"#v8_class_v8_defaultserializer\"><code>DefaultSerializer</code></a>.</p>\n<!-- [end-include:v8.md] -->\n<!-- [start-include:vm.md] -->\n"
            }
          ],
          "type": "module",
          "displayName": "Serialization API"
        }
      ],
      "type": "module",
      "displayName": "V8"
    },
    {
      "textRaw": "VM (Executing JavaScript)",
      "name": "vm",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>vm</code> module provides APIs for compiling and running code within V8 Virtual\nMachine contexts.</p>\n<p>JavaScript code can be compiled and run immediately or\ncompiled, saved, and run later.</p>\n<p>A common use case is to run the code in a sandboxed environment.\nThe sandboxed code uses a different V8 Context, meaning that\nit has a different global object than the rest of the code.</p>\n<p>One can provide the context by <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">&quot;contextifying&quot;</a> a sandbox\nobject. The sandboxed code treats any property on the sandbox like a\nglobal variable. Any changes on global variables caused by the sandboxed\ncode are reflected in the sandbox object.</p>\n<pre><code class=\"lang-js\">const vm = require(&#39;vm&#39;);\n\nconst x = 1;\n\nconst sandbox = { x: 2 };\nvm.createContext(sandbox); // Contextify the sandbox.\n\nconst code = &#39;x += 40; var y = 17;&#39;;\n// x and y are global variables in the sandboxed environment.\n// Initially, x has the value 2 because that is the value of sandbox.x.\nvm.runInContext(code, sandbox);\n\nconsole.log(sandbox.x); // 42\nconsole.log(sandbox.y); // 17\n\nconsole.log(x); // 1; y is not defined.\n</code></pre>\n<p><strong>The vm module is not a security mechanism. Do not use it to run untrusted\ncode</strong>.</p>\n",
      "classes": [
        {
          "textRaw": "Class: vm.Module",
          "type": "class",
          "name": "vm.Module",
          "meta": {
            "added": [
              "v9.6.0"
            ],
            "changes": []
          },
          "stability": 1,
          "stabilityText": "Experimental",
          "desc": "<p><em>This feature is only available with the <code>--experimental-vm-modules</code> command\nflag enabled.</em></p>\n<p>The <code>vm.Module</code> class provides a low-level interface for using ECMAScript\nmodules in VM contexts. It is the counterpart of the <code>vm.Script</code> class that\nclosely mirrors <a href=\"https://tc39.github.io/ecma262/#sec-source-text-module-records\">Source Text Module Record</a>s as defined in the ECMAScript\nspecification.</p>\n<p>Unlike <code>vm.Script</code> however, every <code>vm.Module</code> object is bound to a context from\nits creation. Operations on <code>vm.Module</code> objects are intrinsically asynchronous,\nin contrast with the synchronous nature of <code>vm.Script</code> objects. With the help\nof async functions, however, manipulating <code>vm.Module</code> objects is fairly\nstraightforward.</p>\n<p>Using a <code>vm.Module</code> object requires four distinct steps: creation/parsing,\nlinking, instantiation, and evaluation. These four steps are illustrated in the\nfollowing example.</p>\n<p>This implementation lies at a lower level than the <a href=\"esm.html#esm_ecmascript_modules\">ECMAScript Module\nloader</a>. There is also currently no way to interact with the Loader, though\nsupport is planned.</p>\n<pre><code class=\"lang-js\">const vm = require(&#39;vm&#39;);\n\nconst contextifiedSandbox = vm.createContext({ secret: 42 });\n\n(async () =&gt; {\n  // Step 1\n  //\n  // Create a Module by constructing a new `vm.Module` object. This parses the\n  // provided source text, throwing a `SyntaxError` if anything goes wrong. By\n  // default, a Module is created in the top context. But here, we specify\n  // `contextifiedSandbox` as the context this Module belongs to.\n  //\n  // Here, we attempt to obtain the default export from the module &quot;foo&quot;, and\n  // put it into local binding &quot;secret&quot;.\n\n  const bar = new vm.Module(`\n    import s from &#39;foo&#39;;\n    s;\n  `, { context: contextifiedSandbox });\n\n  // Step 2\n  //\n  // &quot;Link&quot; the imported dependencies of this Module to it.\n  //\n  // The provided linking callback (the &quot;linker&quot;) accepts two arguments: the\n  // parent module (`bar` in this case) and the string that is the specifier of\n  // the imported module. The callback is expected to return a Module that\n  // corresponds to the provided specifier, with certain requirements documented\n  // in `module.link()`.\n  //\n  // If linking has not started for the returned Module, the same linker\n  // callback will be called on the returned Module.\n  //\n  // Even top-level Modules without dependencies must be explicitly linked. The\n  // callback provided would never be called, however.\n  //\n  // The link() method returns a Promise that will be resolved when all the\n  // Promises returned by the linker resolve.\n  //\n  // Note: This is a contrived example in that the linker function creates a new\n  // &quot;foo&quot; module every time it is called. In a full-fledged module system, a\n  // cache would probably be used to avoid duplicated modules.\n\n  async function linker(specifier, referencingModule) {\n    if (specifier === &#39;foo&#39;) {\n      return new vm.Module(`\n        // The &quot;secret&quot; variable refers to the global variable we added to\n        // &quot;contextifiedSandbox&quot; when creating the context.\n        export default secret;\n      `, { context: referencingModule.context });\n\n      // Using `contextifiedSandbox` instead of `referencingModule.context`\n      // here would work as well.\n    }\n    throw new Error(`Unable to resolve dependency: ${specifier}`);\n  }\n  await bar.link(linker);\n\n  // Step 3\n  //\n  // Instantiate the top-level Module.\n  //\n  // Only the top-level Module needs to be explicitly instantiated; its\n  // dependencies will be recursively instantiated by instantiate().\n\n  bar.instantiate();\n\n  // Step 4\n  //\n  // Evaluate the Module. The evaluate() method returns a Promise with a single\n  // property &quot;result&quot; that contains the result of the very last statement\n  // executed in the Module. In the case of `bar`, it is `s;`, which refers to\n  // the default export of the `foo` module, the `secret` we set in the\n  // beginning to 42.\n\n  const { result } = await bar.evaluate();\n\n  console.log(result);\n  // Prints 42.\n})();\n</code></pre>\n",
          "properties": [
            {
              "textRaw": "`dependencySpecifiers` {string[]} ",
              "type": "string[]",
              "name": "dependencySpecifiers",
              "desc": "<p>The specifiers of all dependencies of this module. The returned array is frozen\nto disallow any changes to it.</p>\n<p>Corresponds to the <code>[[RequestedModules]]</code> field of\n<a href=\"https://tc39.github.io/ecma262/#sec-source-text-module-records\">Source Text Module Record</a>s in the ECMAScript specification.</p>\n"
            },
            {
              "textRaw": "`error` {any} ",
              "type": "any",
              "name": "error",
              "desc": "<p>If the <code>module.status</code> is <code>&#39;errored&#39;</code>, this property contains the exception\nthrown by the module during evaluation. If the status is anything else,\naccessing this property will result in a thrown exception.</p>\n<p>The value <code>undefined</code> cannot be used for cases where there is not a thrown\nexception due to possible ambiguity with <code>throw undefined;</code>.</p>\n<p>Corresponds to the <code>[[EvaluationError]]</code> field of <a href=\"https://tc39.github.io/ecma262/#sec-source-text-module-records\">Source Text Module Record</a>s\nin the ECMAScript specification.</p>\n"
            },
            {
              "textRaw": "`linkingStatus` {string} ",
              "type": "string",
              "name": "linkingStatus",
              "desc": "<p>The current linking status of <code>module</code>. It will be one of the following values:</p>\n<ul>\n<li><code>&#39;unlinked&#39;</code>: <code>module.link()</code> has not yet been called.</li>\n<li><code>&#39;linking&#39;</code>: <code>module.link()</code> has been called, but not all Promises returned by\nthe linker function have been resolved yet.</li>\n<li><code>&#39;linked&#39;</code>: <code>module.link()</code> has been called, and all its dependencies have\nbeen successfully linked.</li>\n<li><code>&#39;errored&#39;</code>: <code>module.link()</code> has been called, but at least one of its\ndependencies failed to link, either because the callback returned a <code>Promise</code>\nthat is rejected, or because the <code>Module</code> the callback returned is invalid.</li>\n</ul>\n"
            },
            {
              "textRaw": "`namespace` {Object} ",
              "type": "Object",
              "name": "namespace",
              "desc": "<p>The namespace object of the module. This is only available after instantiation\n(<code>module.instantiate()</code>) has completed.</p>\n<p>Corresponds to the <a href=\"https://tc39.github.io/ecma262/#sec-getmodulenamespace\">GetModuleNamespace</a> abstract operation in the ECMAScript\nspecification.</p>\n"
            },
            {
              "textRaw": "`status` {string} ",
              "type": "string",
              "name": "status",
              "desc": "<p>The current status of the module. Will be one of:</p>\n<ul>\n<li><p><code>&#39;uninstantiated&#39;</code>: The module is not instantiated. It may because of any of\nthe following reasons:</p>\n<ul>\n<li>The module was just created.</li>\n<li><code>module.instantiate()</code> has been called on this module, but it failed for\nsome reason.</li>\n</ul>\n<p>This status does not convey any information regarding if <code>module.link()</code> has\nbeen called. See <code>module.linkingStatus</code> for that.</p>\n</li>\n<li><p><code>&#39;instantiating&#39;</code>: The module is currently being instantiated through a\n<code>module.instantiate()</code> call on itself or a parent module.</p>\n</li>\n<li><p><code>&#39;instantiated&#39;</code>: The module has been instantiated successfully, but\n<code>module.evaluate()</code> has not yet been called.</p>\n</li>\n<li><p><code>&#39;evaluating&#39;</code>: The module is being evaluated through a <code>module.evaluate()</code> on\nitself or a parent module.</p>\n</li>\n<li><p><code>&#39;evaluated&#39;</code>: The module has been successfully evaluated.</p>\n</li>\n<li><p><code>&#39;errored&#39;</code>: The module has been evaluated, but an exception was thrown.</p>\n</li>\n</ul>\n<p>Other than <code>&#39;errored&#39;</code>, this status string corresponds to the specification&#39;s\n<a href=\"https://tc39.github.io/ecma262/#sec-source-text-module-records\">Source Text Module Record</a>&#39;s <code>[[Status]]</code> field. <code>&#39;errored&#39;</code> corresponds to\n<code>&#39;evaluated&#39;</code> in the specification, but with <code>[[EvaluationError]]</code> set to a\nvalue that is not <code>undefined</code>.</p>\n"
            },
            {
              "textRaw": "`url` {string} ",
              "type": "string",
              "name": "url",
              "desc": "<p>The URL of the current module, as set in the constructor.</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "module.evaluate([options])",
              "type": "method",
              "name": "evaluate",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`timeout` {number} Specifies the number of milliseconds to evaluate before terminating execution. If execution is interrupted, an [`Error`][] will be thrown. ",
                          "name": "timeout",
                          "type": "number",
                          "desc": "Specifies the number of milliseconds to evaluate before terminating execution. If execution is interrupted, an [`Error`][] will be thrown."
                        },
                        {
                          "textRaw": "`breakOnSigint` {boolean} If `true`, the execution will be terminated when `SIGINT` (Ctrl+C) is received. Existing handlers for the event that have been attached via `process.on('SIGINT')` will be disabled during script execution, but will continue to work after that. If execution is interrupted, an [`Error`][] will be thrown. ",
                          "name": "breakOnSigint",
                          "type": "boolean",
                          "desc": "If `true`, the execution will be terminated when `SIGINT` (Ctrl+C) is received. Existing handlers for the event that have been attached via `process.on('SIGINT')` will be disabled during script execution, but will continue to work after that. If execution is interrupted, an [`Error`][] will be thrown."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Evaluate the module.</p>\n<p>This must be called after the module has been instantiated; otherwise it will\nthrow an error. It could be called also when the module has already been\nevaluated, in which case it will do one of the following two things:</p>\n<ul>\n<li>return <code>undefined</code> if the initial evaluation ended in success (<code>module.status</code>\nis <code>&#39;evaluated&#39;</code>)</li>\n<li>rethrow the same exception the initial evaluation threw if the initial\nevaluation ended in an error (<code>module.status</code> is <code>&#39;errored&#39;</code>)</li>\n</ul>\n<p>This method cannot be called while the module is being evaluated\n(<code>module.status</code> is <code>&#39;evaluating&#39;</code>) to prevent infinite recursion.</p>\n<p>Corresponds to the <a href=\"https://tc39.github.io/ecma262/#sec-moduleevaluation\">Evaluate() concrete method</a> field of <a href=\"https://tc39.github.io/ecma262/#sec-source-text-module-records\">Source Text Module\nRecord</a>s in the ECMAScript specification.</p>\n"
            },
            {
              "textRaw": "module.instantiate()",
              "type": "method",
              "name": "instantiate",
              "desc": "<p>Instantiate the module. This must be called after linking has completed\n(<code>linkingStatus</code> is <code>&#39;linked&#39;</code>); otherwise it will throw an error. It may also\nthrow an exception if one of the dependencies does not provide an export the\nparent module requires.</p>\n<p>However, if this function succeeded, further calls to this function after the\ninitial instantiation will be no-ops, to be consistent with the ECMAScript\nspecification.</p>\n<p>Unlike other methods operating on <code>Module</code>, this function completes\nsynchronously and returns nothing.</p>\n<p>Corresponds to the <a href=\"https://tc39.github.io/ecma262/#sec-moduledeclarationinstantiation\">Instantiate() concrete method</a> field of <a href=\"https://tc39.github.io/ecma262/#sec-source-text-module-records\">Source Text\nModule Record</a>s in the ECMAScript specification.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "module.link(linker)",
              "type": "method",
              "name": "link",
              "signatures": [
                {
                  "return": {
                    "textRaw": "Returns: {Promise} ",
                    "name": "return",
                    "type": "Promise"
                  },
                  "params": [
                    {
                      "textRaw": "`linker` {Function} ",
                      "name": "linker",
                      "type": "Function"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "linker"
                    }
                  ]
                }
              ],
              "desc": "<p>Link module dependencies. This method must be called before instantiation, and\ncan only be called once per module.</p>\n<p>Two parameters will be passed to the <code>linker</code> function:</p>\n<ul>\n<li><code>specifier</code> The specifier of the requested module:<!-- eslint-skip -->\n<pre><code class=\"lang-js\">import foo from &#39;foo&#39;;\n//              ^^^^^ the module specifier\n</code></pre>\n</li>\n<li><code>referencingModule</code> The <code>Module</code> object <code>link()</code> is called on.</li>\n</ul>\n<p>The function is expected to return a <code>Module</code> object or a <code>Promise</code> that\neventually resolves to a <code>Module</code> object. The returned <code>Module</code> must satisfy the\nfollowing two invariants:</p>\n<ul>\n<li>It must belong to the same context as the parent <code>Module</code>.</li>\n<li>Its <code>linkingStatus</code> must not be <code>&#39;errored&#39;</code>.</li>\n</ul>\n<p>If the returned <code>Module</code>&#39;s <code>linkingStatus</code> is <code>&#39;unlinked&#39;</code>, this method will be\nrecursively called on the returned <code>Module</code> with the same provided <code>linker</code>\nfunction.</p>\n<p><code>link()</code> returns a <code>Promise</code> that will either get resolved when all linking\ninstances resolve to a valid <code>Module</code>, or rejected if the linker function either\nthrows an exception or returns an invalid <code>Module</code>.</p>\n<p>The linker function roughly corresponds to the implementation-defined\n<a href=\"https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule\">HostResolveImportedModule</a> abstract operation in the ECMAScript\nspecification, with a few key differences:</p>\n<ul>\n<li>The linker function is allowed to be asynchronous while\n<a href=\"https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule\">HostResolveImportedModule</a> is synchronous.</li>\n<li>The linker function is executed during linking, a Node.js-specific stage\nbefore instantiation, while <a href=\"https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule\">HostResolveImportedModule</a> is called during\ninstantiation.</li>\n</ul>\n<p>The actual <a href=\"https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule\">HostResolveImportedModule</a> implementation used during module\ninstantiation is one that returns the modules linked during linking. Since at\nthat point all modules would have been fully linked already, the\n<a href=\"https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule\">HostResolveImportedModule</a> implementation is fully synchronous per\nspecification.</p>\n"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`code` {string} JavaScript Module code to parse ",
                  "name": "code",
                  "type": "string",
                  "desc": "JavaScript Module code to parse"
                },
                {
                  "textRaw": "`options` ",
                  "options": [
                    {
                      "textRaw": "`url` {string} URL used in module resolution and stack traces. **Default:** `'vm:module(i)'` where `i` is a context-specific ascending index. ",
                      "name": "url",
                      "type": "string",
                      "default": "`'vm:module(i)'` where `i` is a context-specific ascending index",
                      "desc": "URL used in module resolution and stack traces."
                    },
                    {
                      "textRaw": "`context` {Object} The [contextified][] object as returned by the `vm.createContext()` method, to compile and evaluate this `Module` in. ",
                      "name": "context",
                      "type": "Object",
                      "desc": "The [contextified][] object as returned by the `vm.createContext()` method, to compile and evaluate this `Module` in."
                    },
                    {
                      "textRaw": "`lineOffset` {integer} Specifies the line number offset that is displayed in stack traces produced by this `Module`. ",
                      "name": "lineOffset",
                      "type": "integer",
                      "desc": "Specifies the line number offset that is displayed in stack traces produced by this `Module`."
                    },
                    {
                      "textRaw": "`columnOffset` {integer} Specifies the column number offset that is displayed in stack traces produced by this `Module`. ",
                      "name": "columnOffset",
                      "type": "integer",
                      "desc": "Specifies the column number offset that is displayed in stack traces produced by this `Module`."
                    },
                    {
                      "textRaw": "`initalizeImportMeta` {Function} Called during evaluation of this `Module` to initialize the `import.meta`. This function has the signature `(meta, module)`, where `meta` is the `import.meta` object in the `Module`, and `module` is this `vm.Module` object. ",
                      "name": "initalizeImportMeta",
                      "type": "Function",
                      "desc": "Called during evaluation of this `Module` to initialize the `import.meta`. This function has the signature `(meta, module)`, where `meta` is the `import.meta` object in the `Module`, and `module` is this `vm.Module` object."
                    }
                  ],
                  "name": "options",
                  "optional": true
                }
              ],
              "desc": "<p>Creates a new ES <code>Module</code> object.</p>\n<p><em>Note</em>: Properties assigned to the <code>import.meta</code> object that are objects may\nallow the <code>Module</code> to access information outside the specified <code>context</code>, if the\nobject is created in the top level context. Use <code>vm.runInContext()</code> to create\nobjects in a specific context.</p>\n<pre><code class=\"lang-js\">const vm = require(&#39;vm&#39;);\n\nconst contextifiedSandbox = vm.createContext({ secret: 42 });\n\n(async () =&gt; {\n  const module = new vm.Module(\n    &#39;Object.getPrototypeOf(import.meta.prop).secret = secret;&#39;,\n    {\n      initializeImportMeta(meta) {\n        // Note: this object is created in the top context. As such,\n        // Object.getPrototypeOf(import.meta.prop) points to the\n        // Object.prototype in the top context rather than that in\n        // the sandbox.\n        meta.prop = {};\n      }\n    });\n  // Since module has no dependencies, the linker function will never be called.\n  await module.link(() =&gt; {});\n  module.initialize();\n  await module.evaluate();\n\n  // Now, Object.prototype.secret will be equal to 42.\n  //\n  // To fix this problem, replace\n  //     meta.prop = {};\n  // above with\n  //     meta.prop = vm.runInContext(&#39;{}&#39;, contextifiedSandbox);\n})();\n</code></pre>\n"
            },
            {
              "params": [
                {
                  "name": "code"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ],
              "desc": "<p>Creates a new ES <code>Module</code> object.</p>\n<p><em>Note</em>: Properties assigned to the <code>import.meta</code> object that are objects may\nallow the <code>Module</code> to access information outside the specified <code>context</code>, if the\nobject is created in the top level context. Use <code>vm.runInContext()</code> to create\nobjects in a specific context.</p>\n<pre><code class=\"lang-js\">const vm = require(&#39;vm&#39;);\n\nconst contextifiedSandbox = vm.createContext({ secret: 42 });\n\n(async () =&gt; {\n  const module = new vm.Module(\n    &#39;Object.getPrototypeOf(import.meta.prop).secret = secret;&#39;,\n    {\n      initializeImportMeta(meta) {\n        // Note: this object is created in the top context. As such,\n        // Object.getPrototypeOf(import.meta.prop) points to the\n        // Object.prototype in the top context rather than that in\n        // the sandbox.\n        meta.prop = {};\n      }\n    });\n  // Since module has no dependencies, the linker function will never be called.\n  await module.link(() =&gt; {});\n  module.initialize();\n  await module.evaluate();\n\n  // Now, Object.prototype.secret will be equal to 42.\n  //\n  // To fix this problem, replace\n  //     meta.prop = {};\n  // above with\n  //     meta.prop = vm.runInContext(&#39;{}&#39;, contextifiedSandbox);\n})();\n</code></pre>\n"
            }
          ]
        },
        {
          "textRaw": "Class: vm.Script",
          "type": "class",
          "name": "vm.Script",
          "meta": {
            "added": [
              "v0.3.1"
            ],
            "changes": []
          },
          "desc": "<p>Instances of the <code>vm.Script</code> class contain precompiled scripts that can be\nexecuted in specific sandboxes (or &quot;contexts&quot;).</p>\n",
          "methods": [
            {
              "textRaw": "script.runInContext(contextifiedSandbox[, options])",
              "type": "method",
              "name": "runInContext",
              "meta": {
                "added": [
                  "v0.3.1"
                ],
                "changes": [
                  {
                    "version": "v6.3.0",
                    "pr-url": "https://github.com/nodejs/node/pull/6635",
                    "description": "The `breakOnSigint` option is supported now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`contextifiedSandbox` {Object} A [contextified][] object as returned by the `vm.createContext()` method. ",
                      "name": "contextifiedSandbox",
                      "type": "Object",
                      "desc": "A [contextified][] object as returned by the `vm.createContext()` method."
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`filename` {string} Specifies the filename used in stack traces produced by this script. ",
                          "name": "filename",
                          "type": "string",
                          "desc": "Specifies the filename used in stack traces produced by this script."
                        },
                        {
                          "textRaw": "`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. ",
                          "name": "lineOffset",
                          "type": "number",
                          "desc": "Specifies the line number offset that is displayed in stack traces produced by this script."
                        },
                        {
                          "textRaw": "`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. ",
                          "name": "columnOffset",
                          "type": "number",
                          "desc": "Specifies the column number offset that is displayed in stack traces produced by this script."
                        },
                        {
                          "textRaw": "`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. ",
                          "name": "displayErrors",
                          "type": "boolean",
                          "desc": "When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace."
                        },
                        {
                          "textRaw": "`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. ",
                          "name": "timeout",
                          "type": "number",
                          "desc": "Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown."
                        },
                        {
                          "textRaw": "`breakOnSigint`: if `true`, the execution will be terminated when `SIGINT` (Ctrl+C) is received. Existing handlers for the event that have been attached via `process.on('SIGINT')` will be disabled during script execution, but will continue to work after that. If execution is terminated, an [`Error`][] will be thrown. ",
                          "name": "breakOnSigint",
                          "desc": "if `true`, the execution will be terminated when `SIGINT` (Ctrl+C) is received. Existing handlers for the event that have been attached via `process.on('SIGINT')` will be disabled during script execution, but will continue to work after that. If execution is terminated, an [`Error`][] will be thrown."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "contextifiedSandbox"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Runs the compiled code contained by the <code>vm.Script</code> object within the given\n<code>contextifiedSandbox</code> and returns the result. Running code does not have access\nto local scope.</p>\n<p>The following example compiles code that increments a global variable, sets\nthe value of another global variable, then execute the code multiple times.\nThe globals are contained in the <code>sandbox</code> object.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst sandbox = {\n  animal: &#39;cat&#39;,\n  count: 2\n};\n\nconst script = new vm.Script(&#39;count += 1; name = &quot;kitty&quot;;&#39;);\n\nconst context = vm.createContext(sandbox);\nfor (let i = 0; i &lt; 10; ++i) {\n  script.runInContext(context);\n}\n\nconsole.log(util.inspect(sandbox));\n\n// { animal: &#39;cat&#39;, count: 12, name: &#39;kitty&#39; }\n</code></pre>\n<p>Using the <code>timeout</code> or <code>breakOnSigint</code> options will result in new event loops\nand corresponding threads being started, which have a non-zero performance\noverhead.</p>\n"
            },
            {
              "textRaw": "script.runInNewContext([sandbox[, options]])",
              "type": "method",
              "name": "runInNewContext",
              "meta": {
                "added": [
                  "v0.3.1"
                ],
                "changes": [
                  {
                    "version": "v10.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/19016",
                    "description": "The `contextCodeGeneration` option is supported now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`sandbox` {Object} An object that will be [contextified][]. If `undefined`, a new object will be created. ",
                      "name": "sandbox",
                      "type": "Object",
                      "desc": "An object that will be [contextified][]. If `undefined`, a new object will be created.",
                      "optional": true
                    },
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`filename` {string} Specifies the filename used in stack traces produced by this script. ",
                          "name": "filename",
                          "type": "string",
                          "desc": "Specifies the filename used in stack traces produced by this script."
                        },
                        {
                          "textRaw": "`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. ",
                          "name": "lineOffset",
                          "type": "number",
                          "desc": "Specifies the line number offset that is displayed in stack traces produced by this script."
                        },
                        {
                          "textRaw": "`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. ",
                          "name": "columnOffset",
                          "type": "number",
                          "desc": "Specifies the column number offset that is displayed in stack traces produced by this script."
                        },
                        {
                          "textRaw": "`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. ",
                          "name": "displayErrors",
                          "type": "boolean",
                          "desc": "When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace."
                        },
                        {
                          "textRaw": "`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. ",
                          "name": "timeout",
                          "type": "number",
                          "desc": "Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown."
                        },
                        {
                          "textRaw": "`contextName` {string} Human-readable name of the newly created context. **Default:** `'VM Context i'`, where `i` is an ascending numerical index of the created context. ",
                          "name": "contextName",
                          "type": "string",
                          "default": "`'VM Context i'`, where `i` is an ascending numerical index of the created context",
                          "desc": "Human-readable name of the newly created context."
                        },
                        {
                          "textRaw": "`contextOrigin` {string} [Origin][origin] corresponding to the newly created context for display purposes. The origin should be formatted like a URL, but with only the scheme, host, and port (if necessary), like the value of the [`url.origin`][] property of a [`URL`][] object. Most notably, this string should omit the trailing slash, as that denotes a path. **Default:** `''`. ",
                          "name": "contextOrigin",
                          "type": "string",
                          "default": "`''`",
                          "desc": "[Origin][origin] corresponding to the newly created context for display purposes. The origin should be formatted like a URL, but with only the scheme, host, and port (if necessary), like the value of the [`url.origin`][] property of a [`URL`][] object. Most notably, this string should omit the trailing slash, as that denotes a path."
                        },
                        {
                          "textRaw": "`contextCodeGeneration` {Object} ",
                          "options": [
                            {
                              "textRaw": "`strings` {boolean} If set to false any calls to `eval` or function constructors (`Function`, `GeneratorFunction`, etc) will throw an `EvalError`. **Default:** `true`. ",
                              "name": "strings",
                              "type": "boolean",
                              "default": "`true`",
                              "desc": "If set to false any calls to `eval` or function constructors (`Function`, `GeneratorFunction`, etc) will throw an `EvalError`."
                            },
                            {
                              "textRaw": "`wasm` {boolean} If set to false any attempt to compile a WebAssembly module will throw a `WebAssembly.CompileError`. **Default:** `true`. ",
                              "name": "wasm",
                              "type": "boolean",
                              "default": "`true`",
                              "desc": "If set to false any attempt to compile a WebAssembly module will throw a `WebAssembly.CompileError`."
                            }
                          ],
                          "name": "contextCodeGeneration",
                          "type": "Object"
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "sandbox",
                      "optional": true
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>First contextifies the given <code>sandbox</code>, runs the compiled code contained by\nthe <code>vm.Script</code> object within the created sandbox, and returns the result.\nRunning code does not have access to local scope.</p>\n<p>The following example compiles code that sets a global variable, then executes\nthe code multiple times in different contexts. The globals are set on and\ncontained within each individual <code>sandbox</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst script = new vm.Script(&#39;globalVar = &quot;set&quot;&#39;);\n\nconst sandboxes = [{}, {}, {}];\nsandboxes.forEach((sandbox) =&gt; {\n  script.runInNewContext(sandbox);\n});\n\nconsole.log(util.inspect(sandboxes));\n\n// [{ globalVar: &#39;set&#39; }, { globalVar: &#39;set&#39; }, { globalVar: &#39;set&#39; }]\n</code></pre>\n"
            },
            {
              "textRaw": "script.runInThisContext([options])",
              "type": "method",
              "name": "runInThisContext",
              "meta": {
                "added": [
                  "v0.3.1"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`options` {Object} ",
                      "options": [
                        {
                          "textRaw": "`filename` {string} Specifies the filename used in stack traces produced by this script. ",
                          "name": "filename",
                          "type": "string",
                          "desc": "Specifies the filename used in stack traces produced by this script."
                        },
                        {
                          "textRaw": "`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. ",
                          "name": "lineOffset",
                          "type": "number",
                          "desc": "Specifies the line number offset that is displayed in stack traces produced by this script."
                        },
                        {
                          "textRaw": "`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. ",
                          "name": "columnOffset",
                          "type": "number",
                          "desc": "Specifies the column number offset that is displayed in stack traces produced by this script."
                        },
                        {
                          "textRaw": "`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. ",
                          "name": "displayErrors",
                          "type": "boolean",
                          "desc": "When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace."
                        },
                        {
                          "textRaw": "`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. ",
                          "name": "timeout",
                          "type": "number",
                          "desc": "Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown."
                        }
                      ],
                      "name": "options",
                      "type": "Object",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Runs the compiled code contained by the <code>vm.Script</code> within the context of the\ncurrent <code>global</code> object. Running code does not have access to local scope, but\n<em>does</em> have access to the current <code>global</code> object.</p>\n<p>The following example compiles code that increments a <code>global</code> variable then\nexecutes that code multiple times:</p>\n<pre><code class=\"lang-js\">const vm = require(&#39;vm&#39;);\n\nglobal.globalVar = 0;\n\nconst script = new vm.Script(&#39;globalVar += 1&#39;, { filename: &#39;myfile.vm&#39; });\n\nfor (let i = 0; i &lt; 1000; ++i) {\n  script.runInThisContext();\n}\n\nconsole.log(globalVar);\n\n// 1000\n</code></pre>\n"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`code` {string} The JavaScript code to compile. ",
                  "name": "code",
                  "type": "string",
                  "desc": "The JavaScript code to compile."
                },
                {
                  "textRaw": "`options` ",
                  "options": [
                    {
                      "textRaw": "`filename` {string} Specifies the filename used in stack traces produced by this script. ",
                      "name": "filename",
                      "type": "string",
                      "desc": "Specifies the filename used in stack traces produced by this script."
                    },
                    {
                      "textRaw": "`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. ",
                      "name": "lineOffset",
                      "type": "number",
                      "desc": "Specifies the line number offset that is displayed in stack traces produced by this script."
                    },
                    {
                      "textRaw": "`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. ",
                      "name": "columnOffset",
                      "type": "number",
                      "desc": "Specifies the column number offset that is displayed in stack traces produced by this script."
                    },
                    {
                      "textRaw": "`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. ",
                      "name": "displayErrors",
                      "type": "boolean",
                      "desc": "When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace."
                    },
                    {
                      "textRaw": "`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. ",
                      "name": "timeout",
                      "type": "number",
                      "desc": "Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown."
                    },
                    {
                      "textRaw": "`cachedData` {Buffer} Provides an optional `Buffer` with V8's code cache data for the supplied source. When supplied, the `cachedDataRejected` value will be set to either `true` or `false` depending on acceptance of the data by V8. ",
                      "name": "cachedData",
                      "type": "Buffer",
                      "desc": "Provides an optional `Buffer` with V8's code cache data for the supplied source. When supplied, the `cachedDataRejected` value will be set to either `true` or `false` depending on acceptance of the data by V8."
                    },
                    {
                      "textRaw": "`produceCachedData` {boolean} When `true` and no `cachedData` is present, V8 will attempt to produce code cache data for `code`. Upon success, a `Buffer` with V8's code cache data will be produced and stored in the `cachedData` property of the returned `vm.Script` instance. The `cachedDataProduced` value will be set to either `true` or `false` depending on whether code cache data is produced successfully. ",
                      "name": "produceCachedData",
                      "type": "boolean",
                      "desc": "When `true` and no `cachedData` is present, V8 will attempt to produce code cache data for `code`. Upon success, a `Buffer` with V8's code cache data will be produced and stored in the `cachedData` property of the returned `vm.Script` instance. The `cachedDataProduced` value will be set to either `true` or `false` depending on whether code cache data is produced successfully."
                    }
                  ],
                  "name": "options"
                }
              ],
              "desc": "<p>Creating a new <code>vm.Script</code> object compiles <code>code</code> but does not run it. The\ncompiled <code>vm.Script</code> can be run later multiple times. The <code>code</code> is not bound to\nany global object; rather, it is bound before each run, just for that run.</p>\n"
            },
            {
              "params": [
                {
                  "name": "code"
                },
                {
                  "name": "options"
                }
              ],
              "desc": "<p>Creating a new <code>vm.Script</code> object compiles <code>code</code> but does not run it. The\ncompiled <code>vm.Script</code> can be run later multiple times. The <code>code</code> is not bound to\nany global object; rather, it is bound before each run, just for that run.</p>\n"
            }
          ]
        }
      ],
      "methods": [
        {
          "textRaw": "vm.createContext([sandbox[, options]])",
          "type": "method",
          "name": "createContext",
          "meta": {
            "added": [
              "v0.3.1"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/19398",
                "description": "The `sandbox` option can no longer be a function."
              },
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/19016",
                "description": "The `codeGeneration` option is supported now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`sandbox` {Object} ",
                  "name": "sandbox",
                  "type": "Object",
                  "optional": true
                },
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`name` {string} Human-readable name of the newly created context. **Default:** `'VM Context i'`, where `i` is an ascending numerical index of the created context. ",
                      "name": "name",
                      "type": "string",
                      "default": "`'VM Context i'`, where `i` is an ascending numerical index of the created context",
                      "desc": "Human-readable name of the newly created context."
                    },
                    {
                      "textRaw": "`origin` {string} [Origin][origin] corresponding to the newly created context for display purposes. The origin should be formatted like a URL, but with only the scheme, host, and port (if necessary), like the value of the [`url.origin`][] property of a [`URL`][] object. Most notably, this string should omit the trailing slash, as that denotes a path. **Default:** `''`. ",
                      "name": "origin",
                      "type": "string",
                      "default": "`''`",
                      "desc": "[Origin][origin] corresponding to the newly created context for display purposes. The origin should be formatted like a URL, but with only the scheme, host, and port (if necessary), like the value of the [`url.origin`][] property of a [`URL`][] object. Most notably, this string should omit the trailing slash, as that denotes a path."
                    },
                    {
                      "textRaw": "`codeGeneration` {Object} ",
                      "options": [
                        {
                          "textRaw": "`strings` {boolean} If set to false any calls to `eval` or function constructors (`Function`, `GeneratorFunction`, etc) will throw an `EvalError`. **Default:** `true`. ",
                          "name": "strings",
                          "type": "boolean",
                          "default": "`true`",
                          "desc": "If set to false any calls to `eval` or function constructors (`Function`, `GeneratorFunction`, etc) will throw an `EvalError`."
                        },
                        {
                          "textRaw": "`wasm` {boolean} If set to false any attempt to compile a WebAssembly module will throw a `WebAssembly.CompileError`. **Default:** `true`. ",
                          "name": "wasm",
                          "type": "boolean",
                          "default": "`true`",
                          "desc": "If set to false any attempt to compile a WebAssembly module will throw a `WebAssembly.CompileError`."
                        }
                      ],
                      "name": "codeGeneration",
                      "type": "Object"
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "sandbox",
                  "optional": true
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>If given a <code>sandbox</code> object, the <code>vm.createContext()</code> method will <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">prepare\nthat sandbox</a> so that it can be used in calls to\n<a href=\"#vm_vm_runincontext_code_contextifiedsandbox_options\"><code>vm.runInContext()</code></a> or <a href=\"#vm_script_runincontext_contextifiedsandbox_options\"><code>script.runInContext()</code></a>. Inside such scripts,\nthe <code>sandbox</code> object will be the global object, retaining all of its existing\nproperties but also having the built-in objects and functions any standard\n<a href=\"https://es5.github.io/#x15.1\">global object</a> has. Outside of scripts run by the vm module, global variables\nwill remain unchanged.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nglobal.globalVar = 3;\n\nconst sandbox = { globalVar: 1 };\nvm.createContext(sandbox);\n\nvm.runInContext(&#39;globalVar *= 2;&#39;, sandbox);\n\nconsole.log(util.inspect(sandbox)); // { globalVar: 2 }\n\nconsole.log(util.inspect(globalVar)); // 3\n</code></pre>\n<p>If <code>sandbox</code> is omitted (or passed explicitly as <code>undefined</code>), a new, empty\n<a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> sandbox object will be returned.</p>\n<p>The <code>vm.createContext()</code> method is primarily useful for creating a single\nsandbox that can be used to run multiple scripts. For instance, if emulating a\nweb browser, the method can be used to create a single sandbox representing a\nwindow&#39;s global object, then run all <code>&lt;script&gt;</code> tags together within the context\nof that sandbox.</p>\n<p>The provided <code>name</code> and <code>origin</code> of the context are made visible through the\nInspector API.</p>\n"
        },
        {
          "textRaw": "vm.isContext(sandbox)",
          "type": "method",
          "name": "isContext",
          "meta": {
            "added": [
              "v0.11.7"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {boolean} ",
                "name": "return",
                "type": "boolean"
              },
              "params": [
                {
                  "textRaw": "`sandbox` {Object} ",
                  "name": "sandbox",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "sandbox"
                }
              ]
            }
          ],
          "desc": "<p>Returns <code>true</code> if the given <code>sandbox</code> object has been <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> using\n<a href=\"#vm_vm_createcontext_sandbox_options\"><code>vm.createContext()</code></a>.</p>\n"
        },
        {
          "textRaw": "vm.runInContext(code, contextifiedSandbox[, options])",
          "type": "method",
          "name": "runInContext",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`code` {string} The JavaScript code to compile and run. ",
                  "name": "code",
                  "type": "string",
                  "desc": "The JavaScript code to compile and run."
                },
                {
                  "textRaw": "`contextifiedSandbox` {Object} The [contextified][] object that will be used as the `global` when the `code` is compiled and run. ",
                  "name": "contextifiedSandbox",
                  "type": "Object",
                  "desc": "The [contextified][] object that will be used as the `global` when the `code` is compiled and run."
                },
                {
                  "textRaw": "`options` {Object|string} ",
                  "options": [
                    {
                      "textRaw": "`filename` {string} Specifies the filename used in stack traces produced by this script. ",
                      "name": "filename",
                      "type": "string",
                      "desc": "Specifies the filename used in stack traces produced by this script."
                    },
                    {
                      "textRaw": "`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. ",
                      "name": "lineOffset",
                      "type": "number",
                      "desc": "Specifies the line number offset that is displayed in stack traces produced by this script."
                    },
                    {
                      "textRaw": "`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. ",
                      "name": "columnOffset",
                      "type": "number",
                      "desc": "Specifies the column number offset that is displayed in stack traces produced by this script."
                    },
                    {
                      "textRaw": "`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. ",
                      "name": "displayErrors",
                      "type": "boolean",
                      "desc": "When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace."
                    },
                    {
                      "textRaw": "`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. ",
                      "name": "timeout",
                      "type": "number",
                      "desc": "Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown."
                    }
                  ],
                  "name": "options",
                  "type": "Object|string",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "code"
                },
                {
                  "name": "contextifiedSandbox"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>vm.runInContext()</code> method compiles <code>code</code>, runs it within the context of\nthe <code>contextifiedSandbox</code>, then returns the result. Running code does not have\naccess to the local scope. The <code>contextifiedSandbox</code> object <em>must</em> have been\npreviously <a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> using the <a href=\"#vm_vm_createcontext_sandbox_options\"><code>vm.createContext()</code></a> method.</p>\n<p>If <code>options</code> is a string, then it specifies the filename.</p>\n<p>The following example compiles and executes different scripts using a single\n<a href=\"#vm_what_does_it_mean_to_contextify_an_object\">contextified</a> object:</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst sandbox = { globalVar: 1 };\nvm.createContext(sandbox);\n\nfor (let i = 0; i &lt; 10; ++i) {\n  vm.runInContext(&#39;globalVar *= 2;&#39;, sandbox);\n}\nconsole.log(util.inspect(sandbox));\n\n// { globalVar: 1024 }\n</code></pre>\n"
        },
        {
          "textRaw": "vm.runInNewContext(code[, sandbox][, options])",
          "type": "method",
          "name": "runInNewContext",
          "meta": {
            "added": [
              "v0.3.1"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`code` {string} The JavaScript code to compile and run. ",
                  "name": "code",
                  "type": "string",
                  "desc": "The JavaScript code to compile and run."
                },
                {
                  "textRaw": "`sandbox` {Object} An object that will be [contextified][]. If `undefined`, a new object will be created. ",
                  "name": "sandbox",
                  "type": "Object",
                  "desc": "An object that will be [contextified][]. If `undefined`, a new object will be created.",
                  "optional": true
                },
                {
                  "textRaw": "`options` {Object|string} ",
                  "options": [
                    {
                      "textRaw": "`filename` {string} Specifies the filename used in stack traces produced by this script. ",
                      "name": "filename",
                      "type": "string",
                      "desc": "Specifies the filename used in stack traces produced by this script."
                    },
                    {
                      "textRaw": "`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. ",
                      "name": "lineOffset",
                      "type": "number",
                      "desc": "Specifies the line number offset that is displayed in stack traces produced by this script."
                    },
                    {
                      "textRaw": "`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. ",
                      "name": "columnOffset",
                      "type": "number",
                      "desc": "Specifies the column number offset that is displayed in stack traces produced by this script."
                    },
                    {
                      "textRaw": "`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. ",
                      "name": "displayErrors",
                      "type": "boolean",
                      "desc": "When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace."
                    },
                    {
                      "textRaw": "`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. ",
                      "name": "timeout",
                      "type": "number",
                      "desc": "Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown."
                    },
                    {
                      "textRaw": "`contextName` {string} Human-readable name of the newly created context. **Default:** `'VM Context i'`, where `i` is an ascending numerical index of the created context. ",
                      "name": "contextName",
                      "type": "string",
                      "default": "`'VM Context i'`, where `i` is an ascending numerical index of the created context",
                      "desc": "Human-readable name of the newly created context."
                    },
                    {
                      "textRaw": "`contextOrigin` {string} [Origin][origin] corresponding to the newly created context for display purposes. The origin should be formatted like a URL, but with only the scheme, host, and port (if necessary), like the value of the [`url.origin`][] property of a [`URL`][] object. Most notably, this string should omit the trailing slash, as that denotes a path. **Default:** `''`. ",
                      "name": "contextOrigin",
                      "type": "string",
                      "default": "`''`",
                      "desc": "[Origin][origin] corresponding to the newly created context for display purposes. The origin should be formatted like a URL, but with only the scheme, host, and port (if necessary), like the value of the [`url.origin`][] property of a [`URL`][] object. Most notably, this string should omit the trailing slash, as that denotes a path."
                    }
                  ],
                  "name": "options",
                  "type": "Object|string",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "code"
                },
                {
                  "name": "sandbox",
                  "optional": true
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>vm.runInNewContext()</code> first contextifies the given <code>sandbox</code> object (or\ncreates a new <code>sandbox</code> if passed as <code>undefined</code>), compiles the <code>code</code>, runs it\nwithin the context of the created context, then returns the result. Running code\ndoes not have access to the local scope.</p>\n<p>If <code>options</code> is a string, then it specifies the filename.</p>\n<p>The following example compiles and executes code that increments a global\nvariable and sets a new one. These globals are contained in the <code>sandbox</code>.</p>\n<pre><code class=\"lang-js\">const util = require(&#39;util&#39;);\nconst vm = require(&#39;vm&#39;);\n\nconst sandbox = {\n  animal: &#39;cat&#39;,\n  count: 2\n};\n\nvm.runInNewContext(&#39;count += 1; name = &quot;kitty&quot;&#39;, sandbox);\nconsole.log(util.inspect(sandbox));\n\n// { animal: &#39;cat&#39;, count: 3, name: &#39;kitty&#39; }\n</code></pre>\n"
        },
        {
          "textRaw": "vm.runInThisContext(code[, options])",
          "type": "method",
          "name": "runInThisContext",
          "meta": {
            "added": [
              "v0.3.1"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`code` {string} The JavaScript code to compile and run. ",
                  "name": "code",
                  "type": "string",
                  "desc": "The JavaScript code to compile and run."
                },
                {
                  "textRaw": "`options` {Object|string} ",
                  "options": [
                    {
                      "textRaw": "`filename` {string} Specifies the filename used in stack traces produced by this script. ",
                      "name": "filename",
                      "type": "string",
                      "desc": "Specifies the filename used in stack traces produced by this script."
                    },
                    {
                      "textRaw": "`lineOffset` {number} Specifies the line number offset that is displayed in stack traces produced by this script. ",
                      "name": "lineOffset",
                      "type": "number",
                      "desc": "Specifies the line number offset that is displayed in stack traces produced by this script."
                    },
                    {
                      "textRaw": "`columnOffset` {number} Specifies the column number offset that is displayed in stack traces produced by this script. ",
                      "name": "columnOffset",
                      "type": "number",
                      "desc": "Specifies the column number offset that is displayed in stack traces produced by this script."
                    },
                    {
                      "textRaw": "`displayErrors` {boolean} When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace. ",
                      "name": "displayErrors",
                      "type": "boolean",
                      "desc": "When `true`, if an [`Error`][] error occurs while compiling the `code`, the line of code causing the error is attached to the stack trace."
                    },
                    {
                      "textRaw": "`timeout` {number} Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown. ",
                      "name": "timeout",
                      "type": "number",
                      "desc": "Specifies the number of milliseconds to execute `code` before terminating execution. If execution is terminated, an [`Error`][] will be thrown."
                    }
                  ],
                  "name": "options",
                  "type": "Object|string",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "code"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p><code>vm.runInThisContext()</code> compiles <code>code</code>, runs it within the context of the\ncurrent <code>global</code> and returns the result. Running code does not have access to\nlocal scope, but does have access to the current <code>global</code> object.</p>\n<p>If <code>options</code> is a string, then it specifies the filename.</p>\n<p>The following example illustrates using both <code>vm.runInThisContext()</code> and\nthe JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> function to run the same code:</p>\n<!-- eslint-disable prefer-const -->\n<pre><code class=\"lang-js\">const vm = require(&#39;vm&#39;);\nlet localVar = &#39;initial value&#39;;\n\nconst vmResult = vm.runInThisContext(&#39;localVar = &quot;vm&quot;;&#39;);\nconsole.log(&#39;vmResult:&#39;, vmResult);\nconsole.log(&#39;localVar:&#39;, localVar);\n\nconst evalResult = eval(&#39;localVar = &quot;eval&quot;;&#39;);\nconsole.log(&#39;evalResult:&#39;, evalResult);\nconsole.log(&#39;localVar:&#39;, localVar);\n\n// vmResult: &#39;vm&#39;, localVar: &#39;initial value&#39;\n// evalResult: &#39;eval&#39;, localVar: &#39;eval&#39;\n</code></pre>\n<p>Because <code>vm.runInThisContext()</code> does not have access to the local scope,\n<code>localVar</code> is unchanged. In contrast, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> <em>does</em> have access to the\nlocal scope, so the value <code>localVar</code> is changed. In this way\n<code>vm.runInThisContext()</code> is much like an <a href=\"https://es5.github.io/#x10.4.2\">indirect <code>eval()</code> call</a>, e.g.\n<code>(0,eval)(&#39;code&#39;)</code>.</p>\n<h2>Example: Running an HTTP Server within a VM</h2>\n<p>When using either <a href=\"#vm_script_runinthiscontext_options\"><code>script.runInThisContext()</code></a> or\n<a href=\"#vm_vm_runinthiscontext_code_options\"><code>vm.runInThisContext()</code></a>, the code is executed within the current V8 global\ncontext. The code passed to this VM context will have its own isolated scope.</p>\n<p>In order to run a simple web server using the <code>http</code> module the code passed to\nthe context must either call <code>require(&#39;http&#39;)</code> on its own, or have a reference\nto the <code>http</code> module passed to it. For instance:</p>\n<pre><code class=\"lang-js\">&#39;use strict&#39;;\nconst vm = require(&#39;vm&#39;);\n\nconst code = `\n((require) =&gt; {\n  const http = require(&#39;http&#39;);\n\n  http.createServer((request, response) =&gt; {\n    response.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39; });\n    response.end(&#39;Hello World\\\\n&#39;);\n  }).listen(8124);\n\n  console.log(&#39;Server running at http://127.0.0.1:8124/&#39;);\n})`;\n\nvm.runInThisContext(code)(require);\n</code></pre>\n<p>The <code>require()</code> in the above case shares the state with the context it is\npassed from. This may introduce risks when untrusted code is executed, e.g.\naltering objects in the context in unwanted ways.</p>\n"
        }
      ],
      "modules": [
        {
          "textRaw": "What does it mean to \"contextify\" an object?",
          "name": "what_does_it_mean_to_\"contextify\"_an_object?",
          "desc": "<p>All JavaScript executed within Node.js runs within the scope of a &quot;context&quot;.\nAccording to the <a href=\"https://github.com/v8/v8/wiki/Embedder&#39;s%20Guide#contexts\">V8 Embedder&#39;s Guide</a>:</p>\n<blockquote>\n<p>In V8, a context is an execution environment that allows separate, unrelated,\nJavaScript applications to run in a single instance of V8. You must explicitly\nspecify the context in which you want any JavaScript code to be run.</p>\n</blockquote>\n<p>When the method <code>vm.createContext()</code> is called, the <code>sandbox</code> object that is\npassed in (or a newly created object if <code>sandbox</code> is <code>undefined</code>) is associated\ninternally with a new instance of a V8 Context. This V8 Context provides the\n<code>code</code> run using the <code>vm</code> module&#39;s methods with an isolated global environment\nwithin which it can operate. The process of creating the V8 Context and\nassociating it with the <code>sandbox</code> object is what this document refers to as\n&quot;contextifying&quot; the <code>sandbox</code>.</p>\n<!-- [end-include:vm.md] -->\n<!-- [start-include:zlib.md] -->\n",
          "type": "module",
          "displayName": "What does it mean to \"contextify\" an object?"
        }
      ],
      "type": "module",
      "displayName": "vm"
    },
    {
      "textRaw": "Zlib",
      "name": "zlib",
      "introduced_in": "v0.10.0",
      "stability": 2,
      "stabilityText": "Stable",
      "desc": "<p>The <code>zlib</code> module provides compression functionality implemented using Gzip and\nDeflate/Inflate. It can be accessed using:</p>\n<pre><code class=\"lang-js\">const zlib = require(&#39;zlib&#39;);\n</code></pre>\n<p>Compressing or decompressing a stream (such as a file) can be accomplished by\npiping the source stream data through a <code>zlib</code> stream into a destination stream:</p>\n<pre><code class=\"lang-js\">const gzip = zlib.createGzip();\nconst fs = require(&#39;fs&#39;);\nconst inp = fs.createReadStream(&#39;input.txt&#39;);\nconst out = fs.createWriteStream(&#39;input.txt.gz&#39;);\n\ninp.pipe(gzip).pipe(out);\n</code></pre>\n<p>It is also possible to compress or decompress data in a single step:</p>\n<pre><code class=\"lang-js\">const input = &#39;.................................&#39;;\nzlib.deflate(input, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString(&#39;base64&#39;));\n  } else {\n    // handle error\n  }\n});\n\nconst buffer = Buffer.from(&#39;eJzT0yMAAGTvBe8=&#39;, &#39;base64&#39;);\nzlib.unzip(buffer, (err, buffer) =&gt; {\n  if (!err) {\n    console.log(buffer.toString());\n  } else {\n    // handle error\n  }\n});\n</code></pre>\n",
      "modules": [
        {
          "textRaw": "Threadpool Usage",
          "name": "threadpool_usage",
          "desc": "<p>Note that all zlib APIs except those that are explicitly synchronous use libuv&#39;s\nthreadpool, which can have surprising and negative performance implications for\nsome applications, see the <a href=\"cli.html#cli_uv_threadpool_size_size\"><code>UV_THREADPOOL_SIZE</code></a> documentation for more\ninformation.</p>\n",
          "type": "module",
          "displayName": "Threadpool Usage"
        },
        {
          "textRaw": "Compressing HTTP requests and responses",
          "name": "compressing_http_requests_and_responses",
          "desc": "<p>The <code>zlib</code> module can be used to implement support for the <code>gzip</code> and <code>deflate</code>\ncontent-encoding mechanisms defined by\n<a href=\"https://tools.ietf.org/html/rfc7230#section-4.2\">HTTP</a>.</p>\n<p>The HTTP <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\"><code>Accept-Encoding</code></a> header is used within an http request to identify\nthe compression encodings accepted by the client. The <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\"><code>Content-Encoding</code></a>\nheader is used to identify the compression encodings actually applied to a\nmessage.</p>\n<p>The examples given below are drastically simplified to show the basic concept.\nUsing <code>zlib</code> encoding can be expensive, and the results ought to be cached.\nSee <a href=\"#zlib_memory_usage_tuning\">Memory Usage Tuning</a> for more information on the speed/memory/compression\ntradeoffs involved in <code>zlib</code> usage.</p>\n<pre><code class=\"lang-js\">// client request example\nconst zlib = require(&#39;zlib&#39;);\nconst http = require(&#39;http&#39;);\nconst fs = require(&#39;fs&#39;);\nconst request = http.get({ host: &#39;example.com&#39;,\n                           path: &#39;/&#39;,\n                           port: 80,\n                           headers: { &#39;Accept-Encoding&#39;: &#39;gzip,deflate&#39; } });\nrequest.on(&#39;response&#39;, (response) =&gt; {\n  const output = fs.createWriteStream(&#39;example.com_index.html&#39;);\n\n  switch (response.headers[&#39;content-encoding&#39;]) {\n    // or, just use zlib.createUnzip() to handle both cases\n    case &#39;gzip&#39;:\n      response.pipe(zlib.createGunzip()).pipe(output);\n      break;\n    case &#39;deflate&#39;:\n      response.pipe(zlib.createInflate()).pipe(output);\n      break;\n    default:\n      response.pipe(output);\n      break;\n  }\n});\n</code></pre>\n<pre><code class=\"lang-js\">// server example\n// Running a gzip operation on every request is quite expensive.\n// It would be much more efficient to cache the compressed buffer.\nconst zlib = require(&#39;zlib&#39;);\nconst http = require(&#39;http&#39;);\nconst fs = require(&#39;fs&#39;);\nhttp.createServer((request, response) =&gt; {\n  const raw = fs.createReadStream(&#39;index.html&#39;);\n  let acceptEncoding = request.headers[&#39;accept-encoding&#39;];\n  if (!acceptEncoding) {\n    acceptEncoding = &#39;&#39;;\n  }\n\n  // Note: This is not a conformant accept-encoding parser.\n  // See https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3\n  if (/\\bdeflate\\b/.test(acceptEncoding)) {\n    response.writeHead(200, { &#39;Content-Encoding&#39;: &#39;deflate&#39; });\n    raw.pipe(zlib.createDeflate()).pipe(response);\n  } else if (/\\bgzip\\b/.test(acceptEncoding)) {\n    response.writeHead(200, { &#39;Content-Encoding&#39;: &#39;gzip&#39; });\n    raw.pipe(zlib.createGzip()).pipe(response);\n  } else {\n    response.writeHead(200, {});\n    raw.pipe(response);\n  }\n}).listen(1337);\n</code></pre>\n<p>By default, the <code>zlib</code> methods will throw an error when decompressing\ntruncated data. However, if it is known that the data is incomplete, or\nthe desire is to inspect only the beginning of a compressed file, it is\npossible to suppress the default error handling by changing the flushing\nmethod that is used to decompress the last chunk of input data:</p>\n<pre><code class=\"lang-js\">// This is a truncated version of the buffer from the above examples\nconst buffer = Buffer.from(&#39;eJzT0yMA&#39;, &#39;base64&#39;);\n\nzlib.unzip(\n  buffer,\n  { finishFlush: zlib.constants.Z_SYNC_FLUSH },\n  (err, buffer) =&gt; {\n    if (!err) {\n      console.log(buffer.toString());\n    } else {\n      // handle error\n    }\n  });\n</code></pre>\n<p>This will not change the behavior in other error-throwing situations, e.g.\nwhen the input data has an invalid format. Using this method, it will not be\npossible to determine whether the input ended prematurely or lacks the\nintegrity checks, making it necessary to manually check that the\ndecompressed result is valid.</p>\n",
          "type": "module",
          "displayName": "Compressing HTTP requests and responses"
        },
        {
          "textRaw": "Flushing",
          "name": "flushing",
          "desc": "<p>Calling <a href=\"#zlib_zlib_flush_kind_callback\"><code>.flush()</code></a> on a compression stream will make <code>zlib</code> return as much\noutput as currently possible. This may come at the cost of degraded compression\nquality, but can be useful when data needs to be available as soon as possible.</p>\n<p>In the following example, <code>flush()</code> is used to write a compressed partial\nHTTP response to the client:</p>\n<pre><code class=\"lang-js\">const zlib = require(&#39;zlib&#39;);\nconst http = require(&#39;http&#39;);\n\nhttp.createServer((request, response) =&gt; {\n  // For the sake of simplicity, the Accept-Encoding checks are omitted.\n  response.writeHead(200, { &#39;content-encoding&#39;: &#39;gzip&#39; });\n  const output = zlib.createGzip();\n  output.pipe(response);\n\n  setInterval(() =&gt; {\n    output.write(`The current time is ${Date()}\\n`, () =&gt; {\n      // The data has been passed to zlib, but the compression algorithm may\n      // have decided to buffer the data for more efficient compression.\n      // Calling .flush() will make the data available as soon as the client\n      // is ready to receive it.\n      output.flush();\n    });\n  }, 1000);\n}).listen(1337);\n</code></pre>\n",
          "type": "module",
          "displayName": "Flushing"
        }
      ],
      "miscs": [
        {
          "textRaw": "Memory Usage Tuning",
          "name": "Memory Usage Tuning",
          "type": "misc",
          "desc": "<p>From <code>zlib/zconf.h</code>, modified to Node.js&#39;s usage:</p>\n<p>The memory requirements for deflate are (in bytes):</p>\n<!-- eslint-disable semi -->\n<pre><code class=\"lang-js\">(1 &lt;&lt; (windowBits + 2)) + (1 &lt;&lt; (memLevel + 9))\n</code></pre>\n<p>That is: 128K for <code>windowBits</code> = 15 + 128K for <code>memLevel</code> = 8\n(default values) plus a few kilobytes for small objects.</p>\n<p>For example, to reduce the default memory requirements from 256K to 128K, the\noptions should be set to:</p>\n<pre><code class=\"lang-js\">const options = { windowBits: 14, memLevel: 7 };\n</code></pre>\n<p>This will, however, generally degrade compression.</p>\n<p>The memory requirements for inflate are (in bytes) <code>1 &lt;&lt; windowBits</code>.\nThat is, 32K for <code>windowBits</code> = 15 (default value) plus a few kilobytes\nfor small objects.</p>\n<p>This is in addition to a single internal output slab buffer of size\n<code>chunkSize</code>, which defaults to 16K.</p>\n<p>The speed of <code>zlib</code> compression is affected most dramatically by the\n<code>level</code> setting. A higher level will result in better compression, but\nwill take longer to complete. A lower level will result in less\ncompression, but will be much faster.</p>\n<p>In general, greater memory usage options will mean that Node.js has to make\nfewer calls to <code>zlib</code> because it will be able to process more data on\neach <code>write</code> operation. So, this is another factor that affects the\nspeed, at the cost of memory usage.</p>\n"
        },
        {
          "textRaw": "Constants",
          "name": "Constants",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "type": "misc",
          "desc": "<p>All of the constants defined in <code>zlib.h</code> are also defined on\n<code>require(&#39;zlib&#39;).constants</code>. In the normal course of operations, it will not be\nnecessary to use these constants. They are documented so that their presence is\nnot surprising. This section is taken almost directly from the\n<a href=\"https://zlib.net/manual.html#Constants\">zlib documentation</a>. See <a href=\"https://zlib.net/manual.html#Constants\">https://zlib.net/manual.html#Constants</a> for more\ndetails.</p>\n<p>Previously, the constants were available directly from <code>require(&#39;zlib&#39;)</code>, for\ninstance <code>zlib.Z_NO_FLUSH</code>. Accessing the constants directly from the module is\ncurrently still possible but is deprecated.</p>\n<p>Allowed flush values.</p>\n<ul>\n<li><code>zlib.constants.Z_NO_FLUSH</code></li>\n<li><code>zlib.constants.Z_PARTIAL_FLUSH</code></li>\n<li><code>zlib.constants.Z_SYNC_FLUSH</code></li>\n<li><code>zlib.constants.Z_FULL_FLUSH</code></li>\n<li><code>zlib.constants.Z_FINISH</code></li>\n<li><code>zlib.constants.Z_BLOCK</code></li>\n<li><code>zlib.constants.Z_TREES</code></li>\n</ul>\n<p>Return codes for the compression/decompression functions. Negative\nvalues are errors, positive values are used for special but normal\nevents.</p>\n<ul>\n<li><code>zlib.constants.Z_OK</code></li>\n<li><code>zlib.constants.Z_STREAM_END</code></li>\n<li><code>zlib.constants.Z_NEED_DICT</code></li>\n<li><code>zlib.constants.Z_ERRNO</code></li>\n<li><code>zlib.constants.Z_STREAM_ERROR</code></li>\n<li><code>zlib.constants.Z_DATA_ERROR</code></li>\n<li><code>zlib.constants.Z_MEM_ERROR</code></li>\n<li><code>zlib.constants.Z_BUF_ERROR</code></li>\n<li><code>zlib.constants.Z_VERSION_ERROR</code></li>\n</ul>\n<p>Compression levels.</p>\n<ul>\n<li><code>zlib.constants.Z_NO_COMPRESSION</code></li>\n<li><code>zlib.constants.Z_BEST_SPEED</code></li>\n<li><code>zlib.constants.Z_BEST_COMPRESSION</code></li>\n<li><code>zlib.constants.Z_DEFAULT_COMPRESSION</code></li>\n</ul>\n<p>Compression strategy.</p>\n<ul>\n<li><code>zlib.constants.Z_FILTERED</code></li>\n<li><code>zlib.constants.Z_HUFFMAN_ONLY</code></li>\n<li><code>zlib.constants.Z_RLE</code></li>\n<li><code>zlib.constants.Z_FIXED</code></li>\n<li><code>zlib.constants.Z_DEFAULT_STRATEGY</code></li>\n</ul>\n"
        },
        {
          "textRaw": "Class: Options",
          "type": "misc",
          "name": "Options",
          "meta": {
            "added": [
              "v0.11.1"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `dictionary` option can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `dictionary` option can be an `Uint8Array` now."
              },
              {
                "version": "v5.11.0",
                "pr-url": "https://github.com/nodejs/node/pull/6069",
                "description": "The `finishFlush` option is supported now."
              }
            ]
          },
          "desc": "<p>Each class takes an <code>options</code> object. All options are optional.</p>\n<p>Note that some options are only relevant when compressing, and are\nignored by the decompression classes.</p>\n<ul>\n<li><code>flush</code> {integer} <strong>Default:</strong> <code>zlib.constants.Z_NO_FLUSH</code></li>\n<li><code>finishFlush</code> {integer} <strong>Default:</strong> <code>zlib.constants.Z_FINISH</code></li>\n<li><code>chunkSize</code> {integer} <strong>Default:</strong> <code>16 * 1024</code></li>\n<li><code>windowBits</code> {integer}</li>\n<li><code>level</code> {integer} (compression only)</li>\n<li><code>memLevel</code> {integer} (compression only)</li>\n<li><code>strategy</code> {integer} (compression only)</li>\n<li><code>dictionary</code> {Buffer|TypedArray|DataView|ArrayBuffer} (deflate/inflate only,\nempty dictionary by default)</li>\n<li><code>info</code> {boolean} (If <code>true</code>, returns an object with <code>buffer</code> and <code>engine</code>.)</li>\n</ul>\n<p>See the description of <code>deflateInit2</code> and <code>inflateInit2</code> at\n<a href=\"https://zlib.net/manual.html#Advanced\">https://zlib.net/manual.html#Advanced</a> for more information on these.</p>\n"
        },
        {
          "textRaw": "Convenience Methods",
          "name": "Convenience Methods",
          "type": "misc",
          "desc": "<p>All of these take a <a href=\"buffer.html#buffer_class_buffer\"><code>Buffer</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or string as the first argument, an optional second argument\nto supply options to the <code>zlib</code> classes and will call the supplied callback\nwith <code>callback(error, result)</code>.</p>\n<p>Every method has a <code>*Sync</code> counterpart, which accept the same arguments, but\nwithout a callback.</p>\n",
          "methods": [
            {
              "textRaw": "zlib.deflate(buffer[, options], callback)",
              "type": "method",
              "name": "deflate",
              "meta": {
                "added": [
                  "v0.6.0"
                ],
                "changes": [
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16042",
                    "description": "The `buffer` parameter can be an `ArrayBuffer`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>Compress a chunk of data with <a href=\"#zlib_class_zlib_deflate\"><code>Deflate</code></a>.</p>\n"
            },
            {
              "textRaw": "zlib.deflateSync(buffer[, options])",
              "type": "method",
              "name": "deflateSync",
              "meta": {
                "added": [
                  "v0.11.12"
                ],
                "changes": [
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16042",
                    "description": "The `buffer` parameter can be an `ArrayBuffer`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Compress a chunk of data with <a href=\"#zlib_class_zlib_deflate\"><code>Deflate</code></a>.</p>\n"
            },
            {
              "textRaw": "zlib.deflateRaw(buffer[, options], callback)",
              "type": "method",
              "name": "deflateRaw",
              "meta": {
                "added": [
                  "v0.6.0"
                ],
                "changes": [
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>Compress a chunk of data with <a href=\"#zlib_class_zlib_deflateraw\"><code>DeflateRaw</code></a>.</p>\n"
            },
            {
              "textRaw": "zlib.deflateRawSync(buffer[, options])",
              "type": "method",
              "name": "deflateRawSync",
              "meta": {
                "added": [
                  "v0.11.12"
                ],
                "changes": [
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16042",
                    "description": "The `buffer` parameter can be an `ArrayBuffer`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Compress a chunk of data with <a href=\"#zlib_class_zlib_deflateraw\"><code>DeflateRaw</code></a>.</p>\n"
            },
            {
              "textRaw": "zlib.gunzip(buffer[, options], callback)",
              "type": "method",
              "name": "gunzip",
              "meta": {
                "added": [
                  "v0.6.0"
                ],
                "changes": [
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16042",
                    "description": "The `buffer` parameter can be an `ArrayBuffer`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_gunzip\"><code>Gunzip</code></a>.</p>\n"
            },
            {
              "textRaw": "zlib.gunzipSync(buffer[, options])",
              "type": "method",
              "name": "gunzipSync",
              "meta": {
                "added": [
                  "v0.11.12"
                ],
                "changes": [
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16042",
                    "description": "The `buffer` parameter can be an `ArrayBuffer`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_gunzip\"><code>Gunzip</code></a>.</p>\n"
            },
            {
              "textRaw": "zlib.gzip(buffer[, options], callback)",
              "type": "method",
              "name": "gzip",
              "meta": {
                "added": [
                  "v0.6.0"
                ],
                "changes": [
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16042",
                    "description": "The `buffer` parameter can be an `ArrayBuffer`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>Compress a chunk of data with <a href=\"#zlib_class_zlib_gzip\"><code>Gzip</code></a>.</p>\n"
            },
            {
              "textRaw": "zlib.gzipSync(buffer[, options])",
              "type": "method",
              "name": "gzipSync",
              "meta": {
                "added": [
                  "v0.11.12"
                ],
                "changes": [
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16042",
                    "description": "The `buffer` parameter can be an `ArrayBuffer`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Compress a chunk of data with <a href=\"#zlib_class_zlib_gzip\"><code>Gzip</code></a>.</p>\n"
            },
            {
              "textRaw": "zlib.inflate(buffer[, options], callback)",
              "type": "method",
              "name": "inflate",
              "meta": {
                "added": [
                  "v0.6.0"
                ],
                "changes": [
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16042",
                    "description": "The `buffer` parameter can be an `ArrayBuffer`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_inflate\"><code>Inflate</code></a>.</p>\n"
            },
            {
              "textRaw": "zlib.inflateSync(buffer[, options])",
              "type": "method",
              "name": "inflateSync",
              "meta": {
                "added": [
                  "v0.11.12"
                ],
                "changes": [
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16042",
                    "description": "The `buffer` parameter can be an `ArrayBuffer`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_inflate\"><code>Inflate</code></a>.</p>\n"
            },
            {
              "textRaw": "zlib.inflateRaw(buffer[, options], callback)",
              "type": "method",
              "name": "inflateRaw",
              "meta": {
                "added": [
                  "v0.6.0"
                ],
                "changes": [
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16042",
                    "description": "The `buffer` parameter can be an `ArrayBuffer`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_inflateraw\"><code>InflateRaw</code></a>.</p>\n"
            },
            {
              "textRaw": "zlib.inflateRawSync(buffer[, options])",
              "type": "method",
              "name": "inflateRawSync",
              "meta": {
                "added": [
                  "v0.11.12"
                ],
                "changes": [
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16042",
                    "description": "The `buffer` parameter can be an `ArrayBuffer`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_inflateraw\"><code>InflateRaw</code></a>.</p>\n"
            },
            {
              "textRaw": "zlib.unzip(buffer[, options], callback)",
              "type": "method",
              "name": "unzip",
              "meta": {
                "added": [
                  "v0.6.0"
                ],
                "changes": [
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16042",
                    "description": "The `buffer` parameter can be an `ArrayBuffer`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_unzip\"><code>Unzip</code></a>.</p>\n<!-- [end-include:zlib.md] -->\n"
            },
            {
              "textRaw": "zlib.unzipSync(buffer[, options])",
              "type": "method",
              "name": "unzipSync",
              "meta": {
                "added": [
                  "v0.11.12"
                ],
                "changes": [
                  {
                    "version": "v9.4.0",
                    "pr-url": "https://github.com/nodejs/node/pull/16042",
                    "description": "The `buffer` parameter can be an `ArrayBuffer`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12223",
                    "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
                  },
                  {
                    "version": "v8.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/12001",
                    "description": "The `buffer` parameter can be an `Uint8Array` now."
                  }
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                      "name": "buffer",
                      "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "buffer"
                    },
                    {
                      "name": "options",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_unzip\"><code>Unzip</code></a>.</p>\n<!-- [end-include:zlib.md] -->\n"
            }
          ]
        }
      ],
      "meta": {
        "added": [
          "v0.5.8"
        ],
        "changes": []
      },
      "classes": [
        {
          "textRaw": "Class: zlib.Deflate",
          "type": "class",
          "name": "zlib.Deflate",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>Compress data using deflate.</p>\n"
        },
        {
          "textRaw": "Class: zlib.DeflateRaw",
          "type": "class",
          "name": "zlib.DeflateRaw",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>Compress data using deflate, and do not append a <code>zlib</code> header.</p>\n"
        },
        {
          "textRaw": "Class: zlib.Gunzip",
          "type": "class",
          "name": "zlib.Gunzip",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": [
              {
                "version": "v6.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/5883",
                "description": "Trailing garbage at the end of the input stream will now result in an `'error'` event."
              },
              {
                "version": "v5.9.0",
                "pr-url": "https://github.com/nodejs/node/pull/5120",
                "description": "Multiple concatenated gzip file members are supported now."
              },
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/2595",
                "description": "A truncated input stream will now result in an `'error'` event."
              }
            ]
          },
          "desc": "<p>Decompress a gzip stream.</p>\n"
        },
        {
          "textRaw": "Class: zlib.Gzip",
          "type": "class",
          "name": "zlib.Gzip",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>Compress data using gzip.</p>\n"
        },
        {
          "textRaw": "Class: zlib.Inflate",
          "type": "class",
          "name": "zlib.Inflate",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": [
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/2595",
                "description": "A truncated input stream will now result in an `'error'` event."
              }
            ]
          },
          "desc": "<p>Decompress a deflate stream.</p>\n"
        },
        {
          "textRaw": "Class: zlib.InflateRaw",
          "type": "class",
          "name": "zlib.InflateRaw",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": [
              {
                "version": "v6.8.0",
                "pr-url": "https://github.com/nodejs/node/pull/8512",
                "description": "Custom dictionaries are now supported by `InflateRaw`."
              },
              {
                "version": "v5.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/2595",
                "description": "A truncated input stream will now result in an `'error'` event."
              }
            ]
          },
          "desc": "<p>Decompress a raw deflate stream.</p>\n"
        },
        {
          "textRaw": "Class: zlib.Unzip",
          "type": "class",
          "name": "zlib.Unzip",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>Decompress either a Gzip- or Deflate-compressed stream by auto-detecting\nthe header.</p>\n"
        },
        {
          "textRaw": "Class: zlib.Zlib",
          "type": "class",
          "name": "zlib.Zlib",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>Not exported by the <code>zlib</code> module. It is documented here because it is the base\nclass of the compressor/decompressor classes.</p>\n",
          "properties": [
            {
              "textRaw": "`bytesRead` {number} ",
              "type": "number",
              "name": "bytesRead",
              "meta": {
                "added": [
                  "v8.1.0"
                ],
                "deprecated": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "stability": 0,
              "stabilityText": "Deprecated: Use [`zlib.bytesWritten`][] instead.",
              "desc": "<p>Deprecated alias for <a href=\"#zlib_zlib_byteswritten\"><code>zlib.bytesWritten</code></a>. This original name was chosen\nbecause it also made sense to interpret the value as the number of bytes\nread by the engine, but is inconsistent with other streams in Node.js that\nexpose values under these names.</p>\n"
            },
            {
              "textRaw": "`bytesWritten` {number} ",
              "type": "number",
              "name": "bytesWritten",
              "meta": {
                "added": [
                  "v10.0.0"
                ],
                "changes": []
              },
              "desc": "<p>The <code>zlib.bytesWritten</code> property specifies the number of bytes written to\nthe engine, before the bytes are processed (compressed or decompressed,\nas appropriate for the derived class).</p>\n"
            }
          ],
          "methods": [
            {
              "textRaw": "zlib.close([callback])",
              "type": "method",
              "name": "close",
              "meta": {
                "added": [
                  "v0.9.4"
                ],
                "changes": []
              },
              "desc": "<p>Close the underlying handle.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "zlib.flush([kind], callback)",
              "type": "method",
              "name": "flush",
              "meta": {
                "added": [
                  "v0.5.8"
                ],
                "changes": []
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`kind` **Default:** `zlib.constants.Z_FULL_FLUSH` ",
                      "name": "kind",
                      "default": "`zlib.constants.Z_FULL_FLUSH`",
                      "optional": true
                    },
                    {
                      "name": "callback"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "kind",
                      "optional": true
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ],
              "desc": "<p>Flush pending data. Don&#39;t call this frivolously, premature flushes negatively\nimpact the effectiveness of the compression algorithm.</p>\n<p>Calling this only flushes data from the internal <code>zlib</code> state, and does not\nperform flushing of any kind on the streams level. Rather, it behaves like a\nnormal call to <code>.write()</code>, i.e. it will be queued up behind other pending\nwrites and will only produce output when data is being read from the stream.</p>\n"
            },
            {
              "textRaw": "zlib.params(level, strategy, callback)",
              "type": "method",
              "name": "params",
              "meta": {
                "added": [
                  "v0.11.4"
                ],
                "changes": []
              },
              "desc": "<p>Dynamically update the compression level and compression strategy.\nOnly applicable to deflate algorithm.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "level"
                    },
                    {
                      "name": "strategy"
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "zlib.reset()",
              "type": "method",
              "name": "reset",
              "meta": {
                "added": [
                  "v0.7.0"
                ],
                "changes": []
              },
              "desc": "<p>Reset the compressor/decompressor to factory defaults. Only applicable to\nthe inflate and deflate algorithms.</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "zlib.constants",
          "name": "constants",
          "meta": {
            "added": [
              "v7.0.0"
            ],
            "changes": []
          },
          "desc": "<p>Provides an object enumerating Zlib-related constants.</p>\n"
        }
      ],
      "methods": [
        {
          "textRaw": "zlib.createDeflate([options])",
          "type": "method",
          "name": "createDeflate",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>Creates and returns a new <a href=\"#zlib_class_zlib_deflate\"><code>Deflate</code></a> object with the given <a href=\"#zlib_class_options\"><code>options</code></a>.</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createDeflateRaw([options])",
          "type": "method",
          "name": "createDeflateRaw",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>Creates and returns a new <a href=\"#zlib_class_zlib_deflateraw\"><code>DeflateRaw</code></a> object with the given <a href=\"#zlib_class_options\"><code>options</code></a>.</p>\n<p>An upgrade of zlib from 1.2.8 to 1.2.11 changed behavior when <code>windowBits</code>\nis set to 8 for raw deflate streams. zlib would automatically set <code>windowBits</code>\nto 9 if was initially set to 8. Newer versions of zlib will throw an exception,\nso Node.js restored the original behavior of upgrading a value of 8 to 9,\nsince passing <code>windowBits = 9</code> to zlib actually results in a compressed stream\nthat effectively uses an 8-bit window only.</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createGunzip([options])",
          "type": "method",
          "name": "createGunzip",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>Creates and returns a new <a href=\"#zlib_class_zlib_gunzip\"><code>Gunzip</code></a> object with the given <a href=\"#zlib_class_options\"><code>options</code></a>.</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createGzip([options])",
          "type": "method",
          "name": "createGzip",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>Creates and returns a new <a href=\"#zlib_class_zlib_gzip\"><code>Gzip</code></a> object with the given <a href=\"#zlib_class_options\"><code>options</code></a>.</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createInflate([options])",
          "type": "method",
          "name": "createInflate",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>Creates and returns a new <a href=\"#zlib_class_zlib_inflate\"><code>Inflate</code></a> object with the given <a href=\"#zlib_class_options\"><code>options</code></a>.</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createInflateRaw([options])",
          "type": "method",
          "name": "createInflateRaw",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>Creates and returns a new <a href=\"#zlib_class_zlib_inflateraw\"><code>InflateRaw</code></a> object with the given <a href=\"#zlib_class_options\"><code>options</code></a>.</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.createUnzip([options])",
          "type": "method",
          "name": "createUnzip",
          "meta": {
            "added": [
              "v0.5.8"
            ],
            "changes": []
          },
          "desc": "<p>Creates and returns a new <a href=\"#zlib_class_zlib_unzip\"><code>Unzip</code></a> object with the given <a href=\"#zlib_class_options\"><code>options</code></a>.</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "textRaw": "zlib.deflate(buffer[, options], callback)",
          "type": "method",
          "name": "deflate",
          "meta": {
            "added": [
              "v0.6.0"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `buffer` parameter can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Compress a chunk of data with <a href=\"#zlib_class_zlib_deflate\"><code>Deflate</code></a>.</p>\n"
        },
        {
          "textRaw": "zlib.deflateSync(buffer[, options])",
          "type": "method",
          "name": "deflateSync",
          "meta": {
            "added": [
              "v0.11.12"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `buffer` parameter can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Compress a chunk of data with <a href=\"#zlib_class_zlib_deflate\"><code>Deflate</code></a>.</p>\n"
        },
        {
          "textRaw": "zlib.deflateRaw(buffer[, options], callback)",
          "type": "method",
          "name": "deflateRaw",
          "meta": {
            "added": [
              "v0.6.0"
            ],
            "changes": [
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Compress a chunk of data with <a href=\"#zlib_class_zlib_deflateraw\"><code>DeflateRaw</code></a>.</p>\n"
        },
        {
          "textRaw": "zlib.deflateRawSync(buffer[, options])",
          "type": "method",
          "name": "deflateRawSync",
          "meta": {
            "added": [
              "v0.11.12"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `buffer` parameter can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Compress a chunk of data with <a href=\"#zlib_class_zlib_deflateraw\"><code>DeflateRaw</code></a>.</p>\n"
        },
        {
          "textRaw": "zlib.gunzip(buffer[, options], callback)",
          "type": "method",
          "name": "gunzip",
          "meta": {
            "added": [
              "v0.6.0"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `buffer` parameter can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_gunzip\"><code>Gunzip</code></a>.</p>\n"
        },
        {
          "textRaw": "zlib.gunzipSync(buffer[, options])",
          "type": "method",
          "name": "gunzipSync",
          "meta": {
            "added": [
              "v0.11.12"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `buffer` parameter can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_gunzip\"><code>Gunzip</code></a>.</p>\n"
        },
        {
          "textRaw": "zlib.gzip(buffer[, options], callback)",
          "type": "method",
          "name": "gzip",
          "meta": {
            "added": [
              "v0.6.0"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `buffer` parameter can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Compress a chunk of data with <a href=\"#zlib_class_zlib_gzip\"><code>Gzip</code></a>.</p>\n"
        },
        {
          "textRaw": "zlib.gzipSync(buffer[, options])",
          "type": "method",
          "name": "gzipSync",
          "meta": {
            "added": [
              "v0.11.12"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `buffer` parameter can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Compress a chunk of data with <a href=\"#zlib_class_zlib_gzip\"><code>Gzip</code></a>.</p>\n"
        },
        {
          "textRaw": "zlib.inflate(buffer[, options], callback)",
          "type": "method",
          "name": "inflate",
          "meta": {
            "added": [
              "v0.6.0"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `buffer` parameter can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_inflate\"><code>Inflate</code></a>.</p>\n"
        },
        {
          "textRaw": "zlib.inflateSync(buffer[, options])",
          "type": "method",
          "name": "inflateSync",
          "meta": {
            "added": [
              "v0.11.12"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `buffer` parameter can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_inflate\"><code>Inflate</code></a>.</p>\n"
        },
        {
          "textRaw": "zlib.inflateRaw(buffer[, options], callback)",
          "type": "method",
          "name": "inflateRaw",
          "meta": {
            "added": [
              "v0.6.0"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `buffer` parameter can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_inflateraw\"><code>InflateRaw</code></a>.</p>\n"
        },
        {
          "textRaw": "zlib.inflateRawSync(buffer[, options])",
          "type": "method",
          "name": "inflateRawSync",
          "meta": {
            "added": [
              "v0.11.12"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `buffer` parameter can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_inflateraw\"><code>InflateRaw</code></a>.</p>\n"
        },
        {
          "textRaw": "zlib.unzip(buffer[, options], callback)",
          "type": "method",
          "name": "unzip",
          "meta": {
            "added": [
              "v0.6.0"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `buffer` parameter can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback"
                }
              ]
            }
          ],
          "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_unzip\"><code>Unzip</code></a>.</p>\n<!-- [end-include:zlib.md] -->\n"
        },
        {
          "textRaw": "zlib.unzipSync(buffer[, options])",
          "type": "method",
          "name": "unzipSync",
          "meta": {
            "added": [
              "v0.11.12"
            ],
            "changes": [
              {
                "version": "v9.4.0",
                "pr-url": "https://github.com/nodejs/node/pull/16042",
                "description": "The `buffer` parameter can be an `ArrayBuffer`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12223",
                "description": "The `buffer` parameter can be any `TypedArray` or `DataView`."
              },
              {
                "version": "v8.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12001",
                "description": "The `buffer` parameter can be an `Uint8Array` now."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`buffer` {Buffer|TypedArray|DataView|ArrayBuffer|string} ",
                  "name": "buffer",
                  "type": "Buffer|TypedArray|DataView|ArrayBuffer|string"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "buffer"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Decompress a chunk of data with <a href=\"#zlib_class_zlib_unzip\"><code>Unzip</code></a>.</p>\n<!-- [end-include:zlib.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "Zlib"
    }
  ],
  "stability": 2,
  "stabilityText": "Stable",
  "classes": [
    {
      "textRaw": "Class: Error",
      "type": "class",
      "name": "Error",
      "desc": "<p>A generic JavaScript <code>Error</code> object that does not denote any specific\ncircumstance of why the error occurred. <code>Error</code> objects capture a &quot;stack trace&quot;\ndetailing the point in the code at which the <code>Error</code> was instantiated, and may\nprovide a text description of the error.</p>\n<p>For crypto only, <code>Error</code> objects will include the OpenSSL error stack in a\nseparate property called <code>opensslErrorStack</code> if it is available when the error\nis thrown.</p>\n<p>All errors generated by Node.js, including all System and JavaScript errors,\nwill either be instances of, or inherit from, the <code>Error</code> class.</p>\n",
      "methods": [
        {
          "textRaw": "Error.captureStackTrace(targetObject[, constructorOpt])",
          "type": "method",
          "name": "captureStackTrace",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`targetObject` {Object} ",
                  "name": "targetObject",
                  "type": "Object"
                },
                {
                  "textRaw": "`constructorOpt` {Function} ",
                  "name": "constructorOpt",
                  "type": "Function",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "targetObject"
                },
                {
                  "name": "constructorOpt",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns\na string representing the location in the code at which\n<code>Error.captureStackTrace()</code> was called.</p>\n<pre><code class=\"lang-js\">const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // similar to `new Error().stack`\n</code></pre>\n<p>The first line of the trace will be prefixed with\n<code>${myObject.name}: ${myObject.message}</code>.</p>\n<p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames\nabove <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the\ngenerated stack trace.</p>\n<p>The <code>constructorOpt</code> argument is useful for hiding implementation\ndetails of error generation from an end user. For instance:</p>\n<pre><code class=\"lang-js\">function MyError() {\n  Error.captureStackTrace(this, MyError);\n}\n\n// Without passing MyError to captureStackTrace, the MyError\n// frame would show up in the .stack property. By passing\n// the constructor, we omit that frame, and retain all frames below it.\nnew MyError().stack;\n</code></pre>\n"
        }
      ],
      "properties": [
        {
          "textRaw": "`stackTraceLimit` {number} ",
          "type": "number",
          "name": "stackTraceLimit",
          "desc": "<p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames\ncollected by a stack trace (whether generated by <code>new Error().stack</code> or\n<code>Error.captureStackTrace(obj)</code>).</p>\n<p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured <em>after</em> the value has been changed.</p>\n<p>If set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.</p>\n"
        },
        {
          "textRaw": "`code` {string} ",
          "type": "string",
          "name": "code",
          "desc": "<p>The <code>error.code</code> property is a string label that identifies the kind of error.\nSee <a href=\"#nodejs-error-codes\">Node.js Error Codes</a> for details about specific codes.</p>\n"
        },
        {
          "textRaw": "`message` {string} ",
          "type": "string",
          "name": "message",
          "desc": "<p>The <code>error.message</code> property is the string description of the error as set by\ncalling <code>new Error(message)</code>. The <code>message</code> passed to the constructor will also\nappear in the first line of the stack trace of the <code>Error</code>, however changing\nthis property after the <code>Error</code> object is created <em>may not</em> change the first\nline of the stack trace (for example, when <code>error.stack</code> is read before this\nproperty is changed).</p>\n<pre><code class=\"lang-js\">const err = new Error(&#39;The message&#39;);\nconsole.error(err.message);\n// Prints: The message\n</code></pre>\n"
        },
        {
          "textRaw": "`stack` {string} ",
          "type": "string",
          "name": "stack",
          "desc": "<p>The <code>error.stack</code> property is a string describing the point in the code at which\nthe <code>Error</code> was instantiated.</p>\n<pre><code class=\"lang-txt\">Error: Things keep happening!\n   at /home/gbusey/file.js:525:2\n   at Frobnicator.refrobulate (/home/gbusey/business-logic.js:424:21)\n   at Actor.&lt;anonymous&gt; (/home/gbusey/actors.js:400:8)\n   at increaseSynergy (/home/gbusey/actors.js:701:6)\n</code></pre>\n<p>The first line is formatted as <code>&lt;error class name&gt;: &lt;error message&gt;</code>, and\nis followed by a series of stack frames (each line beginning with &quot;at &quot;).\nEach frame describes a call site within the code that lead to the error being\ngenerated. V8 attempts to display a name for each function (by variable name,\nfunction name, or object method name), but occasionally it will not be able to\nfind a suitable name. If V8 cannot determine a name for the function, only\nlocation information will be displayed for that frame. Otherwise, the\ndetermined function name will be displayed with location information appended\nin parentheses.</p>\n<p>Frames are only generated for JavaScript functions. If, for example, execution\nsynchronously passes through a C++ addon function called <code>cheetahify</code> which\nitself calls a JavaScript function, the frame representing the <code>cheetahify</code> call\nwill not be present in the stack traces:</p>\n<pre><code class=\"lang-js\">const cheetahify = require(&#39;./native-binding.node&#39;);\n\nfunction makeFaster() {\n  // cheetahify *synchronously* calls speedy.\n  cheetahify(function speedy() {\n    throw new Error(&#39;oh no!&#39;);\n  });\n}\n\nmakeFaster();\n// will throw:\n//   /home/gbusey/file.js:6\n//       throw new Error(&#39;oh no!&#39;);\n//           ^\n//   Error: oh no!\n//       at speedy (/home/gbusey/file.js:6:11)\n//       at makeFaster (/home/gbusey/file.js:5:3)\n//       at Object.&lt;anonymous&gt; (/home/gbusey/file.js:10:1)\n//       at Module._compile (module.js:456:26)\n//       at Object.Module._extensions..js (module.js:474:10)\n//       at Module.load (module.js:356:32)\n//       at Function.Module._load (module.js:312:12)\n//       at Function.Module.runMain (module.js:497:10)\n//       at startup (node.js:119:16)\n//       at node.js:906:3\n</code></pre>\n<p>The location information will be one of:</p>\n<ul>\n<li><code>native</code>, if the frame represents a call internal to V8 (as in <code>[].forEach</code>).</li>\n<li><code>plain-filename.js:line:column</code>, if the frame represents a call internal\n to Node.js.</li>\n<li><code>/absolute/path/to/file.js:line:column</code>, if the frame represents a call in\na user program, or its dependencies.</li>\n</ul>\n<p>The string representing the stack trace is lazily generated when the\n<code>error.stack</code> property is <strong>accessed</strong>.</p>\n<p>The number of frames captured by the stack trace is bounded by the smaller of\n<code>Error.stackTraceLimit</code> or the number of available frames on the current event\nloop tick.</p>\n<p>System-level errors are generated as augmented <code>Error</code> instances, which are\ndetailed <a href=\"#errors_system_errors\">here</a>.</p>\n"
        }
      ],
      "signatures": [
        {
          "params": [
            {
              "textRaw": "`message` {string} ",
              "name": "message",
              "type": "string"
            }
          ],
          "desc": "<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the\nprovided text message. If an object is passed as <code>message</code>, the text message\nis generated by calling <code>message.toString()</code>. The <code>error.stack</code> property will\nrepresent the point in the code at which <code>new Error()</code> was called. Stack traces\nare dependent on <a href=\"https://github.com/v8/v8/wiki/Stack-Trace-API\">V8&#39;s stack trace API</a>. Stack traces extend only to either\n(a) the beginning of <em>synchronous code execution</em>, or (b) the number of frames\ngiven by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>\n"
        },
        {
          "params": [
            {
              "name": "message"
            }
          ],
          "desc": "<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the\nprovided text message. If an object is passed as <code>message</code>, the text message\nis generated by calling <code>message.toString()</code>. The <code>error.stack</code> property will\nrepresent the point in the code at which <code>new Error()</code> was called. Stack traces\nare dependent on <a href=\"https://github.com/v8/v8/wiki/Stack-Trace-API\">V8&#39;s stack trace API</a>. Stack traces extend only to either\n(a) the beginning of <em>synchronous code execution</em>, or (b) the number of frames\ngiven by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>\n"
        }
      ]
    },
    {
      "textRaw": "Class: AssertionError",
      "type": "class",
      "name": "AssertionError",
      "desc": "<p>A subclass of <code>Error</code> that indicates the failure of an assertion. For details,\nsee <a href=\"assert.html#assert_class_assert_assertionerror\"><code>Class: assert.AssertionError</code></a>.</p>\n"
    },
    {
      "textRaw": "Class: RangeError",
      "type": "class",
      "name": "RangeError",
      "desc": "<p>A subclass of <code>Error</code> that indicates that a provided argument was not within the\nset or range of acceptable values for a function; whether that is a numeric\nrange, or outside the set of options for a given function parameter.</p>\n<pre><code class=\"lang-js\">require(&#39;net&#39;).connect(-1);\n// throws &quot;RangeError: &quot;port&quot; option should be &gt;= 0 and &lt; 65536: -1&quot;\n</code></pre>\n<p>Node.js will generate and throw <code>RangeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>\n"
    },
    {
      "textRaw": "Class: ReferenceError",
      "type": "class",
      "name": "ReferenceError",
      "desc": "<p>A subclass of <code>Error</code> that indicates that an attempt is being made to access a\nvariable that is not defined. Such errors commonly indicate typos in code, or\nan otherwise broken program.</p>\n<p>While client code may generate and propagate these errors, in practice, only V8\nwill do so.</p>\n<pre><code class=\"lang-js\">doesNotExist;\n// throws ReferenceError, doesNotExist is not a variable in this program.\n</code></pre>\n<p>Unless an application is dynamically generating and running code,\n<code>ReferenceError</code> instances should always be considered a bug in the code\nor its dependencies.</p>\n"
    },
    {
      "textRaw": "Class: SyntaxError",
      "type": "class",
      "name": "SyntaxError",
      "desc": "<p>A subclass of <code>Error</code> that indicates that a program is not valid JavaScript.\nThese errors may only be generated and propagated as a result of code\nevaluation. Code evaluation may happen as a result of <code>eval</code>, <code>Function</code>,\n<code>require</code>, or <a href=\"vm.html\">vm</a>. These errors are almost always indicative of a broken\nprogram.</p>\n<pre><code class=\"lang-js\">try {\n  require(&#39;vm&#39;).runInThisContext(&#39;binary ! isNotOk&#39;);\n} catch (err) {\n  // err will be a SyntaxError\n}\n</code></pre>\n<p><code>SyntaxError</code> instances are unrecoverable in the context that created them –\nthey may only be caught by other contexts.</p>\n"
    },
    {
      "textRaw": "Class: TypeError",
      "type": "class",
      "name": "TypeError",
      "desc": "<p>A subclass of <code>Error</code> that indicates that a provided argument is not an\nallowable type. For example, passing a function to a parameter which expects a\nstring would be considered a <code>TypeError</code>.</p>\n<pre><code class=\"lang-js\">require(&#39;url&#39;).parse(() =&gt; { });\n// throws TypeError, since it expected a string\n</code></pre>\n<p>Node.js will generate and throw <code>TypeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>\n"
    }
  ],
  "globals": [
    {
      "textRaw": "Class: Buffer",
      "type": "global",
      "name": "Buffer",
      "meta": {
        "added": [
          "v0.1.103"
        ],
        "changes": []
      },
      "desc": "<ul>\n<li>{Function}</li>\n</ul>\n<p>Used to handle binary data. See the <a href=\"buffer.html\">buffer section</a>.</p>\n"
    },
    {
      "textRaw": "clearImmediate(immediateObject)",
      "type": "global",
      "name": "clearImmediate",
      "meta": {
        "added": [
          "v0.9.1"
        ],
        "changes": []
      },
      "desc": "<p><a href=\"timers.html#timers_clearimmediate_immediate\"><code>clearImmediate</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n"
    },
    {
      "textRaw": "clearInterval(intervalObject)",
      "type": "global",
      "name": "clearInterval",
      "meta": {
        "added": [
          "v0.0.1"
        ],
        "changes": []
      },
      "desc": "<p><a href=\"timers.html#timers_clearinterval_timeout\"><code>clearInterval</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n"
    },
    {
      "textRaw": "clearTimeout(timeoutObject)",
      "type": "global",
      "name": "clearTimeout",
      "meta": {
        "added": [
          "v0.0.1"
        ],
        "changes": []
      },
      "desc": "<p><a href=\"timers.html#timers_cleartimeout_timeout\"><code>clearTimeout</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n"
    },
    {
      "textRaw": "console",
      "name": "console",
      "meta": {
        "added": [
          "v0.1.100"
        ],
        "changes": []
      },
      "type": "global",
      "desc": "<ul>\n<li>{Object}</li>\n</ul>\n<p>Used to print to stdout and stderr. See the <a href=\"console.html\"><code>console</code></a> section.</p>\n"
    },
    {
      "textRaw": "global",
      "name": "global",
      "meta": {
        "added": [
          "v0.1.27"
        ],
        "changes": []
      },
      "type": "global",
      "desc": "<ul>\n<li>{Object} The global namespace object.</li>\n</ul>\n<p>In browsers, the top-level scope is the global scope. This means that\nwithin the browser <code>var something</code> will define a new global variable. In\nNode.js this is different. The top-level scope is not the global scope;\n<code>var something</code> inside a Node.js module will be local to that module.</p>\n"
    },
    {
      "textRaw": "process",
      "name": "process",
      "meta": {
        "added": [
          "v0.1.7"
        ],
        "changes": []
      },
      "type": "global",
      "desc": "<ul>\n<li>{Object}</li>\n</ul>\n<p>The process object. See the <a href=\"process.html#process_process\"><code>process</code> object</a> section.</p>\n"
    },
    {
      "textRaw": "setImmediate(callback[, ...args])",
      "type": "global",
      "name": "setImmediate",
      "meta": {
        "added": [
          "v0.9.1"
        ],
        "changes": []
      },
      "desc": "<p><a href=\"timers.html#timers_setimmediate_callback_args\"><code>setImmediate</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n"
    },
    {
      "textRaw": "setInterval(callback, delay[, ...args])",
      "type": "global",
      "name": "setInterval",
      "meta": {
        "added": [
          "v0.0.1"
        ],
        "changes": []
      },
      "desc": "<p><a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n"
    },
    {
      "textRaw": "setTimeout(callback, delay[, ...args])",
      "type": "global",
      "name": "setTimeout",
      "meta": {
        "added": [
          "v0.0.1"
        ],
        "changes": []
      },
      "desc": "<p><a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout</code></a> is described in the <a href=\"timers.html\">timers</a> section.</p>\n"
    },
    {
      "textRaw": "URL",
      "name": "URL",
      "meta": {
        "added": [
          "v10.0.0"
        ],
        "changes": []
      },
      "type": "global",
      "desc": "<p>The WHATWG <code>URL</code> class. See the <a href=\"url.html#url_class_url\"><code>URL</code></a> section.</p>\n"
    },
    {
      "textRaw": "URLSearchParams",
      "name": "URLSearchParams",
      "meta": {
        "added": [
          "v10.0.0"
        ],
        "changes": []
      },
      "type": "global",
      "desc": "<p>The WHATWG <code>URLSearchParams</code> class. See the <a href=\"#url_class_urlsearchparams\"><code>URLSearchParams</code></a> section.</p>\n<!-- [end-include:globals.md] -->\n<!-- [start-include:http.md] -->\n"
    },
    {
      "textRaw": "Process",
      "name": "Process",
      "introduced_in": "v0.10.0",
      "type": "global",
      "desc": "<p>The <code>process</code> object is a <code>global</code> that provides information about, and control\nover, the current Node.js process. As a global, it is always available to\nNode.js applications without using <code>require()</code>.</p>\n",
      "modules": [
        {
          "textRaw": "Process Events",
          "name": "process_events",
          "desc": "<p>The <code>process</code> object is an instance of <a href=\"events.html\"><code>EventEmitter</code></a>.</p>\n",
          "events": [
            {
              "textRaw": "Event: 'beforeExit'",
              "type": "event",
              "name": "beforeExit",
              "meta": {
                "added": [
                  "v0.11.12"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;beforeExit&#39;</code> event is emitted when Node.js empties its event loop and has\nno additional work to schedule. Normally, the Node.js process will exit when\nthere is no work scheduled, but a listener registered on the <code>&#39;beforeExit&#39;</code>\nevent can make asynchronous calls, and thereby cause the Node.js process to\ncontinue.</p>\n<p>The listener callback function is invoked with the value of\n<a href=\"#process_process_exitcode\"><code>process.exitCode</code></a> passed as the only argument.</p>\n<p>The <code>&#39;beforeExit&#39;</code> event is <em>not</em> emitted for conditions causing explicit\ntermination, such as calling <a href=\"#process_process_exit_code\"><code>process.exit()</code></a> or uncaught exceptions.</p>\n<p>The <code>&#39;beforeExit&#39;</code> should <em>not</em> be used as an alternative to the <code>&#39;exit&#39;</code> event\nunless the intention is to schedule additional work.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'disconnect'",
              "type": "event",
              "name": "disconnect",
              "meta": {
                "added": [
                  "v0.7.7"
                ],
                "changes": []
              },
              "desc": "<p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process.html\">Child Process</a>\nand <a href=\"cluster.html\">Cluster</a> documentation), the <code>&#39;disconnect&#39;</code> event will be emitted when\nthe IPC channel is closed.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'exit'",
              "type": "event",
              "name": "exit",
              "meta": {
                "added": [
                  "v0.1.7"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>The <code>&#39;exit&#39;</code> event is emitted when the Node.js process is about to exit as a\nresult of either:</p>\n<ul>\n<li>The <code>process.exit()</code> method being called explicitly;</li>\n<li>The Node.js event loop no longer having any additional work to perform.</li>\n</ul>\n<p>There is no way to prevent the exiting of the event loop at this point, and once\nall <code>&#39;exit&#39;</code> listeners have finished running the Node.js process will terminate.</p>\n<p>The listener callback function is invoked with the exit code specified either\nby the <a href=\"#process_process_exitcode\"><code>process.exitCode</code></a> property, or the <code>exitCode</code> argument passed to the\n<a href=\"#process_process_exit_code\"><code>process.exit()</code></a> method.</p>\n<pre><code class=\"lang-js\">process.on(&#39;exit&#39;, (code) =&gt; {\n  console.log(`About to exit with code: ${code}`);\n});\n</code></pre>\n<p>Listener functions <strong>must</strong> only perform <strong>synchronous</strong> operations. The Node.js\nprocess will exit immediately after calling the <code>&#39;exit&#39;</code> event listeners\ncausing any additional work still queued in the event loop to be abandoned.\nIn the following example, for instance, the timeout will never occur:</p>\n<pre><code class=\"lang-js\">process.on(&#39;exit&#39;, (code) =&gt; {\n  setTimeout(() =&gt; {\n    console.log(&#39;This will not run&#39;);\n  }, 0);\n});\n</code></pre>\n"
            },
            {
              "textRaw": "Event: 'message'",
              "type": "event",
              "name": "message",
              "meta": {
                "added": [
                  "v0.5.10"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process.html\">Child Process</a>\nand <a href=\"cluster.html\">Cluster</a> documentation), the <code>&#39;message&#39;</code> event is emitted whenever a\nmessage sent by a parent process using <a href=\"child_process.html#child_process_subprocess_send_message_sendhandle_options_callback\"><code>childprocess.send()</code></a> is received by\nthe child process.</p>\n<p>The message goes through serialization and parsing. The resulting message might\nnot be the same as what is originally sent.</p>\n"
            },
            {
              "textRaw": "Event: 'rejectionHandled'",
              "type": "event",
              "name": "rejectionHandled",
              "meta": {
                "added": [
                  "v1.4.1"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>The <code>&#39;rejectionHandled&#39;</code> event is emitted whenever a <code>Promise</code> has been rejected\nand an error handler was attached to it (using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>promise.catch()</code></a>, for\nexample) later than one turn of the Node.js event loop.</p>\n<p>The <code>Promise</code> object would have previously been emitted in an\n<code>&#39;unhandledRejection&#39;</code> event, but during the course of processing gained a\nrejection handler.</p>\n<p>There is no notion of a top level for a <code>Promise</code> chain at which rejections can\nalways be handled. Being inherently asynchronous in nature, a <code>Promise</code>\nrejection can be handled at a future point in time — possibly much later than\nthe event loop turn it takes for the <code>&#39;unhandledRejection&#39;</code> event to be emitted.</p>\n<p>Another way of stating this is that, unlike in synchronous code where there is\nan ever-growing list of unhandled exceptions, with Promises there can be a\ngrowing-and-shrinking list of unhandled rejections.</p>\n<p>In synchronous code, the <code>&#39;uncaughtException&#39;</code> event is emitted when the list of\nunhandled exceptions grows.</p>\n<p>In asynchronous code, the <code>&#39;unhandledRejection&#39;</code> event is emitted when the list\nof unhandled rejections grows, and the <code>&#39;rejectionHandled&#39;</code> event is emitted\nwhen the list of unhandled rejections shrinks.</p>\n<pre><code class=\"lang-js\">const unhandledRejections = new Map();\nprocess.on(&#39;unhandledRejection&#39;, (reason, promise) =&gt; {\n  unhandledRejections.set(promise, reason);\n});\nprocess.on(&#39;rejectionHandled&#39;, (promise) =&gt; {\n  unhandledRejections.delete(promise);\n});\n</code></pre>\n<p>In this example, the <code>unhandledRejections</code> <code>Map</code> will grow and shrink over time,\nreflecting rejections that start unhandled and then become handled. It is\npossible to record such errors in an error log, either periodically (which is\nlikely best for long-running application) or upon process exit (which is likely\nmost convenient for scripts).</p>\n"
            },
            {
              "textRaw": "Event: 'uncaughtException'",
              "type": "event",
              "name": "uncaughtException",
              "meta": {
                "added": [
                  "v0.1.18"
                ],
                "changes": []
              },
              "desc": "<p>The <code>&#39;uncaughtException&#39;</code> event is emitted when an uncaught JavaScript\nexception bubbles all the way back to the event loop. By default, Node.js\nhandles such exceptions by printing the stack trace to <code>stderr</code> and exiting.\nAdding a handler for the <code>&#39;uncaughtException&#39;</code> event overrides this default\nbehavior.</p>\n<p>The listener function is called with the <code>Error</code> object passed as the only\nargument.</p>\n<pre><code class=\"lang-js\">process.on(&#39;uncaughtException&#39;, (err) =&gt; {\n  fs.writeSync(1, `Caught exception: ${err}\\n`);\n});\n\nsetTimeout(() =&gt; {\n  console.log(&#39;This will still run.&#39;);\n}, 500);\n\n// Intentionally cause an exception, but don&#39;t catch it.\nnonexistentFunc();\nconsole.log(&#39;This will not run.&#39;);\n</code></pre>\n",
              "modules": [
                {
                  "textRaw": "Warning: Using `'uncaughtException'` correctly",
                  "name": "warning:_using_`'uncaughtexception'`_correctly",
                  "desc": "<p>Note that <code>&#39;uncaughtException&#39;</code> is a crude mechanism for exception handling\nintended to be used only as a last resort. The event <em>should not</em> be used as\nan equivalent to <code>On Error Resume Next</code>. Unhandled exceptions inherently mean\nthat an application is in an undefined state. Attempting to resume application\ncode without properly recovering from the exception can cause additional\nunforeseen and unpredictable issues.</p>\n<p>Exceptions thrown from within the event handler will not be caught. Instead the\nprocess will exit with a non-zero exit code and the stack trace will be printed.\nThis is to avoid infinite recursion.</p>\n<p>Attempting to resume normally after an uncaught exception can be similar to\npulling out of the power cord when upgrading a computer — nine out of ten\ntimes nothing happens - but the 10th time, the system becomes corrupted.</p>\n<p>The correct use of <code>&#39;uncaughtException&#39;</code> is to perform synchronous cleanup\nof allocated resources (e.g. file descriptors, handles, etc) before shutting\ndown the process. <strong>It is not safe to resume normal operation after\n<code>&#39;uncaughtException&#39;</code>.</strong></p>\n<p>To restart a crashed application in a more reliable way, whether\n<code>&#39;uncaughtException&#39;</code> is emitted or not, an external monitor should be employed\nin a separate process to detect application failures and recover or restart as\nneeded.</p>\n",
                  "type": "module",
                  "displayName": "Warning: Using `'uncaughtException'` correctly"
                }
              ],
              "params": []
            },
            {
              "textRaw": "Event: 'unhandledRejection'",
              "type": "event",
              "name": "unhandledRejection",
              "meta": {
                "added": [
                  "v1.4.1"
                ],
                "changes": [
                  {
                    "version": "v7.0.0",
                    "pr-url": "https://github.com/nodejs/node/pull/8217",
                    "description": "Not handling `Promise` rejections has been deprecated."
                  },
                  {
                    "version": "v6.6.0",
                    "pr-url": "https://github.com/nodejs/node/pull/8223",
                    "description": "Unhandled `Promise` rejections will now emit a process warning."
                  }
                ]
              },
              "desc": "<p>The <code>&#39;unhandledRejection&#39;</code> event is emitted whenever a <code>Promise</code> is rejected and\nno error handler is attached to the promise within a turn of the event loop.\nWhen programming with Promises, exceptions are encapsulated as &quot;rejected\npromises&quot;. Rejections can be caught and handled using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>promise.catch()</code></a> and\nare propagated through a <code>Promise</code> chain. The <code>&#39;unhandledRejection&#39;</code> event is\nuseful for detecting and keeping track of promises that were rejected whose\nrejections have not yet been handled.</p>\n<p>The listener function is called with the following arguments:</p>\n<ul>\n<li><code>reason</code> {Error|any} The object with which the promise was rejected\n(typically an <a href=\"errors.html#errors_class_error\"><code>Error</code></a> object).</li>\n<li><code>p</code> the <code>Promise</code> that was rejected.</li>\n</ul>\n<pre><code class=\"lang-js\">process.on(&#39;unhandledRejection&#39;, (reason, p) =&gt; {\n  console.log(&#39;Unhandled Rejection at:&#39;, p, &#39;reason:&#39;, reason);\n  // application specific logging, throwing an error, or other logic here\n});\n\nsomePromise.then((res) =&gt; {\n  return reportToUser(JSON.pasre(res)); // note the typo (`pasre`)\n}); // no `.catch()` or `.then()`\n</code></pre>\n<p>The following will also trigger the <code>&#39;unhandledRejection&#39;</code> event to be\nemitted:</p>\n<pre><code class=\"lang-js\">function SomeResource() {\n  // Initially set the loaded status to a rejected promise\n  this.loaded = Promise.reject(new Error(&#39;Resource not yet loaded!&#39;));\n}\n\nconst resource = new SomeResource();\n// no .catch or .then on resource.loaded for at least a turn\n</code></pre>\n<p>In this example case, it is possible to track the rejection as a developer error\nas would typically be the case for other <code>&#39;unhandledRejection&#39;</code> events. To\naddress such failures, a non-operational\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>.catch(() =&gt; { })</code></a> handler may be attached to\n<code>resource.loaded</code>, which would prevent the <code>&#39;unhandledRejection&#39;</code> event from\nbeing emitted. Alternatively, the <a href=\"#process_event_rejectionhandled\"><code>&#39;rejectionHandled&#39;</code></a> event may be used.</p>\n",
              "params": []
            },
            {
              "textRaw": "Event: 'warning'",
              "type": "event",
              "name": "warning",
              "meta": {
                "added": [
                  "v6.0.0"
                ],
                "changes": []
              },
              "params": [],
              "desc": "<p>The <code>&#39;warning&#39;</code> event is emitted whenever Node.js emits a process warning.</p>\n<p>A process warning is similar to an error in that it describes exceptional\nconditions that are being brought to the user&#39;s attention. However, warnings\nare not part of the normal Node.js and JavaScript error handling flow.\nNode.js can emit warnings whenever it detects bad coding practices that could\nlead to sub-optimal application performance, bugs, or security vulnerabilities.</p>\n<pre><code class=\"lang-js\">process.on(&#39;warning&#39;, (warning) =&gt; {\n  console.warn(warning.name);    // Print the warning name\n  console.warn(warning.message); // Print the warning message\n  console.warn(warning.stack);   // Print the stack trace\n});\n</code></pre>\n<p>By default, Node.js will print process warnings to <code>stderr</code>. The <code>--no-warnings</code>\ncommand-line option can be used to suppress the default console output but the\n<code>&#39;warning&#39;</code> event will still be emitted by the <code>process</code> object.</p>\n<p>The following example illustrates the warning that is printed to <code>stderr</code> when\ntoo many listeners have been added to an event:</p>\n<pre><code class=\"lang-txt\">$ node\n&gt; events.defaultMaxListeners = 1;\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\n&gt; (node:38638) MaxListenersExceededWarning: Possible EventEmitter memory leak\ndetected. 2 foo listeners added. Use emitter.setMaxListeners() to increase limit\n</code></pre>\n<p>In contrast, the following example turns off the default warning output and\nadds a custom handler to the <code>&#39;warning&#39;</code> event:</p>\n<pre><code class=\"lang-txt\">$ node --no-warnings\n&gt; const p = process.on(&#39;warning&#39;, (warning) =&gt; console.warn(&#39;Do not do that!&#39;));\n&gt; events.defaultMaxListeners = 1;\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\n&gt; process.on(&#39;foo&#39;, () =&gt; {});\n&gt; Do not do that!\n</code></pre>\n<p>The <code>--trace-warnings</code> command-line option can be used to have the default\nconsole output for warnings include the full stack trace of the warning.</p>\n<p>Launching Node.js using the <code>--throw-deprecation</code> command line flag will\ncause custom deprecation warnings to be thrown as exceptions.</p>\n<p>Using the <code>--trace-deprecation</code> command line flag will cause the custom\ndeprecation to be printed to <code>stderr</code> along with the stack trace.</p>\n<p>Using the <code>--no-deprecation</code> command line flag will suppress all reporting\nof the custom deprecation.</p>\n<p>The <code>*-deprecation</code> command line flags only affect warnings that use the name\n<code>&#39;DeprecationWarning&#39;</code>.</p>\n",
              "modules": [
                {
                  "textRaw": "Emitting custom warnings",
                  "name": "emitting_custom_warnings",
                  "desc": "<p>See the <a href=\"#process_process_emitwarning_warning_type_code_ctor\"><code>process.emitWarning()</code></a> method for issuing\ncustom or application-specific warnings.</p>\n",
                  "type": "module",
                  "displayName": "Emitting custom warnings"
                }
              ]
            },
            {
              "textRaw": "Signal Events",
              "name": "SIGINT, SIGHUP, etc.",
              "type": "event",
              "desc": "<p>Signal events will be emitted when the Node.js process receives a signal. Please\nrefer to signal(7) for a listing of standard POSIX signal names such as\n<code>&#39;SIGINT&#39;</code>, <code>&#39;SIGHUP&#39;</code>, etc.</p>\n<p>The signal handler will receive the signal&#39;s name (<code>&#39;SIGINT&#39;</code>,\n <code>&#39;SIGTERM&#39;</code>, etc.) as the first argument.</p>\n<p>The name of each event will be the uppercase common name for the signal (e.g.\n<code>&#39;SIGINT&#39;</code> for <code>SIGINT</code> signals).</p>\n<pre><code class=\"lang-js\">// Begin reading from stdin so the process does not exit.\nprocess.stdin.resume();\n\nprocess.on(&#39;SIGINT&#39;, () =&gt; {\n  console.log(&#39;Received SIGINT. Press Control-D to exit.&#39;);\n});\n\n// Using a single function to handle multiple signals\nfunction handle(signal) {\n  console.log(`Received ${signal}`);\n}\n\nprocess.on(&#39;SIGINT&#39;, handle);\nprocess.on(&#39;SIGTERM&#39;, handle);\n</code></pre>\n<ul>\n<li><code>&#39;SIGUSR1&#39;</code> is reserved by Node.js to start the <a href=\"debugger.html\">debugger</a>. It&#39;s possible to\ninstall a listener but doing so might interfere with the debugger.</li>\n<li><code>&#39;SIGTERM&#39;</code> and <code>&#39;SIGINT&#39;</code> have default handlers on non-Windows platforms that\nreset the terminal mode before exiting with code <code>128 + signal number</code>. If one\nof these signals has a listener installed, its default behavior will be\nremoved (Node.js will no longer exit).</li>\n<li><code>&#39;SIGPIPE&#39;</code> is ignored by default. It can have a listener installed.</li>\n<li><code>&#39;SIGHUP&#39;</code> is generated on Windows when the console window is closed, and on\nother platforms under various similar conditions, see signal(7). It can have a\nlistener installed, however Node.js will be unconditionally terminated by\nWindows about 10 seconds later. On non-Windows platforms, the default\nbehavior of <code>SIGHUP</code> is to terminate Node.js, but once a listener has been\ninstalled its default behavior will be removed.</li>\n<li><code>&#39;SIGTERM&#39;</code> is not supported on Windows, it can be listened on.</li>\n<li><code>&#39;SIGINT&#39;</code> from the terminal is supported on all platforms, and can usually be\ngenerated with <code>&lt;Ctrl&gt;+C</code> (though this may be configurable). It is not\ngenerated when terminal raw mode is enabled.</li>\n<li><code>&#39;SIGBREAK&#39;</code> is delivered on Windows when <code>&lt;Ctrl&gt;+&lt;Break&gt;</code> is pressed, on\nnon-Windows platforms it can be listened on, but there is no way to send or\ngenerate it.</li>\n<li><code>&#39;SIGWINCH&#39;</code> is delivered when the console has been resized. On Windows, this\nwill only happen on write to the console when the cursor is being moved, or\nwhen a readable tty is used in raw mode.</li>\n<li><code>&#39;SIGKILL&#39;</code> cannot have a listener installed, it will unconditionally\nterminate Node.js on all platforms.</li>\n<li><code>&#39;SIGSTOP&#39;</code> cannot have a listener installed.</li>\n<li><code>&#39;SIGBUS&#39;</code>, <code>&#39;SIGFPE&#39;</code>, <code>&#39;SIGSEGV&#39;</code> and <code>&#39;SIGILL&#39;</code>, when not raised\n artificially using kill(2), inherently leave the process in a state from\n which it is not safe to attempt to call JS listeners. Doing so might lead to\n the process hanging in an endless loop, since listeners attached using\n <code>process.on()</code> are called asynchronously and therefore unable to correct the\n underlying problem.</li>\n</ul>\n<p>Windows does not support sending signals, but Node.js offers some emulation\nwith <a href=\"#process_process_kill_pid_signal\"><code>process.kill()</code></a>, and <a href=\"child_process.html#child_process_subprocess_kill_signal\"><code>subprocess.kill()</code></a>. Sending signal <code>0</code> can\nbe used to test for the existence of a process. Sending <code>SIGINT</code>, <code>SIGTERM</code>,\nand <code>SIGKILL</code> cause the unconditional termination of the target process.</p>\n",
              "params": []
            }
          ],
          "type": "module",
          "displayName": "Process Events"
        },
        {
          "textRaw": "Exit Codes",
          "name": "exit_codes",
          "desc": "<p>Node.js will normally exit with a <code>0</code> status code when no more async\noperations are pending. The following status codes are used in other\ncases:</p>\n<ul>\n<li><code>1</code> <strong>Uncaught Fatal Exception</strong> - There was an uncaught exception,\nand it was not handled by a domain or an <a href=\"process.html#process_event_uncaughtexception\"><code>&#39;uncaughtException&#39;</code></a> event\nhandler.</li>\n<li><code>2</code> - Unused (reserved by Bash for builtin misuse)</li>\n<li><code>3</code> <strong>Internal JavaScript Parse Error</strong> - The JavaScript source code\ninternal in Node.js&#39;s bootstrapping process caused a parse error. This\nis extremely rare, and generally can only happen during development\nof Node.js itself.</li>\n<li><code>4</code> <strong>Internal JavaScript Evaluation Failure</strong> - The JavaScript\nsource code internal in Node.js&#39;s bootstrapping process failed to\nreturn a function value when evaluated. This is extremely rare, and\ngenerally can only happen during development of Node.js itself.</li>\n<li><code>5</code> <strong>Fatal Error</strong> - There was a fatal unrecoverable error in V8.\nTypically a message will be printed to stderr with the prefix <code>FATAL\nERROR</code>.</li>\n<li><code>6</code> <strong>Non-function Internal Exception Handler</strong> - There was an\nuncaught exception, but the internal fatal exception handler\nfunction was somehow set to a non-function, and could not be called.</li>\n<li><code>7</code> <strong>Internal Exception Handler Run-Time Failure</strong> - There was an\nuncaught exception, and the internal fatal exception handler\nfunction itself threw an error while attempting to handle it. This\ncan happen, for example, if an <a href=\"process.html#process_event_uncaughtexception\"><code>&#39;uncaughtException&#39;</code></a> or\n<code>domain.on(&#39;error&#39;)</code> handler throws an error.</li>\n<li><code>8</code> - Unused. In previous versions of Node.js, exit code 8 sometimes\nindicated an uncaught exception.</li>\n<li><code>9</code> - <strong>Invalid Argument</strong> - Either an unknown option was specified,\nor an option requiring a value was provided without a value.</li>\n<li><code>10</code> <strong>Internal JavaScript Run-Time Failure</strong> - The JavaScript\nsource code internal in Node.js&#39;s bootstrapping process threw an error\nwhen the bootstrapping function was called. This is extremely rare,\nand generally can only happen during development of Node.js itself.</li>\n<li><code>12</code> <strong>Invalid Debug Argument</strong> - The <code>--inspect</code> and/or <code>--inspect-brk</code>\noptions were set, but the port number chosen was invalid or unavailable.</li>\n<li><code>&gt;128</code> <strong>Signal Exits</strong> - If Node.js receives a fatal signal such as\n<code>SIGKILL</code> or <code>SIGHUP</code>, then its exit code will be <code>128</code> plus the\nvalue of the signal code. This is a standard POSIX practice, since\nexit codes are defined to be 7-bit integers, and signal exits set\nthe high-order bit, and then contain the value of the signal code.\nFor example, signal <code>SIGABRT</code> has value <code>6</code>, so the expected exit\ncode will be <code>128</code> + <code>6</code>, or <code>134</code>.</li>\n</ul>\n<!-- [end-include:process.md] -->\n<!-- [start-include:punycode.md] -->\n",
          "type": "module",
          "displayName": "Exit Codes"
        }
      ],
      "methods": [
        {
          "textRaw": "process.abort()",
          "type": "method",
          "name": "abort",
          "meta": {
            "added": [
              "v0.7.0"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.abort()</code> method causes the Node.js process to exit immediately and\ngenerate a core file.</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.chdir(directory)",
          "type": "method",
          "name": "chdir",
          "meta": {
            "added": [
              "v0.1.17"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`directory` {string} ",
                  "name": "directory",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "directory"
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.chdir()</code> method changes the current working directory of the\nNode.js process or throws an exception if doing so fails (for instance, if\nthe specified <code>directory</code> does not exist).</p>\n<pre><code class=\"lang-js\">console.log(`Starting directory: ${process.cwd()}`);\ntry {\n  process.chdir(&#39;/tmp&#39;);\n  console.log(`New directory: ${process.cwd()}`);\n} catch (err) {\n  console.error(`chdir: ${err}`);\n}\n</code></pre>\n"
        },
        {
          "textRaw": "process.cpuUsage([previousValue])",
          "type": "method",
          "name": "cpuUsage",
          "meta": {
            "added": [
              "v6.1.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Object} ",
                "options": [
                  {
                    "textRaw": "`user` {integer} ",
                    "name": "user",
                    "type": "integer"
                  },
                  {
                    "textRaw": "`system` {integer} ",
                    "name": "system",
                    "type": "integer"
                  }
                ],
                "name": "return",
                "type": "Object"
              },
              "params": [
                {
                  "textRaw": "`previousValue` {Object} A previous return value from calling `process.cpuUsage()` ",
                  "name": "previousValue",
                  "type": "Object",
                  "desc": "A previous return value from calling `process.cpuUsage()`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "previousValue",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.cpuUsage()</code> method returns the user and system CPU time usage of\nthe current process, in an object with properties <code>user</code> and <code>system</code>, whose\nvalues are microsecond values (millionth of a second). These values measure time\nspent in user and system code respectively, and may end up being greater than\nactual elapsed time if multiple CPU cores are performing work for this process.</p>\n<p>The result of a previous call to <code>process.cpuUsage()</code> can be passed as the\nargument to the function, to get a diff reading.</p>\n<pre><code class=\"lang-js\">const startUsage = process.cpuUsage();\n// { user: 38579, system: 6986 }\n\n// spin the CPU for 500 milliseconds\nconst now = Date.now();\nwhile (Date.now() - now &lt; 500);\n\nconsole.log(process.cpuUsage(startUsage));\n// { user: 514883, system: 11226 }\n</code></pre>\n"
        },
        {
          "textRaw": "process.cwd()",
          "type": "method",
          "name": "cwd",
          "meta": {
            "added": [
              "v0.1.8"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {string} ",
                "name": "return",
                "type": "string"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>process.cwd()</code> method returns the current working directory of the Node.js\nprocess.</p>\n<pre><code class=\"lang-js\">console.log(`Current directory: ${process.cwd()}`);\n</code></pre>\n"
        },
        {
          "textRaw": "process.disconnect()",
          "type": "method",
          "name": "disconnect",
          "meta": {
            "added": [
              "v0.7.2"
            ],
            "changes": []
          },
          "desc": "<p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process.html\">Child Process</a>\nand <a href=\"cluster.html\">Cluster</a> documentation), the <code>process.disconnect()</code> method will close the\nIPC channel to the parent process, allowing the child process to exit gracefully\nonce there are no other connections keeping it alive.</p>\n<p>The effect of calling <code>process.disconnect()</code> is that same as calling the parent\nprocess&#39;s <a href=\"child_process.html#child_process_subprocess_disconnect\"><code>ChildProcess.disconnect()</code></a>.</p>\n<p>If the Node.js process was not spawned with an IPC channel,\n<code>process.disconnect()</code> will be <code>undefined</code>.</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.dlopen(module, filename[, flags])",
          "type": "method",
          "name": "dlopen",
          "meta": {
            "added": [
              "v0.1.16"
            ],
            "changes": [
              {
                "version": "v9.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/12794",
                "description": "Added support for the `flags` argument."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`module` {Object} ",
                  "name": "module",
                  "type": "Object"
                },
                {
                  "textRaw": "`filename` {string} ",
                  "name": "filename",
                  "type": "string"
                },
                {
                  "textRaw": "`flags` {os.constants.dlopen} **Default:** `os.constants.dlopen.RTLD_LAZY` ",
                  "name": "flags",
                  "type": "os.constants.dlopen",
                  "default": "`os.constants.dlopen.RTLD_LAZY`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "module"
                },
                {
                  "name": "filename"
                },
                {
                  "name": "flags",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.dlopen()</code> method allows to dynamically load shared\nobjects. It is primarily used by <code>require()</code> to load\nC++ Addons, and should not be used directly, except in special\ncases. In other words, <a href=\"globals.html#globals_require\"><code>require()</code></a> should be preferred over\n<code>process.dlopen()</code>, unless there are specific reasons.</p>\n<p>The <code>flags</code> argument is an integer that allows to specify dlopen\nbehavior. See the <a href=\"os.html#os_dlopen_constants\"><code>os.constants.dlopen</code></a> documentation for details.</p>\n<p>If there are specific reasons to use <code>process.dlopen()</code> (for instance,\nto specify dlopen flags), it&#39;s often useful to use <a href=\"modules.html#modules_require_resolve_request_options\"><code>require.resolve()</code></a>\nto look up the module&#39;s path.</p>\n<p>An important drawback when calling <code>process.dlopen()</code> is that the <code>module</code>\ninstance must be passed. Functions exported by the C++ Addon will be accessible\nvia <code>module.exports</code>.</p>\n<p>The example below shows how to load a C++ Addon, named as <code>binding</code>,\nthat exports a <code>foo</code> function. All the symbols will be loaded before\nthe call returns, by passing the <code>RTLD_NOW</code> constant. In this example\nthe constant is assumed to be available.</p>\n<pre><code class=\"lang-js\">const os = require(&#39;os&#39;);\nprocess.dlopen(module, require.resolve(&#39;binding&#39;),\n               os.constants.dlopen.RTLD_NOW);\nmodule.exports.foo();\n</code></pre>\n"
        },
        {
          "textRaw": "process.emitWarning(warning[, options])",
          "type": "method",
          "name": "emitWarning",
          "meta": {
            "added": [
              "v8.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`warning` {string|Error} The warning to emit. ",
                  "name": "warning",
                  "type": "string|Error",
                  "desc": "The warning to emit."
                },
                {
                  "textRaw": "`options` {Object} ",
                  "options": [
                    {
                      "textRaw": "`type` {string} When `warning` is a `String`, `type` is the name to use for the *type* of warning being emitted. **Default:** `'Warning'`. ",
                      "name": "type",
                      "type": "string",
                      "default": "`'Warning'`",
                      "desc": "When `warning` is a `String`, `type` is the name to use for the *type* of warning being emitted."
                    },
                    {
                      "textRaw": "`code` {string} A unique identifier for the warning instance being emitted. ",
                      "name": "code",
                      "type": "string",
                      "desc": "A unique identifier for the warning instance being emitted."
                    },
                    {
                      "textRaw": "`ctor` {Function} When `warning` is a `String`, `ctor` is an optional function used to limit the generated stack trace. **Default:** `process.emitWarning`. ",
                      "name": "ctor",
                      "type": "Function",
                      "default": "`process.emitWarning`",
                      "desc": "When `warning` is a `String`, `ctor` is an optional function used to limit the generated stack trace."
                    },
                    {
                      "textRaw": "`detail` {string} Additional text to include with the error. ",
                      "name": "detail",
                      "type": "string",
                      "desc": "Additional text to include with the error."
                    }
                  ],
                  "name": "options",
                  "type": "Object",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "warning"
                },
                {
                  "name": "options",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.emitWarning()</code> method can be used to emit custom or application\nspecific process warnings. These can be listened for by adding a handler to the\n<a href=\"#process_event_warning\"><code>&#39;warning&#39;</code></a> event.</p>\n<pre><code class=\"lang-js\">// Emit a warning with a code and additional detail.\nprocess.emitWarning(&#39;Something happened!&#39;, {\n  code: &#39;MY_WARNING&#39;,\n  detail: &#39;This is some additional information&#39;\n});\n// Emits:\n// (node:56338) [MY_WARNING] Warning: Something happened!\n// This is some additional information\n</code></pre>\n<p>In this example, an <code>Error</code> object is generated internally by\n<code>process.emitWarning()</code> and passed through to the\n<a href=\"#process_event_warning\"><code>&#39;warning&#39;</code></a> handler.</p>\n<pre><code class=\"lang-js\">process.on(&#39;warning&#39;, (warning) =&gt; {\n  console.warn(warning.name);    // &#39;Warning&#39;\n  console.warn(warning.message); // &#39;Something happened!&#39;\n  console.warn(warning.code);    // &#39;MY_WARNING&#39;\n  console.warn(warning.stack);   // Stack trace\n  console.warn(warning.detail);  // &#39;This is some additional information&#39;\n});\n</code></pre>\n<p>If <code>warning</code> is passed as an <code>Error</code> object, the <code>options</code> argument is ignored.</p>\n"
        },
        {
          "textRaw": "process.emitWarning(warning[, type[, code]][, ctor])",
          "type": "method",
          "name": "emitWarning",
          "meta": {
            "added": [
              "v6.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`warning` {string|Error} The warning to emit. ",
                  "name": "warning",
                  "type": "string|Error",
                  "desc": "The warning to emit."
                },
                {
                  "textRaw": "`type` {string} When `warning` is a `String`, `type` is the name to use for the *type* of warning being emitted. **Default:** `'Warning'`. ",
                  "name": "type",
                  "type": "string",
                  "default": "`'Warning'`",
                  "desc": "When `warning` is a `String`, `type` is the name to use for the *type* of warning being emitted.",
                  "optional": true
                },
                {
                  "textRaw": "`code` {string} A unique identifier for the warning instance being emitted. ",
                  "name": "code",
                  "type": "string",
                  "desc": "A unique identifier for the warning instance being emitted.",
                  "optional": true
                },
                {
                  "textRaw": "`ctor` {Function} When `warning` is a `String`, `ctor` is an optional function used to limit the generated stack trace. **Default:** `process.emitWarning`. ",
                  "name": "ctor",
                  "type": "Function",
                  "default": "`process.emitWarning`",
                  "desc": "When `warning` is a `String`, `ctor` is an optional function used to limit the generated stack trace.",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "warning"
                },
                {
                  "name": "type",
                  "optional": true
                },
                {
                  "name": "code",
                  "optional": true
                },
                {
                  "name": "ctor",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.emitWarning()</code> method can be used to emit custom or application\nspecific process warnings. These can be listened for by adding a handler to the\n<a href=\"#process_event_warning\"><code>&#39;warning&#39;</code></a> event.</p>\n<pre><code class=\"lang-js\">// Emit a warning using a string.\nprocess.emitWarning(&#39;Something happened!&#39;);\n// Emits: (node: 56338) Warning: Something happened!\n</code></pre>\n<pre><code class=\"lang-js\">// Emit a warning using a string and a type.\nprocess.emitWarning(&#39;Something Happened!&#39;, &#39;CustomWarning&#39;);\n// Emits: (node:56338) CustomWarning: Something Happened!\n</code></pre>\n<pre><code class=\"lang-js\">process.emitWarning(&#39;Something happened!&#39;, &#39;CustomWarning&#39;, &#39;WARN001&#39;);\n// Emits: (node:56338) [WARN001] CustomWarning: Something happened!\n</code></pre>\n<p>In each of the previous examples, an <code>Error</code> object is generated internally by\n<code>process.emitWarning()</code> and passed through to the <a href=\"#process_event_warning\"><code>&#39;warning&#39;</code></a>\nhandler.</p>\n<pre><code class=\"lang-js\">process.on(&#39;warning&#39;, (warning) =&gt; {\n  console.warn(warning.name);\n  console.warn(warning.message);\n  console.warn(warning.code);\n  console.warn(warning.stack);\n});\n</code></pre>\n<p>If <code>warning</code> is passed as an <code>Error</code> object, it will be passed through to the\n<code>&#39;warning&#39;</code> event handler unmodified (and the optional <code>type</code>,\n<code>code</code> and <code>ctor</code> arguments will be ignored):</p>\n<pre><code class=\"lang-js\">// Emit a warning using an Error object.\nconst myWarning = new Error(&#39;Something happened!&#39;);\n// Use the Error name property to specify the type name\nmyWarning.name = &#39;CustomWarning&#39;;\nmyWarning.code = &#39;WARN001&#39;;\n\nprocess.emitWarning(myWarning);\n// Emits: (node:56338) [WARN001] CustomWarning: Something happened!\n</code></pre>\n<p>A <code>TypeError</code> is thrown if <code>warning</code> is anything other than a string or <code>Error</code>\nobject.</p>\n<p>Note that while process warnings use <code>Error</code> objects, the process warning\nmechanism is <strong>not</strong> a replacement for normal error handling mechanisms.</p>\n<p>The following additional handling is implemented if the warning <code>type</code> is\n<code>&#39;DeprecationWarning&#39;</code>:</p>\n<ul>\n<li>If the <code>--throw-deprecation</code> command-line flag is used, the deprecation\nwarning is thrown as an exception rather than being emitted as an event.</li>\n<li>If the <code>--no-deprecation</code> command-line flag is used, the deprecation\nwarning is suppressed.</li>\n<li>If the <code>--trace-deprecation</code> command-line flag is used, the deprecation\nwarning is printed to <code>stderr</code> along with the full stack trace.</li>\n</ul>\n",
          "modules": [
            {
              "textRaw": "Avoiding duplicate warnings",
              "name": "avoiding_duplicate_warnings",
              "desc": "<p>As a best practice, warnings should be emitted only once per process. To do\nso, it is recommended to place the <code>emitWarning()</code> behind a simple boolean\nflag as illustrated in the example below:</p>\n<pre><code class=\"lang-js\">function emitMyWarning() {\n  if (!emitMyWarning.warned) {\n    emitMyWarning.warned = true;\n    process.emitWarning(&#39;Only warn once!&#39;);\n  }\n}\nemitMyWarning();\n// Emits: (node: 56339) Warning: Only warn once!\nemitMyWarning();\n// Emits nothing\n</code></pre>\n",
              "type": "module",
              "displayName": "Avoiding duplicate warnings"
            }
          ]
        },
        {
          "textRaw": "process.exit([code])",
          "type": "method",
          "name": "exit",
          "meta": {
            "added": [
              "v0.1.13"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`code` {integer} The exit code. **Default:** `0`. ",
                  "name": "code",
                  "type": "integer",
                  "default": "`0`",
                  "desc": "The exit code.",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "code",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.exit()</code> method instructs Node.js to terminate the process\nsynchronously with an exit status of <code>code</code>. If <code>code</code> is omitted, exit uses\neither the &#39;success&#39; code <code>0</code> or the value of <code>process.exitCode</code> if it has been\nset. Node.js will not terminate until all the <a href=\"#process_event_exit\"><code>&#39;exit&#39;</code></a> event listeners are\ncalled.</p>\n<p>To exit with a &#39;failure&#39; code:</p>\n<pre><code class=\"lang-js\">process.exit(1);\n</code></pre>\n<p>The shell that executed Node.js should see the exit code as <code>1</code>.</p>\n<p>Calling <code>process.exit()</code> will force the process to exit as quickly as possible\neven if there are still asynchronous operations pending that have not yet\ncompleted fully, including I/O operations to <code>process.stdout</code> and\n<code>process.stderr</code>.</p>\n<p>In most situations, it is not actually necessary to call <code>process.exit()</code>\nexplicitly. The Node.js process will exit on its own <em>if there is no additional\nwork pending</em> in the event loop. The <code>process.exitCode</code> property can be set to\ntell the process which exit code to use when the process exits gracefully.</p>\n<p>For instance, the following example illustrates a <em>misuse</em> of the\n<code>process.exit()</code> method that could lead to data printed to stdout being\ntruncated and lost:</p>\n<pre><code class=\"lang-js\">// This is an example of what *not* to do:\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exit(1);\n}\n</code></pre>\n<p>The reason this is problematic is because writes to <code>process.stdout</code> in Node.js\nare sometimes <em>asynchronous</em> and may occur over multiple ticks of the Node.js\nevent loop. Calling <code>process.exit()</code>, however, forces the process to exit\n<em>before</em> those additional writes to <code>stdout</code> can be performed.</p>\n<p>Rather than calling <code>process.exit()</code> directly, the code <em>should</em> set the\n<code>process.exitCode</code> and allow the process to exit naturally by avoiding\nscheduling any additional work for the event loop:</p>\n<pre><code class=\"lang-js\">// How to properly set the exit code while letting\n// the process exit gracefully.\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exitCode = 1;\n}\n</code></pre>\n<p>If it is necessary to terminate the Node.js process due to an error condition,\nthrowing an <em>uncaught</em> error and allowing the process to terminate accordingly\nis safer than calling <code>process.exit()</code>.</p>\n"
        },
        {
          "textRaw": "process.getegid()",
          "type": "method",
          "name": "getegid",
          "meta": {
            "added": [
              "v2.0.0"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.getegid()</code> method returns the numerical effective group identity\nof the Node.js process. (See getegid(2).)</p>\n<pre><code class=\"lang-js\">if (process.getegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.geteuid()",
          "type": "method",
          "name": "geteuid",
          "meta": {
            "added": [
              "v2.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Object} ",
                "name": "return",
                "type": "Object"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>process.geteuid()</code> method returns the numerical effective user identity of\nthe process. (See geteuid(2).)</p>\n<pre><code class=\"lang-js\">if (process.geteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
        },
        {
          "textRaw": "process.getgid()",
          "type": "method",
          "name": "getgid",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Object} ",
                "name": "return",
                "type": "Object"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>process.getgid()</code> method returns the numerical group identity of the\nprocess. (See getgid(2).)</p>\n<pre><code class=\"lang-js\">if (process.getgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
        },
        {
          "textRaw": "process.getgroups()",
          "type": "method",
          "name": "getgroups",
          "meta": {
            "added": [
              "v0.9.4"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {integer[]} ",
                "name": "return",
                "type": "integer[]"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>process.getgroups()</code> method returns an array with the supplementary group\nIDs. POSIX leaves it unspecified if the effective group ID is included but\nNode.js ensures it always is.</p>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
        },
        {
          "textRaw": "process.getuid()",
          "type": "method",
          "name": "getuid",
          "meta": {
            "added": [
              "v0.1.28"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {integer} ",
                "name": "return",
                "type": "integer"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>process.getuid()</code> method returns the numeric user identity of the process.\n(See getuid(2).)</p>\n<pre><code class=\"lang-js\">if (process.getuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
        },
        {
          "textRaw": "process.hasUncaughtExceptionCaptureCallback()",
          "type": "method",
          "name": "hasUncaughtExceptionCaptureCallback",
          "meta": {
            "added": [
              "v9.3.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {boolean} ",
                "name": "return",
                "type": "boolean"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>Indicates whether a callback has been set using\n<a href=\"process.html#process_process_setuncaughtexceptioncapturecallback_fn\"><code>process.setUncaughtExceptionCaptureCallback()</code></a>.</p>\n"
        },
        {
          "textRaw": "process.hrtime([time])",
          "type": "method",
          "name": "hrtime",
          "meta": {
            "added": [
              "v0.7.6"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {integer[]} ",
                "name": "return",
                "type": "integer[]"
              },
              "params": [
                {
                  "textRaw": "`time` {integer[]} The result of a previous call to `process.hrtime()` ",
                  "name": "time",
                  "type": "integer[]",
                  "desc": "The result of a previous call to `process.hrtime()`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "time",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.hrtime()</code> method returns the current high-resolution real time\nin a <code>[seconds, nanoseconds]</code> tuple <code>Array</code>, where <code>nanoseconds</code> is the\nremaining part of the real time that can&#39;t be represented in second precision.</p>\n<p><code>time</code> is an optional parameter that must be the result of a previous\n<code>process.hrtime()</code> call to diff with the current time. If the parameter\npassed in is not a tuple <code>Array</code>, a <code>TypeError</code> will be thrown. Passing in a\nuser-defined array instead of the result of a previous call to\n<code>process.hrtime()</code> will lead to undefined behavior.</p>\n<p>These times are relative to an arbitrary time in the\npast, and not related to the time of day and therefore not subject to clock\ndrift. The primary use is for measuring performance between intervals:</p>\n<pre><code class=\"lang-js\">const NS_PER_SEC = 1e9;\nconst time = process.hrtime();\n// [ 1800216, 25 ]\n\nsetTimeout(() =&gt; {\n  const diff = process.hrtime(time);\n  // [ 1, 552 ]\n\n  console.log(`Benchmark took ${diff[0] * NS_PER_SEC + diff[1]} nanoseconds`);\n  // benchmark took 1000000552 nanoseconds\n}, 1000);\n</code></pre>\n"
        },
        {
          "textRaw": "process.initgroups(user, extraGroup)",
          "type": "method",
          "name": "initgroups",
          "meta": {
            "added": [
              "v0.9.4"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`user` {string|number} The user name or numeric identifier. ",
                  "name": "user",
                  "type": "string|number",
                  "desc": "The user name or numeric identifier."
                },
                {
                  "textRaw": "`extraGroup` {string|number} A group name or numeric identifier. ",
                  "name": "extraGroup",
                  "type": "string|number",
                  "desc": "A group name or numeric identifier."
                }
              ]
            },
            {
              "params": [
                {
                  "name": "user"
                },
                {
                  "name": "extraGroup"
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.initgroups()</code> method reads the <code>/etc/group</code> file and initializes\nthe group access list, using all groups of which the user is a member. This is\na privileged operation that requires that the Node.js process either have <code>root</code>\naccess or the <code>CAP_SETGID</code> capability.</p>\n<p>Note that care must be taken when dropping privileges. Example:</p>\n<pre><code class=\"lang-js\">console.log(process.getgroups());         // [ 0 ]\nprocess.initgroups(&#39;bnoordhuis&#39;, 1000);   // switch user\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000, 0 ]\nprocess.setgid(1000);                     // drop root gid\nconsole.log(process.getgroups());         // [ 27, 30, 46, 1000 ]\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
        },
        {
          "textRaw": "process.kill(pid[, signal])",
          "type": "method",
          "name": "kill",
          "meta": {
            "added": [
              "v0.0.6"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`pid` {number} A process ID ",
                  "name": "pid",
                  "type": "number",
                  "desc": "A process ID"
                },
                {
                  "textRaw": "`signal` {string|number} The signal to send, either as a string or number. **Default:** `'SIGTERM'`. ",
                  "name": "signal",
                  "type": "string|number",
                  "default": "`'SIGTERM'`",
                  "desc": "The signal to send, either as a string or number.",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "pid"
                },
                {
                  "name": "signal",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.kill()</code> method sends the <code>signal</code> to the process identified by\n<code>pid</code>.</p>\n<p>Signal names are strings such as <code>&#39;SIGINT&#39;</code> or <code>&#39;SIGHUP&#39;</code>. See <a href=\"#process_signal_events\">Signal Events</a>\nand kill(2) for more information.</p>\n<p>This method will throw an error if the target <code>pid</code> does not exist. As a special\ncase, a signal of <code>0</code> can be used to test for the existence of a process.\nWindows platforms will throw an error if the <code>pid</code> is used to kill a process\ngroup.</p>\n<p>Even though the name of this function is <code>process.kill()</code>, it is really just a\nsignal sender, like the <code>kill</code> system call. The signal sent may do something\nother than kill the target process.</p>\n<pre><code class=\"lang-js\">process.on(&#39;SIGHUP&#39;, () =&gt; {\n  console.log(&#39;Got SIGHUP signal.&#39;);\n});\n\nsetTimeout(() =&gt; {\n  console.log(&#39;Exiting.&#39;);\n  process.exit(0);\n}, 100);\n\nprocess.kill(process.pid, &#39;SIGHUP&#39;);\n</code></pre>\n<p>When <code>SIGUSR1</code> is received by a Node.js process, Node.js will start the\ndebugger, see <a href=\"#process_signal_events\">Signal Events</a>.</p>\n"
        },
        {
          "textRaw": "process.memoryUsage()",
          "type": "method",
          "name": "memoryUsage",
          "meta": {
            "added": [
              "v0.1.16"
            ],
            "changes": [
              {
                "version": "v7.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/9587",
                "description": "Added `external` to the returned object."
              }
            ]
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {Object} ",
                "options": [
                  {
                    "textRaw": "`rss` {integer} ",
                    "name": "rss",
                    "type": "integer"
                  },
                  {
                    "textRaw": "`heapTotal` {integer} ",
                    "name": "heapTotal",
                    "type": "integer"
                  },
                  {
                    "textRaw": "`heapUsed` {integer} ",
                    "name": "heapUsed",
                    "type": "integer"
                  },
                  {
                    "textRaw": "`external` {integer} ",
                    "name": "external",
                    "type": "integer"
                  }
                ],
                "name": "return",
                "type": "Object"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>process.memoryUsage()</code> method returns an object describing the memory usage\nof the Node.js process measured in bytes.</p>\n<p>For example, the code:</p>\n<pre><code class=\"lang-js\">console.log(process.memoryUsage());\n</code></pre>\n<p>Will generate:</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472,\n  external: 49879\n}\n</code></pre>\n<p><code>heapTotal</code> and <code>heapUsed</code> refer to V8&#39;s memory usage.\n<code>external</code> refers to the memory usage of C++ objects bound to JavaScript\nobjects managed by V8. <code>rss</code>, Resident Set Size, is the amount of space\noccupied in the main memory device (that is a subset of the total allocated\nmemory) for the process, which includes the <em>heap</em>, <em>code segment</em> and <em>stack</em>.</p>\n<p>The <em>heap</em> is where objects, strings, and closures are stored. Variables are\nstored in the <em>stack</em> and the actual JavaScript code resides in the\n<em>code segment</em>.</p>\n"
        },
        {
          "textRaw": "process.nextTick(callback[, ...args])",
          "type": "method",
          "name": "nextTick",
          "meta": {
            "added": [
              "v0.1.26"
            ],
            "changes": [
              {
                "version": "v1.8.1",
                "pr-url": "https://github.com/nodejs/node/pull/1077",
                "description": "Additional arguments after `callback` are now supported."
              }
            ]
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`callback` {Function} ",
                  "name": "callback",
                  "type": "Function"
                },
                {
                  "textRaw": "`...args` {any} Additional arguments to pass when invoking the `callback` ",
                  "name": "...args",
                  "type": "any",
                  "desc": "Additional arguments to pass when invoking the `callback`",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "callback"
                },
                {
                  "name": "...args",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.nextTick()</code> method adds the <code>callback</code> to the &quot;next tick queue&quot;.\nOnce the current turn of the event loop turn runs to completion, all callbacks\ncurrently in the next tick queue will be called.</p>\n<p>This is <em>not</em> a simple alias to <a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout(fn, 0)</code></a>. It is much more\nefficient. It runs before any additional I/O events (including\ntimers) fire in subsequent ticks of the event loop.</p>\n<pre><code class=\"lang-js\">console.log(&#39;start&#39;);\nprocess.nextTick(() =&gt; {\n  console.log(&#39;nextTick callback&#39;);\n});\nconsole.log(&#39;scheduled&#39;);\n// Output:\n// start\n// scheduled\n// nextTick callback\n</code></pre>\n<p>This is important when developing APIs in order to give users the opportunity\nto assign event handlers <em>after</em> an object has been constructed but before any\nI/O has occurred:</p>\n<pre><code class=\"lang-js\">function MyThing(options) {\n  this.setupOptions(options);\n\n  process.nextTick(() =&gt; {\n    this.startDoingStuff();\n  });\n}\n\nconst thing = new MyThing();\nthing.getReadyForStuff();\n\n// thing.startDoingStuff() gets called now, not before.\n</code></pre>\n<p>It is very important for APIs to be either 100% synchronous or 100%\nasynchronous. Consider this example:</p>\n<pre><code class=\"lang-js\">// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}\n</code></pre>\n<p>This API is hazardous because in the following case:</p>\n<pre><code class=\"lang-js\">const maybeTrue = Math.random() &gt; 0.5;\n\nmaybeSync(maybeTrue, () =&gt; {\n  foo();\n});\n\nbar();\n</code></pre>\n<p>It is not clear whether <code>foo()</code> or <code>bar()</code> will be called first.</p>\n<p>The following approach is much better:</p>\n<pre><code class=\"lang-js\">function definitelyAsync(arg, cb) {\n  if (arg) {\n    process.nextTick(cb);\n    return;\n  }\n\n  fs.stat(&#39;file&#39;, cb);\n}\n</code></pre>\n<p>The next tick queue is completely drained on each pass of the event loop\n<strong>before</strong> additional I/O is processed. As a result, recursively setting\n<code>nextTick()</code> callbacks will block any I/O from happening, just like a\n<code>while(true);</code> loop.</p>\n"
        },
        {
          "textRaw": "process.send(message[, sendHandle[, options]][, callback])",
          "type": "method",
          "name": "send",
          "meta": {
            "added": [
              "v0.5.9"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {boolean} ",
                "name": "return",
                "type": "boolean"
              },
              "params": [
                {
                  "textRaw": "`message` {Object} ",
                  "name": "message",
                  "type": "Object"
                },
                {
                  "textRaw": "`sendHandle` {net.Server|net.Socket} ",
                  "name": "sendHandle",
                  "type": "net.Server|net.Socket",
                  "optional": true
                },
                {
                  "textRaw": "`options` {Object} ",
                  "name": "options",
                  "type": "Object",
                  "optional": true
                },
                {
                  "textRaw": "`callback` {Function} ",
                  "name": "callback",
                  "type": "Function",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "message"
                },
                {
                  "name": "sendHandle",
                  "optional": true
                },
                {
                  "name": "options",
                  "optional": true
                },
                {
                  "name": "callback",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>If Node.js is spawned with an IPC channel, the <code>process.send()</code> method can be\nused to send messages to the parent process. Messages will be received as a\n<a href=\"child_process.html#child_process_event_message\"><code>&#39;message&#39;</code></a> event on the parent&#39;s <a href=\"child_process.html#child_process_class_childprocess\"><code>ChildProcess</code></a> object.</p>\n<p>If Node.js was not spawned with an IPC channel, <code>process.send()</code> will be\n<code>undefined</code>.</p>\n<p>The message goes through serialization and parsing. The resulting message might\nnot be the same as what is originally sent.</p>\n"
        },
        {
          "textRaw": "process.setegid(id)",
          "type": "method",
          "name": "setegid",
          "meta": {
            "added": [
              "v2.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`id` {string|number} A group name or ID ",
                  "name": "id",
                  "type": "string|number",
                  "desc": "A group name or ID"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "id"
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.setegid()</code> method sets the effective group identity of the process.\n(See setegid(2).) The <code>id</code> can be passed as either a numeric ID or a group\nname string. If a group name is specified, this method blocks while resolving\nthe associated a numeric ID.</p>\n<pre><code class=\"lang-js\">if (process.getegid &amp;&amp; process.setegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n  try {\n    process.setegid(501);\n    console.log(`New gid: ${process.getegid()}`);\n  } catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
        },
        {
          "textRaw": "process.seteuid(id)",
          "type": "method",
          "name": "seteuid",
          "meta": {
            "added": [
              "v2.0.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`id` {string|number} A user name or ID ",
                  "name": "id",
                  "type": "string|number",
                  "desc": "A user name or ID"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "id"
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.seteuid()</code> method sets the effective user identity of the process.\n(See seteuid(2).) The <code>id</code> can be passed as either a numeric ID or a username\nstring. If a username is specified, the method blocks while resolving the\nassociated numeric ID.</p>\n<pre><code class=\"lang-js\">if (process.geteuid &amp;&amp; process.seteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n  try {\n    process.seteuid(501);\n    console.log(`New uid: ${process.geteuid()}`);\n  } catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
        },
        {
          "textRaw": "process.setgid(id)",
          "type": "method",
          "name": "setgid",
          "meta": {
            "added": [
              "v0.1.31"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`id` {string|number} The group name or ID ",
                  "name": "id",
                  "type": "string|number",
                  "desc": "The group name or ID"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "id"
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.setgid()</code> method sets the group identity of the process. (See\nsetgid(2).) The <code>id</code> can be passed as either a numeric ID or a group name\nstring. If a group name is specified, this method blocks while resolving the\nassociated numeric ID.</p>\n<pre><code class=\"lang-js\">if (process.getgid &amp;&amp; process.setgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n  try {\n    process.setgid(501);\n    console.log(`New gid: ${process.getgid()}`);\n  } catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
        },
        {
          "textRaw": "process.setgroups(groups)",
          "type": "method",
          "name": "setgroups",
          "meta": {
            "added": [
              "v0.9.4"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`groups` {integer[]} ",
                  "name": "groups",
                  "type": "integer[]"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "groups"
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.setgroups()</code> method sets the supplementary group IDs for the\nNode.js process. This is a privileged operation that requires the Node.js\nprocess to have <code>root</code> or the <code>CAP_SETGID</code> capability.</p>\n<p>The <code>groups</code> array can contain numeric group IDs, group names or both.</p>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n"
        },
        {
          "textRaw": "process.setuid(id)",
          "type": "method",
          "name": "setuid",
          "meta": {
            "added": [
              "v0.1.28"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.setuid(id)</code> method sets the user identity of the process. (See\nsetuid(2).) The <code>id</code> can be passed as either a numeric ID or a username string.\nIf a username is specified, the method blocks while resolving the associated\nnumeric ID.</p>\n<pre><code class=\"lang-js\">if (process.getuid &amp;&amp; process.setuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n  try {\n    process.setuid(501);\n    console.log(`New uid: ${process.getuid()}`);\n  } catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n</code></pre>\n<p>This function is only available on POSIX platforms (i.e. not Windows or\nAndroid).</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "id"
                }
              ]
            }
          ]
        },
        {
          "textRaw": "process.setUncaughtExceptionCaptureCallback(fn)",
          "type": "method",
          "name": "setUncaughtExceptionCaptureCallback",
          "meta": {
            "added": [
              "v9.3.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fn` {Function|null} ",
                  "name": "fn",
                  "type": "Function|null"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fn"
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.setUncaughtExceptionCapture</code> function sets a function that will\nbe invoked when an uncaught exception occurs, which will receive the exception\nvalue itself as its first argument.</p>\n<p>If such a function is set, the <a href=\"process.html#process_event_uncaughtexception\"><code>&#39;uncaughtException&#39;</code></a> event will\nnot be emitted. If <code>--abort-on-uncaught-exception</code> was passed from the\ncommand line or set through <a href=\"v8.html#v8_v8_setflagsfromstring_flags\"><code>v8.setFlagsFromString()</code></a>, the process will\nnot abort.</p>\n<p>To unset the capture function, <code>process.setUncaughtExceptionCapture(null)</code>\nmay be used. Calling this method with a non-<code>null</code> argument while another\ncapture function is set will throw an error.</p>\n<p>Using this function is mutually exclusive with using the deprecated\n<a href=\"domain.html\"><code>domain</code></a> built-in module.</p>\n"
        },
        {
          "textRaw": "process.umask([mask])",
          "type": "method",
          "name": "umask",
          "meta": {
            "added": [
              "v0.1.19"
            ],
            "changes": []
          },
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`mask` {number} ",
                  "name": "mask",
                  "type": "number",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "mask",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>The <code>process.umask()</code> method sets or returns the Node.js process&#39;s file mode\ncreation mask. Child processes inherit the mask from the parent process. Invoked\nwithout an argument, the current mask is returned, otherwise the umask is set to\nthe argument value and the previous mask is returned.</p>\n<pre><code class=\"lang-js\">const newmask = 0o022;\nconst oldmask = process.umask(newmask);\nconsole.log(\n  `Changed umask from ${oldmask.toString(8)} to ${newmask.toString(8)}`\n);\n</code></pre>\n"
        },
        {
          "textRaw": "process.uptime()",
          "type": "method",
          "name": "uptime",
          "meta": {
            "added": [
              "v0.5.0"
            ],
            "changes": []
          },
          "signatures": [
            {
              "return": {
                "textRaw": "Returns: {number} ",
                "name": "return",
                "type": "number"
              },
              "params": []
            },
            {
              "params": []
            }
          ],
          "desc": "<p>The <code>process.uptime()</code> method returns the number of seconds the current Node.js\nprocess has been running.</p>\n<p>The return value includes fractions of a second. Use <code>Math.floor()</code> to get whole\nseconds.</p>\n"
        }
      ],
      "properties": [
        {
          "textRaw": "`arch` {string} ",
          "type": "string",
          "name": "arch",
          "meta": {
            "added": [
              "v0.5.0"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.arch</code> property returns a string identifying the operating system\nCPU architecture for which the Node.js binary was compiled.</p>\n<p>The current possible values are: <code>&#39;arm&#39;</code>, <code>&#39;arm64&#39;</code>, <code>&#39;ia32&#39;</code>, <code>&#39;mips&#39;</code>,\n<code>&#39;mipsel&#39;</code>, <code>&#39;ppc&#39;</code>, <code>&#39;ppc64&#39;</code>, <code>&#39;s390&#39;</code>, <code>&#39;s390x&#39;</code>, <code>&#39;x32&#39;</code>, and <code>&#39;x64&#39;</code>.</p>\n<pre><code class=\"lang-js\">console.log(`This processor architecture is ${process.arch}`);\n</code></pre>\n"
        },
        {
          "textRaw": "`argv` {string[]} ",
          "type": "string[]",
          "name": "argv",
          "meta": {
            "added": [
              "v0.1.27"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.argv</code> property returns an array containing the command line\narguments passed when the Node.js process was launched. The first element will\nbe <a href=\"#process_process_execpath\"><code>process.execPath</code></a>. See <code>process.argv0</code> if access to the original value of\n<code>argv[0]</code> is needed. The second element will be the path to the JavaScript\nfile being executed. The remaining elements will be any additional command line\narguments.</p>\n<p>For example, assuming the following script for <code>process-args.js</code>:</p>\n<pre><code class=\"lang-js\">// print process.argv\nprocess.argv.forEach((val, index) =&gt; {\n  console.log(`${index}: ${val}`);\n});\n</code></pre>\n<p>Launching the Node.js process as:</p>\n<pre><code class=\"lang-console\">$ node process-args.js one two=three four\n</code></pre>\n<p>Would generate the output:</p>\n<pre><code class=\"lang-text\">0: /usr/local/bin/node\n1: /Users/mjr/work/node/process-args.js\n2: one\n3: two=three\n4: four\n</code></pre>\n"
        },
        {
          "textRaw": "`argv0` {string} ",
          "type": "string",
          "name": "argv0",
          "meta": {
            "added": [
              "v6.4.0"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.argv0</code> property stores a read-only copy of the original value of\n<code>argv[0]</code> passed when Node.js starts.</p>\n<pre><code class=\"lang-console\">$ bash -c &#39;exec -a customArgv0 ./node&#39;\n&gt; process.argv[0]\n&#39;/Volumes/code/external/node/out/Release/node&#39;\n&gt; process.argv0\n&#39;customArgv0&#39;\n</code></pre>\n"
        },
        {
          "textRaw": "`channel` {Object} ",
          "type": "Object",
          "name": "channel",
          "meta": {
            "added": [
              "v7.1.0"
            ],
            "changes": []
          },
          "desc": "<p>If the Node.js process was spawned with an IPC channel (see the\n<a href=\"child_process.html\">Child Process</a> documentation), the <code>process.channel</code>\nproperty is a reference to the IPC channel. If no IPC channel exists, this\nproperty is <code>undefined</code>.</p>\n"
        },
        {
          "textRaw": "`config` {Object} ",
          "type": "Object",
          "name": "config",
          "meta": {
            "added": [
              "v0.7.7"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.config</code> property returns an <code>Object</code> containing the JavaScript\nrepresentation of the configure options used to compile the current Node.js\nexecutable. This is the same as the <code>config.gypi</code> file that was produced when\nrunning the <code>./configure</code> script.</p>\n<p>An example of the possible output looks like:</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  target_defaults:\n   { cflags: [],\n     default_configuration: &#39;Release&#39;,\n     defines: [],\n     include_dirs: [],\n     libraries: [] },\n  variables:\n   {\n     host_arch: &#39;x64&#39;,\n     node_install_npm: &#39;true&#39;,\n     node_prefix: &#39;&#39;,\n     node_shared_cares: &#39;false&#39;,\n     node_shared_http_parser: &#39;false&#39;,\n     node_shared_libuv: &#39;false&#39;,\n     node_shared_zlib: &#39;false&#39;,\n     node_use_dtrace: &#39;false&#39;,\n     node_use_openssl: &#39;true&#39;,\n     node_shared_openssl: &#39;false&#39;,\n     strict_aliasing: &#39;true&#39;,\n     target_arch: &#39;x64&#39;,\n     v8_use_snapshot: &#39;true&#39;\n   }\n}\n</code></pre>\n<p>The <code>process.config</code> property is <strong>not</strong> read-only and there are existing\nmodules in the ecosystem that are known to extend, modify, or entirely replace\nthe value of <code>process.config</code>.</p>\n"
        },
        {
          "textRaw": "`connected` {boolean} ",
          "type": "boolean",
          "name": "connected",
          "meta": {
            "added": [
              "v0.7.2"
            ],
            "changes": []
          },
          "desc": "<p>If the Node.js process is spawned with an IPC channel (see the <a href=\"child_process.html\">Child Process</a>\nand <a href=\"cluster.html\">Cluster</a> documentation), the <code>process.connected</code> property will return\n<code>true</code> so long as the IPC channel is connected and will return <code>false</code> after\n<code>process.disconnect()</code> is called.</p>\n<p>Once <code>process.connected</code> is <code>false</code>, it is no longer possible to send messages\nover the IPC channel using <code>process.send()</code>.</p>\n"
        },
        {
          "textRaw": "`debugPort` {number} ",
          "type": "number",
          "name": "debugPort",
          "meta": {
            "added": [
              "v0.7.2"
            ],
            "changes": []
          },
          "desc": "<p>The port used by Node.js&#39;s debugger when enabled.</p>\n<pre><code class=\"lang-js\">process.debugPort = 5858;\n</code></pre>\n"
        },
        {
          "textRaw": "`env` {Object} ",
          "type": "Object",
          "name": "env",
          "meta": {
            "added": [
              "v0.1.27"
            ],
            "changes": [
              {
                "version": "v10.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/18990",
                "description": "Implicit conversion of variable value to string is deprecated."
              }
            ]
          },
          "desc": "<p>The <code>process.env</code> property returns an object containing the user environment.\nSee environ(7).</p>\n<p>An example of this object looks like:</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  TERM: &#39;xterm-256color&#39;,\n  SHELL: &#39;/usr/local/bin/bash&#39;,\n  USER: &#39;maciej&#39;,\n  PATH: &#39;~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;,\n  PWD: &#39;/Users/maciej&#39;,\n  EDITOR: &#39;vim&#39;,\n  SHLVL: &#39;1&#39;,\n  HOME: &#39;/Users/maciej&#39;,\n  LOGNAME: &#39;maciej&#39;,\n  _: &#39;/usr/local/bin/node&#39;\n}\n</code></pre>\n<p>It is possible to modify this object, but such modifications will not be\nreflected outside the Node.js process. In other words, the following example\nwould not work:</p>\n<pre><code class=\"lang-console\">$ node -e &#39;process.env.foo = &quot;bar&quot;&#39; &amp;&amp; echo $foo\n</code></pre>\n<p>While the following will:</p>\n<pre><code class=\"lang-js\">process.env.foo = &#39;bar&#39;;\nconsole.log(process.env.foo);\n</code></pre>\n<p>Assigning a property on <code>process.env</code> will implicitly convert the value\nto a string. <strong>This behavior is deprecated.</strong> Future versions of Node.js may\nthrow an error when the value is not a string, number, or boolean.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">process.env.test = null;\nconsole.log(process.env.test);\n// =&gt; &#39;null&#39;\nprocess.env.test = undefined;\nconsole.log(process.env.test);\n// =&gt; &#39;undefined&#39;\n</code></pre>\n<p>Use <code>delete</code> to delete a property from <code>process.env</code>.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">process.env.TEST = 1;\ndelete process.env.TEST;\nconsole.log(process.env.TEST);\n// =&gt; undefined\n</code></pre>\n<p>On Windows operating systems, environment variables are case-insensitive.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">process.env.TEST = 1;\nconsole.log(process.env.test);\n// =&gt; 1\n</code></pre>\n"
        },
        {
          "textRaw": "`execArgv` {string[]} ",
          "type": "string[]",
          "name": "execArgv",
          "meta": {
            "added": [
              "v0.7.7"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.execArgv</code> property returns the set of Node.js-specific command-line\noptions passed when the Node.js process was launched. These options do not\nappear in the array returned by the <a href=\"#process_process_argv\"><code>process.argv</code></a> property, and do not\ninclude the Node.js executable, the name of the script, or any options following\nthe script name. These options are useful in order to spawn child processes with\nthe same execution environment as the parent.</p>\n<pre><code class=\"lang-console\">$ node --harmony script.js --version\n</code></pre>\n<p>Results in <code>process.execArgv</code>:</p>\n<!-- eslint-disable semi -->\n<pre><code class=\"lang-js\">[&#39;--harmony&#39;]\n</code></pre>\n<p>And <code>process.argv</code>:</p>\n<!-- eslint-disable semi -->\n<pre><code class=\"lang-js\">[&#39;/usr/local/bin/node&#39;, &#39;script.js&#39;, &#39;--version&#39;]\n</code></pre>\n"
        },
        {
          "textRaw": "`execPath` {string} ",
          "type": "string",
          "name": "execPath",
          "meta": {
            "added": [
              "v0.1.100"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.execPath</code> property returns the absolute pathname of the executable\nthat started the Node.js process.</p>\n<!-- eslint-disable semi -->\n<pre><code class=\"lang-js\">&#39;/usr/local/bin/node&#39;\n</code></pre>\n"
        },
        {
          "textRaw": "`exitCode` {integer} ",
          "type": "integer",
          "name": "exitCode",
          "meta": {
            "added": [
              "v0.11.8"
            ],
            "changes": []
          },
          "desc": "<p>A number which will be the process exit code, when the process either\nexits gracefully, or is exited via <a href=\"#process_process_exit_code\"><code>process.exit()</code></a> without specifying\na code.</p>\n<p>Specifying a code to <a href=\"#process_process_exit_code\"><code>process.exit(code)</code></a> will override any\nprevious setting of <code>process.exitCode</code>.</p>\n"
        },
        {
          "textRaw": "`mainModule` {Object} ",
          "type": "Object",
          "name": "mainModule",
          "meta": {
            "added": [
              "v0.1.17"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.mainModule</code> property provides an alternative way of retrieving\n<a href=\"modules.html#modules_accessing_the_main_module\"><code>require.main</code></a>. The difference is that if the main module changes at\nruntime, <a href=\"modules.html#modules_accessing_the_main_module\"><code>require.main</code></a> may still refer to the original main module in\nmodules that were required before the change occurred. Generally, it&#39;s\nsafe to assume that the two refer to the same module.</p>\n<p>As with <a href=\"modules.html#modules_accessing_the_main_module\"><code>require.main</code></a>, <code>process.mainModule</code> will be <code>undefined</code> if there\nis no entry script.</p>\n"
        },
        {
          "textRaw": "`noDeprecation` {boolean} ",
          "type": "boolean",
          "name": "noDeprecation",
          "meta": {
            "added": [
              "v0.8.0"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.noDeprecation</code> property indicates whether the <code>--no-deprecation</code>\nflag is set on the current Node.js process. See the documentation for\nthe <a href=\"#process_event_warning\"><code>&#39;warning&#39;</code> event</a> and the\n<a href=\"#process_process_emitwarning_warning_type_code_ctor\"><code>emitWarning()</code> method</a> for more information about this\nflag&#39;s behavior.</p>\n"
        },
        {
          "textRaw": "`pid` {integer} ",
          "type": "integer",
          "name": "pid",
          "meta": {
            "added": [
              "v0.1.15"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.pid</code> property returns the PID of the process.</p>\n<pre><code class=\"lang-js\">console.log(`This process is pid ${process.pid}`);\n</code></pre>\n"
        },
        {
          "textRaw": "`platform` {string} ",
          "type": "string",
          "name": "platform",
          "meta": {
            "added": [
              "v0.1.16"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.platform</code> property returns a string identifying the operating\nsystem platform on which the Node.js process is running.</p>\n<p>Currently possible values are:</p>\n<ul>\n<li><code>&#39;aix&#39;</code></li>\n<li><code>&#39;darwin&#39;</code></li>\n<li><code>&#39;freebsd&#39;</code></li>\n<li><code>&#39;linux&#39;</code></li>\n<li><code>&#39;openbsd&#39;</code></li>\n<li><code>&#39;sunos&#39;</code></li>\n<li><code>&#39;win32&#39;</code></li>\n</ul>\n<pre><code class=\"lang-js\">console.log(`This platform is ${process.platform}`);\n</code></pre>\n<p>The value <code>&#39;android&#39;</code> may also be returned if the Node.js is built on the\nAndroid operating system. However, Android support in Node.js\n<a href=\"https://github.com/nodejs/node/blob/master/BUILDING.md#androidandroid-based-devices-eg-firefox-os\">is experimental</a>.</p>\n"
        },
        {
          "textRaw": "`ppid` {integer} ",
          "type": "integer",
          "name": "ppid",
          "meta": {
            "added": [
              "v9.2.0"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.ppid</code> property returns the PID of the current parent process.</p>\n<pre><code class=\"lang-js\">console.log(`The parent process is pid ${process.ppid}`);\n</code></pre>\n"
        },
        {
          "textRaw": "`release` {Object} ",
          "type": "Object",
          "name": "release",
          "meta": {
            "added": [
              "v3.0.0"
            ],
            "changes": [
              {
                "version": "v4.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/3212",
                "description": "The `lts` property is now supported."
              }
            ]
          },
          "desc": "<p>The <code>process.release</code> property returns an <code>Object</code> containing metadata related\nto the current release, including URLs for the source tarball and headers-only\ntarball.</p>\n<p><code>process.release</code> contains the following properties:</p>\n<ul>\n<li><code>name</code> {string} A value that will always be <code>&#39;node&#39;</code> for Node.js. For\nlegacy io.js releases, this will be <code>&#39;io.js&#39;</code>.</li>\n<li><code>sourceUrl</code> {string} an absolute URL pointing to a <em><code>.tar.gz</code></em> file containing\nthe source code of the current release.</li>\n<li><code>headersUrl</code>{string} an absolute URL pointing to a <em><code>.tar.gz</code></em> file containing\nonly the source header files for the current release. This file is\nsignificantly smaller than the full source file and can be used for compiling\nNode.js native add-ons.</li>\n<li><code>libUrl</code> {string} an absolute URL pointing to a <em><code>node.lib</code></em> file matching the\narchitecture and version of the current release. This file is used for\ncompiling Node.js native add-ons. <em>This property is only present on Windows\nbuilds of Node.js and will be missing on all other platforms.</em></li>\n<li><code>lts</code> {string} a string label identifying the <a href=\"https://github.com/nodejs/LTS/\">LTS</a> label for this release.\nThis property only exists for LTS releases and is <code>undefined</code> for all other\nrelease types, including <em>Current</em> releases. Currently the valid values are:<ul>\n<li><code>&#39;Argon&#39;</code> for the 4.x LTS line beginning with 4.2.0.</li>\n<li><code>&#39;Boron&#39;</code> for the 6.x LTS line beginning with 6.9.0.</li>\n<li><code>&#39;Carbon&#39;</code> for the 8.x LTS line beginning with 8.9.1.</li>\n</ul>\n</li>\n</ul>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{\n  name: &#39;node&#39;,\n  lts: &#39;Argon&#39;,\n  sourceUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5.tar.gz&#39;,\n  headersUrl: &#39;https://nodejs.org/download/release/v4.4.5/node-v4.4.5-headers.tar.gz&#39;,\n  libUrl: &#39;https://nodejs.org/download/release/v4.4.5/win-x64/node.lib&#39;\n}\n</code></pre>\n<p>In custom builds from non-release versions of the source tree, only the\n<code>name</code> property may be present. The additional properties should not be\nrelied upon to exist.</p>\n"
        },
        {
          "textRaw": "`stderr` {Stream} ",
          "type": "Stream",
          "name": "stderr",
          "desc": "<p>The <code>process.stderr</code> property returns a stream connected to\n<code>stderr</code> (fd <code>2</code>). It is a <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> (which is a <a href=\"stream.html#stream_duplex_and_transform_streams\">Duplex</a>\nstream) unless fd <code>2</code> refers to a file, in which case it is\na <a href=\"stream.html#stream_writable_streams\">Writable</a> stream.</p>\n<p><code>process.stderr</code> differs from other Node.js streams in important ways, see\n<a href=\"process.html#process_a_note_on_process_i_o\">note on process I/O</a> for more information.</p>\n"
        },
        {
          "textRaw": "`stdin` {Stream} ",
          "type": "Stream",
          "name": "stdin",
          "desc": "<p>The <code>process.stdin</code> property returns a stream connected to\n<code>stdin</code> (fd <code>0</code>). It is a <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> (which is a <a href=\"stream.html#stream_duplex_and_transform_streams\">Duplex</a>\nstream) unless fd <code>0</code> refers to a file, in which case it is\na <a href=\"stream.html#stream_readable_streams\">Readable</a> stream.</p>\n<pre><code class=\"lang-js\">process.stdin.setEncoding(&#39;utf8&#39;);\n\nprocess.stdin.on(&#39;readable&#39;, () =&gt; {\n  const chunk = process.stdin.read();\n  if (chunk !== null) {\n    process.stdout.write(`data: ${chunk}`);\n  }\n});\n\nprocess.stdin.on(&#39;end&#39;, () =&gt; {\n  process.stdout.write(&#39;end&#39;);\n});\n</code></pre>\n<p>As a <a href=\"stream.html#stream_duplex_and_transform_streams\">Duplex</a> stream, <code>process.stdin</code> can also be used in &quot;old&quot; mode that\nis compatible with scripts written for Node.js prior to v0.10.\nFor more information see <a href=\"stream.html#stream_compatibility_with_older_node_js_versions\">Stream compatibility</a>.</p>\n<p>In &quot;old&quot; streams mode the <code>stdin</code> stream is paused by default, so one\nmust call <code>process.stdin.resume()</code> to read from it. Note also that calling\n<code>process.stdin.resume()</code> itself would switch stream to &quot;old&quot; mode.</p>\n"
        },
        {
          "textRaw": "`stdout` {Stream} ",
          "type": "Stream",
          "name": "stdout",
          "desc": "<p>The <code>process.stdout</code> property returns a stream connected to\n<code>stdout</code> (fd <code>1</code>). It is a <a href=\"net.html#net_class_net_socket\"><code>net.Socket</code></a> (which is a <a href=\"stream.html#stream_duplex_and_transform_streams\">Duplex</a>\nstream) unless fd <code>1</code> refers to a file, in which case it is\na <a href=\"stream.html#stream_writable_streams\">Writable</a> stream.</p>\n<p>For example, to copy <code>process.stdin</code> to <code>process.stdout</code>:</p>\n<pre><code class=\"lang-js\">process.stdin.pipe(process.stdout);\n</code></pre>\n<p><code>process.stdout</code> differs from other Node.js streams in important ways, see\n<a href=\"process.html#process_a_note_on_process_i_o\">note on process I/O</a> for more information.</p>\n",
          "modules": [
            {
              "textRaw": "A note on process I/O",
              "name": "a_note_on_process_i/o",
              "desc": "<p><code>process.stdout</code> and <code>process.stderr</code> differ from other Node.js streams in\nimportant ways:</p>\n<ol>\n<li>They are used internally by <a href=\"console.html#console_console_log_data_args\"><code>console.log()</code></a> and <a href=\"console.html#console_console_error_data_args\"><code>console.error()</code></a>,\nrespectively.</li>\n<li>They cannot be closed (<a href=\"stream.html#stream_writable_end_chunk_encoding_callback\"><code>end()</code></a> will throw).</li>\n<li>They will never emit the <a href=\"#stream_event_finish\"><code>&#39;finish&#39;</code></a> event.</li>\n<li>Writes may be synchronous depending on what the stream is connected to\nand whether the system is Windows or POSIX:<ul>\n<li>Files: <em>synchronous</em> on Windows and POSIX</li>\n<li>TTYs (Terminals): <em>asynchronous</em> on Windows, <em>synchronous</em> on POSIX</li>\n<li>Pipes (and sockets): <em>synchronous</em> on Windows, <em>asynchronous</em> on POSIX</li>\n</ul>\n</li>\n</ol>\n<p>These behaviors are partly for historical reasons, as changing them would\ncreate backwards incompatibility, but they are also expected by some users.</p>\n<p>Synchronous writes avoid problems such as output written with <code>console.log()</code> or\n<code>console.error()</code> being unexpectedly interleaved, or not written at all if\n<code>process.exit()</code> is called before an asynchronous write completes. See\n<a href=\"#process_process_exit_code\"><code>process.exit()</code></a> for more information.</p>\n<p><strong><em>Warning</em></strong>: Synchronous writes block the event loop until the write has\ncompleted. This can be near instantaneous in the case of output to a file, but\nunder high system load, pipes that are not being read at the receiving end, or\nwith slow terminals or file systems, its possible for the event loop to be\nblocked often enough and long enough to have severe negative performance\nimpacts. This may not be a problem when writing to an interactive terminal\nsession, but consider this particularly careful when doing production logging to\nthe process output streams.</p>\n<p>To check if a stream is connected to a <a href=\"tty.html\">TTY</a> context, check the <code>isTTY</code>\nproperty.</p>\n<p>For instance:</p>\n<pre><code class=\"lang-console\">$ node -p &quot;Boolean(process.stdin.isTTY)&quot;\ntrue\n$ echo &quot;foo&quot; | node -p &quot;Boolean(process.stdin.isTTY)&quot;\nfalse\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot;\ntrue\n$ node -p &quot;Boolean(process.stdout.isTTY)&quot; | cat\nfalse\n</code></pre>\n<p>See the <a href=\"tty.html\">TTY</a> documentation for more information.</p>\n",
              "type": "module",
              "displayName": "A note on process I/O"
            }
          ]
        },
        {
          "textRaw": "`throwDeprecation` {boolean} ",
          "type": "boolean",
          "name": "throwDeprecation",
          "meta": {
            "added": [
              "v0.9.12"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.throwDeprecation</code> property indicates whether the\n<code>--throw-deprecation</code> flag is set on the current Node.js process. See the\ndocumentation for the <a href=\"#process_event_warning\"><code>&#39;warning&#39;</code> event</a> and the\n<a href=\"#process_process_emitwarning_warning_type_code_ctor\"><code>emitWarning()</code> method</a> for more information about this\nflag&#39;s behavior.</p>\n"
        },
        {
          "textRaw": "`title` {string} ",
          "type": "string",
          "name": "title",
          "meta": {
            "added": [
              "v0.1.104"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.title</code> property returns the current process title (i.e. returns\nthe current value of <code>ps</code>). Assigning a new value to <code>process.title</code> modifies\nthe current value of <code>ps</code>.</p>\n<p>When a new value is assigned, different platforms will impose different maximum\nlength restrictions on the title. Usually such restrictions are quite limited.\nFor instance, on Linux and macOS, <code>process.title</code> is limited to the size of the\nbinary name plus the length of the command line arguments because setting the\n<code>process.title</code> overwrites the <code>argv</code> memory of the process. Node.js v0.8\nallowed for longer process title strings by also overwriting the <code>environ</code>\nmemory but that was potentially insecure and confusing in some (rather obscure)\ncases.</p>\n"
        },
        {
          "textRaw": "`traceDeprecation` {boolean} ",
          "type": "boolean",
          "name": "traceDeprecation",
          "meta": {
            "added": [
              "v0.8.0"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.traceDeprecation</code> property indicates whether the\n<code>--trace-deprecation</code> flag is set on the current Node.js process. See the\ndocumentation for the <a href=\"#process_event_warning\"><code>&#39;warning&#39;</code> event</a> and the\n<a href=\"#process_process_emitwarning_warning_type_code_ctor\"><code>emitWarning()</code> method</a> for more information about this\nflag&#39;s behavior.</p>\n"
        },
        {
          "textRaw": "`version` {string} ",
          "type": "string",
          "name": "version",
          "meta": {
            "added": [
              "v0.1.3"
            ],
            "changes": []
          },
          "desc": "<p>The <code>process.version</code> property returns the Node.js version string.</p>\n<pre><code class=\"lang-js\">console.log(`Version: ${process.version}`);\n</code></pre>\n"
        },
        {
          "textRaw": "`versions` {Object} ",
          "type": "Object",
          "name": "versions",
          "meta": {
            "added": [
              "v0.2.0"
            ],
            "changes": [
              {
                "version": "v4.2.0",
                "pr-url": "https://github.com/nodejs/node/pull/3102",
                "description": "The `icu` property is now supported."
              },
              {
                "version": "v9.0.0",
                "pr-url": "https://github.com/nodejs/node/pull/15785",
                "description": "The `v8` property now includes a Node.js specific suffix."
              }
            ]
          },
          "desc": "<p>The <code>process.versions</code> property returns an object listing the version strings of\nNode.js and its dependencies. <code>process.versions.modules</code> indicates the current\nABI version, which is increased whenever a C++ API changes. Node.js will refuse\nto load modules that were compiled against a different module ABI version.</p>\n<pre><code class=\"lang-js\">console.log(process.versions);\n</code></pre>\n<p>Will generate an object similar to:</p>\n<!-- eslint-skip -->\n<pre><code class=\"lang-js\">{ http_parser: &#39;2.7.0&#39;,\n  node: &#39;8.9.0&#39;,\n  v8: &#39;6.3.292.48-node.6&#39;,\n  uv: &#39;1.18.0&#39;,\n  zlib: &#39;1.2.11&#39;,\n  ares: &#39;1.13.0&#39;,\n  modules: &#39;60&#39;,\n  nghttp2: &#39;1.29.0&#39;,\n  napi: &#39;2&#39;,\n  openssl: &#39;1.0.2n&#39;,\n  icu: &#39;60.1&#39;,\n  unicode: &#39;10.0&#39;,\n  cldr: &#39;32.0&#39;,\n  tz: &#39;2016b&#39; }\n</code></pre>\n"
        }
      ]
    }
  ],
  "methods": [
    {
      "textRaw": "require()",
      "type": "method",
      "name": "require",
      "desc": "<p>This variable may appear to be global but is not. See <a href=\"globals.html#globals_require\"><code>require()</code></a>.</p>\n",
      "signatures": [
        {
          "params": []
        }
      ]
    }
  ]
}

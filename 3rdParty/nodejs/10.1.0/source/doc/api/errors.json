{
  "source": "doc/api/errors.md",
  "introduced_in": "v4.0.0",
  "classes": [
    {
      "textRaw": "Class: Error",
      "type": "class",
      "name": "Error",
      "desc": "<p>A generic JavaScript <code>Error</code> object that does not denote any specific\ncircumstance of why the error occurred. <code>Error</code> objects capture a &quot;stack trace&quot;\ndetailing the point in the code at which the <code>Error</code> was instantiated, and may\nprovide a text description of the error.</p>\n<p>For crypto only, <code>Error</code> objects will include the OpenSSL error stack in a\nseparate property called <code>opensslErrorStack</code> if it is available when the error\nis thrown.</p>\n<p>All errors generated by Node.js, including all System and JavaScript errors,\nwill either be instances of, or inherit from, the <code>Error</code> class.</p>\n",
      "methods": [
        {
          "textRaw": "Error.captureStackTrace(targetObject[, constructorOpt])",
          "type": "method",
          "name": "captureStackTrace",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`targetObject` {Object} ",
                  "name": "targetObject",
                  "type": "Object"
                },
                {
                  "textRaw": "`constructorOpt` {Function} ",
                  "name": "constructorOpt",
                  "type": "Function",
                  "optional": true
                }
              ]
            },
            {
              "params": [
                {
                  "name": "targetObject"
                },
                {
                  "name": "constructorOpt",
                  "optional": true
                }
              ]
            }
          ],
          "desc": "<p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns\na string representing the location in the code at which\n<code>Error.captureStackTrace()</code> was called.</p>\n<pre><code class=\"lang-js\">const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // similar to `new Error().stack`\n</code></pre>\n<p>The first line of the trace will be prefixed with\n<code>${myObject.name}: ${myObject.message}</code>.</p>\n<p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames\nabove <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the\ngenerated stack trace.</p>\n<p>The <code>constructorOpt</code> argument is useful for hiding implementation\ndetails of error generation from an end user. For instance:</p>\n<pre><code class=\"lang-js\">function MyError() {\n  Error.captureStackTrace(this, MyError);\n}\n\n// Without passing MyError to captureStackTrace, the MyError\n// frame would show up in the .stack property. By passing\n// the constructor, we omit that frame, and retain all frames below it.\nnew MyError().stack;\n</code></pre>\n"
        }
      ],
      "properties": [
        {
          "textRaw": "`stackTraceLimit` {number} ",
          "type": "number",
          "name": "stackTraceLimit",
          "desc": "<p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames\ncollected by a stack trace (whether generated by <code>new Error().stack</code> or\n<code>Error.captureStackTrace(obj)</code>).</p>\n<p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured <em>after</em> the value has been changed.</p>\n<p>If set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.</p>\n"
        },
        {
          "textRaw": "`code` {string} ",
          "type": "string",
          "name": "code",
          "desc": "<p>The <code>error.code</code> property is a string label that identifies the kind of error.\nSee <a href=\"#nodejs-error-codes\">Node.js Error Codes</a> for details about specific codes.</p>\n"
        },
        {
          "textRaw": "`message` {string} ",
          "type": "string",
          "name": "message",
          "desc": "<p>The <code>error.message</code> property is the string description of the error as set by\ncalling <code>new Error(message)</code>. The <code>message</code> passed to the constructor will also\nappear in the first line of the stack trace of the <code>Error</code>, however changing\nthis property after the <code>Error</code> object is created <em>may not</em> change the first\nline of the stack trace (for example, when <code>error.stack</code> is read before this\nproperty is changed).</p>\n<pre><code class=\"lang-js\">const err = new Error(&#39;The message&#39;);\nconsole.error(err.message);\n// Prints: The message\n</code></pre>\n"
        },
        {
          "textRaw": "`stack` {string} ",
          "type": "string",
          "name": "stack",
          "desc": "<p>The <code>error.stack</code> property is a string describing the point in the code at which\nthe <code>Error</code> was instantiated.</p>\n<pre><code class=\"lang-txt\">Error: Things keep happening!\n   at /home/gbusey/file.js:525:2\n   at Frobnicator.refrobulate (/home/gbusey/business-logic.js:424:21)\n   at Actor.&lt;anonymous&gt; (/home/gbusey/actors.js:400:8)\n   at increaseSynergy (/home/gbusey/actors.js:701:6)\n</code></pre>\n<p>The first line is formatted as <code>&lt;error class name&gt;: &lt;error message&gt;</code>, and\nis followed by a series of stack frames (each line beginning with &quot;at &quot;).\nEach frame describes a call site within the code that lead to the error being\ngenerated. V8 attempts to display a name for each function (by variable name,\nfunction name, or object method name), but occasionally it will not be able to\nfind a suitable name. If V8 cannot determine a name for the function, only\nlocation information will be displayed for that frame. Otherwise, the\ndetermined function name will be displayed with location information appended\nin parentheses.</p>\n<p>Frames are only generated for JavaScript functions. If, for example, execution\nsynchronously passes through a C++ addon function called <code>cheetahify</code> which\nitself calls a JavaScript function, the frame representing the <code>cheetahify</code> call\nwill not be present in the stack traces:</p>\n<pre><code class=\"lang-js\">const cheetahify = require(&#39;./native-binding.node&#39;);\n\nfunction makeFaster() {\n  // cheetahify *synchronously* calls speedy.\n  cheetahify(function speedy() {\n    throw new Error(&#39;oh no!&#39;);\n  });\n}\n\nmakeFaster();\n// will throw:\n//   /home/gbusey/file.js:6\n//       throw new Error(&#39;oh no!&#39;);\n//           ^\n//   Error: oh no!\n//       at speedy (/home/gbusey/file.js:6:11)\n//       at makeFaster (/home/gbusey/file.js:5:3)\n//       at Object.&lt;anonymous&gt; (/home/gbusey/file.js:10:1)\n//       at Module._compile (module.js:456:26)\n//       at Object.Module._extensions..js (module.js:474:10)\n//       at Module.load (module.js:356:32)\n//       at Function.Module._load (module.js:312:12)\n//       at Function.Module.runMain (module.js:497:10)\n//       at startup (node.js:119:16)\n//       at node.js:906:3\n</code></pre>\n<p>The location information will be one of:</p>\n<ul>\n<li><code>native</code>, if the frame represents a call internal to V8 (as in <code>[].forEach</code>).</li>\n<li><code>plain-filename.js:line:column</code>, if the frame represents a call internal\n to Node.js.</li>\n<li><code>/absolute/path/to/file.js:line:column</code>, if the frame represents a call in\na user program, or its dependencies.</li>\n</ul>\n<p>The string representing the stack trace is lazily generated when the\n<code>error.stack</code> property is <strong>accessed</strong>.</p>\n<p>The number of frames captured by the stack trace is bounded by the smaller of\n<code>Error.stackTraceLimit</code> or the number of available frames on the current event\nloop tick.</p>\n<p>System-level errors are generated as augmented <code>Error</code> instances, which are\ndetailed <a href=\"#errors_system_errors\">here</a>.</p>\n"
        }
      ],
      "signatures": [
        {
          "params": [
            {
              "textRaw": "`message` {string} ",
              "name": "message",
              "type": "string"
            }
          ],
          "desc": "<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the\nprovided text message. If an object is passed as <code>message</code>, the text message\nis generated by calling <code>message.toString()</code>. The <code>error.stack</code> property will\nrepresent the point in the code at which <code>new Error()</code> was called. Stack traces\nare dependent on <a href=\"https://github.com/v8/v8/wiki/Stack-Trace-API\">V8&#39;s stack trace API</a>. Stack traces extend only to either\n(a) the beginning of <em>synchronous code execution</em>, or (b) the number of frames\ngiven by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>\n"
        },
        {
          "params": [
            {
              "name": "message"
            }
          ],
          "desc": "<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the\nprovided text message. If an object is passed as <code>message</code>, the text message\nis generated by calling <code>message.toString()</code>. The <code>error.stack</code> property will\nrepresent the point in the code at which <code>new Error()</code> was called. Stack traces\nare dependent on <a href=\"https://github.com/v8/v8/wiki/Stack-Trace-API\">V8&#39;s stack trace API</a>. Stack traces extend only to either\n(a) the beginning of <em>synchronous code execution</em>, or (b) the number of frames\ngiven by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>\n"
        }
      ]
    },
    {
      "textRaw": "Class: AssertionError",
      "type": "class",
      "name": "AssertionError",
      "desc": "<p>A subclass of <code>Error</code> that indicates the failure of an assertion. For details,\nsee <a href=\"assert.html#assert_class_assert_assertionerror\"><code>Class: assert.AssertionError</code></a>.</p>\n"
    },
    {
      "textRaw": "Class: RangeError",
      "type": "class",
      "name": "RangeError",
      "desc": "<p>A subclass of <code>Error</code> that indicates that a provided argument was not within the\nset or range of acceptable values for a function; whether that is a numeric\nrange, or outside the set of options for a given function parameter.</p>\n<pre><code class=\"lang-js\">require(&#39;net&#39;).connect(-1);\n// throws &quot;RangeError: &quot;port&quot; option should be &gt;= 0 and &lt; 65536: -1&quot;\n</code></pre>\n<p>Node.js will generate and throw <code>RangeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>\n"
    },
    {
      "textRaw": "Class: ReferenceError",
      "type": "class",
      "name": "ReferenceError",
      "desc": "<p>A subclass of <code>Error</code> that indicates that an attempt is being made to access a\nvariable that is not defined. Such errors commonly indicate typos in code, or\nan otherwise broken program.</p>\n<p>While client code may generate and propagate these errors, in practice, only V8\nwill do so.</p>\n<pre><code class=\"lang-js\">doesNotExist;\n// throws ReferenceError, doesNotExist is not a variable in this program.\n</code></pre>\n<p>Unless an application is dynamically generating and running code,\n<code>ReferenceError</code> instances should always be considered a bug in the code\nor its dependencies.</p>\n"
    },
    {
      "textRaw": "Class: SyntaxError",
      "type": "class",
      "name": "SyntaxError",
      "desc": "<p>A subclass of <code>Error</code> that indicates that a program is not valid JavaScript.\nThese errors may only be generated and propagated as a result of code\nevaluation. Code evaluation may happen as a result of <code>eval</code>, <code>Function</code>,\n<code>require</code>, or <a href=\"vm.html\">vm</a>. These errors are almost always indicative of a broken\nprogram.</p>\n<pre><code class=\"lang-js\">try {\n  require(&#39;vm&#39;).runInThisContext(&#39;binary ! isNotOk&#39;);\n} catch (err) {\n  // err will be a SyntaxError\n}\n</code></pre>\n<p><code>SyntaxError</code> instances are unrecoverable in the context that created them –\nthey may only be caught by other contexts.</p>\n"
    },
    {
      "textRaw": "Class: TypeError",
      "type": "class",
      "name": "TypeError",
      "desc": "<p>A subclass of <code>Error</code> that indicates that a provided argument is not an\nallowable type. For example, passing a function to a parameter which expects a\nstring would be considered a <code>TypeError</code>.</p>\n<pre><code class=\"lang-js\">require(&#39;url&#39;).parse(() =&gt; { });\n// throws TypeError, since it expected a string\n</code></pre>\n<p>Node.js will generate and throw <code>TypeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>\n"
    }
  ],
  "miscs": [
    {
      "textRaw": "Errors",
      "name": "Errors",
      "introduced_in": "v4.0.0",
      "type": "misc",
      "desc": "<p>Applications running in Node.js will generally experience four categories of\nerrors:</p>\n<ul>\n<li>Standard JavaScript errors such as:<ul>\n<li>{EvalError} : thrown when a call to <code>eval()</code> fails.</li>\n<li>{SyntaxError} : thrown in response to improper JavaScript language\nsyntax.</li>\n<li>{RangeError} : thrown when a value is not within an expected range</li>\n<li>{ReferenceError} : thrown when using undefined variables</li>\n<li>{TypeError} : thrown when passing arguments of the wrong type</li>\n<li>{URIError} : thrown when a global URI handling function is misused.</li>\n</ul>\n</li>\n<li>System errors triggered by underlying operating system constraints such\nas attempting to open a file that does not exist, attempting to send data\nover a closed socket, etc;</li>\n<li>And User-specified errors triggered by application code.</li>\n<li><code>AssertionError</code>s are a special class of error that can be triggered whenever\nNode.js detects an exceptional logic violation that should never occur. These\nare raised typically by the <code>assert</code> module.</li>\n</ul>\n<p>All JavaScript and System errors raised by Node.js inherit from, or are\ninstances of, the standard JavaScript {Error} class and are guaranteed\nto provide <em>at least</em> the properties available on that class.</p>\n",
      "miscs": [
        {
          "textRaw": "Error Propagation and Interception",
          "name": "Error Propagation and Interception",
          "type": "misc",
          "desc": "<p>Node.js supports several mechanisms for propagating and handling errors that\noccur while an application is running. How these errors are reported and\nhandled depends entirely on the type of <code>Error</code> and the style of the API that is\ncalled.</p>\n<p>All JavaScript errors are handled as exceptions that <em>immediately</em> generate\nand throw an error using the standard JavaScript <code>throw</code> mechanism. These\nare handled using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch\"><code>try / catch</code> construct</a> provided by the\nJavaScript language.</p>\n<pre><code class=\"lang-js\">// Throws with a ReferenceError because z is undefined\ntry {\n  const m = 1;\n  const n = m + z;\n} catch (err) {\n  // Handle the error here.\n}\n</code></pre>\n<p>Any use of the JavaScript <code>throw</code> mechanism will raise an exception that\n<em>must</em> be handled using <code>try / catch</code> or the Node.js process will exit\nimmediately.</p>\n<p>With few exceptions, <em>Synchronous</em> APIs (any blocking method that does not\naccept a <code>callback</code> function, such as <a href=\"fs.html#fs_fs_readfilesync_path_options\"><code>fs.readFileSync</code></a>), will use <code>throw</code>\nto report errors.</p>\n<p>Errors that occur within <em>Asynchronous APIs</em> may be reported in multiple ways:</p>\n<ul>\n<li>Most asynchronous methods that accept a <code>callback</code> function will accept an\n<code>Error</code> object passed as the first argument to that function. If that first\nargument is not <code>null</code> and is an instance of <code>Error</code>, then an error occurred\nthat should be handled.</li>\n</ul>\n<!-- eslint-disable no-useless-return -->\n<pre><code class=\"lang-js\">  const fs = require(&#39;fs&#39;);\n  fs.readFile(&#39;a file that does not exist&#39;, (err, data) =&gt; {\n    if (err) {\n      console.error(&#39;There was an error reading the file!&#39;, err);\n      return;\n    }\n    // Otherwise handle the data\n  });\n</code></pre>\n<ul>\n<li><p>When an asynchronous method is called on an object that is an\n<a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a>, errors can be routed to that object&#39;s <code>&#39;error&#39;</code> event.</p>\n<pre><code class=\"lang-js\">const net = require(&#39;net&#39;);\nconst connection = net.connect(&#39;localhost&#39;);\n\n// Adding an &#39;error&#39; event handler to a stream:\nconnection.on(&#39;error&#39;, (err) =&gt; {\n  // If the connection is reset by the server, or if it can&#39;t\n  // connect at all, or on any sort of error encountered by\n  // the connection, the error will be sent here.\n  console.error(err);\n});\n\nconnection.pipe(process.stdout);\n</code></pre>\n</li>\n<li><p>A handful of typically asynchronous methods in the Node.js API may still\nuse the <code>throw</code> mechanism to raise exceptions that must be handled using\n<code>try / catch</code>. There is no comprehensive list of such methods; please\nrefer to the documentation of each method to determine the appropriate\nerror handling mechanism required.</p>\n</li>\n</ul>\n<p>The use of the <code>&#39;error&#39;</code> event mechanism is most common for <a href=\"stream.html\">stream-based</a>\nand <a href=\"events.html#events_class_eventemitter\">event emitter-based</a> APIs, which themselves represent a series of\nasynchronous operations over time (as opposed to a single operation that may\npass or fail).</p>\n<p>For <em>all</em> <a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a> objects, if an <code>&#39;error&#39;</code> event handler is not\nprovided, the error will be thrown, causing the Node.js process to report an\nuncaught exception and crash unless either: The <a href=\"domain.html\"><code>domain</code></a> module is\nused appropriately or a handler has been registered for the\n<a href=\"process.html#process_event_uncaughtexception\"><code>&#39;uncaughtException&#39;</code></a> event.</p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\nconst ee = new EventEmitter();\n\nsetImmediate(() =&gt; {\n  // This will crash the process because no &#39;error&#39; event\n  // handler has been added.\n  ee.emit(&#39;error&#39;, new Error(&#39;This will crash&#39;));\n});\n</code></pre>\n<p>Errors generated in this way <em>cannot</em> be intercepted using <code>try / catch</code> as\nthey are thrown <em>after</em> the calling code has already exited.</p>\n<p>Developers must refer to the documentation for each method to determine\nexactly how errors raised by those methods are propagated.</p>\n",
          "miscs": [
            {
              "textRaw": "Error-first callbacks",
              "name": "Error-first callbacks",
              "type": "misc",
              "desc": "<p>Most asynchronous methods exposed by the Node.js core API follow an idiomatic\npattern referred to as an <em>error-first callback</em> (sometimes referred to as\na <em>Node.js style callback</em>). With this pattern, a callback function is passed\nto the method as an argument. When the operation either completes or an error\nis raised, the callback function is called with\nthe <code>Error</code> object (if any) passed as the first argument. If no error was\nraised, the first argument will be passed as <code>null</code>.</p>\n<pre><code class=\"lang-js\">const fs = require(&#39;fs&#39;);\n\nfunction errorFirstCallback(err, data) {\n  if (err) {\n    console.error(&#39;There was an error&#39;, err);\n    return;\n  }\n  console.log(data);\n}\n\nfs.readFile(&#39;/some/file/that/does-not-exist&#39;, errorFirstCallback);\nfs.readFile(&#39;/some/file/that/does-exist&#39;, errorFirstCallback);\n</code></pre>\n<p>The JavaScript <code>try / catch</code> mechanism <strong>cannot</strong> be used to intercept errors\ngenerated by asynchronous APIs. A common mistake for beginners is to try to\nuse <code>throw</code> inside an error-first callback:</p>\n<pre><code class=\"lang-js\">// THIS WILL NOT WORK:\nconst fs = require(&#39;fs&#39;);\n\ntry {\n  fs.readFile(&#39;/some/file/that/does-not-exist&#39;, (err, data) =&gt; {\n    // mistaken assumption: throwing here...\n    if (err) {\n      throw err;\n    }\n  });\n} catch (err) {\n  // This will not catch the throw!\n  console.error(err);\n}\n</code></pre>\n<p>This will not work because the callback function passed to <code>fs.readFile()</code> is\ncalled asynchronously. By the time the callback has been called, the\nsurrounding code (including the <code>try { } catch (err) { }</code> block will have\nalready exited. Throwing an error inside the callback <strong>can crash the Node.js\nprocess</strong> in most cases. If <a href=\"domain.html\">domains</a> are enabled, or a handler has been\nregistered with <code>process.on(&#39;uncaughtException&#39;)</code>, such errors can be\nintercepted.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Exceptions vs. Errors",
          "name": "Exceptions vs. Errors",
          "type": "misc",
          "desc": "<p>A JavaScript exception is a value that is thrown as a result of an invalid\noperation or as the target of a <code>throw</code> statement. While it is not required\nthat these values are instances of <code>Error</code> or classes which inherit from\n<code>Error</code>, all exceptions thrown by Node.js or the JavaScript runtime <em>will</em> be\ninstances of <code>Error</code>.</p>\n<p>Some exceptions are <em>unrecoverable</em> at the JavaScript layer. Such exceptions\nwill <em>always</em> cause the Node.js process to crash. Examples include <code>assert()</code>\nchecks or <code>abort()</code> calls in the C++ layer.</p>\n"
        },
        {
          "textRaw": "System Errors",
          "name": "system_errors",
          "desc": "<p>System errors are generated when exceptions occur within the Node.js\nruntime environment. Typically, these are operational errors that occur\nwhen an application violates an operating system constraint such as attempting\nto read a file that does not exist or when the user does not have sufficient\npermissions.</p>\n<p>System errors are typically generated at the syscall level: an exhaustive list\nof error codes and their meanings is available by running <code>man 2 intro</code> or\n<code>man 3 errno</code> on most Unices; or <a href=\"http://man7.org/linux/man-pages/man3/errno.3.html\">online</a>.</p>\n<p>In Node.js, system errors are represented as augmented <code>Error</code> objects with\nadded properties.</p>\n",
          "classes": [
            {
              "textRaw": "Class: SystemError",
              "type": "class",
              "name": "SystemError",
              "desc": "<p><code>SystemError</code> instances may have an additional <code>info</code> property whose\nvalue is an object with additional details about the error conditions.</p>\n<p>The following properties are provided:</p>\n<ul>\n<li><code>code</code> {string} The string error code</li>\n<li><code>errno</code> {number} The system-provided error number</li>\n<li><code>message</code> {string} A system-provided human readable description of the error</li>\n<li><code>syscall</code> {string} The name of the system call that triggered the error</li>\n<li><code>path</code> {Buffer} When reporting a file system error, the <code>path</code> will identify\nthe file path.</li>\n<li><code>dest</code> {Buffer} When reporting a file system error, the <code>dest</code> will identify\nthe file path destination (if any).</li>\n</ul>\n",
              "properties": [
                {
                  "textRaw": "`code` {string} ",
                  "name": "code",
                  "desc": "<p>The <code>error.code</code> property is a string representing the error code, which is\ntypically <code>E</code> followed by a sequence of capital letters.</p>\n"
                },
                {
                  "textRaw": "`errno` {string|number} ",
                  "name": "errno",
                  "desc": "<p>The <code>error.errno</code> property is a number or a string.\nThe number is a <strong>negative</strong> value which corresponds to the error code defined\nin <a href=\"http://docs.libuv.org/en/v1.x/errors.html\"><code>libuv Error handling</code></a>. See <code>uv-errno.h</code> header file\n(<code>deps/uv/include/uv-errno.h</code> in the Node.js source tree) for details. In case\nof a string, it is the same as <code>error.code</code>.</p>\n"
                },
                {
                  "textRaw": "`syscall` {string} ",
                  "name": "syscall",
                  "desc": "<p>The <code>error.syscall</code> property is a string describing the <a href=\"http://man7.org/linux/man-pages/man2/syscall.2.html\">syscall</a> that failed.</p>\n"
                },
                {
                  "textRaw": "`path` {string} ",
                  "name": "path",
                  "desc": "<p>When present (e.g. in <code>fs</code> or <code>child_process</code>), the <code>error.path</code> property is a\nstring containing a relevant invalid pathname.</p>\n"
                },
                {
                  "textRaw": "`address` {string} ",
                  "name": "address",
                  "desc": "<p>When present (e.g. in <code>net</code> or <code>dgram</code>), the <code>error.address</code> property is a\nstring describing the address to which the connection failed.</p>\n"
                },
                {
                  "textRaw": "`port` {number} ",
                  "name": "port",
                  "desc": "<p>When present (e.g. in <code>net</code> or <code>dgram</code>), the <code>error.port</code> property is a number\nrepresenting the connection&#39;s port that is not available.</p>\n"
                }
              ]
            }
          ],
          "properties": [
            {
              "textRaw": "error.info",
              "name": "info",
              "desc": "<p><code>SystemError</code> instances may have an additional <code>info</code> property whose\nvalue is an object with additional details about the error conditions.</p>\n<p>The following properties are provided:</p>\n<ul>\n<li><code>code</code> {string} The string error code</li>\n<li><code>errno</code> {number} The system-provided error number</li>\n<li><code>message</code> {string} A system-provided human readable description of the error</li>\n<li><code>syscall</code> {string} The name of the system call that triggered the error</li>\n<li><code>path</code> {Buffer} When reporting a file system error, the <code>path</code> will identify\nthe file path.</li>\n<li><code>dest</code> {Buffer} When reporting a file system error, the <code>dest</code> will identify\nthe file path destination (if any).</li>\n</ul>\n",
              "properties": [
                {
                  "textRaw": "`code` {string} ",
                  "type": "string",
                  "name": "code",
                  "desc": "<p>The <code>error.code</code> property is a string representing the error code, which is\ntypically <code>E</code> followed by a sequence of capital letters.</p>\n"
                },
                {
                  "textRaw": "`errno` {string|number} ",
                  "type": "string|number",
                  "name": "errno",
                  "desc": "<p>The <code>error.errno</code> property is a number or a string.\nThe number is a <strong>negative</strong> value which corresponds to the error code defined\nin <a href=\"http://docs.libuv.org/en/v1.x/errors.html\"><code>libuv Error handling</code></a>. See <code>uv-errno.h</code> header file\n(<code>deps/uv/include/uv-errno.h</code> in the Node.js source tree) for details. In case\nof a string, it is the same as <code>error.code</code>.</p>\n"
                },
                {
                  "textRaw": "`syscall` {string} ",
                  "type": "string",
                  "name": "syscall",
                  "desc": "<p>The <code>error.syscall</code> property is a string describing the <a href=\"http://man7.org/linux/man-pages/man2/syscall.2.html\">syscall</a> that failed.</p>\n"
                },
                {
                  "textRaw": "`path` {string} ",
                  "type": "string",
                  "name": "path",
                  "desc": "<p>When present (e.g. in <code>fs</code> or <code>child_process</code>), the <code>error.path</code> property is a\nstring containing a relevant invalid pathname.</p>\n"
                },
                {
                  "textRaw": "`address` {string} ",
                  "type": "string",
                  "name": "address",
                  "desc": "<p>When present (e.g. in <code>net</code> or <code>dgram</code>), the <code>error.address</code> property is a\nstring describing the address to which the connection failed.</p>\n"
                },
                {
                  "textRaw": "`port` {number} ",
                  "type": "number",
                  "name": "port",
                  "desc": "<p>When present (e.g. in <code>net</code> or <code>dgram</code>), the <code>error.port</code> property is a number\nrepresenting the connection&#39;s port that is not available.</p>\n"
                }
              ]
            }
          ],
          "modules": [
            {
              "textRaw": "Common System Errors",
              "name": "common_system_errors",
              "desc": "<p>This list is <strong>not exhaustive</strong>, but enumerates many of the common system\nerrors encountered when writing a Node.js program. An exhaustive list may be\nfound <a href=\"http://man7.org/linux/man-pages/man3/errno.3.html\">here</a>.</p>\n<ul>\n<li><p><code>EACCES</code> (Permission denied): An attempt was made to access a file in a way\nforbidden by its file access permissions.</p>\n</li>\n<li><p><code>EADDRINUSE</code> (Address already in use): An attempt to bind a server\n(<a href=\"net.html\"><code>net</code></a>, <a href=\"http.html\"><code>http</code></a>, or <a href=\"https.html\"><code>https</code></a>) to a local address failed due to\nanother server on the local system already occupying that address.</p>\n</li>\n<li><p><code>ECONNREFUSED</code> (Connection refused): No connection could be made because the\ntarget machine actively refused it. This usually results from trying to\nconnect to a service that is inactive on the foreign host.</p>\n</li>\n<li><p><code>ECONNRESET</code> (Connection reset by peer): A connection was forcibly closed by\na peer. This normally results from a loss of the connection on the remote\nsocket due to a timeout or reboot. Commonly encountered via the <a href=\"http.html\"><code>http</code></a>\nand <a href=\"net.html\"><code>net</code></a> modules.</p>\n</li>\n<li><p><code>EEXIST</code> (File exists): An existing file was the target of an operation that\nrequired that the target not exist.</p>\n</li>\n<li><p><code>EISDIR</code> (Is a directory): An operation expected a file, but the given\npathname was a directory.</p>\n</li>\n<li><p><code>EMFILE</code> (Too many open files in system): Maximum number of\n<a href=\"https://en.wikipedia.org/wiki/File_descriptor\">file descriptors</a> allowable on the system has been reached, and\nrequests for another descriptor cannot be fulfilled until at least one\nhas been closed. This is encountered when opening many files at once in\nparallel, especially on systems (in particular, macOS) where there is a low\nfile descriptor limit for processes. To remedy a low limit, run\n<code>ulimit -n 2048</code> in the same shell that will run the Node.js process.</p>\n</li>\n<li><p><code>ENOENT</code> (No such file or directory): Commonly raised by <a href=\"fs.html\"><code>fs</code></a> operations\nto indicate that a component of the specified pathname does not exist — no\nentity (file or directory) could be found by the given path.</p>\n</li>\n<li><p><code>ENOTDIR</code> (Not a directory): A component of the given pathname existed, but\nwas not a directory as expected. Commonly raised by <a href=\"fs.html#fs_fs_readdir_path_options_callback\"><code>fs.readdir</code></a>.</p>\n</li>\n<li><p><code>ENOTEMPTY</code> (Directory not empty): A directory with entries was the target\nof an operation that requires an empty directory — usually <a href=\"fs.html#fs_fs_unlink_path_callback\"><code>fs.unlink</code></a>.</p>\n</li>\n<li><p><code>EPERM</code> (Operation not permitted): An attempt was made to perform an\noperation that requires elevated privileges.</p>\n</li>\n<li><p><code>EPIPE</code> (Broken pipe): A write on a pipe, socket, or FIFO for which there is\nno process to read the data. Commonly encountered at the <a href=\"net.html\"><code>net</code></a> and\n<a href=\"http.html\"><code>http</code></a> layers, indicative that the remote side of the stream being\nwritten to has been closed.</p>\n</li>\n<li><p><code>ETIMEDOUT</code> (Operation timed out): A connect or send request failed because\nthe connected party did not properly respond after a period of time. Usually\nencountered by <a href=\"http.html\"><code>http</code></a> or <a href=\"net.html\"><code>net</code></a> — often a sign that a <code>socket.end()</code>\nwas not properly called.</p>\n</li>\n</ul>\n<p><a id=\"nodejs-error-codes\"></a></p>\n",
              "type": "module",
              "displayName": "Common System Errors"
            }
          ],
          "type": "misc",
          "displayName": "System Errors"
        },
        {
          "textRaw": "Node.js Error Codes",
          "name": "node.js_error_codes",
          "desc": "<p><a id=\"ERR_AMBIGUOUS_ARGUMENT\"></a></p>\n",
          "modules": [
            {
              "textRaw": "ERR_AMBIGUOUS_ARGUMENT",
              "name": "err_ambiguous_argument",
              "desc": "<p>This is triggered by the <code>assert</code> module in case e.g.,\n<code>assert.throws(fn, message)</code> is used in a way that the message is the thrown\nerror message. This is ambiguous because the message is not verifying the error\nmessage and will only be thrown in case no error is thrown.</p>\n<p><a id=\"ERR_ARG_NOT_ITERABLE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_AMBIGUOUS_ARGUMENT"
            },
            {
              "textRaw": "ERR_ARG_NOT_ITERABLE",
              "name": "err_arg_not_iterable",
              "desc": "<p>An iterable argument (i.e. a value that works with <code>for...of</code> loops) was\nrequired, but not provided to a Node.js API.</p>\n<p><a id=\"ERR_ASSERTION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_ARG_NOT_ITERABLE"
            },
            {
              "textRaw": "ERR_ASSERTION",
              "name": "err_assertion",
              "desc": "<p>A special type of error that can be triggered whenever Node.js detects an\nexceptional logic violation that should never occur. These are raised typically\nby the <code>assert</code> module.</p>\n<p><a id=\"ERR_ASYNC_CALLBACK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_ASSERTION"
            },
            {
              "textRaw": "ERR_ASYNC_CALLBACK",
              "name": "err_async_callback",
              "desc": "<p>An attempt was made to register something that is not a function as an\n<code>AsyncHooks</code> callback.</p>\n<p><a id=\"ERR_ASYNC_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_ASYNC_CALLBACK"
            },
            {
              "textRaw": "ERR_ASYNC_TYPE",
              "name": "err_async_type",
              "desc": "<p>The type of an asynchronous resource was invalid. Note that users are also able\nto define their own types if using the public embedder API.</p>\n<p><a id=\"ERR_BUFFER_OUT_OF_BOUNDS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_ASYNC_TYPE"
            },
            {
              "textRaw": "ERR_BUFFER_OUT_OF_BOUNDS",
              "name": "err_buffer_out_of_bounds",
              "desc": "<p>An operation outside the bounds of a <code>Buffer</code> was attempted.</p>\n<p><a id=\"ERR_BUFFER_TOO_LARGE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_BUFFER_OUT_OF_BOUNDS"
            },
            {
              "textRaw": "ERR_BUFFER_TOO_LARGE",
              "name": "err_buffer_too_large",
              "desc": "<p>An attempt has been made to create a <code>Buffer</code> larger than the maximum allowed\nsize.</p>\n<p><a id=\"ERR_CANNOT_WATCH_SIGINT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_BUFFER_TOO_LARGE"
            },
            {
              "textRaw": "ERR_CANNOT_WATCH_SIGINT",
              "name": "err_cannot_watch_sigint",
              "desc": "<p>Node.js was unable to watch for the <code>SIGINT</code> signal.</p>\n<p><a id=\"ERR_CHILD_CLOSED_BEFORE_REPLY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CANNOT_WATCH_SIGINT"
            },
            {
              "textRaw": "ERR_CHILD_CLOSED_BEFORE_REPLY",
              "name": "err_child_closed_before_reply",
              "desc": "<p>A child process was closed before the parent received a reply.</p>\n<p><a id=\"ERR_CHILD_PROCESS_IPC_REQUIRED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CHILD_CLOSED_BEFORE_REPLY"
            },
            {
              "textRaw": "ERR_CHILD_PROCESS_IPC_REQUIRED",
              "name": "err_child_process_ipc_required",
              "desc": "<p>Used when a child process is being forked without specifying an IPC channel.</p>\n<p><a id=\"ERR_CHILD_PROCESS_STDIO_MAXBUFFER\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CHILD_PROCESS_IPC_REQUIRED"
            },
            {
              "textRaw": "ERR_CHILD_PROCESS_STDIO_MAXBUFFER",
              "name": "err_child_process_stdio_maxbuffer",
              "desc": "<p>Used when the main process is trying to read data from the child process&#39;s\nSTDERR / STDOUT, and the data&#39;s length is longer than the <code>maxBuffer</code> option.</p>\n<p><a id=\"ERR_CONSOLE_WRITABLE_STREAM\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CHILD_PROCESS_STDIO_MAXBUFFER"
            },
            {
              "textRaw": "ERR_CONSOLE_WRITABLE_STREAM",
              "name": "err_console_writable_stream",
              "desc": "<p><code>Console</code> was instantiated without <code>stdout</code> stream, or <code>Console</code> has a\nnon-writable <code>stdout</code> or <code>stderr</code> stream.</p>\n<p><a id=\"ERR_CPU_USAGE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CONSOLE_WRITABLE_STREAM"
            },
            {
              "textRaw": "ERR_CPU_USAGE",
              "name": "err_cpu_usage",
              "desc": "<p>The native call from <code>process.cpuUsage</code> could not be processed.</p>\n<p><a id=\"ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CPU_USAGE"
            },
            {
              "textRaw": "ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED",
              "name": "err_crypto_custom_engine_not_supported",
              "desc": "<p>A client certificate engine was requested that is not supported by the version\nof OpenSSL being used.</p>\n<p><a id=\"ERR_CRYPTO_ECDH_INVALID_FORMAT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_CUSTOM_ENGINE_NOT_SUPPORTED"
            },
            {
              "textRaw": "ERR_CRYPTO_ECDH_INVALID_FORMAT",
              "name": "err_crypto_ecdh_invalid_format",
              "desc": "<p>An invalid value for the <code>format</code> argument was passed to the <code>crypto.ECDH()</code>\nclass <code>getPublicKey()</code> method.</p>\n<p><a id=\"ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_ECDH_INVALID_FORMAT"
            },
            {
              "textRaw": "ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY",
              "name": "err_crypto_ecdh_invalid_public_key",
              "desc": "<p>An invalid value for the <code>key</code> argument has been passed to the\n<code>crypto.ECDH()</code> class <code>computeSecret()</code> method. It means that the public\nkey lies outside of the elliptic curve.</p>\n<p><a id=\"ERR_CRYPTO_ENGINE_UNKNOWN\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY"
            },
            {
              "textRaw": "ERR_CRYPTO_ENGINE_UNKNOWN",
              "name": "err_crypto_engine_unknown",
              "desc": "<p>An invalid crypto engine identifier was passed to\n<a href=\"crypto.html#crypto_crypto_setengine_engine_flags\"><code>require(&#39;crypto&#39;).setEngine()</code></a>.</p>\n<p><a id=\"ERR_CRYPTO_FIPS_FORCED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_ENGINE_UNKNOWN"
            },
            {
              "textRaw": "ERR_CRYPTO_FIPS_FORCED",
              "name": "err_crypto_fips_forced",
              "desc": "<p>The <a href=\"cli.html#cli_force_fips\"><code>--force-fips</code></a> command-line argument was used but there was an attempt\nto enable or disable FIPS mode in the <code>crypto</code> module.</p>\n<p><a id=\"ERR_CRYPTO_FIPS_UNAVAILABLE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_FIPS_FORCED"
            },
            {
              "textRaw": "ERR_CRYPTO_FIPS_UNAVAILABLE",
              "name": "err_crypto_fips_unavailable",
              "desc": "<p>An attempt was made to enable or disable FIPS mode, but FIPS mode was not\navailable.</p>\n<p><a id=\"ERR_CRYPTO_HASH_DIGEST_NO_UTF16\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_FIPS_UNAVAILABLE"
            },
            {
              "textRaw": "ERR_CRYPTO_HASH_DIGEST_NO_UTF16",
              "name": "err_crypto_hash_digest_no_utf16",
              "desc": "<p>The UTF-16 encoding was used with <a href=\"crypto.html#crypto_hash_digest_encoding\"><code>hash.digest()</code></a>. While the\n<code>hash.digest()</code> method does allow an <code>encoding</code> argument to be passed in,\ncausing the method to return a string rather than a <code>Buffer</code>, the UTF-16\nencoding (e.g. <code>ucs</code> or <code>utf16le</code>) is not supported.</p>\n<p><a id=\"ERR_CRYPTO_HASH_FINALIZED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_HASH_DIGEST_NO_UTF16"
            },
            {
              "textRaw": "ERR_CRYPTO_HASH_FINALIZED",
              "name": "err_crypto_hash_finalized",
              "desc": "<p><a href=\"crypto.html#crypto_hash_digest_encoding\"><code>hash.digest()</code></a> was called multiple times. The <code>hash.digest()</code> method must\nbe called no more than one time per instance of a <code>Hash</code> object.</p>\n<p><a id=\"ERR_CRYPTO_HASH_UPDATE_FAILED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_HASH_FINALIZED"
            },
            {
              "textRaw": "ERR_CRYPTO_HASH_UPDATE_FAILED",
              "name": "err_crypto_hash_update_failed",
              "desc": "<p><a href=\"crypto.html#crypto_hash_update_data_inputencoding\"><code>hash.update()</code></a> failed for any reason. This should rarely, if ever, happen.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_DIGEST\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_HASH_UPDATE_FAILED"
            },
            {
              "textRaw": "ERR_CRYPTO_INVALID_DIGEST",
              "name": "err_crypto_invalid_digest",
              "desc": "<p>An invalid <a href=\"crypto.html#crypto_crypto_gethashes\">crypto digest algorithm</a> was specified.</p>\n<p><a id=\"ERR_CRYPTO_INVALID_STATE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_INVALID_DIGEST"
            },
            {
              "textRaw": "ERR_CRYPTO_INVALID_STATE",
              "name": "err_crypto_invalid_state",
              "desc": "<p>A crypto method was used on an object that was in an invalid state. For\ninstance, calling <a href=\"crypto.html#crypto_cipher_getauthtag\"><code>cipher.getAuthTag()</code></a> before calling <code>cipher.final()</code>.</p>\n<p><a id=\"ERR_CRYPTO_SIGN_KEY_REQUIRED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_INVALID_STATE"
            },
            {
              "textRaw": "ERR_CRYPTO_SIGN_KEY_REQUIRED",
              "name": "err_crypto_sign_key_required",
              "desc": "<p>A signing <code>key</code> was not provided to the <a href=\"crypto.html#crypto_sign_sign_privatekey_outputformat\"><code>sign.sign()</code></a> method.</p>\n<p><a id=\"ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_SIGN_KEY_REQUIRED"
            },
            {
              "textRaw": "ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH",
              "name": "err_crypto_timing_safe_equal_length",
              "desc": "<p><a href=\"crypto.html#crypto_crypto_timingsafeequal_a_b\"><code>crypto.timingSafeEqual()</code></a> was called with <code>Buffer</code>, <code>TypedArray</code>, or\n<code>DataView</code> arguments of different lengths.</p>\n<p><a id=\"ERR_DNS_SET_SERVERS_FAILED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_CRYPTO_TIMING_SAFE_EQUAL_LENGTH"
            },
            {
              "textRaw": "ERR_DNS_SET_SERVERS_FAILED",
              "name": "err_dns_set_servers_failed",
              "desc": "<p><code>c-ares</code> failed to set the DNS server.</p>\n<p><a id=\"ERR_DOMAIN_CALLBACK_NOT_AVAILABLE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_DNS_SET_SERVERS_FAILED"
            },
            {
              "textRaw": "ERR_DOMAIN_CALLBACK_NOT_AVAILABLE",
              "name": "err_domain_callback_not_available",
              "desc": "<p>The <code>domain</code> module was not usable since it could not establish the required\nerror handling hooks, because\n<a href=\"process.html#process_process_setuncaughtexceptioncapturecallback_fn\"><code>process.setUncaughtExceptionCaptureCallback()</code></a> had been called at an\nearlier point in time.</p>\n<p><a id=\"ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_DOMAIN_CALLBACK_NOT_AVAILABLE"
            },
            {
              "textRaw": "ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE",
              "name": "err_domain_cannot_set_uncaught_exception_capture",
              "desc": "<p><a href=\"process.html#process_process_setuncaughtexceptioncapturecallback_fn\"><code>process.setUncaughtExceptionCaptureCallback()</code></a> could not be called\nbecause the <code>domain</code> module has been loaded at an earlier point in time.</p>\n<p>The stack trace is extended to include the point in time at which the\n<code>domain</code> module had been loaded.</p>\n<p><a id=\"ERR_ENCODING_INVALID_ENCODED_DATA\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_DOMAIN_CANNOT_SET_UNCAUGHT_EXCEPTION_CAPTURE"
            },
            {
              "textRaw": "ERR_ENCODING_INVALID_ENCODED_DATA",
              "name": "err_encoding_invalid_encoded_data",
              "desc": "<p>Data provided to <code>util.TextDecoder()</code> API was invalid according to the encoding\nprovided.</p>\n<p><a id=\"ERR_ENCODING_NOT_SUPPORTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_ENCODING_INVALID_ENCODED_DATA"
            },
            {
              "textRaw": "ERR_ENCODING_NOT_SUPPORTED",
              "name": "err_encoding_not_supported",
              "desc": "<p>Encoding provided to <code>util.TextDecoder()</code> API was not one of the\n<a href=\"util.html#util_whatwg_supported_encodings\">WHATWG Supported Encodings</a>.</p>\n<p><a id=\"ERR_FALSY_VALUE_REJECTION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_ENCODING_NOT_SUPPORTED"
            },
            {
              "textRaw": "ERR_FALSY_VALUE_REJECTION",
              "name": "err_falsy_value_rejection",
              "desc": "<p>A <code>Promise</code> that was callbackified via <code>util.callbackify()</code> was rejected with a\nfalsy value.</p>\n<p><a id=\"ERR_FS_FILE_TOO_LARGE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_FALSY_VALUE_REJECTION"
            },
            {
              "textRaw": "ERR_FS_FILE_TOO_LARGE",
              "name": "err_fs_file_too_large",
              "desc": "<p>An attempt has been made to read a file whose size is larger than the maximum\nallowed size for a <code>Buffer</code>.</p>\n<p><a id=\"ERR_FS_INVALID_SYMLINK_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_FS_FILE_TOO_LARGE"
            },
            {
              "textRaw": "ERR_FS_INVALID_SYMLINK_TYPE",
              "name": "err_fs_invalid_symlink_type",
              "desc": "<p>An invalid symlink type was passed to the <a href=\"fs.html#fs_fs_symlink_target_path_type_callback\"><code>fs.symlink()</code></a> or\n<a href=\"fs.html#fs_fs_symlinksync_target_path_type\"><code>fs.symlinkSync()</code></a> methods.</p>\n<p><a id=\"ERR_HTTP_HEADERS_SENT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_FS_INVALID_SYMLINK_TYPE"
            },
            {
              "textRaw": "ERR_HTTP_HEADERS_SENT",
              "name": "err_http_headers_sent",
              "desc": "<p>An attempt was made to add more headers after the headers had already been sent.</p>\n<p><a id=\"ERR_HTTP_INVALID_HEADER_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP_HEADERS_SENT"
            },
            {
              "textRaw": "ERR_HTTP_INVALID_HEADER_VALUE",
              "name": "err_http_invalid_header_value",
              "desc": "<p>An invalid HTTP header value was specified.</p>\n<p><a id=\"ERR_HTTP_INVALID_STATUS_CODE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP_INVALID_HEADER_VALUE"
            },
            {
              "textRaw": "ERR_HTTP_INVALID_STATUS_CODE",
              "name": "err_http_invalid_status_code",
              "desc": "<p>Status code was outside the regular status code range (100-999).</p>\n<p><a id=\"ERR_HTTP_TRAILER_INVALID\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP_INVALID_STATUS_CODE"
            },
            {
              "textRaw": "ERR_HTTP_TRAILER_INVALID",
              "name": "err_http_trailer_invalid",
              "desc": "<p>The <code>Trailer</code> header was set even though the transfer encoding does not support\nthat.</p>\n<p><a id=\"ERR_HTTP2_ALTSVC_INVALID_ORIGIN\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP_TRAILER_INVALID"
            },
            {
              "textRaw": "ERR_HTTP2_ALTSVC_INVALID_ORIGIN",
              "name": "err_http2_altsvc_invalid_origin",
              "desc": "<p>HTTP/2 ALTSVC frames require a valid origin.</p>\n<p><a id=\"ERR_HTTP2_ALTSVC_LENGTH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_ALTSVC_INVALID_ORIGIN"
            },
            {
              "textRaw": "ERR_HTTP2_ALTSVC_LENGTH",
              "name": "err_http2_altsvc_length",
              "desc": "<p>HTTP/2 ALTSVC frames are limited to a maximum of 16,382 payload bytes.</p>\n<p><a id=\"ERR_HTTP2_CONNECT_AUTHORITY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_ALTSVC_LENGTH"
            },
            {
              "textRaw": "ERR_HTTP2_CONNECT_AUTHORITY",
              "name": "err_http2_connect_authority",
              "desc": "<p>For HTTP/2 requests using the <code>CONNECT</code> method, the <code>:authority</code> pseudo-header\nis required.</p>\n<p><a id=\"ERR_HTTP2_CONNECT_PATH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_CONNECT_AUTHORITY"
            },
            {
              "textRaw": "ERR_HTTP2_CONNECT_PATH",
              "name": "err_http2_connect_path",
              "desc": "<p>For HTTP/2 requests using the <code>CONNECT</code> method, the <code>:path</code> pseudo-header is\nforbidden.</p>\n<p><a id=\"ERR_HTTP2_CONNECT_SCHEME\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_CONNECT_PATH"
            },
            {
              "textRaw": "ERR_HTTP2_CONNECT_SCHEME",
              "name": "err_http2_connect_scheme",
              "desc": "<p>For HTTP/2 requests using the <code>CONNECT</code> method, the <code>:scheme</code> pseudo-header is\nforbidden.</p>\n<p><a id=\"ERR_HTTP2_GOAWAY_SESSION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_CONNECT_SCHEME"
            },
            {
              "textRaw": "ERR_HTTP2_GOAWAY_SESSION",
              "name": "err_http2_goaway_session",
              "desc": "<p>New HTTP/2 Streams may not be opened after the <code>Http2Session</code> has received a\n<code>GOAWAY</code> frame from the connected peer.</p>\n<p><a id=\"ERR_HTTP2_HEADER_SINGLE_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_GOAWAY_SESSION"
            },
            {
              "textRaw": "ERR_HTTP2_HEADER_SINGLE_VALUE",
              "name": "err_http2_header_single_value",
              "desc": "<p>Multiple values were provided for an HTTP/2 header field that was required to\nhave only a single value.</p>\n<p><a id=\"ERR_HTTP2_HEADERS_AFTER_RESPOND\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_HEADER_SINGLE_VALUE"
            },
            {
              "textRaw": "ERR_HTTP2_HEADERS_AFTER_RESPOND",
              "name": "err_http2_headers_after_respond",
              "desc": "<p>An additional headers was specified after an HTTP/2 response was initiated.</p>\n<p><a id=\"ERR_HTTP2_HEADERS_SENT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_HEADERS_AFTER_RESPOND"
            },
            {
              "textRaw": "ERR_HTTP2_HEADERS_SENT",
              "name": "err_http2_headers_sent",
              "desc": "<p>An attempt was made to send multiple response headers.</p>\n<p><a id=\"ERR_HTTP2_INFO_STATUS_NOT_ALLOWED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_HEADERS_SENT"
            },
            {
              "textRaw": "ERR_HTTP2_INFO_STATUS_NOT_ALLOWED",
              "name": "err_http2_info_status_not_allowed",
              "desc": "<p>Informational HTTP status codes (<code>1xx</code>) may not be set as the response status\ncode on HTTP/2 responses.</p>\n<p><a id=\"ERR_HTTP2_INVALID_CONNECTION_HEADERS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INFO_STATUS_NOT_ALLOWED"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_CONNECTION_HEADERS",
              "name": "err_http2_invalid_connection_headers",
              "desc": "<p>HTTP/1 connection specific headers are forbidden to be used in HTTP/2\nrequests and responses.</p>\n<p><a id=\"ERR_HTTP2_INVALID_HEADER_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_CONNECTION_HEADERS"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_HEADER_VALUE",
              "name": "err_http2_invalid_header_value",
              "desc": "<p>An invalid HTTP/2 header value was specified.</p>\n<p><a id=\"ERR_HTTP2_INVALID_INFO_STATUS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_HEADER_VALUE"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_INFO_STATUS",
              "name": "err_http2_invalid_info_status",
              "desc": "<p>An invalid HTTP informational status code has been specified. Informational\nstatus codes must be an integer between <code>100</code> and <code>199</code> (inclusive).</p>\n<p><a id=\"ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_INFO_STATUS"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH",
              "name": "err_http2_invalid_packed_settings_length",
              "desc": "<p>Input <code>Buffer</code> and <code>Uint8Array</code> instances passed to the\n<code>http2.getUnpackedSettings()</code> API must have a length that is a multiple of\nsix.</p>\n<p><a id=\"ERR_HTTP2_INVALID_PSEUDOHEADER\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_PACKED_SETTINGS_LENGTH"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_PSEUDOHEADER",
              "name": "err_http2_invalid_pseudoheader",
              "desc": "<p>Only valid HTTP/2 pseudoheaders (<code>:status</code>, <code>:path</code>, <code>:authority</code>, <code>:scheme</code>,\nand <code>:method</code>) may be used.</p>\n<p><a id=\"ERR_HTTP2_INVALID_SESSION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_PSEUDOHEADER"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_SESSION",
              "name": "err_http2_invalid_session",
              "desc": "<p>An action was performed on an <code>Http2Session</code> object that had already been\ndestroyed.</p>\n<p><a id=\"ERR_HTTP2_INVALID_SETTING_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_SESSION"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_SETTING_VALUE",
              "name": "err_http2_invalid_setting_value",
              "desc": "<p>An invalid value has been specified for an HTTP/2 setting.</p>\n<p><a id=\"ERR_HTTP2_INVALID_STREAM\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_SETTING_VALUE"
            },
            {
              "textRaw": "ERR_HTTP2_INVALID_STREAM",
              "name": "err_http2_invalid_stream",
              "desc": "<p>An operation was performed on a stream that had already been destroyed.</p>\n<p><a id=\"ERR_HTTP2_MAX_PENDING_SETTINGS_ACK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_INVALID_STREAM"
            },
            {
              "textRaw": "ERR_HTTP2_MAX_PENDING_SETTINGS_ACK",
              "name": "err_http2_max_pending_settings_ack",
              "desc": "<p>Whenever an HTTP/2 <code>SETTINGS</code> frame is sent to a connected peer, the peer is\nrequired to send an acknowledgment that it has received and applied the new\n<code>SETTINGS</code>. By default, a maximum number of unacknowledged <code>SETTINGS</code> frames may\nbe sent at any given time. This error code is used when that limit has been\nreached.</p>\n<p><a id=\"ERR_HTTP2_NO_SOCKET_MANIPULATION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_MAX_PENDING_SETTINGS_ACK"
            },
            {
              "textRaw": "ERR_HTTP2_NO_SOCKET_MANIPULATION",
              "name": "err_http2_no_socket_manipulation",
              "desc": "<p>An attempt was made to directly manipulate (read, write, pause, resume, etc.) a\nsocket attached to an <code>Http2Session</code>.</p>\n<p><a id=\"ERR_HTTP2_OUT_OF_STREAMS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_NO_SOCKET_MANIPULATION"
            },
            {
              "textRaw": "ERR_HTTP2_OUT_OF_STREAMS",
              "name": "err_http2_out_of_streams",
              "desc": "<p>The number of streams created on a single HTTP/2 session reached the maximum\nlimit.</p>\n<p><a id=\"ERR_HTTP2_PAYLOAD_FORBIDDEN\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_OUT_OF_STREAMS"
            },
            {
              "textRaw": "ERR_HTTP2_PAYLOAD_FORBIDDEN",
              "name": "err_http2_payload_forbidden",
              "desc": "<p>A message payload was specified for an HTTP response code for which a payload is\nforbidden.</p>\n<p><a id=\"ERR_HTTP2_PING_CANCEL\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_PAYLOAD_FORBIDDEN"
            },
            {
              "textRaw": "ERR_HTTP2_PING_CANCEL",
              "name": "err_http2_ping_cancel",
              "desc": "<p>An HTTP/2 ping was canceled.</p>\n<p><a id=\"ERR_HTTP2_PING_LENGTH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_PING_CANCEL"
            },
            {
              "textRaw": "ERR_HTTP2_PING_LENGTH",
              "name": "err_http2_ping_length",
              "desc": "<p>HTTP/2 ping payloads must be exactly 8 bytes in length.</p>\n<p><a id=\"ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_PING_LENGTH"
            },
            {
              "textRaw": "ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED",
              "name": "err_http2_pseudoheader_not_allowed",
              "desc": "<p>An HTTP/2 pseudo-header has been used inappropriately. Pseudo-headers are header\nkey names that begin with the <code>:</code> prefix.</p>\n<p><a id=\"ERR_HTTP2_PUSH_DISABLED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_PSEUDOHEADER_NOT_ALLOWED"
            },
            {
              "textRaw": "ERR_HTTP2_PUSH_DISABLED",
              "name": "err_http2_push_disabled",
              "desc": "<p>An attempt was made to create a push stream, which had been disabled by the\nclient.</p>\n<p><a id=\"ERR_HTTP2_SEND_FILE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_PUSH_DISABLED"
            },
            {
              "textRaw": "ERR_HTTP2_SEND_FILE",
              "name": "err_http2_send_file",
              "desc": "<p>An attempt was made to use the <code>Http2Stream.prototype.responseWithFile()</code> API to\nsend a directory.</p>\n<p><a id=\"ERR_HTTP2_SEND_FILE_NOSEEK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_SEND_FILE"
            },
            {
              "textRaw": "ERR_HTTP2_SEND_FILE_NOSEEK",
              "name": "err_http2_send_file_noseek",
              "desc": "<p>An attempt was made to use the <code>Http2Stream.prototype.responseWithFile()</code> API to\nsend something other than a regular file, but <code>offset</code> or <code>length</code> options were\nprovided.</p>\n<p><a id=\"ERR_HTTP2_SESSION_ERROR\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_SEND_FILE_NOSEEK"
            },
            {
              "textRaw": "ERR_HTTP2_SESSION_ERROR",
              "name": "err_http2_session_error",
              "desc": "<p>The <code>Http2Session</code> closed with a non-zero error code.</p>\n<p><a id=\"ERR_HTTP2_SOCKET_BOUND\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_SESSION_ERROR"
            },
            {
              "textRaw": "ERR_HTTP2_SOCKET_BOUND",
              "name": "err_http2_socket_bound",
              "desc": "<p>An attempt was made to connect a <code>Http2Session</code> object to a <code>net.Socket</code> or\n<code>tls.TLSSocket</code> that had already been bound to another <code>Http2Session</code> object.</p>\n<p><a id=\"ERR_HTTP2_STATUS_101\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_SOCKET_BOUND"
            },
            {
              "textRaw": "ERR_HTTP2_STATUS_101",
              "name": "err_http2_status_101",
              "desc": "<p>Use of the <code>101</code> Informational status code is forbidden in HTTP/2.</p>\n<p><a id=\"ERR_HTTP2_STATUS_INVALID\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_STATUS_101"
            },
            {
              "textRaw": "ERR_HTTP2_STATUS_INVALID",
              "name": "err_http2_status_invalid",
              "desc": "<p>An invalid HTTP status code has been specified. Status codes must be an integer\nbetween <code>100</code> and <code>599</code> (inclusive).</p>\n<p><a id=\"ERR_HTTP2_STREAM_CANCEL\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_STATUS_INVALID"
            },
            {
              "textRaw": "ERR_HTTP2_STREAM_CANCEL",
              "name": "err_http2_stream_cancel",
              "desc": "<p>An <code>Http2Stream</code> was destroyed before any data was transmitted to the connected\npeer.</p>\n<p><a id=\"ERR_HTTP2_STREAM_ERROR\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_STREAM_CANCEL"
            },
            {
              "textRaw": "ERR_HTTP2_STREAM_ERROR",
              "name": "err_http2_stream_error",
              "desc": "<p>A non-zero error code was been specified in an <code>RST_STREAM</code> frame.</p>\n<p><a id=\"ERR_HTTP2_STREAM_SELF_DEPENDENCY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_STREAM_ERROR"
            },
            {
              "textRaw": "ERR_HTTP2_STREAM_SELF_DEPENDENCY",
              "name": "err_http2_stream_self_dependency",
              "desc": "<p>When setting the priority for an HTTP/2 stream, the stream may be marked as\na dependency for a parent stream. This error code is used when an attempt is\nmade to mark a stream and dependent of itself.</p>\n<p><a id=\"ERR_HTTP2_TRAILERS_ALREADY_SENT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_STREAM_SELF_DEPENDENCY"
            },
            {
              "textRaw": "ERR_HTTP2_TRAILERS_ALREADY_SENT",
              "name": "err_http2_trailers_already_sent",
              "desc": "<p>Trailing headers have already been sent on the <code>Http2Stream</code>.</p>\n<p><a id=\"ERR_HTTP2_TRAILERS_NOT_READY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_TRAILERS_ALREADY_SENT"
            },
            {
              "textRaw": "ERR_HTTP2_TRAILERS_NOT_READY",
              "name": "err_http2_trailers_not_ready",
              "desc": "<p>The <code>http2stream.sendTrailers()</code> method cannot be called until after the\n<code>&#39;wantTrailers&#39;</code> event is emitted on an <code>Http2Stream</code> object. The\n<code>&#39;wantTrailers&#39;</code> event will only be emitted if the <code>waitForTrailers</code> option\nis set for the <code>Http2Stream</code>.</p>\n<p><a id=\"ERR_HTTP2_UNSUPPORTED_PROTOCOL\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_TRAILERS_NOT_READY"
            },
            {
              "textRaw": "ERR_HTTP2_UNSUPPORTED_PROTOCOL",
              "name": "err_http2_unsupported_protocol",
              "desc": "<p><code>http2.connect()</code> was passed a URL that uses any protocol other than <code>http:</code> or\n<code>https:</code>.</p>\n<p><a id=\"ERR_INDEX_OUT_OF_RANGE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_HTTP2_UNSUPPORTED_PROTOCOL"
            },
            {
              "textRaw": "ERR_INDEX_OUT_OF_RANGE",
              "name": "err_index_out_of_range",
              "desc": "<p>A given index was out of the accepted range (e.g. negative offsets).</p>\n<p><a id=\"ERR_INSPECTOR_ALREADY_CONNECTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INDEX_OUT_OF_RANGE"
            },
            {
              "textRaw": "ERR_INSPECTOR_ALREADY_CONNECTED",
              "name": "err_inspector_already_connected",
              "desc": "<p>While using the <code>inspector</code> module, an attempt was made to connect when the\ninspector was already connected.</p>\n<p><a id=\"ERR_INSPECTOR_CLOSED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INSPECTOR_ALREADY_CONNECTED"
            },
            {
              "textRaw": "ERR_INSPECTOR_CLOSED",
              "name": "err_inspector_closed",
              "desc": "<p>While using the <code>inspector</code> module, an attempt was made to use the inspector\nafter the session had already closed.</p>\n<p><a id=\"ERR_INSPECTOR_NOT_AVAILABLE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INSPECTOR_CLOSED"
            },
            {
              "textRaw": "ERR_INSPECTOR_NOT_AVAILABLE",
              "name": "err_inspector_not_available",
              "desc": "<p>The <code>inspector</code> module is not available for use.</p>\n<p><a id=\"ERR_INSPECTOR_NOT_CONNECTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INSPECTOR_NOT_AVAILABLE"
            },
            {
              "textRaw": "ERR_INSPECTOR_NOT_CONNECTED",
              "name": "err_inspector_not_connected",
              "desc": "<p>While using the <code>inspector</code> module, an attempt was made to use the inspector\nbefore it was connected.</p>\n<p><a id=\"ERR_INVALID_ADDRESS_FAMILY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INSPECTOR_NOT_CONNECTED"
            },
            {
              "textRaw": "ERR_INVALID_ADDRESS_FAMILY",
              "name": "err_invalid_address_family",
              "desc": "<p>The provided address family is not understood by the Node.js API.</p>\n<p><a id=\"ERR_INVALID_ARG_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_ADDRESS_FAMILY"
            },
            {
              "textRaw": "ERR_INVALID_ARG_TYPE",
              "name": "err_invalid_arg_type",
              "desc": "<p>An argument of the wrong type was passed to a Node.js API.</p>\n<p><a id=\"ERR_INVALID_ARG_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_ARG_TYPE"
            },
            {
              "textRaw": "ERR_INVALID_ARG_VALUE",
              "name": "err_invalid_arg_value",
              "desc": "<p>An invalid or unsupported value was passed for a given argument.</p>\n<p><a id=\"ERR_INVALID_ARRAY_LENGTH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_ARG_VALUE"
            },
            {
              "textRaw": "ERR_INVALID_ARRAY_LENGTH",
              "name": "err_invalid_array_length",
              "desc": "<p>An array was not of the expected length or in a valid range.</p>\n<p><a id=\"ERR_INVALID_ASYNC_ID\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_ARRAY_LENGTH"
            },
            {
              "textRaw": "ERR_INVALID_ASYNC_ID",
              "name": "err_invalid_async_id",
              "desc": "<p>An invalid <code>asyncId</code> or <code>triggerAsyncId</code> was passed using <code>AsyncHooks</code>. An id\nless than -1 should never happen.</p>\n<p><a id=\"ERR_INVALID_BUFFER_SIZE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_ASYNC_ID"
            },
            {
              "textRaw": "ERR_INVALID_BUFFER_SIZE",
              "name": "err_invalid_buffer_size",
              "desc": "<p>A swap was performed on a <code>Buffer</code> but its size was not compatible with the\noperation.</p>\n<p><a id=\"ERR_INVALID_CALLBACK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_BUFFER_SIZE"
            },
            {
              "textRaw": "ERR_INVALID_CALLBACK",
              "name": "err_invalid_callback",
              "desc": "<p>A callback function was required but was not been provided to a Node.js API.</p>\n<p><a id=\"ERR_INVALID_CHAR\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_CALLBACK"
            },
            {
              "textRaw": "ERR_INVALID_CHAR",
              "name": "err_invalid_char",
              "desc": "<p>Invalid characters were detected in headers.</p>\n<p><a id=\"ERR_INVALID_CURSOR_POS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_CHAR"
            },
            {
              "textRaw": "ERR_INVALID_CURSOR_POS",
              "name": "err_invalid_cursor_pos",
              "desc": "<p>A cursor on a given stream cannot be moved to a specified row without a\nspecified column.</p>\n<p><a id=\"ERR_INVALID_DOMAIN_NAME\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_CURSOR_POS"
            },
            {
              "textRaw": "ERR_INVALID_DOMAIN_NAME",
              "name": "err_invalid_domain_name",
              "desc": "<p><code>hostname</code> can not be parsed from a provided URL.</p>\n<p><a id=\"ERR_INVALID_FD\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_DOMAIN_NAME"
            },
            {
              "textRaw": "ERR_INVALID_FD",
              "name": "err_invalid_fd",
              "desc": "<p>A file descriptor (&#39;fd&#39;) was not valid (e.g. it was a negative value).</p>\n<p><a id=\"ERR_INVALID_FD_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_FD"
            },
            {
              "textRaw": "ERR_INVALID_FD_TYPE",
              "name": "err_invalid_fd_type",
              "desc": "<p>A file descriptor (&#39;fd&#39;) type was not valid.</p>\n<p><a id=\"ERR_INVALID_FILE_URL_HOST\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_FD_TYPE"
            },
            {
              "textRaw": "ERR_INVALID_FILE_URL_HOST",
              "name": "err_invalid_file_url_host",
              "desc": "<p>A Node.js API that consumes <code>file:</code> URLs (such as certain functions in the\n<a href=\"fs.html\"><code>fs</code></a> module) encountered a file URL with an incompatible host. This\nsituation can only occur on Unix-like systems where only <code>localhost</code> or an empty\nhost is supported.</p>\n<p><a id=\"ERR_INVALID_FILE_URL_PATH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_FILE_URL_HOST"
            },
            {
              "textRaw": "ERR_INVALID_FILE_URL_PATH",
              "name": "err_invalid_file_url_path",
              "desc": "<p>A Node.js API that consumes <code>file:</code> URLs (such as certain functions in the\n<a href=\"fs.html\"><code>fs</code></a> module) encountered a file URL with an incompatible path. The exact\nsemantics for determining whether a path can be used is platform-dependent.</p>\n<p><a id=\"ERR_INVALID_HANDLE_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_FILE_URL_PATH"
            },
            {
              "textRaw": "ERR_INVALID_HANDLE_TYPE",
              "name": "err_invalid_handle_type",
              "desc": "<p>An attempt was made to send an unsupported &quot;handle&quot; over an IPC communication\nchannel to a child process. See <a href=\"child_process.html#child_process_subprocess_send_message_sendhandle_options_callback\"><code>subprocess.send()</code></a> and <a href=\"process.html#process_process_send_message_sendhandle_options_callback\"><code>process.send()</code></a> for\nmore information.</p>\n<p><a id=\"ERR_INVALID_HTTP_TOKEN\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_HANDLE_TYPE"
            },
            {
              "textRaw": "ERR_INVALID_HTTP_TOKEN",
              "name": "err_invalid_http_token",
              "desc": "<p>An invalid HTTP token was supplied.</p>\n<p><a id=\"ERR_INVALID_IP_ADDRESS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_HTTP_TOKEN"
            },
            {
              "textRaw": "ERR_INVALID_IP_ADDRESS",
              "name": "err_invalid_ip_address",
              "desc": "<p>An IP address is not valid.</p>\n<p><a id=\"ERR_INVALID_OPT_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_IP_ADDRESS"
            },
            {
              "textRaw": "ERR_INVALID_OPT_VALUE",
              "name": "err_invalid_opt_value",
              "desc": "<p>An invalid or unexpected value was passed in an options object.</p>\n<p><a id=\"ERR_INVALID_OPT_VALUE_ENCODING\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_OPT_VALUE"
            },
            {
              "textRaw": "ERR_INVALID_OPT_VALUE_ENCODING",
              "name": "err_invalid_opt_value_encoding",
              "desc": "<p>An invalid or unknown file encoding was passed.</p>\n<p><a id=\"ERR_INVALID_PERFORMANCE_MARK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_OPT_VALUE_ENCODING"
            },
            {
              "textRaw": "ERR_INVALID_PERFORMANCE_MARK",
              "name": "err_invalid_performance_mark",
              "desc": "<p>While using the Performance Timing API (<code>perf_hooks</code>), a performance mark is\ninvalid.</p>\n<p><a id=\"ERR_INVALID_PROTOCOL\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_PERFORMANCE_MARK"
            },
            {
              "textRaw": "ERR_INVALID_PROTOCOL",
              "name": "err_invalid_protocol",
              "desc": "<p>An invalid <code>options.protocol</code> was passed.</p>\n<p><a id=\"ERR_INVALID_REPL_EVAL_CONFIG\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_PROTOCOL"
            },
            {
              "textRaw": "ERR_INVALID_REPL_EVAL_CONFIG",
              "name": "err_invalid_repl_eval_config",
              "desc": "<p>Both <code>breakEvalOnSigint</code> and <code>eval</code> options were set in the REPL config, which\nis not supported.</p>\n<p><a id=\"ERR_INVALID_RETURN_VALUE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_REPL_EVAL_CONFIG"
            },
            {
              "textRaw": "ERR_INVALID_RETURN_VALUE",
              "name": "err_invalid_return_value",
              "desc": "<p>Thrown in case a function option does not return an expected value on execution.\nFor example when a function is expected to return a promise.</p>\n<p><a id=\"ERR_INVALID_SYNC_FORK_INPUT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_RETURN_VALUE"
            },
            {
              "textRaw": "ERR_INVALID_SYNC_FORK_INPUT",
              "name": "err_invalid_sync_fork_input",
              "desc": "<p>A <code>Buffer</code>, <code>Uint8Array</code> or <code>string</code> was provided as stdio input to a\nsynchronous fork. See the documentation for the <a href=\"child_process.html\"><code>child_process</code></a> module\nfor more information.</p>\n<p><a id=\"ERR_INVALID_THIS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_SYNC_FORK_INPUT"
            },
            {
              "textRaw": "ERR_INVALID_THIS",
              "name": "err_invalid_this",
              "desc": "<p>A Node.js API function was called with an incompatible <code>this</code> value.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\">const urlSearchParams = new URLSearchParams(&#39;foo=bar&amp;baz=new&#39;);\n\nconst buf = Buffer.alloc(1);\nurlSearchParams.has.call(buf, &#39;foo&#39;);\n// Throws a TypeError with code &#39;ERR_INVALID_THIS&#39;\n</code></pre>\n<p><a id=\"ERR_INVALID_TUPLE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_THIS"
            },
            {
              "textRaw": "ERR_INVALID_TUPLE",
              "name": "err_invalid_tuple",
              "desc": "<p>An element in the <code>iterable</code> provided to the <a href=\"url.html#url_the_whatwg_url_api\">WHATWG</a>\n<a href=\"url.html#url_constructor_new_urlsearchparams_iterable\"><code>URLSearchParams</code> constructor</a> did not\nrepresent a <code>[name, value]</code> tuple – that is, if an element is not iterable, or\ndoes not consist of exactly two elements.</p>\n<p><a id=\"ERR_INVALID_URI\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_TUPLE"
            },
            {
              "textRaw": "ERR_INVALID_URI",
              "name": "err_invalid_uri",
              "desc": "<p>An invalid URI was passed.</p>\n<p><a id=\"ERR_INVALID_URL\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_URI"
            },
            {
              "textRaw": "ERR_INVALID_URL",
              "name": "err_invalid_url",
              "desc": "<p>An invalid URL was passed to the <a href=\"url.html#url_the_whatwg_url_api\">WHATWG</a>\n<a href=\"url.html#url_constructor_new_url_input_base\"><code>URL</code> constructor</a> to be parsed. The thrown error object\ntypically has an additional property <code>&#39;input&#39;</code> that contains the URL that failed\nto parse.</p>\n<p><a id=\"ERR_INVALID_URL_SCHEME\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_URL"
            },
            {
              "textRaw": "ERR_INVALID_URL_SCHEME",
              "name": "err_invalid_url_scheme",
              "desc": "<p>An attempt was made to use a URL of an incompatible scheme (protocol) for a\nspecific purpose. It is only used in the <a href=\"url.html#url_the_whatwg_url_api\">WHATWG URL API</a> support in the\n<a href=\"fs.html\"><code>fs</code></a> module (which only accepts URLs with <code>&#39;file&#39;</code> scheme), but may be used\nin other Node.js APIs as well in the future.</p>\n<p><a id=\"ERR_IPC_CHANNEL_CLOSED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_INVALID_URL_SCHEME"
            },
            {
              "textRaw": "ERR_IPC_CHANNEL_CLOSED",
              "name": "err_ipc_channel_closed",
              "desc": "<p>An attempt was made to use an IPC communication channel that was already closed.</p>\n<p><a id=\"ERR_IPC_DISCONNECTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_IPC_CHANNEL_CLOSED"
            },
            {
              "textRaw": "ERR_IPC_DISCONNECTED",
              "name": "err_ipc_disconnected",
              "desc": "<p>An attempt was made to disconnect an IPC communication channel that was already\ndisconnected. See the documentation for the <a href=\"child_process.html\"><code>child_process</code></a> module\nfor more information.</p>\n<p><a id=\"ERR_IPC_ONE_PIPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_IPC_DISCONNECTED"
            },
            {
              "textRaw": "ERR_IPC_ONE_PIPE",
              "name": "err_ipc_one_pipe",
              "desc": "<p>An attempt was made to create a child Node.js process using more than one IPC\ncommunication channel. See the documentation for the <a href=\"child_process.html\"><code>child_process</code></a> module\nfor more information.</p>\n<p><a id=\"ERR_IPC_SYNC_FORK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_IPC_ONE_PIPE"
            },
            {
              "textRaw": "ERR_IPC_SYNC_FORK",
              "name": "err_ipc_sync_fork",
              "desc": "<p>An attempt was made to open an IPC communication channel with a synchronously\nforked Node.js process. See the documentation for the <a href=\"child_process.html\"><code>child_process</code></a> module\nfor more information.</p>\n<p><a id=\"ERR_MEMORY_ALLOCATION_FAILED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_IPC_SYNC_FORK"
            },
            {
              "textRaw": "ERR_MEMORY_ALLOCATION_FAILED",
              "name": "err_memory_allocation_failed",
              "desc": "<p>An attempt was made to allocate memory (usually in the C++ layer) but it\nfailed.</p>\n<p><a id=\"ERR_METHOD_NOT_IMPLEMENTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_MEMORY_ALLOCATION_FAILED"
            },
            {
              "textRaw": "ERR_METHOD_NOT_IMPLEMENTED",
              "name": "err_method_not_implemented",
              "desc": "<p>A method is required but not implemented.</p>\n<p><a id=\"ERR_MISSING_ARGS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_METHOD_NOT_IMPLEMENTED"
            },
            {
              "textRaw": "ERR_MISSING_ARGS",
              "name": "err_missing_args",
              "desc": "<p>A required argument of a Node.js API was not passed. This is only used for\nstrict compliance with the API specification (which in some cases may accept\n<code>func(undefined)</code> but not <code>func()</code>). In most native Node.js APIs,\n<code>func(undefined)</code> and <code>func()</code> are treated identically, and the\n<a href=\"#ERR_INVALID_ARG_TYPE\"><code>ERR_INVALID_ARG_TYPE</code></a> error code may be used instead.</p>\n<p><a id=\"ERR_MISSING_MODULE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_MISSING_ARGS"
            },
            {
              "textRaw": "ERR_MISSING_MODULE",
              "name": "err_missing_module",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>An <a href=\"esm.html\">ES6 module</a> could not be resolved.</p>\n<p><a id=\"ERR_MODULE_RESOLUTION_LEGACY\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_MISSING_MODULE"
            },
            {
              "textRaw": "ERR_MODULE_RESOLUTION_LEGACY",
              "name": "err_module_resolution_legacy",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>A failure occurred resolving imports in an <a href=\"esm.html\">ES6 module</a>.</p>\n<p><a id=\"ERR_MULTIPLE_CALLBACK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_MODULE_RESOLUTION_LEGACY"
            },
            {
              "textRaw": "ERR_MULTIPLE_CALLBACK",
              "name": "err_multiple_callback",
              "desc": "<p>A callback was called more than once.</p>\n<p>A callback is almost always meant to only be called once as the query\ncan either be fulfilled or rejected but not both at the same time. The latter\nwould be possible by calling a callback more than once.</p>\n<p><a id=\"ERR_NAPI_CONS_FUNCTION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_MULTIPLE_CALLBACK"
            },
            {
              "textRaw": "ERR_NAPI_CONS_FUNCTION",
              "name": "err_napi_cons_function",
              "desc": "<p>While using <code>N-API</code>, a constructor passed was not a function.</p>\n<p><a id=\"ERR_NAPI_INVALID_DATAVIEW_ARGS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NAPI_CONS_FUNCTION"
            },
            {
              "textRaw": "ERR_NAPI_INVALID_DATAVIEW_ARGS",
              "name": "err_napi_invalid_dataview_args",
              "desc": "<p>While calling <code>napi_create_dataview()</code>, a given <code>offset</code> was outside the bounds\nof the dataview or <code>offset + length</code> was larger than a length of given <code>buffer</code>.</p>\n<p><a id=\"ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NAPI_INVALID_DATAVIEW_ARGS"
            },
            {
              "textRaw": "ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT",
              "name": "err_napi_invalid_typedarray_alignment",
              "desc": "<p>While calling <code>napi_create_typedarray()</code>, the provided <code>offset</code> was not a\nmultiple of the element size.</p>\n<p><a id=\"ERR_NAPI_INVALID_TYPEDARRAY_LENGTH\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NAPI_INVALID_TYPEDARRAY_ALIGNMENT"
            },
            {
              "textRaw": "ERR_NAPI_INVALID_TYPEDARRAY_LENGTH",
              "name": "err_napi_invalid_typedarray_length",
              "desc": "<p>While calling <code>napi_create_typedarray()</code>, <code>(length * size_of_element) +\nbyte_offset</code> was larger than the length of given <code>buffer</code>.</p>\n<p><a id=\"ERR_NO_CRYPTO\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NAPI_INVALID_TYPEDARRAY_LENGTH"
            },
            {
              "textRaw": "ERR_NO_CRYPTO",
              "name": "err_no_crypto",
              "desc": "<p>An attempt was made to use crypto features while Node.js was not compiled with\nOpenSSL crypto support.</p>\n<p><a id=\"ERR_NO_ICU\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NO_CRYPTO"
            },
            {
              "textRaw": "ERR_NO_ICU",
              "name": "err_no_icu",
              "desc": "<p>An attempt was made to use features that require <a href=\"intl.html#intl_internationalization_support\">ICU</a>, but Node.js was not\ncompiled with ICU support.</p>\n<p><a id=\"ERR_NO_LONGER_SUPPORTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NO_ICU"
            },
            {
              "textRaw": "ERR_NO_LONGER_SUPPORTED",
              "name": "err_no_longer_supported",
              "desc": "<p>A Node.js API was called in an unsupported manner, such as\n<code>Buffer.write(string, encoding, offset[, length])</code>.</p>\n<p><a id=\"ERR_OUT_OF_RANGE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_NO_LONGER_SUPPORTED"
            },
            {
              "textRaw": "ERR_OUT_OF_RANGE",
              "name": "err_out_of_range",
              "desc": "<p>A given value is out of the accepted range.</p>\n<p><a id=\"ERR_REQUIRE_ESM\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_OUT_OF_RANGE"
            },
            {
              "textRaw": "ERR_REQUIRE_ESM",
              "name": "err_require_esm",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>An attempt was made to <code>require()</code> an <a href=\"esm.html\">ES6 module</a>.</p>\n<p><a id=\"ERR_SCRIPT_EXECUTION_INTERRUPTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_REQUIRE_ESM"
            },
            {
              "textRaw": "ERR_SCRIPT_EXECUTION_INTERRUPTED",
              "name": "err_script_execution_interrupted",
              "desc": "<p>Script execution was interrupted by <code>SIGINT</code> (For example, when Ctrl+C was\npressed).</p>\n<p><a id=\"ERR_SERVER_ALREADY_LISTEN\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SCRIPT_EXECUTION_INTERRUPTED"
            },
            {
              "textRaw": "ERR_SERVER_ALREADY_LISTEN",
              "name": "err_server_already_listen",
              "desc": "<p>The <a href=\"net.html#net_server_listen\"><code>server.listen()</code></a> method was called while a <code>net.Server</code> was already\nlistening. This applies to all instances of <code>net.Server</code>, including HTTP, HTTPS,\nand HTTP/2 <code>Server</code> instances.</p>\n<p><a id=\"ERR_SERVER_NOT_RUNNING\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SERVER_ALREADY_LISTEN"
            },
            {
              "textRaw": "ERR_SERVER_NOT_RUNNING",
              "name": "err_server_not_running",
              "desc": "<p>The <a href=\"net.html#net_server_close_callback\"><code>server.close()</code></a> method was called when a <code>net.Server</code> was not\nrunning. This applies to all instances of <code>net.Server</code>, including HTTP, HTTPS,\nand HTTP/2 <code>Server</code> instances.</p>\n<p><a id=\"ERR_SOCKET_ALREADY_BOUND\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SERVER_NOT_RUNNING"
            },
            {
              "textRaw": "ERR_SOCKET_ALREADY_BOUND",
              "name": "err_socket_already_bound",
              "desc": "<p>An attempt was made to bind a socket that has already been bound.</p>\n<p><a id=\"ERR_SOCKET_BAD_BUFFER_SIZE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_ALREADY_BOUND"
            },
            {
              "textRaw": "ERR_SOCKET_BAD_BUFFER_SIZE",
              "name": "err_socket_bad_buffer_size",
              "desc": "<p>An invalid (negative) size was passed for either the <code>recvBufferSize</code> or\n<code>sendBufferSize</code> options in <a href=\"dgram.html#dgram_dgram_createsocket_options_callback\"><code>dgram.createSocket()</code></a>.</p>\n<p><a id=\"ERR_SOCKET_BAD_PORT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_BAD_BUFFER_SIZE"
            },
            {
              "textRaw": "ERR_SOCKET_BAD_PORT",
              "name": "err_socket_bad_port",
              "desc": "<p>An API function expecting a port &gt; 0 and &lt; 65536 received an invalid value.</p>\n<p><a id=\"ERR_SOCKET_BAD_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_BAD_PORT"
            },
            {
              "textRaw": "ERR_SOCKET_BAD_TYPE",
              "name": "err_socket_bad_type",
              "desc": "<p>An API function expecting a socket type (<code>udp4</code> or <code>udp6</code>) received an invalid\nvalue.</p>\n<p><a id=\"ERR_SOCKET_BUFFER_SIZE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_BAD_TYPE"
            },
            {
              "textRaw": "ERR_SOCKET_BUFFER_SIZE",
              "name": "err_socket_buffer_size",
              "desc": "<p>While using <a href=\"dgram.html#dgram_dgram_createsocket_options_callback\"><code>dgram.createSocket()</code></a>, the size of the receive or send <code>Buffer</code>\ncould not be determined.</p>\n<p><a id=\"ERR_SOCKET_CANNOT_SEND\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_BUFFER_SIZE"
            },
            {
              "textRaw": "ERR_SOCKET_CANNOT_SEND",
              "name": "err_socket_cannot_send",
              "desc": "<p>Data could be sent on a socket.</p>\n<p><a id=\"ERR_SOCKET_CLOSED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_CANNOT_SEND"
            },
            {
              "textRaw": "ERR_SOCKET_CLOSED",
              "name": "err_socket_closed",
              "desc": "<p>An attempt was made to operate on an already closed socket.</p>\n<p><a id=\"ERR_SOCKET_DGRAM_NOT_RUNNING\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_CLOSED"
            },
            {
              "textRaw": "ERR_SOCKET_DGRAM_NOT_RUNNING",
              "name": "err_socket_dgram_not_running",
              "desc": "<p>A call was made and the UDP subsystem was not running.</p>\n<p><a id=\"ERR_STDERR_CLOSE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SOCKET_DGRAM_NOT_RUNNING"
            },
            {
              "textRaw": "ERR_STDERR_CLOSE",
              "name": "err_stderr_close",
              "desc": "<p>An attempt was made to close the <code>process.stderr</code> stream. By design, Node.js\ndoes not allow <code>stdout</code> or <code>stderr</code> streams to be closed by user code.</p>\n<p><a id=\"ERR_STDOUT_CLOSE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STDERR_CLOSE"
            },
            {
              "textRaw": "ERR_STDOUT_CLOSE",
              "name": "err_stdout_close",
              "desc": "<p>An attempt was made to close the <code>process.stdout</code> stream. By design, Node.js\ndoes not allow <code>stdout</code> or <code>stderr</code> streams to be closed by user code.</p>\n<p><a id=\"ERR_STREAM_CANNOT_PIPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STDOUT_CLOSE"
            },
            {
              "textRaw": "ERR_STREAM_CANNOT_PIPE",
              "name": "err_stream_cannot_pipe",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#stream_readable_pipe_destination_options\"><code>stream.pipe()</code></a> on a <a href=\"stream.html#stream_class_stream_writable\"><code>Writable</code></a> stream.</p>\n<p><a id=\"ERR_STREAM_NULL_VALUES\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_CANNOT_PIPE"
            },
            {
              "textRaw": "ERR_STREAM_NULL_VALUES",
              "name": "err_stream_null_values",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#stream_writable_write_chunk_encoding_callback\"><code>stream.write()</code></a> with a <code>null</code> chunk.</p>\n<p><a id=\"ERR_STREAM_PREMATURE_CLOSE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_NULL_VALUES"
            },
            {
              "textRaw": "ERR_STREAM_PREMATURE_CLOSE",
              "name": "err_stream_premature_close",
              "desc": "<p>An error returned by <code>stream.finished()</code> and <code>stream.pipeline()</code>, when a stream\nor a pipeline ends non gracefully with no explicit error.</p>\n<p><a id=\"ERR_STREAM_PUSH_AFTER_EOF\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_PREMATURE_CLOSE"
            },
            {
              "textRaw": "ERR_STREAM_PUSH_AFTER_EOF",
              "name": "err_stream_push_after_eof",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#stream_readable_push_chunk_encoding\"><code>stream.push()</code></a> after a <code>null</code>(EOF) had been\npushed to the stream.</p>\n<p><a id=\"ERR_STREAM_READ_NOT_IMPLEMENTED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_PUSH_AFTER_EOF"
            },
            {
              "textRaw": "ERR_STREAM_READ_NOT_IMPLEMENTED",
              "name": "err_stream_read_not_implemented",
              "desc": "<p>An attempt was made to use a readable stream that did not implement\n<a href=\"stream.html#stream_readable_read_size_1\"><code>readable._read()</code></a>.</p>\n<p><a id=\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_READ_NOT_IMPLEMENTED"
            },
            {
              "textRaw": "ERR_STREAM_UNSHIFT_AFTER_END_EVENT",
              "name": "err_stream_unshift_after_end_event",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#stream_readable_unshift_chunk\"><code>stream.unshift()</code></a> after the <code>&#39;end&#39;</code> event was\nemitted.</p>\n<p><a id=\"ERR_STREAM_WRAP\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_UNSHIFT_AFTER_END_EVENT"
            },
            {
              "textRaw": "ERR_STREAM_WRAP",
              "name": "err_stream_wrap",
              "desc": "<p>Prevents an abort if a string decoder was set on the Socket or if the decoder\nis in <code>objectMode</code>.</p>\n<p>Example</p>\n<pre><code class=\"lang-js\">const Socket = require(&#39;net&#39;).Socket;\nconst instance = new Socket();\n\ninstance.setEncoding(&#39;utf8&#39;);\n</code></pre>\n<p><a id=\"ERR_STREAM_WRITE_AFTER_END\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_WRAP"
            },
            {
              "textRaw": "ERR_STREAM_WRITE_AFTER_END",
              "name": "err_stream_write_after_end",
              "desc": "<p>An attempt was made to call <a href=\"stream.html#stream_writable_write_chunk_encoding_callback\"><code>stream.write()</code></a> after <code>stream.end()</code> has been\ncalled.</p>\n<p><a id=\"ERR_SYSTEM_ERROR\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_WRITE_AFTER_END"
            },
            {
              "textRaw": "ERR_SYSTEM_ERROR",
              "name": "err_system_error",
              "desc": "<p>An unspecified or non-specific system error has occurred within the Node.js\nprocess. The error object will have an <code>err.info</code> object property with\nadditional details.</p>\n<p><a id=\"ERR_STREAM_DESTROYED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_SYSTEM_ERROR"
            },
            {
              "textRaw": "ERR_STREAM_DESTROYED",
              "name": "err_stream_destroyed",
              "desc": "<p>A stream method was called that cannot complete because the stream was\ndestroyed using <code>stream.destroy()</code>.</p>\n<p><a id=\"ERR_STRING_TOO_LONG\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STREAM_DESTROYED"
            },
            {
              "textRaw": "ERR_STRING_TOO_LONG",
              "name": "err_string_too_long",
              "desc": "<p>An attempt has been made to create a string longer than the maximum allowed\nlength.</p>\n<p><a id=\"ERR_TLS_CERT_ALTNAME_INVALID\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_STRING_TOO_LONG"
            },
            {
              "textRaw": "ERR_TLS_CERT_ALTNAME_INVALID",
              "name": "err_tls_cert_altname_invalid",
              "desc": "<p>While using TLS, the hostname/IP of the peer did not match any of the\n<code>subjectAltNames</code> in its certificate.</p>\n<p><a id=\"ERR_TLS_DH_PARAM_SIZE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_CERT_ALTNAME_INVALID"
            },
            {
              "textRaw": "ERR_TLS_DH_PARAM_SIZE",
              "name": "err_tls_dh_param_size",
              "desc": "<p>While using TLS, the parameter offered for the Diffie-Hellman (<code>DH</code>)\nkey-agreement protocol is too small. By default, the key length must be greater\nthan or equal to 1024 bits to avoid vulnerabilities, even though it is strongly\nrecommended to use 2048 bits or larger for stronger security.</p>\n<p><a id=\"ERR_TLS_HANDSHAKE_TIMEOUT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_DH_PARAM_SIZE"
            },
            {
              "textRaw": "ERR_TLS_HANDSHAKE_TIMEOUT",
              "name": "err_tls_handshake_timeout",
              "desc": "<p>A TLS/SSL handshake timed out. In this case, the server must also abort the\nconnection.</p>\n<p><a id=\"ERR_TLS_REQUIRED_SERVER_NAME\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_HANDSHAKE_TIMEOUT"
            },
            {
              "textRaw": "ERR_TLS_REQUIRED_SERVER_NAME",
              "name": "err_tls_required_server_name",
              "desc": "<p>While using TLS, the <code>server.addContext()</code> method was called without providing\na hostname in the first parameter.</p>\n<p><a id=\"ERR_TLS_SESSION_ATTACK\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_REQUIRED_SERVER_NAME"
            },
            {
              "textRaw": "ERR_TLS_SESSION_ATTACK",
              "name": "err_tls_session_attack",
              "desc": "<p>An excessive amount of TLS renegotiations is detected, which is a potential\nvector for denial-of-service attacks.</p>\n<p><a id=\"ERR_TLS_SNI_FROM_SERVER\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_SESSION_ATTACK"
            },
            {
              "textRaw": "ERR_TLS_SNI_FROM_SERVER",
              "name": "err_tls_sni_from_server",
              "desc": "<p>An attempt was made to issue Server Name Indication from a TLS server-side\nsocket, which is only valid from a client.</p>\n<p><a id=\"ERR_TLS_RENEGOTIATION_DISABLED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_SNI_FROM_SERVER"
            },
            {
              "textRaw": "ERR_TLS_RENEGOTIATION_DISABLED",
              "name": "err_tls_renegotiation_disabled",
              "desc": "<p>An attempt was made to renegotiate TLS on a socket instance with TLS disabled.</p>\n<p><a id=\"ERR_TRACE_EVENTS_CATEGORY_REQUIRED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TLS_RENEGOTIATION_DISABLED"
            },
            {
              "textRaw": "ERR_TRACE_EVENTS_CATEGORY_REQUIRED",
              "name": "err_trace_events_category_required",
              "desc": "<p>The <code>trace_events.createTracing()</code> method requires at least one trace event\ncategory.</p>\n<p><a id=\"ERR_TRACE_EVENTS_UNAVAILABLE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TRACE_EVENTS_CATEGORY_REQUIRED"
            },
            {
              "textRaw": "ERR_TRACE_EVENTS_UNAVAILABLE",
              "name": "err_trace_events_unavailable",
              "desc": "<p>The <code>trace_events</code> module could not be loaded because Node.js was compiled with\nthe <code>--without-v8-platform</code> flag.</p>\n<p><a id=\"ERR_TRANSFORM_ALREADY_TRANSFORMING\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TRACE_EVENTS_UNAVAILABLE"
            },
            {
              "textRaw": "ERR_TRANSFORM_ALREADY_TRANSFORMING",
              "name": "err_transform_already_transforming",
              "desc": "<p>A <code>Transform</code> stream finished while it was still transforming.</p>\n<p><a id=\"ERR_TRANSFORM_WITH_LENGTH_0\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TRANSFORM_ALREADY_TRANSFORMING"
            },
            {
              "textRaw": "ERR_TRANSFORM_WITH_LENGTH_0",
              "name": "err_transform_with_length_0",
              "desc": "<p>A <code>Transform</code> stream finished with data still in the write buffer.</p>\n<p><a id=\"ERR_TTY_INIT_FAILED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TRANSFORM_WITH_LENGTH_0"
            },
            {
              "textRaw": "ERR_TTY_INIT_FAILED",
              "name": "err_tty_init_failed",
              "desc": "<p>The initialization of a TTY failed due to a system error.</p>\n<p><a id=\"ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_TTY_INIT_FAILED"
            },
            {
              "textRaw": "ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET",
              "name": "err_uncaught_exception_capture_already_set",
              "desc": "<p><a href=\"process.html#process_process_setuncaughtexceptioncapturecallback_fn\"><code>process.setUncaughtExceptionCaptureCallback()</code></a> was called twice,\nwithout first resetting the callback to <code>null</code>.</p>\n<p>This error is designed to prevent accidentally overwriting a callback registered\nfrom another module.</p>\n<p><a id=\"ERR_UNESCAPED_CHARACTERS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNCAUGHT_EXCEPTION_CAPTURE_ALREADY_SET"
            },
            {
              "textRaw": "ERR_UNESCAPED_CHARACTERS",
              "name": "err_unescaped_characters",
              "desc": "<p>A string that contained unescaped characters was received.</p>\n<p><a id=\"ERR_UNHANDLED_ERROR\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNESCAPED_CHARACTERS"
            },
            {
              "textRaw": "ERR_UNHANDLED_ERROR",
              "name": "err_unhandled_error",
              "desc": "<p>An unhandled error occurred (for instance, when an <code>&#39;error&#39;</code> event is emitted\nby an <a href=\"events.html#events_class_eventemitter\"><code>EventEmitter</code></a> but an <code>&#39;error&#39;</code> handler is not registered).</p>\n<p><a id=\"ERR_UNKNOWN_ENCODING\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNHANDLED_ERROR"
            },
            {
              "textRaw": "ERR_UNKNOWN_ENCODING",
              "name": "err_unknown_encoding",
              "desc": "<p>An invalid or unknown encoding option was passed to an API.</p>\n<p><a id=\"ERR_UNKNOWN_FILE_EXTENSION\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNKNOWN_ENCODING"
            },
            {
              "textRaw": "ERR_UNKNOWN_FILE_EXTENSION",
              "name": "err_unknown_file_extension",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>An attempt was made to load a module with an unknown or unsupported file\nextension.</p>\n<p><a id=\"ERR_UNKNOWN_MODULE_FORMAT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNKNOWN_FILE_EXTENSION"
            },
            {
              "textRaw": "ERR_UNKNOWN_MODULE_FORMAT",
              "name": "err_unknown_module_format",
              "stability": 1,
              "stabilityText": "Experimental",
              "desc": "<p>An attempt was made to load a module with an unknown or unsupported format.</p>\n<p><a id=\"ERR_UNKNOWN_SIGNAL\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNKNOWN_MODULE_FORMAT"
            },
            {
              "textRaw": "ERR_UNKNOWN_SIGNAL",
              "name": "err_unknown_signal",
              "desc": "<p>An invalid or unknown process signal was passed to an API expecting a valid\nsignal (such as <a href=\"child_process.html#child_process_subprocess_kill_signal\"><code>subprocess.kill()</code></a>).</p>\n<p><a id=\"ERR_UNKNOWN_STDIN_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNKNOWN_SIGNAL"
            },
            {
              "textRaw": "ERR_UNKNOWN_STDIN_TYPE",
              "name": "err_unknown_stdin_type",
              "desc": "<p>An attempt was made to launch a Node.js process with an unknown <code>stdin</code> file\ntype. This error is usually an indication of a bug within Node.js itself,\nalthough it is possible for user code to trigger it.</p>\n<p><a id=\"ERR_UNKNOWN_STREAM_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNKNOWN_STDIN_TYPE"
            },
            {
              "textRaw": "ERR_UNKNOWN_STREAM_TYPE",
              "name": "err_unknown_stream_type",
              "desc": "<p>An attempt was made to launch a Node.js process with an unknown <code>stdout</code> or\n<code>stderr</code> file type. This error is usually an indication of a bug within Node.js\nitself, although it is possible for user code to trigger it.</p>\n<p><a id=\"ERR_V8BREAKITERATOR\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_UNKNOWN_STREAM_TYPE"
            },
            {
              "textRaw": "ERR_V8BREAKITERATOR",
              "name": "err_v8breakiterator",
              "desc": "<p>The V8 <code>BreakIterator</code> API was used but the full ICU data set is not installed.</p>\n<p><a id=\"ERR_VALID_PERFORMANCE_ENTRY_TYPE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_V8BREAKITERATOR"
            },
            {
              "textRaw": "ERR_VALID_PERFORMANCE_ENTRY_TYPE",
              "name": "err_valid_performance_entry_type",
              "desc": "<p>While using the Performance Timing API (<code>perf_hooks</code>), no valid performance\nentry types were found.</p>\n<p><a id=\"ERR_VALUE_OUT_OF_RANGE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VALID_PERFORMANCE_ENTRY_TYPE"
            },
            {
              "textRaw": "ERR_VALUE_OUT_OF_RANGE",
              "name": "err_value_out_of_range",
              "desc": "<p>Superseded by <code>ERR_OUT_OF_RANGE</code>.</p>\n<p><a id=\"ERR_VM_MODULE_ALREADY_LINKED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VALUE_OUT_OF_RANGE"
            },
            {
              "textRaw": "ERR_VM_MODULE_ALREADY_LINKED",
              "name": "err_vm_module_already_linked",
              "desc": "<p>The module attempted to be linked is not eligible for linking, because of one of\nthe following reasons:</p>\n<ul>\n<li>It has already been linked (<code>linkingStatus</code> is <code>&#39;linked&#39;</code>)</li>\n<li>It is being linked (<code>linkingStatus</code> is <code>&#39;linking&#39;</code>)</li>\n<li>Linking has failed for this module (<code>linkingStatus</code> is <code>&#39;errored&#39;</code>)</li>\n</ul>\n<p><a id=\"ERR_VM_MODULE_DIFFERENT_CONTEXT\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VM_MODULE_ALREADY_LINKED"
            },
            {
              "textRaw": "ERR_VM_MODULE_DIFFERENT_CONTEXT",
              "name": "err_vm_module_different_context",
              "desc": "<p>The module being returned from the linker function is from a different context\nthan the parent module. Linked modules must share the same context.</p>\n<p><a id=\"ERR_VM_MODULE_LINKING_ERRORED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VM_MODULE_DIFFERENT_CONTEXT"
            },
            {
              "textRaw": "ERR_VM_MODULE_LINKING_ERRORED",
              "name": "err_vm_module_linking_errored",
              "desc": "<p>The linker function returned a module for which linking has failed.</p>\n<p><a id=\"ERR_VM_MODULE_NOT_LINKED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VM_MODULE_LINKING_ERRORED"
            },
            {
              "textRaw": "ERR_VM_MODULE_NOT_LINKED",
              "name": "err_vm_module_not_linked",
              "desc": "<p>The module must be successfully linked before instantiation.</p>\n<p><a id=\"ERR_VM_MODULE_NOT_MODULE\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VM_MODULE_NOT_LINKED"
            },
            {
              "textRaw": "ERR_VM_MODULE_NOT_MODULE",
              "name": "err_vm_module_not_module",
              "desc": "<p>The fulfilled value of a linking promise is not a <code>vm.Module</code> object.</p>\n<p><a id=\"ERR_VM_MODULE_STATUS\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VM_MODULE_NOT_MODULE"
            },
            {
              "textRaw": "ERR_VM_MODULE_STATUS",
              "name": "err_vm_module_status",
              "desc": "<p>The current module&#39;s status does not allow for this operation. The specific\nmeaning of the error depends on the specific function.</p>\n<p><a id=\"ERR_ZLIB_INITIALIZATION_FAILED\"></a></p>\n",
              "type": "module",
              "displayName": "ERR_VM_MODULE_STATUS"
            },
            {
              "textRaw": "ERR_ZLIB_INITIALIZATION_FAILED",
              "name": "err_zlib_initialization_failed",
              "desc": "<p>Creation of a <a href=\"zlib.html\"><code>zlib</code></a> object failed due to incorrect configuration.</p>\n",
              "type": "module",
              "displayName": "ERR_ZLIB_INITIALIZATION_FAILED"
            }
          ],
          "type": "misc",
          "displayName": "Node.js Error Codes"
        }
      ],
      "classes": [
        {
          "textRaw": "Class: Error",
          "type": "class",
          "name": "Error",
          "desc": "<p>A generic JavaScript <code>Error</code> object that does not denote any specific\ncircumstance of why the error occurred. <code>Error</code> objects capture a &quot;stack trace&quot;\ndetailing the point in the code at which the <code>Error</code> was instantiated, and may\nprovide a text description of the error.</p>\n<p>For crypto only, <code>Error</code> objects will include the OpenSSL error stack in a\nseparate property called <code>opensslErrorStack</code> if it is available when the error\nis thrown.</p>\n<p>All errors generated by Node.js, including all System and JavaScript errors,\nwill either be instances of, or inherit from, the <code>Error</code> class.</p>\n",
          "methods": [
            {
              "textRaw": "Error.captureStackTrace(targetObject[, constructorOpt])",
              "type": "method",
              "name": "captureStackTrace",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`targetObject` {Object} ",
                      "name": "targetObject",
                      "type": "Object"
                    },
                    {
                      "textRaw": "`constructorOpt` {Function} ",
                      "name": "constructorOpt",
                      "type": "Function",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "targetObject"
                    },
                    {
                      "name": "constructorOpt",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>Creates a <code>.stack</code> property on <code>targetObject</code>, which when accessed returns\na string representing the location in the code at which\n<code>Error.captureStackTrace()</code> was called.</p>\n<pre><code class=\"lang-js\">const myObject = {};\nError.captureStackTrace(myObject);\nmyObject.stack;  // similar to `new Error().stack`\n</code></pre>\n<p>The first line of the trace will be prefixed with\n<code>${myObject.name}: ${myObject.message}</code>.</p>\n<p>The optional <code>constructorOpt</code> argument accepts a function. If given, all frames\nabove <code>constructorOpt</code>, including <code>constructorOpt</code>, will be omitted from the\ngenerated stack trace.</p>\n<p>The <code>constructorOpt</code> argument is useful for hiding implementation\ndetails of error generation from an end user. For instance:</p>\n<pre><code class=\"lang-js\">function MyError() {\n  Error.captureStackTrace(this, MyError);\n}\n\n// Without passing MyError to captureStackTrace, the MyError\n// frame would show up in the .stack property. By passing\n// the constructor, we omit that frame, and retain all frames below it.\nnew MyError().stack;\n</code></pre>\n"
            }
          ],
          "properties": [
            {
              "textRaw": "`stackTraceLimit` {number} ",
              "type": "number",
              "name": "stackTraceLimit",
              "desc": "<p>The <code>Error.stackTraceLimit</code> property specifies the number of stack frames\ncollected by a stack trace (whether generated by <code>new Error().stack</code> or\n<code>Error.captureStackTrace(obj)</code>).</p>\n<p>The default value is <code>10</code> but may be set to any valid JavaScript number. Changes\nwill affect any stack trace captured <em>after</em> the value has been changed.</p>\n<p>If set to a non-number value, or set to a negative number, stack traces will\nnot capture any frames.</p>\n"
            },
            {
              "textRaw": "`code` {string} ",
              "type": "string",
              "name": "code",
              "desc": "<p>The <code>error.code</code> property is a string label that identifies the kind of error.\nSee <a href=\"#nodejs-error-codes\">Node.js Error Codes</a> for details about specific codes.</p>\n"
            },
            {
              "textRaw": "`message` {string} ",
              "type": "string",
              "name": "message",
              "desc": "<p>The <code>error.message</code> property is the string description of the error as set by\ncalling <code>new Error(message)</code>. The <code>message</code> passed to the constructor will also\nappear in the first line of the stack trace of the <code>Error</code>, however changing\nthis property after the <code>Error</code> object is created <em>may not</em> change the first\nline of the stack trace (for example, when <code>error.stack</code> is read before this\nproperty is changed).</p>\n<pre><code class=\"lang-js\">const err = new Error(&#39;The message&#39;);\nconsole.error(err.message);\n// Prints: The message\n</code></pre>\n"
            },
            {
              "textRaw": "`stack` {string} ",
              "type": "string",
              "name": "stack",
              "desc": "<p>The <code>error.stack</code> property is a string describing the point in the code at which\nthe <code>Error</code> was instantiated.</p>\n<pre><code class=\"lang-txt\">Error: Things keep happening!\n   at /home/gbusey/file.js:525:2\n   at Frobnicator.refrobulate (/home/gbusey/business-logic.js:424:21)\n   at Actor.&lt;anonymous&gt; (/home/gbusey/actors.js:400:8)\n   at increaseSynergy (/home/gbusey/actors.js:701:6)\n</code></pre>\n<p>The first line is formatted as <code>&lt;error class name&gt;: &lt;error message&gt;</code>, and\nis followed by a series of stack frames (each line beginning with &quot;at &quot;).\nEach frame describes a call site within the code that lead to the error being\ngenerated. V8 attempts to display a name for each function (by variable name,\nfunction name, or object method name), but occasionally it will not be able to\nfind a suitable name. If V8 cannot determine a name for the function, only\nlocation information will be displayed for that frame. Otherwise, the\ndetermined function name will be displayed with location information appended\nin parentheses.</p>\n<p>Frames are only generated for JavaScript functions. If, for example, execution\nsynchronously passes through a C++ addon function called <code>cheetahify</code> which\nitself calls a JavaScript function, the frame representing the <code>cheetahify</code> call\nwill not be present in the stack traces:</p>\n<pre><code class=\"lang-js\">const cheetahify = require(&#39;./native-binding.node&#39;);\n\nfunction makeFaster() {\n  // cheetahify *synchronously* calls speedy.\n  cheetahify(function speedy() {\n    throw new Error(&#39;oh no!&#39;);\n  });\n}\n\nmakeFaster();\n// will throw:\n//   /home/gbusey/file.js:6\n//       throw new Error(&#39;oh no!&#39;);\n//           ^\n//   Error: oh no!\n//       at speedy (/home/gbusey/file.js:6:11)\n//       at makeFaster (/home/gbusey/file.js:5:3)\n//       at Object.&lt;anonymous&gt; (/home/gbusey/file.js:10:1)\n//       at Module._compile (module.js:456:26)\n//       at Object.Module._extensions..js (module.js:474:10)\n//       at Module.load (module.js:356:32)\n//       at Function.Module._load (module.js:312:12)\n//       at Function.Module.runMain (module.js:497:10)\n//       at startup (node.js:119:16)\n//       at node.js:906:3\n</code></pre>\n<p>The location information will be one of:</p>\n<ul>\n<li><code>native</code>, if the frame represents a call internal to V8 (as in <code>[].forEach</code>).</li>\n<li><code>plain-filename.js:line:column</code>, if the frame represents a call internal\n to Node.js.</li>\n<li><code>/absolute/path/to/file.js:line:column</code>, if the frame represents a call in\na user program, or its dependencies.</li>\n</ul>\n<p>The string representing the stack trace is lazily generated when the\n<code>error.stack</code> property is <strong>accessed</strong>.</p>\n<p>The number of frames captured by the stack trace is bounded by the smaller of\n<code>Error.stackTraceLimit</code> or the number of available frames on the current event\nloop tick.</p>\n<p>System-level errors are generated as augmented <code>Error</code> instances, which are\ndetailed <a href=\"#errors_system_errors\">here</a>.</p>\n"
            }
          ],
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`message` {string} ",
                  "name": "message",
                  "type": "string"
                }
              ],
              "desc": "<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the\nprovided text message. If an object is passed as <code>message</code>, the text message\nis generated by calling <code>message.toString()</code>. The <code>error.stack</code> property will\nrepresent the point in the code at which <code>new Error()</code> was called. Stack traces\nare dependent on <a href=\"https://github.com/v8/v8/wiki/Stack-Trace-API\">V8&#39;s stack trace API</a>. Stack traces extend only to either\n(a) the beginning of <em>synchronous code execution</em>, or (b) the number of frames\ngiven by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>\n"
            },
            {
              "params": [
                {
                  "name": "message"
                }
              ],
              "desc": "<p>Creates a new <code>Error</code> object and sets the <code>error.message</code> property to the\nprovided text message. If an object is passed as <code>message</code>, the text message\nis generated by calling <code>message.toString()</code>. The <code>error.stack</code> property will\nrepresent the point in the code at which <code>new Error()</code> was called. Stack traces\nare dependent on <a href=\"https://github.com/v8/v8/wiki/Stack-Trace-API\">V8&#39;s stack trace API</a>. Stack traces extend only to either\n(a) the beginning of <em>synchronous code execution</em>, or (b) the number of frames\ngiven by the property <code>Error.stackTraceLimit</code>, whichever is smaller.</p>\n"
            }
          ]
        },
        {
          "textRaw": "Class: AssertionError",
          "type": "class",
          "name": "AssertionError",
          "desc": "<p>A subclass of <code>Error</code> that indicates the failure of an assertion. For details,\nsee <a href=\"assert.html#assert_class_assert_assertionerror\"><code>Class: assert.AssertionError</code></a>.</p>\n"
        },
        {
          "textRaw": "Class: RangeError",
          "type": "class",
          "name": "RangeError",
          "desc": "<p>A subclass of <code>Error</code> that indicates that a provided argument was not within the\nset or range of acceptable values for a function; whether that is a numeric\nrange, or outside the set of options for a given function parameter.</p>\n<pre><code class=\"lang-js\">require(&#39;net&#39;).connect(-1);\n// throws &quot;RangeError: &quot;port&quot; option should be &gt;= 0 and &lt; 65536: -1&quot;\n</code></pre>\n<p>Node.js will generate and throw <code>RangeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>\n"
        },
        {
          "textRaw": "Class: ReferenceError",
          "type": "class",
          "name": "ReferenceError",
          "desc": "<p>A subclass of <code>Error</code> that indicates that an attempt is being made to access a\nvariable that is not defined. Such errors commonly indicate typos in code, or\nan otherwise broken program.</p>\n<p>While client code may generate and propagate these errors, in practice, only V8\nwill do so.</p>\n<pre><code class=\"lang-js\">doesNotExist;\n// throws ReferenceError, doesNotExist is not a variable in this program.\n</code></pre>\n<p>Unless an application is dynamically generating and running code,\n<code>ReferenceError</code> instances should always be considered a bug in the code\nor its dependencies.</p>\n"
        },
        {
          "textRaw": "Class: SyntaxError",
          "type": "class",
          "name": "SyntaxError",
          "desc": "<p>A subclass of <code>Error</code> that indicates that a program is not valid JavaScript.\nThese errors may only be generated and propagated as a result of code\nevaluation. Code evaluation may happen as a result of <code>eval</code>, <code>Function</code>,\n<code>require</code>, or <a href=\"vm.html\">vm</a>. These errors are almost always indicative of a broken\nprogram.</p>\n<pre><code class=\"lang-js\">try {\n  require(&#39;vm&#39;).runInThisContext(&#39;binary ! isNotOk&#39;);\n} catch (err) {\n  // err will be a SyntaxError\n}\n</code></pre>\n<p><code>SyntaxError</code> instances are unrecoverable in the context that created them –\nthey may only be caught by other contexts.</p>\n"
        },
        {
          "textRaw": "Class: TypeError",
          "type": "class",
          "name": "TypeError",
          "desc": "<p>A subclass of <code>Error</code> that indicates that a provided argument is not an\nallowable type. For example, passing a function to a parameter which expects a\nstring would be considered a <code>TypeError</code>.</p>\n<pre><code class=\"lang-js\">require(&#39;url&#39;).parse(() =&gt; { });\n// throws TypeError, since it expected a string\n</code></pre>\n<p>Node.js will generate and throw <code>TypeError</code> instances <em>immediately</em> as a form\nof argument validation.</p>\n"
        }
      ]
    }
  ]
}

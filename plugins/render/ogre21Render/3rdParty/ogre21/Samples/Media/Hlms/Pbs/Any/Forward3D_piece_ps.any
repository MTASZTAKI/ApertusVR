@property( hlms_forwardplus )

@property( hlms_enable_decals )
/// Perform decals *after* sampling the diffuse colour.
@piece( forwardPlusDoDecals )
	@insertpiece( forward3dHeader )

	@property( hlms_decals_normals && normal_map )
		float3 finalDecalTsNormal = float3( 0.0f, 0.0f, 1.0f );
	@end
	@property( hlms_decals_emissive )
		float3 finalDecalEmissive = float3( 0.0f, 0.0f, 0.0f );
	@end

	ushort numLightsInGrid = bufferFetch1( f3dGrid, int(sampleOffset + @value(hlms_forwardplus_decals_slot_offset)u) );

	@property( hlms_forwardplus_debug )totalNumLightsInGrid += numLightsInGrid;@end

	float3 posDdx = OGRE_ddx( inPs.pos.xyz );
	float3 posDdy = OGRE_ddy( inPs.pos.xyz );

	for( uint i=0u; i<numLightsInGrid; ++i )
	{
		//Get the light index
		uint idx = bufferFetch1( f3dGrid, int(sampleOffset + i + @value(hlms_forwardplus_decals_slot_offset)u + 1u) );

		float4 invWorldView0	= bufferFetch( f3dLightList, int(idx) ).xyzw;
		float4 invWorldView1	= bufferFetch( f3dLightList, int(idx + 1u) ).xyzw;
		float4 invWorldView2	= bufferFetch( f3dLightList, int(idx + 2u) ).xyzw;
		float4 texIndices		= bufferFetch( f3dLightList, int(idx + 3u) ).xyzw;

		float3 localPos;
		localPos.x = dot( invWorldView0.xyzw, float4( inPs.pos.xyz, 1.0f ) );
		localPos.y = dot( invWorldView1.xyzw, float4( inPs.pos.xyz, 1.0f ) );
		localPos.z = dot( invWorldView2.xyzw, float4( inPs.pos.xyz, 1.0f ) );

		float2 decalUvDdx;
		decalUvDdx.x = dot( invWorldView0.xyz, posDdx.xyz );
		decalUvDdx.y = dot( invWorldView2.xyz, posDdx.xyz );
		float2 decalUvDdy;
		decalUvDdy.x = dot( invWorldView0.xyz, posDdy.xyz );
		decalUvDdy.y = dot( invWorldView2.xyz, posDdy.xyz );

		float2 decalUV = localPos.xz + 0.5f;

		@property( hlms_decals_diffuse )
			ushort decalDiffuseIdx = floatBitsToUint( texIndices.x ) & 0xFFFFu;
			float4 decalDiffuse = OGRE_SampleArray2DGrad( decalsDiffuseTex, decalsSampler, decalUV.xy,
														  decalDiffuseIdx, decalUvDdx, decalUvDdy ).xyzw;
		@end
		@property( hlms_decals_normals && normal_map )
			ushort decalNormalsIdx = floatBitsToUint( texIndices.x ) >> 16u;
			float2 decalNormals = OGRE_SampleArray2DGrad( decalsNormalsTex, decalsSampler, decalUV.xy,
														  decalNormalsIdx, decalUvDdx, decalUvDdy ).xy;
		@end
		@property( hlms_decals_emissive )
			ushort decalEmissiveIdx = floatBitsToUint( texIndices.y ) & 0xFFFFu;
			float3 decalEmissive = OGRE_SampleArray2DGrad( decalsEmissiveTex, decalsSampler, decalUV.xy,
														   decalEmissiveIdx, decalUvDdx, decalUvDdy ).xyz;
		@end

		@property( hlms_decals_diffuse && (hlms_decals_normals || hlms_decals_emissive) )
			bool ignoreAlphaDiffuse = (floatBitsToUint( texIndices.y ) & 0xFFFF0000u) != 0u;
		@end

		//Mask the decal entirely if localPos is outside the debox
		float3 absLocalPos = abs( localPos.xyz );
		bool isOutsideDecal = absLocalPos.x > 0.5f || absLocalPos.y > 0.5f || absLocalPos.z > 0.5f;

		//Mask away objects looking away from the decal. Please note that inPs.normal is not unit-length
		//and is before any TBN for normal mapping. In other words it's the geometric normal
		//geomNormal is not available because it gets decalred after decals run
		//We assume invWorldView is orthogonal, thus the transpose = inverse, hance invWorldView1.xyz
		//works as the decal's direction
		float3 decalDir = float3( invWorldView1.xyz );
		isOutsideDecal = dot( decalDir.xyz, inPs.normal.xyz ) <= 0.0 ? true : isOutsideDecal;

		float decalMask;

		@property( hlms_decals_diffuse )
			decalMask = isOutsideDecal ? 0.0f : decalDiffuse.w;
			float decalMetalness = texIndices.z;
			float3 decalF0 = lerp( float3( 0.03f, 0.03f, 0.03f ), decalDiffuse.xyz, decalMetalness );
			decalDiffuse.xyz = decalDiffuse.xyz - decalDiffuse.xyz * decalMetalness;

			diffuseCol.xyz  = lerp( diffuseCol.xyz, decalDiffuse.xyz * 0.318309886f, decalMask );
			ROUGHNESS		= lerp( ROUGHNESS, texIndices.w, decalMask );

			@property( !metallic_workflow && !fresnel_workflow && !fresnel_scalar )
				specularCol	= lerp( specularCol.xyz, decalF0, decalMask );
				F0			= lerp( F0, decalMetalness, decalMask );
			@end
			@property( metallic_workflow || fresnel_workflow || fresnel_scalar )
				specularCol	= lerp( specularCol.xyz, float3( 1.0f, 1.0f, 1.0f ), decalMask );
				F0.xyz		= lerp( F0.xyz, decalF0.xyz, decalMask );
			@end
		@end
		@property( hlms_decals_normals || hlms_decals_emissive )
			@property( hlms_decals_diffuse )
				decalMask = ignoreAlphaDiffuse ? 1.0f : decalMask;
				decalMask = isOutsideDecal ? 0.0f : decalMask;
			@end
			@property( !hlms_decals_diffuse )
				decalMask = isOutsideDecal ? 0.0f : 1.0f;
			@end
		@end
		@property( hlms_decals_normals && normal_map )
			finalDecalTsNormal.xy += decalNormals.xy * decalMask;
		@end
		@property( hlms_decals_emissive )
			finalDecalEmissive	+= (absLocalPos.x > 0.5f || absLocalPos.y > 0.5f ||
									absLocalPos.z > 0.5f) ? 0.0f : (decalEmissive.xyz * decalMask);
		@end

	}
@end /// forwardPlusDoDecals
	@property( hlms_decals_normals && normal_map )
		/// Apply decals normal *after* sampling the tangent space normals (and detail normals too).
		/// hlms_decals_normals will be unset if the Renderable cannot support normal maps (has no Tangents)
		@piece( forwardPlusApplyDecalsNormal )
			finalDecalTsNormal.xyz = normalize( finalDecalTsNormal.xyz );
			@property( normal_map_tex || detail_maps_normal )
				nNormal.xy	+= finalDecalTsNormal.xy;
				nNormal.z	*= finalDecalTsNormal.z;
			@end
			@property( !normal_map_tex && !detail_maps_normal )
				nNormal.xyz = finalDecalTsNormal.xyz;
			@end
			//Do not normalize as later normalize( TBN * nNormal ) will take care of it
		@end
	@end
@end /// hlms_enable_decals

@end

//  To parse this JSON data, first install
//
//      json.hpp  https://github.com/nlohmann/json
//
//  Then include this file, and then do
//
//     quicktype::Animations data = nlohmann::json::parse(jsonString);
// generated by https://app.quicktype.io/ with all options are OFF and Others/Use Permissive is ON

#pragma once

#include "nlohmann/json.hpp"

#include <optional>
#include <stdexcept>
#include <regex>

namespace quicktype {
	using nlohmann::json;

	inline json get_untyped(const json & j, const char * property) {
		if (j.find(property) != j.end()) {
			return j.at(property).get<json>();
		}
		return json();
	}

	inline json get_untyped(const json & j, std::string property) {
		return get_untyped(j, property.data());
	}

	class Bookmark {
	public:
		Bookmark() = default;
		virtual ~Bookmark() = default;

	private:
		std::string name;
		std::string frame_id;

	public:
		const std::string & get_name() const { return name; }
		std::string & get_mutable_name() { return name; }
		void set_name(const std::string & value) { this->name = value; }

		const std::string & get_frame_id() const { return frame_id; }
		std::string & get_mutable_frame_id() { return frame_id; }
		void set_frame_id(const std::string & value) { this->frame_id = value; }
	};

	class Event {
	public:
		Event() = default;
		virtual ~Event() = default;

	private:
		std::string type;
		std::string data;

	public:
		const std::string & get_type() const { return type; }
		std::string & get_mutable_type() { return type; }
		void set_type(const std::string & value) { this->type = value; }

		const std::string & get_data() const { return data; }
		std::string & get_mutable_data() { return data; }
		void set_data(const std::string & value) { this->data = value; }
	};

	class Action {
	public:
		Action() = default;
		virtual ~Action() = default;

	private:
		quicktype::Event trigger;
		quicktype::Event event;
		std::vector<quicktype::Bookmark> bookmarks;

	public:
		const quicktype::Event & get_trigger() const { return trigger; }
		quicktype::Event & get_mutable_trigger() { return trigger; }
		void set_trigger(const quicktype::Event & value) { this->trigger = value; }

		const quicktype::Event & get_event() const { return event; }
		quicktype::Event & get_mutable_event() { return event; }
		void set_event(const quicktype::Event & value) { this->event = value; }

		const std::vector<quicktype::Bookmark> & get_bookmarks() const { return bookmarks; }
		std::vector<quicktype::Bookmark> & get_mutable_bookmarks() { return bookmarks; }
		void set_bookmarks(const std::vector<quicktype::Bookmark> & value) { this->bookmarks = value; }
	};

	class Node {
	public:
		Node() = default;
		virtual ~Node() = default;

	private:
		std::string name;
		std::vector<quicktype::Action> actions;

	public:
		const std::string & get_name() const { return name; }
		std::string & get_mutable_name() { return name; }
		void set_name(const std::string & value) { this->name = value; }

		const std::vector<quicktype::Action> & get_actions() const { return actions; }
		std::vector<quicktype::Action> & get_mutable_actions() { return actions; }
		void set_actions(const std::vector<quicktype::Action> & value) { this->actions = value; }
	};

	class Animations {
	public:
		Animations() = default;
		virtual ~Animations() = default;

	private:
		std::vector<quicktype::Node> nodes;

	public:
		const std::vector<quicktype::Node> & get_nodes() const { return nodes; }
		std::vector<quicktype::Node> & get_mutable_nodes() { return nodes; }
		void set_nodes(const std::vector<quicktype::Node> & value) { this->nodes = value; }
	};
}

namespace nlohmann {
	namespace detail {
		void from_json(const json & j, quicktype::Bookmark & x);
		void to_json(json & j, const quicktype::Bookmark & x);

		void from_json(const json & j, quicktype::Event & x);
		void to_json(json & j, const quicktype::Event & x);

		void from_json(const json & j, quicktype::Action & x);
		void to_json(json & j, const quicktype::Action & x);

		void from_json(const json & j, quicktype::Node & x);
		void to_json(json & j, const quicktype::Node & x);

		void from_json(const json & j, quicktype::Animations & x);
		void to_json(json & j, const quicktype::Animations & x);

		inline void from_json(const json & j, quicktype::Bookmark& x) {
			x.set_name(j.at("name").get<std::string>());
			x.set_frame_id(j.at("frameID").get<std::string>());
		}

		inline void to_json(json & j, const quicktype::Bookmark & x) {
			j = json::object();
			j["name"] = x.get_name();
			j["frameID"] = x.get_frame_id();
		}

		inline void from_json(const json & j, quicktype::Event& x) {
			x.set_type(j.at("type").get<std::string>());
			x.set_data(j.at("data").get<std::string>());
		}

		inline void to_json(json & j, const quicktype::Event & x) {
			j = json::object();
			j["type"] = x.get_type();
			j["data"] = x.get_data();
		}

		inline void from_json(const json & j, quicktype::Action& x) {
			x.set_trigger(j.at("trigger").get<quicktype::Event>());
			x.set_event(j.at("event").get<quicktype::Event>());
			x.set_bookmarks(j.at("bookmarks").get<std::vector<quicktype::Bookmark>>());
		}

		inline void to_json(json & j, const quicktype::Action & x) {
			j = json::object();
			j["trigger"] = x.get_trigger();
			j["event"] = x.get_event();
			j["bookmarks"] = x.get_bookmarks();
		}

		inline void from_json(const json & j, quicktype::Node& x) {
			x.set_name(j.at("name").get<std::string>());
			x.set_actions(j.at("actions").get<std::vector<quicktype::Action>>());
		}

		inline void to_json(json & j, const quicktype::Node & x) {
			j = json::object();
			j["name"] = x.get_name();
			j["actions"] = x.get_actions();
		}

		inline void from_json(const json & j, quicktype::Animations& x) {
			x.set_nodes(j.at("nodes").get<std::vector<quicktype::Node>>());
		}

		inline void to_json(json & j, const quicktype::Animations & x) {
			j = json::object();
			j["nodes"] = x.get_nodes();
		}
	}
}
